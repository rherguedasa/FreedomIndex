2023-02-12 21:44:29,174:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-12 21:44:29,175:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-12 21:44:29,175:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-12 21:44:29,175:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-12 21:44:30,450:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-12 21:45:04,397:INFO:PyCaret RegressionExperiment
2023-02-12 21:45:04,397:INFO:Logging name: reg-default-name
2023-02-12 21:45:04,397:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-12 21:45:04,397:INFO:version 3.0.0.rc8
2023-02-12 21:45:04,397:INFO:Initializing setup()
2023-02-12 21:45:04,397:INFO:self.USI: 1a29
2023-02-12 21:45:04,397:INFO:self._variable_keys: {'fold_generator', 'logging_param', 'transform_target_param', 'data', 'idx', 'X_test', 'gpu_n_jobs_param', 'memory', 'USI', 'y_test', 'fold_groups_param', 'y_train', 'seed', 'target_param', 'log_plots_param', 'exp_name_log', '_ml_usecase', 'X', 'X_train', 'y', 'fold_shuffle_param', 'exp_id', 'n_jobs_param', '_available_plots', 'html_param', 'gpu_param', 'pipeline'}
2023-02-12 21:45:04,398:INFO:Checking environment
2023-02-12 21:45:04,398:INFO:python_version: 3.9.13
2023-02-12 21:45:04,398:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-12 21:45:04,398:INFO:machine: AMD64
2023-02-12 21:45:04,398:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-12 21:45:04,403:INFO:Memory: svmem(total=16805040128, available=5558464512, percent=66.9, used=11246575616, free=5558464512)
2023-02-12 21:45:04,404:INFO:Physical Core: 4
2023-02-12 21:45:04,404:INFO:Logical Core: 8
2023-02-12 21:45:04,404:INFO:Checking libraries
2023-02-12 21:45:04,404:INFO:System:
2023-02-12 21:45:04,404:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-12 21:45:04,404:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-12 21:45:04,404:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-12 21:45:04,404:INFO:PyCaret required dependencies:
2023-02-12 21:45:04,404:INFO:                 pip: 23.0
2023-02-12 21:45:04,404:INFO:          setuptools: 58.1.0
2023-02-12 21:45:04,404:INFO:             pycaret: 3.0.0rc8
2023-02-12 21:45:04,404:INFO:             IPython: 8.7.0
2023-02-12 21:45:04,404:INFO:          ipywidgets: 8.0.4
2023-02-12 21:45:04,404:INFO:                tqdm: 4.64.1
2023-02-12 21:45:04,404:INFO:               numpy: 1.22.1
2023-02-12 21:45:04,404:INFO:              pandas: 1.5.2
2023-02-12 21:45:04,404:INFO:              jinja2: 3.1.2
2023-02-12 21:45:04,404:INFO:               scipy: 1.5.4
2023-02-12 21:45:04,404:INFO:              joblib: 1.2.0
2023-02-12 21:45:04,404:INFO:             sklearn: 1.1.3
2023-02-12 21:45:04,404:INFO:                pyod: 1.0.7
2023-02-12 21:45:04,404:INFO:            imblearn: 0.10.1
2023-02-12 21:45:04,404:INFO:   category_encoders: 2.6.0
2023-02-12 21:45:04,404:INFO:            lightgbm: 3.3.4
2023-02-12 21:45:04,404:INFO:               numba: 0.56.4
2023-02-12 21:45:04,404:INFO:            requests: 2.28.1
2023-02-12 21:45:04,405:INFO:          matplotlib: 3.6.2
2023-02-12 21:45:04,405:INFO:          scikitplot: 0.3.7
2023-02-12 21:45:04,405:INFO:         yellowbrick: 1.5
2023-02-12 21:45:04,405:INFO:              plotly: 5.11.0
2023-02-12 21:45:04,405:INFO:             kaleido: 0.2.1
2023-02-12 21:45:04,405:INFO:         statsmodels: 0.13.5
2023-02-12 21:45:04,405:INFO:              sktime: 0.15.1
2023-02-12 21:45:04,405:INFO:               tbats: 1.1.2
2023-02-12 21:45:04,405:INFO:            pmdarima: 2.0.2
2023-02-12 21:45:04,405:INFO:              psutil: 5.9.4
2023-02-12 21:45:04,405:INFO:PyCaret optional dependencies:
2023-02-12 21:45:04,424:INFO:                shap: 0.41.0
2023-02-12 21:45:04,424:INFO:           interpret: 0.3.0
2023-02-12 21:45:04,424:INFO:                umap: Not installed
2023-02-12 21:45:04,424:INFO:    pandas_profiling: 3.6.2
2023-02-12 21:45:04,424:INFO:  explainerdashboard: Not installed
2023-02-12 21:45:04,425:INFO:             autoviz: Not installed
2023-02-12 21:45:04,425:INFO:           fairlearn: Not installed
2023-02-12 21:45:04,425:INFO:             xgboost: 1.7.3
2023-02-12 21:45:04,425:INFO:            catboost: Not installed
2023-02-12 21:45:04,425:INFO:              kmodes: Not installed
2023-02-12 21:45:04,425:INFO:             mlxtend: Not installed
2023-02-12 21:45:04,425:INFO:       statsforecast: Not installed
2023-02-12 21:45:04,425:INFO:        tune_sklearn: Not installed
2023-02-12 21:45:04,425:INFO:                 ray: Not installed
2023-02-12 21:45:04,425:INFO:            hyperopt: Not installed
2023-02-12 21:45:04,425:INFO:              optuna: Not installed
2023-02-12 21:45:04,425:INFO:               skopt: Not installed
2023-02-12 21:45:04,425:INFO:              mlflow: Not installed
2023-02-12 21:45:04,425:INFO:              gradio: Not installed
2023-02-12 21:45:04,425:INFO:             fastapi: Not installed
2023-02-12 21:45:04,425:INFO:             uvicorn: Not installed
2023-02-12 21:45:04,425:INFO:              m2cgen: Not installed
2023-02-12 21:45:04,425:INFO:           evidently: Not installed
2023-02-12 21:45:04,425:INFO:                nltk: 3.8
2023-02-12 21:45:04,425:INFO:            pyLDAvis: Not installed
2023-02-12 21:45:04,425:INFO:              gensim: Not installed
2023-02-12 21:45:04,425:INFO:               spacy: Not installed
2023-02-12 21:45:04,425:INFO:           wordcloud: 1.8.2.2
2023-02-12 21:45:04,425:INFO:            textblob: Not installed
2023-02-12 21:45:04,425:INFO:               fugue: Not installed
2023-02-12 21:45:04,425:INFO:           streamlit: 1.16.0
2023-02-12 21:45:04,425:INFO:             prophet: Not installed
2023-02-12 21:45:04,426:INFO:None
2023-02-12 21:45:04,426:INFO:Set up data.
2023-02-12 21:45:04,435:INFO:Set up train/test split.
2023-02-12 21:45:04,443:INFO:Set up index.
2023-02-12 21:45:04,444:INFO:Set up folding strategy.
2023-02-12 21:45:04,444:INFO:Assigning column types.
2023-02-12 21:45:04,448:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-12 21:45:04,449:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,456:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,461:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,543:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,598:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,599:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:04,750:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:04,751:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,756:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,759:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,808:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,842:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,842:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:04,844:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:04,845:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-12 21:45:04,849:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,853:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,898:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,933:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,933:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:04,935:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:04,940:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,943:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:04,988:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,023:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,024:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:05,026:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:05,027:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-12 21:45:05,036:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,080:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,117:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,118:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:05,120:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:05,129:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,182:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,219:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,219:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:05,221:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:05,222:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-12 21:45:05,276:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,310:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,312:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:05,314:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:05,365:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,399:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,400:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:05,402:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:05,402:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-12 21:45:05,456:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,492:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:05,494:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:05,548:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:05,584:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:05,587:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:05,587:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-12 21:45:05,674:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:05,677:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:05,765:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:05,767:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:05,769:INFO:Preparing preprocessing pipeline...
2023-02-12 21:45:05,769:INFO:Set up column name cleaning.
2023-02-12 21:45:05,769:INFO:Set up simple imputation.
2023-02-12 21:45:05,776:INFO:Set up encoding of categorical features.
2023-02-12 21:45:07,716:INFO:Finished creating preprocessing pipeline.
2023-02-12 21:45:07,724:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['World Rank', 'Region Rank',
                                             'Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', "Gov't Spending",
                                             'Fiscal Health',
                                             'Business Freedom...
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Region'],
                                    transformer=OneHotEncoder(cols=['Region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Country'],
                                    transformer=LeaveOneOutEncoder(cols=['Country'],
                                                                   handle_missing='return_nan',
                                                                   random_state=123)))])
2023-02-12 21:45:07,726:INFO:Creating final display dataframe.
2023-02-12 21:45:08,180:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape         (186, 33)
4        Transformed data shape         (186, 37)
5   Transformed train set shape         (130, 37)
6    Transformed test set shape          (56, 37)
7              Numeric features                30
8          Categorical features                 2
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator             KFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  reg-default-name
21                          USI              1a29
2023-02-12 21:45:08,288:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:08,290:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:08,379:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:08,381:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:08,382:INFO:setup() successfully completed in 3.99s...............
2023-02-12 21:45:08,383:INFO:Initializing compare_models()
2023-02-12 21:45:08,383:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-12 21:45:08,383:INFO:Checking exceptions
2023-02-12 21:45:08,384:INFO:Preparing display monitor
2023-02-12 21:45:08,408:INFO:Initializing Linear Regression
2023-02-12 21:45:08,408:INFO:Total runtime is 0.0 minutes
2023-02-12 21:45:08,411:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:08,411:INFO:Initializing create_model()
2023-02-12 21:45:08,411:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:08,411:INFO:Checking exceptions
2023-02-12 21:45:08,411:INFO:Importing libraries
2023-02-12 21:45:08,411:INFO:Copying training dataset
2023-02-12 21:45:08,414:INFO:Defining folds
2023-02-12 21:45:08,415:INFO:Declaring metric variables
2023-02-12 21:45:08,420:INFO:Importing untrained model
2023-02-12 21:45:08,423:INFO:Linear Regression Imported successfully
2023-02-12 21:45:08,432:INFO:Starting cross validation
2023-02-12 21:45:08,480:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:13,882:INFO:Calculating mean and std
2023-02-12 21:45:13,883:INFO:Creating metrics dataframe
2023-02-12 21:45:13,886:INFO:Uploading results into container
2023-02-12 21:45:13,886:INFO:Uploading model into container now
2023-02-12 21:45:13,886:INFO:_master_model_container: 1
2023-02-12 21:45:13,886:INFO:_display_container: 2
2023-02-12 21:45:13,887:INFO:LinearRegression(n_jobs=-1)
2023-02-12 21:45:13,887:INFO:create_model() successfully completed......................................
2023-02-12 21:45:14,020:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:14,020:INFO:Creating metrics dataframe
2023-02-12 21:45:14,030:INFO:Initializing Lasso Regression
2023-02-12 21:45:14,031:INFO:Total runtime is 0.09371494849522909 minutes
2023-02-12 21:45:14,035:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:14,035:INFO:Initializing create_model()
2023-02-12 21:45:14,035:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:14,035:INFO:Checking exceptions
2023-02-12 21:45:14,036:INFO:Importing libraries
2023-02-12 21:45:14,036:INFO:Copying training dataset
2023-02-12 21:45:14,038:INFO:Defining folds
2023-02-12 21:45:14,038:INFO:Declaring metric variables
2023-02-12 21:45:14,043:INFO:Importing untrained model
2023-02-12 21:45:14,047:INFO:Lasso Regression Imported successfully
2023-02-12 21:45:14,056:INFO:Starting cross validation
2023-02-12 21:45:14,057:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:14,471:INFO:Calculating mean and std
2023-02-12 21:45:14,472:INFO:Creating metrics dataframe
2023-02-12 21:45:14,474:INFO:Uploading results into container
2023-02-12 21:45:14,475:INFO:Uploading model into container now
2023-02-12 21:45:14,475:INFO:_master_model_container: 2
2023-02-12 21:45:14,476:INFO:_display_container: 2
2023-02-12 21:45:14,476:INFO:Lasso(random_state=123)
2023-02-12 21:45:14,476:INFO:create_model() successfully completed......................................
2023-02-12 21:45:14,605:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:14,605:INFO:Creating metrics dataframe
2023-02-12 21:45:14,613:INFO:Initializing Ridge Regression
2023-02-12 21:45:14,613:INFO:Total runtime is 0.10341937939325968 minutes
2023-02-12 21:45:14,617:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:14,617:INFO:Initializing create_model()
2023-02-12 21:45:14,617:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:14,618:INFO:Checking exceptions
2023-02-12 21:45:14,618:INFO:Importing libraries
2023-02-12 21:45:14,618:INFO:Copying training dataset
2023-02-12 21:45:14,621:INFO:Defining folds
2023-02-12 21:45:14,622:INFO:Declaring metric variables
2023-02-12 21:45:14,627:INFO:Importing untrained model
2023-02-12 21:45:14,632:INFO:Ridge Regression Imported successfully
2023-02-12 21:45:14,645:INFO:Starting cross validation
2023-02-12 21:45:14,673:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:14,852:INFO:Calculating mean and std
2023-02-12 21:45:14,853:INFO:Creating metrics dataframe
2023-02-12 21:45:14,856:INFO:Uploading results into container
2023-02-12 21:45:14,856:INFO:Uploading model into container now
2023-02-12 21:45:14,856:INFO:_master_model_container: 3
2023-02-12 21:45:14,856:INFO:_display_container: 2
2023-02-12 21:45:14,857:INFO:Ridge(random_state=123)
2023-02-12 21:45:14,857:INFO:create_model() successfully completed......................................
2023-02-12 21:45:14,984:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:14,984:INFO:Creating metrics dataframe
2023-02-12 21:45:14,993:INFO:Initializing Elastic Net
2023-02-12 21:45:14,993:INFO:Total runtime is 0.10974381367365518 minutes
2023-02-12 21:45:14,998:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:14,998:INFO:Initializing create_model()
2023-02-12 21:45:14,998:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:14,998:INFO:Checking exceptions
2023-02-12 21:45:14,998:INFO:Importing libraries
2023-02-12 21:45:14,998:INFO:Copying training dataset
2023-02-12 21:45:15,000:INFO:Defining folds
2023-02-12 21:45:15,000:INFO:Declaring metric variables
2023-02-12 21:45:15,003:INFO:Importing untrained model
2023-02-12 21:45:15,006:INFO:Elastic Net Imported successfully
2023-02-12 21:45:15,014:INFO:Starting cross validation
2023-02-12 21:45:15,016:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:15,193:INFO:Calculating mean and std
2023-02-12 21:45:15,194:INFO:Creating metrics dataframe
2023-02-12 21:45:15,196:INFO:Uploading results into container
2023-02-12 21:45:15,197:INFO:Uploading model into container now
2023-02-12 21:45:15,197:INFO:_master_model_container: 4
2023-02-12 21:45:15,197:INFO:_display_container: 2
2023-02-12 21:45:15,198:INFO:ElasticNet(random_state=123)
2023-02-12 21:45:15,198:INFO:create_model() successfully completed......................................
2023-02-12 21:45:15,322:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:15,322:INFO:Creating metrics dataframe
2023-02-12 21:45:15,330:INFO:Initializing Least Angle Regression
2023-02-12 21:45:15,330:INFO:Total runtime is 0.11536865631739297 minutes
2023-02-12 21:45:15,333:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:15,333:INFO:Initializing create_model()
2023-02-12 21:45:15,333:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:15,334:INFO:Checking exceptions
2023-02-12 21:45:15,334:INFO:Importing libraries
2023-02-12 21:45:15,334:INFO:Copying training dataset
2023-02-12 21:45:15,338:INFO:Defining folds
2023-02-12 21:45:15,338:INFO:Declaring metric variables
2023-02-12 21:45:15,340:INFO:Importing untrained model
2023-02-12 21:45:15,346:INFO:Least Angle Regression Imported successfully
2023-02-12 21:45:15,354:INFO:Starting cross validation
2023-02-12 21:45:15,356:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:15,467:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:15,468:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:15,470:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:15,472:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:15,475:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:15,477:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:15,478:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:15,484:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:15,522:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 29 iterations, i.e. alpha=3.204e-03, with an active set of 26 regressors, and the smallest cholesky pivot element being 1.490e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,522:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=1.759e-03, with an active set of 30 regressors, and the smallest cholesky pivot element being 1.490e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,523:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=1.313e-03, with an active set of 30 regressors, and the smallest cholesky pivot element being 1.490e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,524:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=7.322e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 2.107e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,524:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=6.166e-05, with an active set of 33 regressors, and the smallest cholesky pivot element being 2.107e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,524:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 27 iterations, i.e. alpha=4.510e-03, with an active set of 25 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,525:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 30 iterations, i.e. alpha=2.489e-03, with an active set of 28 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,526:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=1.230e-03, with an active set of 31 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,527:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=6.078e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,527:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=1.295e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,528:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=5.963e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 6.909e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,530:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 37 iterations, i.e. alpha=9.871e-05, with an active set of 34 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,532:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 34 iterations, i.e. alpha=1.121e-03, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.593e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,533:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 34 iterations, i.e. alpha=9.959e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.593e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,536:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 34 iterations, i.e. alpha=1.964e-03, with an active set of 31 regressors, and the smallest cholesky pivot element being 3.332e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,537:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 37 iterations, i.e. alpha=1.622e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 3.332e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,541:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 26 iterations, i.e. alpha=4.466e-03, with an active set of 24 regressors, and the smallest cholesky pivot element being 5.373e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,543:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 32 iterations, i.e. alpha=4.117e-03, with an active set of 27 regressors, and the smallest cholesky pivot element being 5.373e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,544:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 27 iterations, i.e. alpha=3.660e-03, with an active set of 25 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,544:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=2.222e-03, with an active set of 30 regressors, and the smallest cholesky pivot element being 5.373e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,545:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 29 iterations, i.e. alpha=3.111e-03, with an active set of 27 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,545:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 37 iterations, i.e. alpha=1.234e-03, with an active set of 32 regressors, and the smallest cholesky pivot element being 5.475e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,546:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 38 iterations, i.e. alpha=1.785e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 5.475e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,546:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 39 iterations, i.e. alpha=1.056e-05, with an active set of 34 regressors, and the smallest cholesky pivot element being 5.475e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,547:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=5.141e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,547:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=7.213e-05, with an active set of 34 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,599:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:15,602:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=6.942e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.712e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,602:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=2.035e-05, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.712e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,604:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:15,608:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=4.013e-03, with an active set of 32 regressors, and the smallest cholesky pivot element being 4.081e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,609:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 38 iterations, i.e. alpha=8.153e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 4.081e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:15,632:INFO:Calculating mean and std
2023-02-12 21:45:15,633:INFO:Creating metrics dataframe
2023-02-12 21:45:15,635:INFO:Uploading results into container
2023-02-12 21:45:15,636:INFO:Uploading model into container now
2023-02-12 21:45:15,636:INFO:_master_model_container: 5
2023-02-12 21:45:15,636:INFO:_display_container: 2
2023-02-12 21:45:15,636:INFO:Lars(random_state=123)
2023-02-12 21:45:15,636:INFO:create_model() successfully completed......................................
2023-02-12 21:45:15,764:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:15,764:INFO:Creating metrics dataframe
2023-02-12 21:45:15,772:INFO:Initializing Lasso Least Angle Regression
2023-02-12 21:45:15,772:INFO:Total runtime is 0.12272317409515379 minutes
2023-02-12 21:45:15,775:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:15,776:INFO:Initializing create_model()
2023-02-12 21:45:15,776:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:15,776:INFO:Checking exceptions
2023-02-12 21:45:15,776:INFO:Importing libraries
2023-02-12 21:45:15,776:INFO:Copying training dataset
2023-02-12 21:45:15,779:INFO:Defining folds
2023-02-12 21:45:15,780:INFO:Declaring metric variables
2023-02-12 21:45:15,783:INFO:Importing untrained model
2023-02-12 21:45:15,786:INFO:Lasso Least Angle Regression Imported successfully
2023-02-12 21:45:15,793:INFO:Starting cross validation
2023-02-12 21:45:15,795:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:15,851:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:15,862:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:15,868:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:15,883:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:15,897:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:15,908:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:15,925:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:15,929:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:15,942:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:15,952:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:15,977:INFO:Calculating mean and std
2023-02-12 21:45:15,978:INFO:Creating metrics dataframe
2023-02-12 21:45:15,981:INFO:Uploading results into container
2023-02-12 21:45:15,981:INFO:Uploading model into container now
2023-02-12 21:45:15,982:INFO:_master_model_container: 6
2023-02-12 21:45:15,982:INFO:_display_container: 2
2023-02-12 21:45:15,982:INFO:LassoLars(random_state=123)
2023-02-12 21:45:15,982:INFO:create_model() successfully completed......................................
2023-02-12 21:45:16,110:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:16,110:INFO:Creating metrics dataframe
2023-02-12 21:45:16,117:INFO:Initializing Orthogonal Matching Pursuit
2023-02-12 21:45:16,117:INFO:Total runtime is 0.12847615877787272 minutes
2023-02-12 21:45:16,120:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:16,120:INFO:Initializing create_model()
2023-02-12 21:45:16,120:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:16,120:INFO:Checking exceptions
2023-02-12 21:45:16,120:INFO:Importing libraries
2023-02-12 21:45:16,120:INFO:Copying training dataset
2023-02-12 21:45:16,124:INFO:Defining folds
2023-02-12 21:45:16,124:INFO:Declaring metric variables
2023-02-12 21:45:16,129:INFO:Importing untrained model
2023-02-12 21:45:16,133:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-12 21:45:16,140:INFO:Starting cross validation
2023-02-12 21:45:16,143:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:16,193:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:16,203:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:16,214:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:16,224:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:16,244:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:16,255:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:16,262:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:16,271:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:16,278:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:16,290:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:16,317:INFO:Calculating mean and std
2023-02-12 21:45:16,318:INFO:Creating metrics dataframe
2023-02-12 21:45:16,320:INFO:Uploading results into container
2023-02-12 21:45:16,320:INFO:Uploading model into container now
2023-02-12 21:45:16,321:INFO:_master_model_container: 7
2023-02-12 21:45:16,321:INFO:_display_container: 2
2023-02-12 21:45:16,321:INFO:OrthogonalMatchingPursuit()
2023-02-12 21:45:16,321:INFO:create_model() successfully completed......................................
2023-02-12 21:45:16,445:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:16,446:INFO:Creating metrics dataframe
2023-02-12 21:45:16,454:INFO:Initializing Bayesian Ridge
2023-02-12 21:45:16,454:INFO:Total runtime is 0.1340998927752177 minutes
2023-02-12 21:45:16,456:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:16,456:INFO:Initializing create_model()
2023-02-12 21:45:16,456:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:16,457:INFO:Checking exceptions
2023-02-12 21:45:16,457:INFO:Importing libraries
2023-02-12 21:45:16,457:INFO:Copying training dataset
2023-02-12 21:45:16,462:INFO:Defining folds
2023-02-12 21:45:16,462:INFO:Declaring metric variables
2023-02-12 21:45:16,465:INFO:Importing untrained model
2023-02-12 21:45:16,469:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:45:16,477:INFO:Starting cross validation
2023-02-12 21:45:16,479:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:16,663:INFO:Calculating mean and std
2023-02-12 21:45:16,664:INFO:Creating metrics dataframe
2023-02-12 21:45:16,667:INFO:Uploading results into container
2023-02-12 21:45:16,667:INFO:Uploading model into container now
2023-02-12 21:45:16,668:INFO:_master_model_container: 8
2023-02-12 21:45:16,668:INFO:_display_container: 2
2023-02-12 21:45:16,668:INFO:BayesianRidge()
2023-02-12 21:45:16,668:INFO:create_model() successfully completed......................................
2023-02-12 21:45:16,805:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:16,805:INFO:Creating metrics dataframe
2023-02-12 21:45:16,813:INFO:Initializing Passive Aggressive Regressor
2023-02-12 21:45:16,814:INFO:Total runtime is 0.14010226329167685 minutes
2023-02-12 21:45:16,816:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:16,816:INFO:Initializing create_model()
2023-02-12 21:45:16,816:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:16,818:INFO:Checking exceptions
2023-02-12 21:45:16,818:INFO:Importing libraries
2023-02-12 21:45:16,818:INFO:Copying training dataset
2023-02-12 21:45:16,821:INFO:Defining folds
2023-02-12 21:45:16,821:INFO:Declaring metric variables
2023-02-12 21:45:16,825:INFO:Importing untrained model
2023-02-12 21:45:16,830:INFO:Passive Aggressive Regressor Imported successfully
2023-02-12 21:45:16,836:INFO:Starting cross validation
2023-02-12 21:45:16,847:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:17,054:INFO:Calculating mean and std
2023-02-12 21:45:17,054:INFO:Creating metrics dataframe
2023-02-12 21:45:17,057:INFO:Uploading results into container
2023-02-12 21:45:17,057:INFO:Uploading model into container now
2023-02-12 21:45:17,058:INFO:_master_model_container: 9
2023-02-12 21:45:17,058:INFO:_display_container: 2
2023-02-12 21:45:17,058:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-12 21:45:17,058:INFO:create_model() successfully completed......................................
2023-02-12 21:45:17,180:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:17,180:INFO:Creating metrics dataframe
2023-02-12 21:45:17,190:INFO:Initializing Huber Regressor
2023-02-12 21:45:17,190:INFO:Total runtime is 0.1463618795077006 minutes
2023-02-12 21:45:17,194:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:17,194:INFO:Initializing create_model()
2023-02-12 21:45:17,194:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:17,194:INFO:Checking exceptions
2023-02-12 21:45:17,194:INFO:Importing libraries
2023-02-12 21:45:17,194:INFO:Copying training dataset
2023-02-12 21:45:17,197:INFO:Defining folds
2023-02-12 21:45:17,198:INFO:Declaring metric variables
2023-02-12 21:45:17,201:INFO:Importing untrained model
2023-02-12 21:45:17,205:INFO:Huber Regressor Imported successfully
2023-02-12 21:45:17,211:INFO:Starting cross validation
2023-02-12 21:45:17,214:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:17,352:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:17,354:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:17,354:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:17,359:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:17,360:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:17,362:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:17,368:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:17,375:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:17,438:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:17,447:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:17,471:INFO:Calculating mean and std
2023-02-12 21:45:17,472:INFO:Creating metrics dataframe
2023-02-12 21:45:17,474:INFO:Uploading results into container
2023-02-12 21:45:17,476:INFO:Uploading model into container now
2023-02-12 21:45:17,477:INFO:_master_model_container: 10
2023-02-12 21:45:17,477:INFO:_display_container: 2
2023-02-12 21:45:17,478:INFO:HuberRegressor()
2023-02-12 21:45:17,478:INFO:create_model() successfully completed......................................
2023-02-12 21:45:17,605:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:17,605:INFO:Creating metrics dataframe
2023-02-12 21:45:17,616:INFO:Initializing K Neighbors Regressor
2023-02-12 21:45:17,616:INFO:Total runtime is 0.15346319278081258 minutes
2023-02-12 21:45:17,619:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:17,620:INFO:Initializing create_model()
2023-02-12 21:45:17,620:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:17,620:INFO:Checking exceptions
2023-02-12 21:45:17,620:INFO:Importing libraries
2023-02-12 21:45:17,620:INFO:Copying training dataset
2023-02-12 21:45:17,625:INFO:Defining folds
2023-02-12 21:45:17,625:INFO:Declaring metric variables
2023-02-12 21:45:17,629:INFO:Importing untrained model
2023-02-12 21:45:17,632:INFO:K Neighbors Regressor Imported successfully
2023-02-12 21:45:17,639:INFO:Starting cross validation
2023-02-12 21:45:17,640:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:17,916:INFO:Calculating mean and std
2023-02-12 21:45:17,917:INFO:Creating metrics dataframe
2023-02-12 21:45:17,920:INFO:Uploading results into container
2023-02-12 21:45:17,920:INFO:Uploading model into container now
2023-02-12 21:45:17,921:INFO:_master_model_container: 11
2023-02-12 21:45:17,921:INFO:_display_container: 2
2023-02-12 21:45:17,921:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-12 21:45:17,921:INFO:create_model() successfully completed......................................
2023-02-12 21:45:18,045:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:18,045:INFO:Creating metrics dataframe
2023-02-12 21:45:18,053:INFO:Initializing Decision Tree Regressor
2023-02-12 21:45:18,053:INFO:Total runtime is 0.16075530052185058 minutes
2023-02-12 21:45:18,057:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:18,058:INFO:Initializing create_model()
2023-02-12 21:45:18,058:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:18,058:INFO:Checking exceptions
2023-02-12 21:45:18,058:INFO:Importing libraries
2023-02-12 21:45:18,058:INFO:Copying training dataset
2023-02-12 21:45:18,061:INFO:Defining folds
2023-02-12 21:45:18,061:INFO:Declaring metric variables
2023-02-12 21:45:18,065:INFO:Importing untrained model
2023-02-12 21:45:18,068:INFO:Decision Tree Regressor Imported successfully
2023-02-12 21:45:18,076:INFO:Starting cross validation
2023-02-12 21:45:18,078:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:18,254:INFO:Calculating mean and std
2023-02-12 21:45:18,255:INFO:Creating metrics dataframe
2023-02-12 21:45:18,257:INFO:Uploading results into container
2023-02-12 21:45:18,258:INFO:Uploading model into container now
2023-02-12 21:45:18,258:INFO:_master_model_container: 12
2023-02-12 21:45:18,258:INFO:_display_container: 2
2023-02-12 21:45:18,258:INFO:DecisionTreeRegressor(random_state=123)
2023-02-12 21:45:18,259:INFO:create_model() successfully completed......................................
2023-02-12 21:45:18,380:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:18,380:INFO:Creating metrics dataframe
2023-02-12 21:45:18,389:INFO:Initializing Random Forest Regressor
2023-02-12 21:45:18,389:INFO:Total runtime is 0.166352641582489 minutes
2023-02-12 21:45:18,393:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:18,393:INFO:Initializing create_model()
2023-02-12 21:45:18,393:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:18,393:INFO:Checking exceptions
2023-02-12 21:45:18,393:INFO:Importing libraries
2023-02-12 21:45:18,394:INFO:Copying training dataset
2023-02-12 21:45:18,397:INFO:Defining folds
2023-02-12 21:45:18,397:INFO:Declaring metric variables
2023-02-12 21:45:18,400:INFO:Importing untrained model
2023-02-12 21:45:18,404:INFO:Random Forest Regressor Imported successfully
2023-02-12 21:45:18,413:INFO:Starting cross validation
2023-02-12 21:45:18,415:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:19,009:INFO:Calculating mean and std
2023-02-12 21:45:19,009:INFO:Creating metrics dataframe
2023-02-12 21:45:19,012:INFO:Uploading results into container
2023-02-12 21:45:19,012:INFO:Uploading model into container now
2023-02-12 21:45:19,013:INFO:_master_model_container: 13
2023-02-12 21:45:19,013:INFO:_display_container: 2
2023-02-12 21:45:19,013:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-12 21:45:19,013:INFO:create_model() successfully completed......................................
2023-02-12 21:45:19,137:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:19,137:INFO:Creating metrics dataframe
2023-02-12 21:45:19,148:INFO:Initializing Extra Trees Regressor
2023-02-12 21:45:19,148:INFO:Total runtime is 0.17899399598439533 minutes
2023-02-12 21:45:19,152:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:19,152:INFO:Initializing create_model()
2023-02-12 21:45:19,152:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:19,152:INFO:Checking exceptions
2023-02-12 21:45:19,152:INFO:Importing libraries
2023-02-12 21:45:19,153:INFO:Copying training dataset
2023-02-12 21:45:19,156:INFO:Defining folds
2023-02-12 21:45:19,156:INFO:Declaring metric variables
2023-02-12 21:45:19,160:INFO:Importing untrained model
2023-02-12 21:45:19,165:INFO:Extra Trees Regressor Imported successfully
2023-02-12 21:45:19,172:INFO:Starting cross validation
2023-02-12 21:45:19,174:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:19,656:INFO:Calculating mean and std
2023-02-12 21:45:19,657:INFO:Creating metrics dataframe
2023-02-12 21:45:19,659:INFO:Uploading results into container
2023-02-12 21:45:19,660:INFO:Uploading model into container now
2023-02-12 21:45:19,660:INFO:_master_model_container: 14
2023-02-12 21:45:19,660:INFO:_display_container: 2
2023-02-12 21:45:19,661:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-12 21:45:19,661:INFO:create_model() successfully completed......................................
2023-02-12 21:45:19,817:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:19,817:INFO:Creating metrics dataframe
2023-02-12 21:45:19,829:INFO:Initializing AdaBoost Regressor
2023-02-12 21:45:19,830:INFO:Total runtime is 0.19036074876785278 minutes
2023-02-12 21:45:19,834:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:19,834:INFO:Initializing create_model()
2023-02-12 21:45:19,834:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:19,834:INFO:Checking exceptions
2023-02-12 21:45:19,834:INFO:Importing libraries
2023-02-12 21:45:19,835:INFO:Copying training dataset
2023-02-12 21:45:19,839:INFO:Defining folds
2023-02-12 21:45:19,839:INFO:Declaring metric variables
2023-02-12 21:45:19,842:INFO:Importing untrained model
2023-02-12 21:45:19,846:INFO:AdaBoost Regressor Imported successfully
2023-02-12 21:45:19,852:INFO:Starting cross validation
2023-02-12 21:45:19,854:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:20,189:INFO:Calculating mean and std
2023-02-12 21:45:20,190:INFO:Creating metrics dataframe
2023-02-12 21:45:20,191:INFO:Uploading results into container
2023-02-12 21:45:20,192:INFO:Uploading model into container now
2023-02-12 21:45:20,192:INFO:_master_model_container: 15
2023-02-12 21:45:20,192:INFO:_display_container: 2
2023-02-12 21:45:20,192:INFO:AdaBoostRegressor(random_state=123)
2023-02-12 21:45:20,192:INFO:create_model() successfully completed......................................
2023-02-12 21:45:20,319:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:20,319:INFO:Creating metrics dataframe
2023-02-12 21:45:20,331:INFO:Initializing Gradient Boosting Regressor
2023-02-12 21:45:20,331:INFO:Total runtime is 0.1987221916516622 minutes
2023-02-12 21:45:20,335:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:20,336:INFO:Initializing create_model()
2023-02-12 21:45:20,336:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:20,336:INFO:Checking exceptions
2023-02-12 21:45:20,336:INFO:Importing libraries
2023-02-12 21:45:20,336:INFO:Copying training dataset
2023-02-12 21:45:20,341:INFO:Defining folds
2023-02-12 21:45:20,341:INFO:Declaring metric variables
2023-02-12 21:45:20,345:INFO:Importing untrained model
2023-02-12 21:45:20,348:INFO:Gradient Boosting Regressor Imported successfully
2023-02-12 21:45:20,356:INFO:Starting cross validation
2023-02-12 21:45:20,358:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:20,698:INFO:Calculating mean and std
2023-02-12 21:45:20,699:INFO:Creating metrics dataframe
2023-02-12 21:45:20,704:INFO:Uploading results into container
2023-02-12 21:45:20,704:INFO:Uploading model into container now
2023-02-12 21:45:20,704:INFO:_master_model_container: 16
2023-02-12 21:45:20,705:INFO:_display_container: 2
2023-02-12 21:45:20,705:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:45:20,705:INFO:create_model() successfully completed......................................
2023-02-12 21:45:20,848:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:20,848:INFO:Creating metrics dataframe
2023-02-12 21:45:20,859:INFO:Initializing Extreme Gradient Boosting
2023-02-12 21:45:20,859:INFO:Total runtime is 0.20752170483271282 minutes
2023-02-12 21:45:20,863:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:20,864:INFO:Initializing create_model()
2023-02-12 21:45:20,864:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:20,864:INFO:Checking exceptions
2023-02-12 21:45:20,864:INFO:Importing libraries
2023-02-12 21:45:20,864:INFO:Copying training dataset
2023-02-12 21:45:20,867:INFO:Defining folds
2023-02-12 21:45:20,867:INFO:Declaring metric variables
2023-02-12 21:45:20,872:INFO:Importing untrained model
2023-02-12 21:45:20,875:INFO:Extreme Gradient Boosting Imported successfully
2023-02-12 21:45:20,883:INFO:Starting cross validation
2023-02-12 21:45:20,884:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:21,284:INFO:Calculating mean and std
2023-02-12 21:45:21,286:INFO:Creating metrics dataframe
2023-02-12 21:45:21,290:INFO:Uploading results into container
2023-02-12 21:45:21,291:INFO:Uploading model into container now
2023-02-12 21:45:21,291:INFO:_master_model_container: 17
2023-02-12 21:45:21,291:INFO:_display_container: 2
2023-02-12 21:45:21,291:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-12 21:45:21,291:INFO:create_model() successfully completed......................................
2023-02-12 21:45:21,420:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:21,421:INFO:Creating metrics dataframe
2023-02-12 21:45:21,430:INFO:Initializing Light Gradient Boosting Machine
2023-02-12 21:45:21,431:INFO:Total runtime is 0.21704656680425008 minutes
2023-02-12 21:45:21,435:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:21,435:INFO:Initializing create_model()
2023-02-12 21:45:21,435:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:21,435:INFO:Checking exceptions
2023-02-12 21:45:21,435:INFO:Importing libraries
2023-02-12 21:45:21,436:INFO:Copying training dataset
2023-02-12 21:45:21,440:INFO:Defining folds
2023-02-12 21:45:21,449:INFO:Declaring metric variables
2023-02-12 21:45:21,453:INFO:Importing untrained model
2023-02-12 21:45:21,458:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-12 21:45:21,465:INFO:Starting cross validation
2023-02-12 21:45:21,467:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:21,751:INFO:Calculating mean and std
2023-02-12 21:45:21,753:INFO:Creating metrics dataframe
2023-02-12 21:45:21,756:INFO:Uploading results into container
2023-02-12 21:45:21,756:INFO:Uploading model into container now
2023-02-12 21:45:21,757:INFO:_master_model_container: 18
2023-02-12 21:45:21,757:INFO:_display_container: 2
2023-02-12 21:45:21,757:INFO:LGBMRegressor(random_state=123)
2023-02-12 21:45:21,757:INFO:create_model() successfully completed......................................
2023-02-12 21:45:21,889:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:21,889:INFO:Creating metrics dataframe
2023-02-12 21:45:21,901:INFO:Initializing Dummy Regressor
2023-02-12 21:45:21,901:INFO:Total runtime is 0.22487255334854125 minutes
2023-02-12 21:45:21,905:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:21,906:INFO:Initializing create_model()
2023-02-12 21:45:21,906:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A09360D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:21,906:INFO:Checking exceptions
2023-02-12 21:45:21,906:INFO:Importing libraries
2023-02-12 21:45:21,906:INFO:Copying training dataset
2023-02-12 21:45:21,909:INFO:Defining folds
2023-02-12 21:45:21,909:INFO:Declaring metric variables
2023-02-12 21:45:21,913:INFO:Importing untrained model
2023-02-12 21:45:21,916:INFO:Dummy Regressor Imported successfully
2023-02-12 21:45:21,925:INFO:Starting cross validation
2023-02-12 21:45:21,926:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:22,148:INFO:Calculating mean and std
2023-02-12 21:45:22,149:INFO:Creating metrics dataframe
2023-02-12 21:45:22,152:INFO:Uploading results into container
2023-02-12 21:45:22,153:INFO:Uploading model into container now
2023-02-12 21:45:22,154:INFO:_master_model_container: 19
2023-02-12 21:45:22,154:INFO:_display_container: 2
2023-02-12 21:45:22,154:INFO:DummyRegressor()
2023-02-12 21:45:22,154:INFO:create_model() successfully completed......................................
2023-02-12 21:45:22,281:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:22,281:INFO:Creating metrics dataframe
2023-02-12 21:45:22,306:INFO:Initializing create_model()
2023-02-12 21:45:22,306:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=GradientBoostingRegressor(random_state=123), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:22,306:INFO:Checking exceptions
2023-02-12 21:45:22,307:INFO:Importing libraries
2023-02-12 21:45:22,309:INFO:Copying training dataset
2023-02-12 21:45:22,310:INFO:Defining folds
2023-02-12 21:45:22,310:INFO:Declaring metric variables
2023-02-12 21:45:22,310:INFO:Importing untrained model
2023-02-12 21:45:22,310:INFO:Declaring custom model
2023-02-12 21:45:22,311:INFO:Gradient Boosting Regressor Imported successfully
2023-02-12 21:45:22,312:INFO:Cross validation set to False
2023-02-12 21:45:22,312:INFO:Fitting Model
2023-02-12 21:45:22,470:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:45:22,471:INFO:create_model() successfully completed......................................
2023-02-12 21:45:22,625:INFO:_master_model_container: 19
2023-02-12 21:45:22,625:INFO:_display_container: 2
2023-02-12 21:45:22,625:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:45:22,626:INFO:compare_models() successfully completed......................................
2023-02-12 21:45:22,626:INFO:Initializing automl()
2023-02-12 21:45:22,626:INFO:automl(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, optimize=R2, use_holdout=False, turbo=True, return_train_score=False)
2023-02-12 21:45:22,626:INFO:Model Selection Basis : CV Results on Training set
2023-02-12 21:45:22,626:INFO:Checking model 0
2023-02-12 21:45:22,627:INFO:Checking model 1
2023-02-12 21:45:22,627:INFO:Checking model 2
2023-02-12 21:45:22,627:INFO:Checking model 3
2023-02-12 21:45:22,627:INFO:Checking model 4
2023-02-12 21:45:22,627:INFO:Checking model 5
2023-02-12 21:45:22,629:INFO:Checking model 6
2023-02-12 21:45:22,629:INFO:Checking model 7
2023-02-12 21:45:22,629:INFO:Checking model 8
2023-02-12 21:45:22,629:INFO:Checking model 9
2023-02-12 21:45:22,629:INFO:Checking model 10
2023-02-12 21:45:22,630:INFO:Checking model 11
2023-02-12 21:45:22,630:INFO:Checking model 12
2023-02-12 21:45:22,630:INFO:Checking model 13
2023-02-12 21:45:22,631:INFO:Checking model 14
2023-02-12 21:45:22,631:INFO:Checking model 15
2023-02-12 21:45:22,631:INFO:Checking model 16
2023-02-12 21:45:22,631:INFO:Checking model 17
2023-02-12 21:45:22,631:INFO:Checking model 18
2023-02-12 21:45:22,632:INFO:Initializing create_model()
2023-02-12 21:45:22,632:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002409C534790>, estimator=GradientBoostingRegressor(random_state=123), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:22,632:INFO:Checking exceptions
2023-02-12 21:45:22,634:INFO:Importing libraries
2023-02-12 21:45:22,634:INFO:Copying training dataset
2023-02-12 21:45:22,637:INFO:Defining folds
2023-02-12 21:45:22,637:INFO:Declaring metric variables
2023-02-12 21:45:22,638:INFO:Importing untrained model
2023-02-12 21:45:22,638:INFO:Declaring custom model
2023-02-12 21:45:22,638:INFO:Gradient Boosting Regressor Imported successfully
2023-02-12 21:45:22,638:INFO:Cross validation set to False
2023-02-12 21:45:22,638:INFO:Fitting Model
2023-02-12 21:45:22,729:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:45:22,729:INFO:create_model() successfully completed......................................
2023-02-12 21:45:22,993:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:45:22,993:INFO:automl() successfully completed......................................
2023-02-12 21:45:35,367:INFO:PyCaret RegressionExperiment
2023-02-12 21:45:35,367:INFO:Logging name: reg-default-name
2023-02-12 21:45:35,367:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-12 21:45:35,367:INFO:version 3.0.0.rc8
2023-02-12 21:45:35,367:INFO:Initializing setup()
2023-02-12 21:45:35,367:INFO:self.USI: fbd1
2023-02-12 21:45:35,368:INFO:self._variable_keys: {'fold_generator', 'logging_param', 'transform_target_param', 'data', 'idx', 'X_test', 'gpu_n_jobs_param', 'memory', 'USI', 'y_test', 'fold_groups_param', 'y_train', 'seed', 'target_param', 'log_plots_param', 'exp_name_log', '_ml_usecase', 'X', 'X_train', 'y', 'fold_shuffle_param', 'exp_id', 'n_jobs_param', '_available_plots', 'html_param', 'gpu_param', 'pipeline'}
2023-02-12 21:45:35,368:INFO:Checking environment
2023-02-12 21:45:35,368:INFO:python_version: 3.9.13
2023-02-12 21:45:35,368:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-12 21:45:35,368:INFO:machine: AMD64
2023-02-12 21:45:35,368:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-12 21:45:35,374:INFO:Memory: svmem(total=16805040128, available=4430897152, percent=73.6, used=12374142976, free=4430897152)
2023-02-12 21:45:35,374:INFO:Physical Core: 4
2023-02-12 21:45:35,374:INFO:Logical Core: 8
2023-02-12 21:45:35,374:INFO:Checking libraries
2023-02-12 21:45:35,374:INFO:System:
2023-02-12 21:45:35,374:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-12 21:45:35,374:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-12 21:45:35,374:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-12 21:45:35,374:INFO:PyCaret required dependencies:
2023-02-12 21:45:35,374:INFO:                 pip: 23.0
2023-02-12 21:45:35,374:INFO:          setuptools: 58.1.0
2023-02-12 21:45:35,374:INFO:             pycaret: 3.0.0rc8
2023-02-12 21:45:35,374:INFO:             IPython: 8.7.0
2023-02-12 21:45:35,374:INFO:          ipywidgets: 8.0.4
2023-02-12 21:45:35,374:INFO:                tqdm: 4.64.1
2023-02-12 21:45:35,374:INFO:               numpy: 1.22.1
2023-02-12 21:45:35,374:INFO:              pandas: 1.5.2
2023-02-12 21:45:35,374:INFO:              jinja2: 3.1.2
2023-02-12 21:45:35,374:INFO:               scipy: 1.5.4
2023-02-12 21:45:35,374:INFO:              joblib: 1.2.0
2023-02-12 21:45:35,374:INFO:             sklearn: 1.1.3
2023-02-12 21:45:35,374:INFO:                pyod: 1.0.7
2023-02-12 21:45:35,374:INFO:            imblearn: 0.10.1
2023-02-12 21:45:35,374:INFO:   category_encoders: 2.6.0
2023-02-12 21:45:35,374:INFO:            lightgbm: 3.3.4
2023-02-12 21:45:35,374:INFO:               numba: 0.56.4
2023-02-12 21:45:35,376:INFO:            requests: 2.28.1
2023-02-12 21:45:35,376:INFO:          matplotlib: 3.6.2
2023-02-12 21:45:35,376:INFO:          scikitplot: 0.3.7
2023-02-12 21:45:35,376:INFO:         yellowbrick: 1.5
2023-02-12 21:45:35,376:INFO:              plotly: 5.11.0
2023-02-12 21:45:35,376:INFO:             kaleido: 0.2.1
2023-02-12 21:45:35,376:INFO:         statsmodels: 0.13.5
2023-02-12 21:45:35,376:INFO:              sktime: 0.15.1
2023-02-12 21:45:35,376:INFO:               tbats: 1.1.2
2023-02-12 21:45:35,376:INFO:            pmdarima: 2.0.2
2023-02-12 21:45:35,376:INFO:              psutil: 5.9.4
2023-02-12 21:45:35,376:INFO:PyCaret optional dependencies:
2023-02-12 21:45:35,376:INFO:                shap: 0.41.0
2023-02-12 21:45:35,376:INFO:           interpret: 0.3.0
2023-02-12 21:45:35,376:INFO:                umap: Not installed
2023-02-12 21:45:35,376:INFO:    pandas_profiling: 3.6.2
2023-02-12 21:45:35,376:INFO:  explainerdashboard: Not installed
2023-02-12 21:45:35,376:INFO:             autoviz: Not installed
2023-02-12 21:45:35,376:INFO:           fairlearn: Not installed
2023-02-12 21:45:35,376:INFO:             xgboost: 1.7.3
2023-02-12 21:45:35,376:INFO:            catboost: Not installed
2023-02-12 21:45:35,376:INFO:              kmodes: Not installed
2023-02-12 21:45:35,376:INFO:             mlxtend: Not installed
2023-02-12 21:45:35,376:INFO:       statsforecast: Not installed
2023-02-12 21:45:35,376:INFO:        tune_sklearn: Not installed
2023-02-12 21:45:35,376:INFO:                 ray: Not installed
2023-02-12 21:45:35,376:INFO:            hyperopt: Not installed
2023-02-12 21:45:35,376:INFO:              optuna: Not installed
2023-02-12 21:45:35,376:INFO:               skopt: Not installed
2023-02-12 21:45:35,376:INFO:              mlflow: Not installed
2023-02-12 21:45:35,376:INFO:              gradio: Not installed
2023-02-12 21:45:35,376:INFO:             fastapi: Not installed
2023-02-12 21:45:35,376:INFO:             uvicorn: Not installed
2023-02-12 21:45:35,376:INFO:              m2cgen: Not installed
2023-02-12 21:45:35,376:INFO:           evidently: Not installed
2023-02-12 21:45:35,376:INFO:                nltk: 3.8
2023-02-12 21:45:35,376:INFO:            pyLDAvis: Not installed
2023-02-12 21:45:35,376:INFO:              gensim: Not installed
2023-02-12 21:45:35,376:INFO:               spacy: Not installed
2023-02-12 21:45:35,376:INFO:           wordcloud: 1.8.2.2
2023-02-12 21:45:35,377:INFO:            textblob: Not installed
2023-02-12 21:45:35,377:INFO:               fugue: Not installed
2023-02-12 21:45:35,377:INFO:           streamlit: 1.16.0
2023-02-12 21:45:35,377:INFO:             prophet: Not installed
2023-02-12 21:45:35,377:INFO:None
2023-02-12 21:45:35,377:INFO:Set up data.
2023-02-12 21:45:35,386:INFO:Set up train/test split.
2023-02-12 21:45:35,392:INFO:Set up index.
2023-02-12 21:45:35,392:INFO:Set up folding strategy.
2023-02-12 21:45:35,392:INFO:Assigning column types.
2023-02-12 21:45:35,395:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-12 21:45:35,395:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,399:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,403:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,473:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,514:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,515:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:35,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:35,517:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,521:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,525:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,579:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,618:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,619:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:35,622:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:35,622:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-12 21:45:35,626:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,632:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,680:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,716:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,717:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:35,719:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:35,723:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,726:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,773:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,807:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,808:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:35,810:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:35,810:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-12 21:45:35,817:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,866:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,905:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,905:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:35,907:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:35,916:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,959:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,994:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:35,994:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:35,996:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:35,996:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-12 21:45:36,049:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:36,084:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:36,084:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:36,086:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:36,143:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:36,181:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:45:36,181:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:36,183:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:36,183:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-12 21:45:36,239:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:36,273:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:36,275:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:36,330:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:45:36,368:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:36,370:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:36,370:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-12 21:45:36,485:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:36,487:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:36,577:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:36,579:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:36,580:INFO:Preparing preprocessing pipeline...
2023-02-12 21:45:36,580:INFO:Set up column name cleaning.
2023-02-12 21:45:36,580:INFO:Set up simple imputation.
2023-02-12 21:45:36,582:INFO:Set up encoding of categorical features.
2023-02-12 21:45:36,601:INFO:Finished creating preprocessing pipeline.
2023-02-12 21:45:36,607:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['World Rank', 'Region Rank',
                                             'Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', "Gov't Spending",
                                             'Fiscal Health',
                                             'Business Freedom...
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Region'],
                                    transformer=OneHotEncoder(cols=['Region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Country'],
                                    transformer=LeaveOneOutEncoder(cols=['Country'],
                                                                   handle_missing='return_nan',
                                                                   random_state=123)))])
2023-02-12 21:45:36,607:INFO:Creating final display dataframe.
2023-02-12 21:45:36,753:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape         (186, 33)
4        Transformed data shape         (186, 37)
5   Transformed train set shape         (130, 37)
6    Transformed test set shape          (56, 37)
7              Numeric features                30
8          Categorical features                 2
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator             KFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  reg-default-name
21                          USI              fbd1
2023-02-12 21:45:36,869:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:36,871:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:36,966:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:45:36,968:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:45:36,968:INFO:setup() successfully completed in 1.6s...............
2023-02-12 21:45:36,969:INFO:Initializing compare_models()
2023-02-12 21:45:36,969:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-12 21:45:36,969:INFO:Checking exceptions
2023-02-12 21:45:36,970:INFO:Preparing display monitor
2023-02-12 21:45:36,993:INFO:Initializing Linear Regression
2023-02-12 21:45:36,993:INFO:Total runtime is 0.0 minutes
2023-02-12 21:45:36,996:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:36,997:INFO:Initializing create_model()
2023-02-12 21:45:36,997:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:36,997:INFO:Checking exceptions
2023-02-12 21:45:36,997:INFO:Importing libraries
2023-02-12 21:45:36,997:INFO:Copying training dataset
2023-02-12 21:45:36,999:INFO:Defining folds
2023-02-12 21:45:36,999:INFO:Declaring metric variables
2023-02-12 21:45:37,001:INFO:Importing untrained model
2023-02-12 21:45:37,005:INFO:Linear Regression Imported successfully
2023-02-12 21:45:37,013:INFO:Starting cross validation
2023-02-12 21:45:37,020:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:37,220:INFO:Calculating mean and std
2023-02-12 21:45:37,220:INFO:Creating metrics dataframe
2023-02-12 21:45:37,223:INFO:Uploading results into container
2023-02-12 21:45:37,225:INFO:Uploading model into container now
2023-02-12 21:45:37,225:INFO:_master_model_container: 1
2023-02-12 21:45:37,225:INFO:_display_container: 2
2023-02-12 21:45:37,225:INFO:LinearRegression(n_jobs=-1)
2023-02-12 21:45:37,225:INFO:create_model() successfully completed......................................
2023-02-12 21:45:37,356:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:37,356:INFO:Creating metrics dataframe
2023-02-12 21:45:37,362:INFO:Initializing Lasso Regression
2023-02-12 21:45:37,362:INFO:Total runtime is 0.006147837638854981 minutes
2023-02-12 21:45:37,365:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:37,366:INFO:Initializing create_model()
2023-02-12 21:45:37,366:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:37,366:INFO:Checking exceptions
2023-02-12 21:45:37,366:INFO:Importing libraries
2023-02-12 21:45:37,366:INFO:Copying training dataset
2023-02-12 21:45:37,368:INFO:Defining folds
2023-02-12 21:45:37,368:INFO:Declaring metric variables
2023-02-12 21:45:37,372:INFO:Importing untrained model
2023-02-12 21:45:37,375:INFO:Lasso Regression Imported successfully
2023-02-12 21:45:37,383:INFO:Starting cross validation
2023-02-12 21:45:37,384:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:37,572:INFO:Calculating mean and std
2023-02-12 21:45:37,573:INFO:Creating metrics dataframe
2023-02-12 21:45:37,575:INFO:Uploading results into container
2023-02-12 21:45:37,575:INFO:Uploading model into container now
2023-02-12 21:45:37,576:INFO:_master_model_container: 2
2023-02-12 21:45:37,576:INFO:_display_container: 2
2023-02-12 21:45:37,576:INFO:Lasso(random_state=123)
2023-02-12 21:45:37,576:INFO:create_model() successfully completed......................................
2023-02-12 21:45:37,705:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:37,705:INFO:Creating metrics dataframe
2023-02-12 21:45:37,713:INFO:Initializing Ridge Regression
2023-02-12 21:45:37,713:INFO:Total runtime is 0.012003668149312339 minutes
2023-02-12 21:45:37,715:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:37,716:INFO:Initializing create_model()
2023-02-12 21:45:37,716:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:37,716:INFO:Checking exceptions
2023-02-12 21:45:37,716:INFO:Importing libraries
2023-02-12 21:45:37,716:INFO:Copying training dataset
2023-02-12 21:45:37,719:INFO:Defining folds
2023-02-12 21:45:37,719:INFO:Declaring metric variables
2023-02-12 21:45:37,723:INFO:Importing untrained model
2023-02-12 21:45:37,725:INFO:Ridge Regression Imported successfully
2023-02-12 21:45:37,733:INFO:Starting cross validation
2023-02-12 21:45:37,736:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:37,919:INFO:Calculating mean and std
2023-02-12 21:45:37,919:INFO:Creating metrics dataframe
2023-02-12 21:45:37,922:INFO:Uploading results into container
2023-02-12 21:45:37,922:INFO:Uploading model into container now
2023-02-12 21:45:37,923:INFO:_master_model_container: 3
2023-02-12 21:45:37,923:INFO:_display_container: 2
2023-02-12 21:45:37,923:INFO:Ridge(random_state=123)
2023-02-12 21:45:37,923:INFO:create_model() successfully completed......................................
2023-02-12 21:45:38,051:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:38,051:INFO:Creating metrics dataframe
2023-02-12 21:45:38,059:INFO:Initializing Elastic Net
2023-02-12 21:45:38,059:INFO:Total runtime is 0.017770159244537356 minutes
2023-02-12 21:45:38,061:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:38,062:INFO:Initializing create_model()
2023-02-12 21:45:38,062:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:38,062:INFO:Checking exceptions
2023-02-12 21:45:38,062:INFO:Importing libraries
2023-02-12 21:45:38,062:INFO:Copying training dataset
2023-02-12 21:45:38,066:INFO:Defining folds
2023-02-12 21:45:38,066:INFO:Declaring metric variables
2023-02-12 21:45:38,069:INFO:Importing untrained model
2023-02-12 21:45:38,074:INFO:Elastic Net Imported successfully
2023-02-12 21:45:38,082:INFO:Starting cross validation
2023-02-12 21:45:38,083:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:38,271:INFO:Calculating mean and std
2023-02-12 21:45:38,271:INFO:Creating metrics dataframe
2023-02-12 21:45:38,274:INFO:Uploading results into container
2023-02-12 21:45:38,274:INFO:Uploading model into container now
2023-02-12 21:45:38,276:INFO:_master_model_container: 4
2023-02-12 21:45:38,276:INFO:_display_container: 2
2023-02-12 21:45:38,276:INFO:ElasticNet(random_state=123)
2023-02-12 21:45:38,276:INFO:create_model() successfully completed......................................
2023-02-12 21:45:38,402:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:38,402:INFO:Creating metrics dataframe
2023-02-12 21:45:38,412:INFO:Initializing Least Angle Regression
2023-02-12 21:45:38,412:INFO:Total runtime is 0.023653499285380047 minutes
2023-02-12 21:45:38,414:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:38,414:INFO:Initializing create_model()
2023-02-12 21:45:38,414:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:38,414:INFO:Checking exceptions
2023-02-12 21:45:38,415:INFO:Importing libraries
2023-02-12 21:45:38,415:INFO:Copying training dataset
2023-02-12 21:45:38,419:INFO:Defining folds
2023-02-12 21:45:38,419:INFO:Declaring metric variables
2023-02-12 21:45:38,423:INFO:Importing untrained model
2023-02-12 21:45:38,427:INFO:Least Angle Regression Imported successfully
2023-02-12 21:45:38,432:INFO:Starting cross validation
2023-02-12 21:45:38,434:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:38,489:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:38,493:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 29 iterations, i.e. alpha=3.204e-03, with an active set of 26 regressors, and the smallest cholesky pivot element being 1.490e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,493:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=1.759e-03, with an active set of 30 regressors, and the smallest cholesky pivot element being 1.490e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,494:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=1.313e-03, with an active set of 30 regressors, and the smallest cholesky pivot element being 1.490e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,494:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=7.322e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 2.107e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,494:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=6.166e-05, with an active set of 33 regressors, and the smallest cholesky pivot element being 2.107e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,501:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:38,506:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 27 iterations, i.e. alpha=3.660e-03, with an active set of 25 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,506:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 29 iterations, i.e. alpha=3.111e-03, with an active set of 27 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,507:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=5.141e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,508:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=7.213e-05, with an active set of 34 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,511:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:38,516:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 26 iterations, i.e. alpha=4.466e-03, with an active set of 24 regressors, and the smallest cholesky pivot element being 5.373e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,518:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 32 iterations, i.e. alpha=4.117e-03, with an active set of 27 regressors, and the smallest cholesky pivot element being 5.373e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,518:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:38,518:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=2.222e-03, with an active set of 30 regressors, and the smallest cholesky pivot element being 5.373e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,520:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 37 iterations, i.e. alpha=1.234e-03, with an active set of 32 regressors, and the smallest cholesky pivot element being 5.475e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,521:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 38 iterations, i.e. alpha=1.785e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 5.475e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,521:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 39 iterations, i.e. alpha=1.056e-05, with an active set of 34 regressors, and the smallest cholesky pivot element being 5.475e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,526:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 34 iterations, i.e. alpha=1.964e-03, with an active set of 31 regressors, and the smallest cholesky pivot element being 3.332e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,528:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 37 iterations, i.e. alpha=1.622e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 3.332e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,534:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:38,544:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 34 iterations, i.e. alpha=1.121e-03, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.593e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,544:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 34 iterations, i.e. alpha=9.959e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.593e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,548:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:38,559:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=5.963e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 6.909e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,561:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:38,567:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:38,568:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 37 iterations, i.e. alpha=9.871e-05, with an active set of 34 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,572:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 27 iterations, i.e. alpha=4.510e-03, with an active set of 25 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,573:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 30 iterations, i.e. alpha=2.489e-03, with an active set of 28 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,574:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=1.230e-03, with an active set of 31 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,574:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=6.078e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,575:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=1.295e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,576:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:38,581:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=6.942e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.712e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,581:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=2.035e-05, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.712e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,590:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:38,596:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=4.013e-03, with an active set of 32 regressors, and the smallest cholesky pivot element being 4.081e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,596:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 38 iterations, i.e. alpha=8.153e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 4.081e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:45:38,621:INFO:Calculating mean and std
2023-02-12 21:45:38,622:INFO:Creating metrics dataframe
2023-02-12 21:45:38,624:INFO:Uploading results into container
2023-02-12 21:45:38,625:INFO:Uploading model into container now
2023-02-12 21:45:38,625:INFO:_master_model_container: 5
2023-02-12 21:45:38,625:INFO:_display_container: 2
2023-02-12 21:45:38,625:INFO:Lars(random_state=123)
2023-02-12 21:45:38,626:INFO:create_model() successfully completed......................................
2023-02-12 21:45:38,750:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:38,751:INFO:Creating metrics dataframe
2023-02-12 21:45:38,758:INFO:Initializing Lasso Least Angle Regression
2023-02-12 21:45:38,758:INFO:Total runtime is 0.029415396849314372 minutes
2023-02-12 21:45:38,762:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:38,763:INFO:Initializing create_model()
2023-02-12 21:45:38,763:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:38,763:INFO:Checking exceptions
2023-02-12 21:45:38,763:INFO:Importing libraries
2023-02-12 21:45:38,763:INFO:Copying training dataset
2023-02-12 21:45:38,766:INFO:Defining folds
2023-02-12 21:45:38,767:INFO:Declaring metric variables
2023-02-12 21:45:38,771:INFO:Importing untrained model
2023-02-12 21:45:38,775:INFO:Lasso Least Angle Regression Imported successfully
2023-02-12 21:45:38,782:INFO:Starting cross validation
2023-02-12 21:45:38,784:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:38,873:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:38,886:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:38,897:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:38,901:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:38,912:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:38,925:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:38,938:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:38,949:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:38,958:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:38,965:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:45:38,989:INFO:Calculating mean and std
2023-02-12 21:45:38,990:INFO:Creating metrics dataframe
2023-02-12 21:45:38,993:INFO:Uploading results into container
2023-02-12 21:45:38,993:INFO:Uploading model into container now
2023-02-12 21:45:38,993:INFO:_master_model_container: 6
2023-02-12 21:45:38,994:INFO:_display_container: 2
2023-02-12 21:45:38,994:INFO:LassoLars(random_state=123)
2023-02-12 21:45:38,994:INFO:create_model() successfully completed......................................
2023-02-12 21:45:39,120:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:39,120:INFO:Creating metrics dataframe
2023-02-12 21:45:39,129:INFO:Initializing Orthogonal Matching Pursuit
2023-02-12 21:45:39,129:INFO:Total runtime is 0.03559811115264892 minutes
2023-02-12 21:45:39,133:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:39,133:INFO:Initializing create_model()
2023-02-12 21:45:39,133:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:39,133:INFO:Checking exceptions
2023-02-12 21:45:39,133:INFO:Importing libraries
2023-02-12 21:45:39,133:INFO:Copying training dataset
2023-02-12 21:45:39,137:INFO:Defining folds
2023-02-12 21:45:39,137:INFO:Declaring metric variables
2023-02-12 21:45:39,141:INFO:Importing untrained model
2023-02-12 21:45:39,145:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-12 21:45:39,152:INFO:Starting cross validation
2023-02-12 21:45:39,154:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:39,219:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:39,226:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:39,239:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:39,250:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:39,258:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:39,266:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:39,290:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:39,290:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:39,314:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:39,320:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:45:39,348:INFO:Calculating mean and std
2023-02-12 21:45:39,349:INFO:Creating metrics dataframe
2023-02-12 21:45:39,351:INFO:Uploading results into container
2023-02-12 21:45:39,351:INFO:Uploading model into container now
2023-02-12 21:45:39,352:INFO:_master_model_container: 7
2023-02-12 21:45:39,352:INFO:_display_container: 2
2023-02-12 21:45:39,352:INFO:OrthogonalMatchingPursuit()
2023-02-12 21:45:39,352:INFO:create_model() successfully completed......................................
2023-02-12 21:45:39,480:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:39,480:INFO:Creating metrics dataframe
2023-02-12 21:45:39,487:INFO:Initializing Bayesian Ridge
2023-02-12 21:45:39,488:INFO:Total runtime is 0.041589661439259844 minutes
2023-02-12 21:45:39,491:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:39,491:INFO:Initializing create_model()
2023-02-12 21:45:39,491:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:39,491:INFO:Checking exceptions
2023-02-12 21:45:39,491:INFO:Importing libraries
2023-02-12 21:45:39,491:INFO:Copying training dataset
2023-02-12 21:45:39,495:INFO:Defining folds
2023-02-12 21:45:39,495:INFO:Declaring metric variables
2023-02-12 21:45:39,499:INFO:Importing untrained model
2023-02-12 21:45:39,503:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:45:39,511:INFO:Starting cross validation
2023-02-12 21:45:39,514:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:39,692:INFO:Calculating mean and std
2023-02-12 21:45:39,693:INFO:Creating metrics dataframe
2023-02-12 21:45:39,696:INFO:Uploading results into container
2023-02-12 21:45:39,697:INFO:Uploading model into container now
2023-02-12 21:45:39,697:INFO:_master_model_container: 8
2023-02-12 21:45:39,697:INFO:_display_container: 2
2023-02-12 21:45:39,697:INFO:BayesianRidge()
2023-02-12 21:45:39,697:INFO:create_model() successfully completed......................................
2023-02-12 21:45:39,825:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:39,825:INFO:Creating metrics dataframe
2023-02-12 21:45:39,833:INFO:Initializing Passive Aggressive Regressor
2023-02-12 21:45:39,833:INFO:Total runtime is 0.04733917315800985 minutes
2023-02-12 21:45:39,837:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:39,837:INFO:Initializing create_model()
2023-02-12 21:45:39,837:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:39,837:INFO:Checking exceptions
2023-02-12 21:45:39,837:INFO:Importing libraries
2023-02-12 21:45:39,838:INFO:Copying training dataset
2023-02-12 21:45:39,840:INFO:Defining folds
2023-02-12 21:45:39,840:INFO:Declaring metric variables
2023-02-12 21:45:39,845:INFO:Importing untrained model
2023-02-12 21:45:39,848:INFO:Passive Aggressive Regressor Imported successfully
2023-02-12 21:45:39,855:INFO:Starting cross validation
2023-02-12 21:45:39,857:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:40,042:INFO:Calculating mean and std
2023-02-12 21:45:40,042:INFO:Creating metrics dataframe
2023-02-12 21:45:40,045:INFO:Uploading results into container
2023-02-12 21:45:40,045:INFO:Uploading model into container now
2023-02-12 21:45:40,046:INFO:_master_model_container: 9
2023-02-12 21:45:40,046:INFO:_display_container: 2
2023-02-12 21:45:40,046:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-12 21:45:40,046:INFO:create_model() successfully completed......................................
2023-02-12 21:45:40,172:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:40,172:INFO:Creating metrics dataframe
2023-02-12 21:45:40,181:INFO:Initializing Huber Regressor
2023-02-12 21:45:40,181:INFO:Total runtime is 0.053142269452412925 minutes
2023-02-12 21:45:40,184:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:40,184:INFO:Initializing create_model()
2023-02-12 21:45:40,184:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:40,185:INFO:Checking exceptions
2023-02-12 21:45:40,185:INFO:Importing libraries
2023-02-12 21:45:40,185:INFO:Copying training dataset
2023-02-12 21:45:40,190:INFO:Defining folds
2023-02-12 21:45:40,190:INFO:Declaring metric variables
2023-02-12 21:45:40,193:INFO:Importing untrained model
2023-02-12 21:45:40,197:INFO:Huber Regressor Imported successfully
2023-02-12 21:45:40,206:INFO:Starting cross validation
2023-02-12 21:45:40,208:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:40,297:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:40,305:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:40,319:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:40,332:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:40,348:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:40,358:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:40,373:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:40,381:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:40,407:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:40,407:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:45:40,431:INFO:Calculating mean and std
2023-02-12 21:45:40,432:INFO:Creating metrics dataframe
2023-02-12 21:45:40,436:INFO:Uploading results into container
2023-02-12 21:45:40,437:INFO:Uploading model into container now
2023-02-12 21:45:40,437:INFO:_master_model_container: 10
2023-02-12 21:45:40,437:INFO:_display_container: 2
2023-02-12 21:45:40,438:INFO:HuberRegressor()
2023-02-12 21:45:40,438:INFO:create_model() successfully completed......................................
2023-02-12 21:45:40,565:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:40,565:INFO:Creating metrics dataframe
2023-02-12 21:45:40,574:INFO:Initializing K Neighbors Regressor
2023-02-12 21:45:40,574:INFO:Total runtime is 0.05968988736470541 minutes
2023-02-12 21:45:40,576:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:40,577:INFO:Initializing create_model()
2023-02-12 21:45:40,577:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:40,577:INFO:Checking exceptions
2023-02-12 21:45:40,577:INFO:Importing libraries
2023-02-12 21:45:40,577:INFO:Copying training dataset
2023-02-12 21:45:40,581:INFO:Defining folds
2023-02-12 21:45:40,581:INFO:Declaring metric variables
2023-02-12 21:45:40,585:INFO:Importing untrained model
2023-02-12 21:45:40,590:INFO:K Neighbors Regressor Imported successfully
2023-02-12 21:45:40,595:INFO:Starting cross validation
2023-02-12 21:45:40,597:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:40,806:INFO:Calculating mean and std
2023-02-12 21:45:40,807:INFO:Creating metrics dataframe
2023-02-12 21:45:40,809:INFO:Uploading results into container
2023-02-12 21:45:40,810:INFO:Uploading model into container now
2023-02-12 21:45:40,810:INFO:_master_model_container: 11
2023-02-12 21:45:40,810:INFO:_display_container: 2
2023-02-12 21:45:40,810:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-12 21:45:40,810:INFO:create_model() successfully completed......................................
2023-02-12 21:45:40,937:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:40,937:INFO:Creating metrics dataframe
2023-02-12 21:45:40,945:INFO:Initializing Decision Tree Regressor
2023-02-12 21:45:40,945:INFO:Total runtime is 0.0658742864926656 minutes
2023-02-12 21:45:40,948:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:40,949:INFO:Initializing create_model()
2023-02-12 21:45:40,949:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:40,949:INFO:Checking exceptions
2023-02-12 21:45:40,949:INFO:Importing libraries
2023-02-12 21:45:40,949:INFO:Copying training dataset
2023-02-12 21:45:40,952:INFO:Defining folds
2023-02-12 21:45:40,952:INFO:Declaring metric variables
2023-02-12 21:45:40,957:INFO:Importing untrained model
2023-02-12 21:45:40,961:INFO:Decision Tree Regressor Imported successfully
2023-02-12 21:45:40,968:INFO:Starting cross validation
2023-02-12 21:45:40,970:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:41,150:INFO:Calculating mean and std
2023-02-12 21:45:41,150:INFO:Creating metrics dataframe
2023-02-12 21:45:41,154:INFO:Uploading results into container
2023-02-12 21:45:41,154:INFO:Uploading model into container now
2023-02-12 21:45:41,155:INFO:_master_model_container: 12
2023-02-12 21:45:41,155:INFO:_display_container: 2
2023-02-12 21:45:41,155:INFO:DecisionTreeRegressor(random_state=123)
2023-02-12 21:45:41,155:INFO:create_model() successfully completed......................................
2023-02-12 21:45:41,283:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:41,283:INFO:Creating metrics dataframe
2023-02-12 21:45:41,294:INFO:Initializing Random Forest Regressor
2023-02-12 21:45:41,294:INFO:Total runtime is 0.07168381611506144 minutes
2023-02-12 21:45:41,298:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:41,298:INFO:Initializing create_model()
2023-02-12 21:45:41,298:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:41,298:INFO:Checking exceptions
2023-02-12 21:45:41,298:INFO:Importing libraries
2023-02-12 21:45:41,298:INFO:Copying training dataset
2023-02-12 21:45:41,301:INFO:Defining folds
2023-02-12 21:45:41,302:INFO:Declaring metric variables
2023-02-12 21:45:41,305:INFO:Importing untrained model
2023-02-12 21:45:41,309:INFO:Random Forest Regressor Imported successfully
2023-02-12 21:45:41,316:INFO:Starting cross validation
2023-02-12 21:45:41,318:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:41,900:INFO:Calculating mean and std
2023-02-12 21:45:41,901:INFO:Creating metrics dataframe
2023-02-12 21:45:41,904:INFO:Uploading results into container
2023-02-12 21:45:41,905:INFO:Uploading model into container now
2023-02-12 21:45:41,905:INFO:_master_model_container: 13
2023-02-12 21:45:41,906:INFO:_display_container: 2
2023-02-12 21:45:41,906:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-12 21:45:41,906:INFO:create_model() successfully completed......................................
2023-02-12 21:45:42,036:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:42,036:INFO:Creating metrics dataframe
2023-02-12 21:45:42,042:INFO:Initializing Extra Trees Regressor
2023-02-12 21:45:42,042:INFO:Total runtime is 0.08415716091791789 minutes
2023-02-12 21:45:42,049:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:42,051:INFO:Initializing create_model()
2023-02-12 21:45:42,051:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:42,051:INFO:Checking exceptions
2023-02-12 21:45:42,051:INFO:Importing libraries
2023-02-12 21:45:42,051:INFO:Copying training dataset
2023-02-12 21:45:42,054:INFO:Defining folds
2023-02-12 21:45:42,055:INFO:Declaring metric variables
2023-02-12 21:45:42,058:INFO:Importing untrained model
2023-02-12 21:45:42,061:INFO:Extra Trees Regressor Imported successfully
2023-02-12 21:45:42,068:INFO:Starting cross validation
2023-02-12 21:45:42,070:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:42,554:INFO:Calculating mean and std
2023-02-12 21:45:42,555:INFO:Creating metrics dataframe
2023-02-12 21:45:42,557:INFO:Uploading results into container
2023-02-12 21:45:42,558:INFO:Uploading model into container now
2023-02-12 21:45:42,558:INFO:_master_model_container: 14
2023-02-12 21:45:42,558:INFO:_display_container: 2
2023-02-12 21:45:42,559:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-12 21:45:42,559:INFO:create_model() successfully completed......................................
2023-02-12 21:45:42,684:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:42,684:INFO:Creating metrics dataframe
2023-02-12 21:45:42,692:INFO:Initializing AdaBoost Regressor
2023-02-12 21:45:42,692:INFO:Total runtime is 0.09499218861262004 minutes
2023-02-12 21:45:42,695:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:42,696:INFO:Initializing create_model()
2023-02-12 21:45:42,696:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:42,696:INFO:Checking exceptions
2023-02-12 21:45:42,696:INFO:Importing libraries
2023-02-12 21:45:42,696:INFO:Copying training dataset
2023-02-12 21:45:42,701:INFO:Defining folds
2023-02-12 21:45:42,701:INFO:Declaring metric variables
2023-02-12 21:45:42,705:INFO:Importing untrained model
2023-02-12 21:45:42,708:INFO:AdaBoost Regressor Imported successfully
2023-02-12 21:45:42,714:INFO:Starting cross validation
2023-02-12 21:45:42,716:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:43,035:INFO:Calculating mean and std
2023-02-12 21:45:43,036:INFO:Creating metrics dataframe
2023-02-12 21:45:43,039:INFO:Uploading results into container
2023-02-12 21:45:43,040:INFO:Uploading model into container now
2023-02-12 21:45:43,040:INFO:_master_model_container: 15
2023-02-12 21:45:43,040:INFO:_display_container: 2
2023-02-12 21:45:43,040:INFO:AdaBoostRegressor(random_state=123)
2023-02-12 21:45:43,041:INFO:create_model() successfully completed......................................
2023-02-12 21:45:43,170:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:43,170:INFO:Creating metrics dataframe
2023-02-12 21:45:43,178:INFO:Initializing Gradient Boosting Regressor
2023-02-12 21:45:43,179:INFO:Total runtime is 0.10310490131378175 minutes
2023-02-12 21:45:43,182:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:43,182:INFO:Initializing create_model()
2023-02-12 21:45:43,182:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:43,183:INFO:Checking exceptions
2023-02-12 21:45:43,183:INFO:Importing libraries
2023-02-12 21:45:43,183:INFO:Copying training dataset
2023-02-12 21:45:43,186:INFO:Defining folds
2023-02-12 21:45:43,187:INFO:Declaring metric variables
2023-02-12 21:45:43,189:INFO:Importing untrained model
2023-02-12 21:45:43,194:INFO:Gradient Boosting Regressor Imported successfully
2023-02-12 21:45:43,201:INFO:Starting cross validation
2023-02-12 21:45:43,203:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:43,543:INFO:Calculating mean and std
2023-02-12 21:45:43,544:INFO:Creating metrics dataframe
2023-02-12 21:45:43,547:INFO:Uploading results into container
2023-02-12 21:45:43,548:INFO:Uploading model into container now
2023-02-12 21:45:43,548:INFO:_master_model_container: 16
2023-02-12 21:45:43,548:INFO:_display_container: 2
2023-02-12 21:45:43,549:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:45:43,549:INFO:create_model() successfully completed......................................
2023-02-12 21:45:43,678:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:43,678:INFO:Creating metrics dataframe
2023-02-12 21:45:43,687:INFO:Initializing Extreme Gradient Boosting
2023-02-12 21:45:43,687:INFO:Total runtime is 0.11156568129857382 minutes
2023-02-12 21:45:43,690:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:43,690:INFO:Initializing create_model()
2023-02-12 21:45:43,690:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:43,691:INFO:Checking exceptions
2023-02-12 21:45:43,691:INFO:Importing libraries
2023-02-12 21:45:43,691:INFO:Copying training dataset
2023-02-12 21:45:43,694:INFO:Defining folds
2023-02-12 21:45:43,694:INFO:Declaring metric variables
2023-02-12 21:45:43,697:INFO:Importing untrained model
2023-02-12 21:45:43,702:INFO:Extreme Gradient Boosting Imported successfully
2023-02-12 21:45:43,741:INFO:Starting cross validation
2023-02-12 21:45:43,742:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:44,088:INFO:Calculating mean and std
2023-02-12 21:45:44,089:INFO:Creating metrics dataframe
2023-02-12 21:45:44,092:INFO:Uploading results into container
2023-02-12 21:45:44,093:INFO:Uploading model into container now
2023-02-12 21:45:44,093:INFO:_master_model_container: 17
2023-02-12 21:45:44,093:INFO:_display_container: 2
2023-02-12 21:45:44,093:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-12 21:45:44,094:INFO:create_model() successfully completed......................................
2023-02-12 21:45:44,224:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:44,224:INFO:Creating metrics dataframe
2023-02-12 21:45:44,236:INFO:Initializing Light Gradient Boosting Machine
2023-02-12 21:45:44,236:INFO:Total runtime is 0.12072499593098959 minutes
2023-02-12 21:45:44,239:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:44,239:INFO:Initializing create_model()
2023-02-12 21:45:44,241:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:44,241:INFO:Checking exceptions
2023-02-12 21:45:44,241:INFO:Importing libraries
2023-02-12 21:45:44,241:INFO:Copying training dataset
2023-02-12 21:45:44,245:INFO:Defining folds
2023-02-12 21:45:44,245:INFO:Declaring metric variables
2023-02-12 21:45:44,249:INFO:Importing untrained model
2023-02-12 21:45:44,253:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-12 21:45:44,261:INFO:Starting cross validation
2023-02-12 21:45:44,262:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:44,482:INFO:Calculating mean and std
2023-02-12 21:45:44,483:INFO:Creating metrics dataframe
2023-02-12 21:45:44,487:INFO:Uploading results into container
2023-02-12 21:45:44,487:INFO:Uploading model into container now
2023-02-12 21:45:44,488:INFO:_master_model_container: 18
2023-02-12 21:45:44,488:INFO:_display_container: 2
2023-02-12 21:45:44,488:INFO:LGBMRegressor(random_state=123)
2023-02-12 21:45:44,488:INFO:create_model() successfully completed......................................
2023-02-12 21:45:44,615:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:44,615:INFO:Creating metrics dataframe
2023-02-12 21:45:44,626:INFO:Initializing Dummy Regressor
2023-02-12 21:45:44,627:INFO:Total runtime is 0.12723936239878336 minutes
2023-02-12 21:45:44,631:INFO:SubProcess create_model() called ==================================
2023-02-12 21:45:44,632:INFO:Initializing create_model()
2023-02-12 21:45:44,632:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A117ABE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:44,632:INFO:Checking exceptions
2023-02-12 21:45:44,632:INFO:Importing libraries
2023-02-12 21:45:44,632:INFO:Copying training dataset
2023-02-12 21:45:44,636:INFO:Defining folds
2023-02-12 21:45:44,636:INFO:Declaring metric variables
2023-02-12 21:45:44,640:INFO:Importing untrained model
2023-02-12 21:45:44,646:INFO:Dummy Regressor Imported successfully
2023-02-12 21:45:44,651:INFO:Starting cross validation
2023-02-12 21:45:44,654:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:45:44,846:INFO:Calculating mean and std
2023-02-12 21:45:44,847:INFO:Creating metrics dataframe
2023-02-12 21:45:44,850:INFO:Uploading results into container
2023-02-12 21:45:44,851:INFO:Uploading model into container now
2023-02-12 21:45:44,851:INFO:_master_model_container: 19
2023-02-12 21:45:44,851:INFO:_display_container: 2
2023-02-12 21:45:44,852:INFO:DummyRegressor()
2023-02-12 21:45:44,852:INFO:create_model() successfully completed......................................
2023-02-12 21:45:44,976:INFO:SubProcess create_model() end ==================================
2023-02-12 21:45:44,976:INFO:Creating metrics dataframe
2023-02-12 21:45:44,999:INFO:Initializing create_model()
2023-02-12 21:45:44,999:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=GradientBoostingRegressor(random_state=123), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:44,999:INFO:Checking exceptions
2023-02-12 21:45:45,000:INFO:Importing libraries
2023-02-12 21:45:45,000:INFO:Copying training dataset
2023-02-12 21:45:45,002:INFO:Defining folds
2023-02-12 21:45:45,002:INFO:Declaring metric variables
2023-02-12 21:45:45,003:INFO:Importing untrained model
2023-02-12 21:45:45,003:INFO:Declaring custom model
2023-02-12 21:45:45,003:INFO:Gradient Boosting Regressor Imported successfully
2023-02-12 21:45:45,005:INFO:Cross validation set to False
2023-02-12 21:45:45,005:INFO:Fitting Model
2023-02-12 21:45:45,092:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:45:45,092:INFO:create_model() successfully completed......................................
2023-02-12 21:45:45,255:INFO:_master_model_container: 19
2023-02-12 21:45:45,256:INFO:_display_container: 2
2023-02-12 21:45:45,256:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:45:45,256:INFO:compare_models() successfully completed......................................
2023-02-12 21:45:45,256:INFO:Initializing automl()
2023-02-12 21:45:45,256:INFO:automl(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, optimize=R2, use_holdout=False, turbo=True, return_train_score=False)
2023-02-12 21:45:45,257:INFO:Model Selection Basis : CV Results on Training set
2023-02-12 21:45:45,257:INFO:Checking model 0
2023-02-12 21:45:45,257:INFO:Checking model 1
2023-02-12 21:45:45,257:INFO:Checking model 2
2023-02-12 21:45:45,257:INFO:Checking model 3
2023-02-12 21:45:45,257:INFO:Checking model 4
2023-02-12 21:45:45,257:INFO:Checking model 5
2023-02-12 21:45:45,258:INFO:Checking model 6
2023-02-12 21:45:45,258:INFO:Checking model 7
2023-02-12 21:45:45,258:INFO:Checking model 8
2023-02-12 21:45:45,258:INFO:Checking model 9
2023-02-12 21:45:45,258:INFO:Checking model 10
2023-02-12 21:45:45,258:INFO:Checking model 11
2023-02-12 21:45:45,259:INFO:Checking model 12
2023-02-12 21:45:45,259:INFO:Checking model 13
2023-02-12 21:45:45,259:INFO:Checking model 14
2023-02-12 21:45:45,259:INFO:Checking model 15
2023-02-12 21:45:45,259:INFO:Checking model 16
2023-02-12 21:45:45,259:INFO:Checking model 17
2023-02-12 21:45:45,259:INFO:Checking model 18
2023-02-12 21:45:45,260:INFO:Initializing create_model()
2023-02-12 21:45:45,260:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0534CD0>, estimator=GradientBoostingRegressor(random_state=123), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:45:45,260:INFO:Checking exceptions
2023-02-12 21:45:45,262:INFO:Importing libraries
2023-02-12 21:45:45,262:INFO:Copying training dataset
2023-02-12 21:45:45,265:INFO:Defining folds
2023-02-12 21:45:45,265:INFO:Declaring metric variables
2023-02-12 21:45:45,265:INFO:Importing untrained model
2023-02-12 21:45:45,265:INFO:Declaring custom model
2023-02-12 21:45:45,266:INFO:Gradient Boosting Regressor Imported successfully
2023-02-12 21:45:45,267:INFO:Cross validation set to False
2023-02-12 21:45:45,267:INFO:Fitting Model
2023-02-12 21:45:45,358:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:45:45,358:INFO:create_model() successfully completed......................................
2023-02-12 21:45:45,613:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:45:45,613:INFO:automl() successfully completed......................................
2023-02-12 21:51:41,715:INFO:PyCaret RegressionExperiment
2023-02-12 21:51:41,715:INFO:Logging name: reg-default-name
2023-02-12 21:51:41,715:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-12 21:51:41,715:INFO:version 3.0.0.rc8
2023-02-12 21:51:41,715:INFO:Initializing setup()
2023-02-12 21:51:41,715:INFO:self.USI: b099
2023-02-12 21:51:41,715:INFO:self._variable_keys: {'fold_generator', 'logging_param', 'transform_target_param', 'data', 'idx', 'X_test', 'gpu_n_jobs_param', 'memory', 'USI', 'y_test', 'fold_groups_param', 'y_train', 'seed', 'target_param', 'log_plots_param', 'exp_name_log', '_ml_usecase', 'X', 'X_train', 'y', 'fold_shuffle_param', 'exp_id', 'n_jobs_param', '_available_plots', 'html_param', 'gpu_param', 'pipeline'}
2023-02-12 21:51:41,715:INFO:Checking environment
2023-02-12 21:51:41,715:INFO:python_version: 3.9.13
2023-02-12 21:51:41,715:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-12 21:51:41,715:INFO:machine: AMD64
2023-02-12 21:51:41,715:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-12 21:51:41,723:INFO:Memory: svmem(total=16805040128, available=4931297280, percent=70.7, used=11873742848, free=4931297280)
2023-02-12 21:51:41,723:INFO:Physical Core: 4
2023-02-12 21:51:41,723:INFO:Logical Core: 8
2023-02-12 21:51:41,723:INFO:Checking libraries
2023-02-12 21:51:41,723:INFO:System:
2023-02-12 21:51:41,723:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-12 21:51:41,723:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-12 21:51:41,723:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-12 21:51:41,723:INFO:PyCaret required dependencies:
2023-02-12 21:51:41,724:INFO:                 pip: 23.0
2023-02-12 21:51:41,724:INFO:          setuptools: 58.1.0
2023-02-12 21:51:41,724:INFO:             pycaret: 3.0.0rc8
2023-02-12 21:51:41,724:INFO:             IPython: 8.7.0
2023-02-12 21:51:41,724:INFO:          ipywidgets: 8.0.4
2023-02-12 21:51:41,724:INFO:                tqdm: 4.64.1
2023-02-12 21:51:41,724:INFO:               numpy: 1.22.1
2023-02-12 21:51:41,724:INFO:              pandas: 1.5.2
2023-02-12 21:51:41,724:INFO:              jinja2: 3.1.2
2023-02-12 21:51:41,724:INFO:               scipy: 1.5.4
2023-02-12 21:51:41,724:INFO:              joblib: 1.2.0
2023-02-12 21:51:41,724:INFO:             sklearn: 1.1.3
2023-02-12 21:51:41,724:INFO:                pyod: 1.0.7
2023-02-12 21:51:41,724:INFO:            imblearn: 0.10.1
2023-02-12 21:51:41,725:INFO:   category_encoders: 2.6.0
2023-02-12 21:51:41,725:INFO:            lightgbm: 3.3.4
2023-02-12 21:51:41,725:INFO:               numba: 0.56.4
2023-02-12 21:51:41,725:INFO:            requests: 2.28.1
2023-02-12 21:51:41,725:INFO:          matplotlib: 3.6.2
2023-02-12 21:51:41,725:INFO:          scikitplot: 0.3.7
2023-02-12 21:51:41,725:INFO:         yellowbrick: 1.5
2023-02-12 21:51:41,725:INFO:              plotly: 5.11.0
2023-02-12 21:51:41,725:INFO:             kaleido: 0.2.1
2023-02-12 21:51:41,725:INFO:         statsmodels: 0.13.5
2023-02-12 21:51:41,725:INFO:              sktime: 0.15.1
2023-02-12 21:51:41,725:INFO:               tbats: 1.1.2
2023-02-12 21:51:41,725:INFO:            pmdarima: 2.0.2
2023-02-12 21:51:41,725:INFO:              psutil: 5.9.4
2023-02-12 21:51:41,725:INFO:PyCaret optional dependencies:
2023-02-12 21:51:41,725:INFO:                shap: 0.41.0
2023-02-12 21:51:41,725:INFO:           interpret: 0.3.0
2023-02-12 21:51:41,725:INFO:                umap: Not installed
2023-02-12 21:51:41,725:INFO:    pandas_profiling: 3.6.2
2023-02-12 21:51:41,725:INFO:  explainerdashboard: Not installed
2023-02-12 21:51:41,725:INFO:             autoviz: Not installed
2023-02-12 21:51:41,726:INFO:           fairlearn: Not installed
2023-02-12 21:51:41,726:INFO:             xgboost: 1.7.3
2023-02-12 21:51:41,726:INFO:            catboost: Not installed
2023-02-12 21:51:41,726:INFO:              kmodes: Not installed
2023-02-12 21:51:41,726:INFO:             mlxtend: Not installed
2023-02-12 21:51:41,726:INFO:       statsforecast: Not installed
2023-02-12 21:51:41,726:INFO:        tune_sklearn: Not installed
2023-02-12 21:51:41,726:INFO:                 ray: Not installed
2023-02-12 21:51:41,726:INFO:            hyperopt: Not installed
2023-02-12 21:51:41,726:INFO:              optuna: Not installed
2023-02-12 21:51:41,726:INFO:               skopt: Not installed
2023-02-12 21:51:41,726:INFO:              mlflow: Not installed
2023-02-12 21:51:41,726:INFO:              gradio: Not installed
2023-02-12 21:51:41,726:INFO:             fastapi: Not installed
2023-02-12 21:51:41,726:INFO:             uvicorn: Not installed
2023-02-12 21:51:41,726:INFO:              m2cgen: Not installed
2023-02-12 21:51:41,726:INFO:           evidently: Not installed
2023-02-12 21:51:41,726:INFO:                nltk: 3.8
2023-02-12 21:51:41,726:INFO:            pyLDAvis: Not installed
2023-02-12 21:51:41,726:INFO:              gensim: Not installed
2023-02-12 21:51:41,726:INFO:               spacy: Not installed
2023-02-12 21:51:41,727:INFO:           wordcloud: 1.8.2.2
2023-02-12 21:51:41,727:INFO:            textblob: Not installed
2023-02-12 21:51:41,727:INFO:               fugue: Not installed
2023-02-12 21:51:41,727:INFO:           streamlit: 1.16.0
2023-02-12 21:51:41,727:INFO:             prophet: Not installed
2023-02-12 21:51:41,727:INFO:None
2023-02-12 21:51:41,727:INFO:Set up data.
2023-02-12 21:51:41,739:INFO:Set up train/test split.
2023-02-12 21:51:41,742:INFO:Set up index.
2023-02-12 21:51:41,743:INFO:Set up folding strategy.
2023-02-12 21:51:41,743:INFO:Assigning column types.
2023-02-12 21:51:41,746:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-12 21:51:41,746:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,751:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,755:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,804:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,839:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,840:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:41,842:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:41,842:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,846:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,850:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,899:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,937:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,938:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:41,939:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:41,940:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-12 21:51:41,943:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,947:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:41,993:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,027:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,027:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:42,030:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:42,034:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,037:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,082:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,116:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,116:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:42,118:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:42,118:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-12 21:51:42,125:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,176:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,209:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,211:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:42,213:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:42,220:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,263:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,297:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,298:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:42,300:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:42,300:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-12 21:51:42,351:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,387:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,388:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:42,391:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:42,440:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,473:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,473:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:42,475:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:42,476:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-12 21:51:42,537:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,572:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:42,575:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:42,624:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:42,657:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:42,659:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:42,659:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-12 21:51:42,750:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:42,752:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:42,842:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:42,844:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:42,845:INFO:Preparing preprocessing pipeline...
2023-02-12 21:51:42,846:INFO:Set up column name cleaning.
2023-02-12 21:51:42,846:INFO:Set up simple imputation.
2023-02-12 21:51:42,848:INFO:Set up encoding of categorical features.
2023-02-12 21:51:42,872:INFO:Finished creating preprocessing pipeline.
2023-02-12 21:51:42,879:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['World Rank', 'Region Rank',
                                             'Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', "Gov't Spending",
                                             'Fiscal Health',
                                             'Business Freedom...
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Region'],
                                    transformer=OneHotEncoder(cols=['Region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Country'],
                                    transformer=LeaveOneOutEncoder(cols=['Country'],
                                                                   handle_missing='return_nan',
                                                                   random_state=123)))])
2023-02-12 21:51:42,880:INFO:Creating final display dataframe.
2023-02-12 21:51:43,010:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape         (186, 33)
4        Transformed data shape         (186, 37)
5   Transformed train set shape         (130, 37)
6    Transformed test set shape          (56, 37)
7              Numeric features                30
8          Categorical features                 2
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator             KFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  reg-default-name
21                          USI              b099
2023-02-12 21:51:43,146:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:43,150:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:43,269:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:43,271:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:43,271:INFO:setup() successfully completed in 1.56s...............
2023-02-12 21:51:43,271:INFO:Initializing compare_models()
2023-02-12 21:51:43,272:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0FB9850>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000240A0FB9850>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-12 21:51:43,272:INFO:Checking exceptions
2023-02-12 21:51:43,273:INFO:Preparing display monitor
2023-02-12 21:51:43,295:INFO:Initializing Linear Regression
2023-02-12 21:51:43,295:INFO:Total runtime is 0.0 minutes
2023-02-12 21:51:43,298:INFO:SubProcess create_model() called ==================================
2023-02-12 21:51:43,298:INFO:Initializing create_model()
2023-02-12 21:51:43,299:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0FB9850>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A098C6D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:51:43,299:INFO:Checking exceptions
2023-02-12 21:51:43,299:INFO:Importing libraries
2023-02-12 21:51:43,299:INFO:Copying training dataset
2023-02-12 21:51:43,301:INFO:Defining folds
2023-02-12 21:51:43,301:INFO:Declaring metric variables
2023-02-12 21:51:43,304:INFO:Importing untrained model
2023-02-12 21:51:43,309:INFO:Linear Regression Imported successfully
2023-02-12 21:51:43,318:INFO:Starting cross validation
2023-02-12 21:51:43,324:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:51:47,660:INFO:Calculating mean and std
2023-02-12 21:51:47,662:INFO:Creating metrics dataframe
2023-02-12 21:51:47,666:INFO:Uploading results into container
2023-02-12 21:51:47,667:INFO:Uploading model into container now
2023-02-12 21:51:47,668:INFO:_master_model_container: 1
2023-02-12 21:51:47,668:INFO:_display_container: 2
2023-02-12 21:51:47,669:INFO:LinearRegression(n_jobs=-1)
2023-02-12 21:51:47,669:INFO:create_model() successfully completed......................................
2023-02-12 21:51:47,847:INFO:SubProcess create_model() end ==================================
2023-02-12 21:51:47,847:INFO:Creating metrics dataframe
2023-02-12 21:51:47,853:INFO:Initializing Lasso Regression
2023-02-12 21:51:47,853:INFO:Total runtime is 0.07597471475601196 minutes
2023-02-12 21:51:47,857:INFO:SubProcess create_model() called ==================================
2023-02-12 21:51:47,858:INFO:Initializing create_model()
2023-02-12 21:51:47,858:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0FB9850>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A098C6D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:51:47,858:INFO:Checking exceptions
2023-02-12 21:51:47,858:INFO:Importing libraries
2023-02-12 21:51:47,858:INFO:Copying training dataset
2023-02-12 21:51:47,863:INFO:Defining folds
2023-02-12 21:51:47,863:INFO:Declaring metric variables
2023-02-12 21:51:47,867:INFO:Importing untrained model
2023-02-12 21:51:47,871:INFO:Lasso Regression Imported successfully
2023-02-12 21:51:47,879:INFO:Starting cross validation
2023-02-12 21:51:47,880:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:51:48,065:INFO:Calculating mean and std
2023-02-12 21:51:48,066:INFO:Creating metrics dataframe
2023-02-12 21:51:48,069:INFO:Uploading results into container
2023-02-12 21:51:48,069:INFO:Uploading model into container now
2023-02-12 21:51:48,070:INFO:_master_model_container: 2
2023-02-12 21:51:48,070:INFO:_display_container: 2
2023-02-12 21:51:48,070:INFO:Lasso(random_state=123)
2023-02-12 21:51:48,070:INFO:create_model() successfully completed......................................
2023-02-12 21:51:48,206:INFO:SubProcess create_model() end ==================================
2023-02-12 21:51:48,206:INFO:Creating metrics dataframe
2023-02-12 21:51:48,218:INFO:Initializing Ridge Regression
2023-02-12 21:51:48,218:INFO:Total runtime is 0.08205055395762126 minutes
2023-02-12 21:51:48,220:INFO:SubProcess create_model() called ==================================
2023-02-12 21:51:48,221:INFO:Initializing create_model()
2023-02-12 21:51:48,221:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0FB9850>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A098C6D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:51:48,221:INFO:Checking exceptions
2023-02-12 21:51:48,221:INFO:Importing libraries
2023-02-12 21:51:48,221:INFO:Copying training dataset
2023-02-12 21:51:48,225:INFO:Defining folds
2023-02-12 21:51:48,225:INFO:Declaring metric variables
2023-02-12 21:51:48,229:INFO:Importing untrained model
2023-02-12 21:51:48,234:INFO:Ridge Regression Imported successfully
2023-02-12 21:51:48,241:INFO:Starting cross validation
2023-02-12 21:51:48,243:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:51:48,477:INFO:Calculating mean and std
2023-02-12 21:51:48,478:INFO:Creating metrics dataframe
2023-02-12 21:51:48,480:INFO:Uploading results into container
2023-02-12 21:51:48,481:INFO:Uploading model into container now
2023-02-12 21:51:48,481:INFO:_master_model_container: 3
2023-02-12 21:51:48,481:INFO:_display_container: 2
2023-02-12 21:51:48,482:INFO:Ridge(random_state=123)
2023-02-12 21:51:48,482:INFO:create_model() successfully completed......................................
2023-02-12 21:51:48,612:INFO:SubProcess create_model() end ==================================
2023-02-12 21:51:48,612:INFO:Creating metrics dataframe
2023-02-12 21:51:48,622:INFO:Initializing Elastic Net
2023-02-12 21:51:48,622:INFO:Total runtime is 0.08878749211629232 minutes
2023-02-12 21:51:48,626:INFO:SubProcess create_model() called ==================================
2023-02-12 21:51:48,626:INFO:Initializing create_model()
2023-02-12 21:51:48,626:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0FB9850>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A098C6D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:51:48,626:INFO:Checking exceptions
2023-02-12 21:51:48,626:INFO:Importing libraries
2023-02-12 21:51:48,626:INFO:Copying training dataset
2023-02-12 21:51:48,629:INFO:Defining folds
2023-02-12 21:51:48,629:INFO:Declaring metric variables
2023-02-12 21:51:48,633:INFO:Importing untrained model
2023-02-12 21:51:48,647:INFO:Elastic Net Imported successfully
2023-02-12 21:51:48,657:INFO:Starting cross validation
2023-02-12 21:51:48,659:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:51:48,861:INFO:Calculating mean and std
2023-02-12 21:51:48,862:INFO:Creating metrics dataframe
2023-02-12 21:51:48,864:INFO:Uploading results into container
2023-02-12 21:51:48,864:INFO:Uploading model into container now
2023-02-12 21:51:48,864:INFO:_master_model_container: 4
2023-02-12 21:51:48,865:INFO:_display_container: 2
2023-02-12 21:51:48,865:INFO:ElasticNet(random_state=123)
2023-02-12 21:51:48,865:INFO:create_model() successfully completed......................................
2023-02-12 21:51:49,002:INFO:SubProcess create_model() end ==================================
2023-02-12 21:51:49,002:INFO:Creating metrics dataframe
2023-02-12 21:51:49,012:INFO:Initializing Least Angle Regression
2023-02-12 21:51:49,012:INFO:Total runtime is 0.09529923995335897 minutes
2023-02-12 21:51:49,015:INFO:SubProcess create_model() called ==================================
2023-02-12 21:51:49,015:INFO:Initializing create_model()
2023-02-12 21:51:49,015:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0FB9850>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A098C6D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:51:49,015:INFO:Checking exceptions
2023-02-12 21:51:49,015:INFO:Importing libraries
2023-02-12 21:51:49,015:INFO:Copying training dataset
2023-02-12 21:51:49,019:INFO:Defining folds
2023-02-12 21:51:49,019:INFO:Declaring metric variables
2023-02-12 21:51:49,022:INFO:Importing untrained model
2023-02-12 21:51:49,028:INFO:Least Angle Regression Imported successfully
2023-02-12 21:51:49,035:INFO:Starting cross validation
2023-02-12 21:51:49,036:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:51:49,103:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,109:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,109:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 29 iterations, i.e. alpha=3.204e-03, with an active set of 26 regressors, and the smallest cholesky pivot element being 1.490e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,110:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=1.759e-03, with an active set of 30 regressors, and the smallest cholesky pivot element being 1.490e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,110:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=1.313e-03, with an active set of 30 regressors, and the smallest cholesky pivot element being 1.490e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,111:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=7.322e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 2.107e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,111:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=6.166e-05, with an active set of 33 regressors, and the smallest cholesky pivot element being 2.107e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,115:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 27 iterations, i.e. alpha=3.660e-03, with an active set of 25 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,116:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 29 iterations, i.e. alpha=3.111e-03, with an active set of 27 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,117:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=5.141e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,117:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=7.213e-05, with an active set of 34 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,121:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,132:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 26 iterations, i.e. alpha=4.466e-03, with an active set of 24 regressors, and the smallest cholesky pivot element being 5.373e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,133:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 32 iterations, i.e. alpha=4.117e-03, with an active set of 27 regressors, and the smallest cholesky pivot element being 5.373e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,134:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=2.222e-03, with an active set of 30 regressors, and the smallest cholesky pivot element being 5.373e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,135:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 37 iterations, i.e. alpha=1.234e-03, with an active set of 32 regressors, and the smallest cholesky pivot element being 5.475e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,135:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 38 iterations, i.e. alpha=1.785e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 5.475e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,135:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 39 iterations, i.e. alpha=1.056e-05, with an active set of 34 regressors, and the smallest cholesky pivot element being 5.475e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,138:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,150:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 34 iterations, i.e. alpha=1.964e-03, with an active set of 31 regressors, and the smallest cholesky pivot element being 3.332e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,150:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,151:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 37 iterations, i.e. alpha=1.622e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 3.332e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,161:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 34 iterations, i.e. alpha=1.121e-03, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.593e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,161:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 34 iterations, i.e. alpha=9.959e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.593e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,162:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,173:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,173:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=5.963e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 6.909e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,182:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,182:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 37 iterations, i.e. alpha=9.871e-05, with an active set of 34 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,192:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 27 iterations, i.e. alpha=4.510e-03, with an active set of 25 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,193:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 30 iterations, i.e. alpha=2.489e-03, with an active set of 28 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,193:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=1.230e-03, with an active set of 31 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,195:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=6.078e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,195:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=1.295e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 4.344e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,199:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,205:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=6.942e-04, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.712e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,205:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=2.035e-05, with an active set of 33 regressors, and the smallest cholesky pivot element being 4.712e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,216:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,221:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=4.013e-03, with an active set of 32 regressors, and the smallest cholesky pivot element being 4.081e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,221:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 38 iterations, i.e. alpha=8.153e-04, with an active set of 34 regressors, and the smallest cholesky pivot element being 4.081e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2023-02-12 21:51:49,247:INFO:Calculating mean and std
2023-02-12 21:51:49,248:INFO:Creating metrics dataframe
2023-02-12 21:51:49,251:INFO:Uploading results into container
2023-02-12 21:51:49,251:INFO:Uploading model into container now
2023-02-12 21:51:49,251:INFO:_master_model_container: 5
2023-02-12 21:51:49,251:INFO:_display_container: 2
2023-02-12 21:51:49,251:INFO:Lars(random_state=123)
2023-02-12 21:51:49,253:INFO:create_model() successfully completed......................................
2023-02-12 21:51:49,390:INFO:SubProcess create_model() end ==================================
2023-02-12 21:51:49,390:INFO:Creating metrics dataframe
2023-02-12 21:51:49,401:INFO:Initializing Lasso Least Angle Regression
2023-02-12 21:51:49,401:INFO:Total runtime is 0.10177393754323323 minutes
2023-02-12 21:51:49,404:INFO:SubProcess create_model() called ==================================
2023-02-12 21:51:49,404:INFO:Initializing create_model()
2023-02-12 21:51:49,405:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0FB9850>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A098C6D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:51:49,405:INFO:Checking exceptions
2023-02-12 21:51:49,405:INFO:Importing libraries
2023-02-12 21:51:49,405:INFO:Copying training dataset
2023-02-12 21:51:49,410:INFO:Defining folds
2023-02-12 21:51:49,411:INFO:Declaring metric variables
2023-02-12 21:51:49,414:INFO:Importing untrained model
2023-02-12 21:51:49,417:INFO:Lasso Least Angle Regression Imported successfully
2023-02-12 21:51:49,427:INFO:Starting cross validation
2023-02-12 21:51:49,429:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:51:49,501:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:51:49,514:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:51:49,527:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:51:49,536:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:51:49,551:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:51:49,568:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:51:49,581:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:51:49,590:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:51:49,600:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:51:49,619:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:51:49,646:INFO:Calculating mean and std
2023-02-12 21:51:49,647:INFO:Creating metrics dataframe
2023-02-12 21:51:49,649:INFO:Uploading results into container
2023-02-12 21:51:49,650:INFO:Uploading model into container now
2023-02-12 21:51:49,650:INFO:_master_model_container: 6
2023-02-12 21:51:49,650:INFO:_display_container: 2
2023-02-12 21:51:49,650:INFO:LassoLars(random_state=123)
2023-02-12 21:51:49,650:INFO:create_model() successfully completed......................................
2023-02-12 21:51:49,785:INFO:SubProcess create_model() end ==================================
2023-02-12 21:51:49,785:INFO:Creating metrics dataframe
2023-02-12 21:51:49,792:INFO:Initializing Orthogonal Matching Pursuit
2023-02-12 21:51:49,792:INFO:Total runtime is 0.10829375187555948 minutes
2023-02-12 21:51:49,795:INFO:SubProcess create_model() called ==================================
2023-02-12 21:51:49,796:INFO:Initializing create_model()
2023-02-12 21:51:49,796:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0FB9850>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A098C6D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:51:49,796:INFO:Checking exceptions
2023-02-12 21:51:49,796:INFO:Importing libraries
2023-02-12 21:51:49,796:INFO:Copying training dataset
2023-02-12 21:51:49,800:INFO:Defining folds
2023-02-12 21:51:49,801:INFO:Declaring metric variables
2023-02-12 21:51:49,804:INFO:Importing untrained model
2023-02-12 21:51:49,808:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-12 21:51:49,818:INFO:Starting cross validation
2023-02-12 21:51:49,820:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:51:49,903:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,910:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,926:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,933:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,954:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,964:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,980:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:49,993:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:50,004:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:50,011:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:51:50,038:INFO:Calculating mean and std
2023-02-12 21:51:50,039:INFO:Creating metrics dataframe
2023-02-12 21:51:50,043:INFO:Uploading results into container
2023-02-12 21:51:50,044:INFO:Uploading model into container now
2023-02-12 21:51:50,044:INFO:_master_model_container: 7
2023-02-12 21:51:50,044:INFO:_display_container: 2
2023-02-12 21:51:50,044:INFO:OrthogonalMatchingPursuit()
2023-02-12 21:51:50,044:INFO:create_model() successfully completed......................................
2023-02-12 21:51:50,185:INFO:SubProcess create_model() end ==================================
2023-02-12 21:51:50,185:INFO:Creating metrics dataframe
2023-02-12 21:51:50,195:INFO:Initializing Bayesian Ridge
2023-02-12 21:51:50,195:INFO:Total runtime is 0.11500278711318969 minutes
2023-02-12 21:51:50,198:INFO:SubProcess create_model() called ==================================
2023-02-12 21:51:50,199:INFO:Initializing create_model()
2023-02-12 21:51:50,199:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0FB9850>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A098C6D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:51:50,199:INFO:Checking exceptions
2023-02-12 21:51:50,199:INFO:Importing libraries
2023-02-12 21:51:50,199:INFO:Copying training dataset
2023-02-12 21:51:50,203:INFO:Defining folds
2023-02-12 21:51:50,203:INFO:Declaring metric variables
2023-02-12 21:51:50,208:INFO:Importing untrained model
2023-02-12 21:51:50,212:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:51:50,220:INFO:Starting cross validation
2023-02-12 21:51:50,222:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:51:50,419:INFO:Calculating mean and std
2023-02-12 21:51:50,420:INFO:Creating metrics dataframe
2023-02-12 21:51:50,422:INFO:Uploading results into container
2023-02-12 21:51:50,423:INFO:Uploading model into container now
2023-02-12 21:51:50,423:INFO:_master_model_container: 8
2023-02-12 21:51:50,423:INFO:_display_container: 2
2023-02-12 21:51:50,424:INFO:BayesianRidge()
2023-02-12 21:51:50,424:INFO:create_model() successfully completed......................................
2023-02-12 21:51:50,561:INFO:SubProcess create_model() end ==================================
2023-02-12 21:51:50,561:INFO:Creating metrics dataframe
2023-02-12 21:51:50,569:INFO:Initializing Passive Aggressive Regressor
2023-02-12 21:51:50,569:INFO:Total runtime is 0.121244211991628 minutes
2023-02-12 21:51:50,571:INFO:SubProcess create_model() called ==================================
2023-02-12 21:51:50,573:INFO:Initializing create_model()
2023-02-12 21:51:50,573:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A0FB9850>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A098C6D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:51:50,573:INFO:Checking exceptions
2023-02-12 21:51:50,573:INFO:Importing libraries
2023-02-12 21:51:50,573:INFO:Copying training dataset
2023-02-12 21:51:50,576:INFO:Defining folds
2023-02-12 21:51:50,576:INFO:Declaring metric variables
2023-02-12 21:51:50,580:INFO:Importing untrained model
2023-02-12 21:51:50,584:INFO:Passive Aggressive Regressor Imported successfully
2023-02-12 21:51:50,591:INFO:Starting cross validation
2023-02-12 21:51:50,592:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:51:55,945:INFO:PyCaret RegressionExperiment
2023-02-12 21:51:55,945:INFO:Logging name: reg-default-name
2023-02-12 21:51:55,945:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-12 21:51:55,945:INFO:version 3.0.0.rc8
2023-02-12 21:51:55,945:INFO:Initializing setup()
2023-02-12 21:51:55,945:INFO:self.USI: 26c3
2023-02-12 21:51:55,945:INFO:self._variable_keys: {'fold_generator', 'logging_param', 'transform_target_param', 'data', 'idx', 'X_test', 'gpu_n_jobs_param', 'memory', 'USI', 'y_test', 'fold_groups_param', 'y_train', 'seed', 'target_param', 'log_plots_param', 'exp_name_log', '_ml_usecase', 'X', 'X_train', 'y', 'fold_shuffle_param', 'exp_id', 'n_jobs_param', '_available_plots', 'html_param', 'gpu_param', 'pipeline'}
2023-02-12 21:51:55,945:INFO:Checking environment
2023-02-12 21:51:55,945:INFO:python_version: 3.9.13
2023-02-12 21:51:55,945:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-12 21:51:55,945:INFO:machine: AMD64
2023-02-12 21:51:55,945:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-12 21:51:55,950:INFO:Memory: svmem(total=16805040128, available=4574117888, percent=72.8, used=12230922240, free=4574117888)
2023-02-12 21:51:55,950:INFO:Physical Core: 4
2023-02-12 21:51:55,951:INFO:Logical Core: 8
2023-02-12 21:51:55,951:INFO:Checking libraries
2023-02-12 21:51:55,951:INFO:System:
2023-02-12 21:51:55,951:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-12 21:51:55,951:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-12 21:51:55,951:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-12 21:51:55,951:INFO:PyCaret required dependencies:
2023-02-12 21:51:55,951:INFO:                 pip: 23.0
2023-02-12 21:51:55,951:INFO:          setuptools: 58.1.0
2023-02-12 21:51:55,951:INFO:             pycaret: 3.0.0rc8
2023-02-12 21:51:55,951:INFO:             IPython: 8.7.0
2023-02-12 21:51:55,951:INFO:          ipywidgets: 8.0.4
2023-02-12 21:51:55,951:INFO:                tqdm: 4.64.1
2023-02-12 21:51:55,951:INFO:               numpy: 1.22.1
2023-02-12 21:51:55,951:INFO:              pandas: 1.5.2
2023-02-12 21:51:55,951:INFO:              jinja2: 3.1.2
2023-02-12 21:51:55,951:INFO:               scipy: 1.5.4
2023-02-12 21:51:55,951:INFO:              joblib: 1.2.0
2023-02-12 21:51:55,951:INFO:             sklearn: 1.1.3
2023-02-12 21:51:55,951:INFO:                pyod: 1.0.7
2023-02-12 21:51:55,952:INFO:            imblearn: 0.10.1
2023-02-12 21:51:55,952:INFO:   category_encoders: 2.6.0
2023-02-12 21:51:55,952:INFO:            lightgbm: 3.3.4
2023-02-12 21:51:55,952:INFO:               numba: 0.56.4
2023-02-12 21:51:55,952:INFO:            requests: 2.28.1
2023-02-12 21:51:55,952:INFO:          matplotlib: 3.6.2
2023-02-12 21:51:55,952:INFO:          scikitplot: 0.3.7
2023-02-12 21:51:55,952:INFO:         yellowbrick: 1.5
2023-02-12 21:51:55,952:INFO:              plotly: 5.11.0
2023-02-12 21:51:55,952:INFO:             kaleido: 0.2.1
2023-02-12 21:51:55,952:INFO:         statsmodels: 0.13.5
2023-02-12 21:51:55,952:INFO:              sktime: 0.15.1
2023-02-12 21:51:55,952:INFO:               tbats: 1.1.2
2023-02-12 21:51:55,952:INFO:            pmdarima: 2.0.2
2023-02-12 21:51:55,952:INFO:              psutil: 5.9.4
2023-02-12 21:51:55,952:INFO:PyCaret optional dependencies:
2023-02-12 21:51:55,952:INFO:                shap: 0.41.0
2023-02-12 21:51:55,952:INFO:           interpret: 0.3.0
2023-02-12 21:51:55,953:INFO:                umap: Not installed
2023-02-12 21:51:55,953:INFO:    pandas_profiling: 3.6.2
2023-02-12 21:51:55,953:INFO:  explainerdashboard: Not installed
2023-02-12 21:51:55,953:INFO:             autoviz: Not installed
2023-02-12 21:51:55,953:INFO:           fairlearn: Not installed
2023-02-12 21:51:55,953:INFO:             xgboost: 1.7.3
2023-02-12 21:51:55,953:INFO:            catboost: Not installed
2023-02-12 21:51:55,953:INFO:              kmodes: Not installed
2023-02-12 21:51:55,953:INFO:             mlxtend: Not installed
2023-02-12 21:51:55,953:INFO:       statsforecast: Not installed
2023-02-12 21:51:55,953:INFO:        tune_sklearn: Not installed
2023-02-12 21:51:55,953:INFO:                 ray: Not installed
2023-02-12 21:51:55,953:INFO:            hyperopt: Not installed
2023-02-12 21:51:55,953:INFO:              optuna: Not installed
2023-02-12 21:51:55,953:INFO:               skopt: Not installed
2023-02-12 21:51:55,953:INFO:              mlflow: Not installed
2023-02-12 21:51:55,953:INFO:              gradio: Not installed
2023-02-12 21:51:55,953:INFO:             fastapi: Not installed
2023-02-12 21:51:55,953:INFO:             uvicorn: Not installed
2023-02-12 21:51:55,953:INFO:              m2cgen: Not installed
2023-02-12 21:51:55,953:INFO:           evidently: Not installed
2023-02-12 21:51:55,954:INFO:                nltk: 3.8
2023-02-12 21:51:55,954:INFO:            pyLDAvis: Not installed
2023-02-12 21:51:55,954:INFO:              gensim: Not installed
2023-02-12 21:51:55,954:INFO:               spacy: Not installed
2023-02-12 21:51:55,954:INFO:           wordcloud: 1.8.2.2
2023-02-12 21:51:55,954:INFO:            textblob: Not installed
2023-02-12 21:51:55,954:INFO:               fugue: Not installed
2023-02-12 21:51:55,954:INFO:           streamlit: 1.16.0
2023-02-12 21:51:55,954:INFO:             prophet: Not installed
2023-02-12 21:51:55,954:INFO:None
2023-02-12 21:51:55,954:INFO:Set up data.
2023-02-12 21:51:55,959:INFO:Set up train/test split.
2023-02-12 21:51:55,961:INFO:Set up index.
2023-02-12 21:51:55,961:INFO:Set up folding strategy.
2023-02-12 21:51:55,961:INFO:Assigning column types.
2023-02-12 21:51:55,963:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-12 21:51:55,963:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:51:55,967:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:51:55,973:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,037:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,079:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,079:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:56,082:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:56,083:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,088:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,092:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,144:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,189:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,190:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:56,191:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:56,192:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-12 21:51:56,196:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,199:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,246:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,286:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,286:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:56,289:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:56,293:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,297:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,355:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,393:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,394:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:56,396:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:56,396:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-12 21:51:56,403:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,457:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,508:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,508:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:56,512:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:56,524:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,586:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,645:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,646:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:56,648:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:56,648:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-12 21:51:56,718:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,762:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,764:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:56,766:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:56,821:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,856:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,857:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:56,859:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:56,859:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-12 21:51:56,912:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:56,959:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:56,963:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:57,060:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:51:57,095:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:57,097:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:57,097:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-12 21:51:57,187:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:57,190:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:57,281:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:57,284:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:57,285:INFO:Preparing preprocessing pipeline...
2023-02-12 21:51:57,286:INFO:Set up column name cleaning.
2023-02-12 21:51:57,286:INFO:Set up simple imputation.
2023-02-12 21:51:57,326:INFO:Finished creating preprocessing pipeline.
2023-02-12 21:51:57,329:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-12 21:51:57,329:INFO:Creating final display dataframe.
2023-02-12 21:51:57,461:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              26c3
2023-02-12 21:51:57,569:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:57,571:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:57,664:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:51:57,667:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:51:57,667:INFO:setup() successfully completed in 1.72s...............
2023-02-12 21:51:57,667:INFO:Initializing compare_models()
2023-02-12 21:51:57,667:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-12 21:51:57,667:INFO:Checking exceptions
2023-02-12 21:51:57,669:INFO:Preparing display monitor
2023-02-12 21:51:57,690:INFO:Initializing Linear Regression
2023-02-12 21:51:57,690:INFO:Total runtime is 0.0 minutes
2023-02-12 21:51:57,693:INFO:SubProcess create_model() called ==================================
2023-02-12 21:51:57,694:INFO:Initializing create_model()
2023-02-12 21:51:57,694:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:51:57,694:INFO:Checking exceptions
2023-02-12 21:51:57,694:INFO:Importing libraries
2023-02-12 21:51:57,694:INFO:Copying training dataset
2023-02-12 21:51:57,695:INFO:Defining folds
2023-02-12 21:51:57,696:INFO:Declaring metric variables
2023-02-12 21:51:57,698:INFO:Importing untrained model
2023-02-12 21:51:57,703:INFO:Linear Regression Imported successfully
2023-02-12 21:51:57,709:INFO:Starting cross validation
2023-02-12 21:51:57,718:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:02,061:INFO:Calculating mean and std
2023-02-12 21:52:02,062:INFO:Creating metrics dataframe
2023-02-12 21:52:02,065:INFO:Uploading results into container
2023-02-12 21:52:02,065:INFO:Uploading model into container now
2023-02-12 21:52:02,067:INFO:_master_model_container: 1
2023-02-12 21:52:02,067:INFO:_display_container: 2
2023-02-12 21:52:02,067:INFO:LinearRegression(n_jobs=-1)
2023-02-12 21:52:02,067:INFO:create_model() successfully completed......................................
2023-02-12 21:52:02,219:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:02,220:INFO:Creating metrics dataframe
2023-02-12 21:52:02,225:INFO:Initializing Lasso Regression
2023-02-12 21:52:02,225:INFO:Total runtime is 0.07557417551676432 minutes
2023-02-12 21:52:02,228:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:02,228:INFO:Initializing create_model()
2023-02-12 21:52:02,229:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:02,229:INFO:Checking exceptions
2023-02-12 21:52:02,229:INFO:Importing libraries
2023-02-12 21:52:02,229:INFO:Copying training dataset
2023-02-12 21:52:02,232:INFO:Defining folds
2023-02-12 21:52:02,233:INFO:Declaring metric variables
2023-02-12 21:52:02,236:INFO:Importing untrained model
2023-02-12 21:52:02,238:INFO:Lasso Regression Imported successfully
2023-02-12 21:52:02,247:INFO:Starting cross validation
2023-02-12 21:52:02,248:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:02,385:INFO:Calculating mean and std
2023-02-12 21:52:02,386:INFO:Creating metrics dataframe
2023-02-12 21:52:02,388:INFO:Uploading results into container
2023-02-12 21:52:02,389:INFO:Uploading model into container now
2023-02-12 21:52:02,389:INFO:_master_model_container: 2
2023-02-12 21:52:02,389:INFO:_display_container: 2
2023-02-12 21:52:02,389:INFO:Lasso(random_state=123)
2023-02-12 21:52:02,389:INFO:create_model() successfully completed......................................
2023-02-12 21:52:02,537:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:02,537:INFO:Creating metrics dataframe
2023-02-12 21:52:02,543:INFO:Initializing Ridge Regression
2023-02-12 21:52:02,543:INFO:Total runtime is 0.08087855577468872 minutes
2023-02-12 21:52:02,548:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:02,549:INFO:Initializing create_model()
2023-02-12 21:52:02,549:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:02,549:INFO:Checking exceptions
2023-02-12 21:52:02,549:INFO:Importing libraries
2023-02-12 21:52:02,549:INFO:Copying training dataset
2023-02-12 21:52:02,551:INFO:Defining folds
2023-02-12 21:52:02,553:INFO:Declaring metric variables
2023-02-12 21:52:02,557:INFO:Importing untrained model
2023-02-12 21:52:02,559:INFO:Ridge Regression Imported successfully
2023-02-12 21:52:02,567:INFO:Starting cross validation
2023-02-12 21:52:02,568:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:02,699:INFO:Calculating mean and std
2023-02-12 21:52:02,700:INFO:Creating metrics dataframe
2023-02-12 21:52:02,702:INFO:Uploading results into container
2023-02-12 21:52:02,702:INFO:Uploading model into container now
2023-02-12 21:52:02,703:INFO:_master_model_container: 3
2023-02-12 21:52:02,703:INFO:_display_container: 2
2023-02-12 21:52:02,703:INFO:Ridge(random_state=123)
2023-02-12 21:52:02,703:INFO:create_model() successfully completed......................................
2023-02-12 21:52:02,850:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:02,850:INFO:Creating metrics dataframe
2023-02-12 21:52:02,859:INFO:Initializing Elastic Net
2023-02-12 21:52:02,859:INFO:Total runtime is 0.08614124457041422 minutes
2023-02-12 21:52:02,863:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:02,863:INFO:Initializing create_model()
2023-02-12 21:52:02,863:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:02,863:INFO:Checking exceptions
2023-02-12 21:52:02,863:INFO:Importing libraries
2023-02-12 21:52:02,864:INFO:Copying training dataset
2023-02-12 21:52:02,867:INFO:Defining folds
2023-02-12 21:52:02,867:INFO:Declaring metric variables
2023-02-12 21:52:02,871:INFO:Importing untrained model
2023-02-12 21:52:02,874:INFO:Elastic Net Imported successfully
2023-02-12 21:52:02,881:INFO:Starting cross validation
2023-02-12 21:52:02,881:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:03,007:INFO:Calculating mean and std
2023-02-12 21:52:03,008:INFO:Creating metrics dataframe
2023-02-12 21:52:03,013:INFO:Uploading results into container
2023-02-12 21:52:03,013:INFO:Uploading model into container now
2023-02-12 21:52:03,014:INFO:_master_model_container: 4
2023-02-12 21:52:03,014:INFO:_display_container: 2
2023-02-12 21:52:03,014:INFO:ElasticNet(random_state=123)
2023-02-12 21:52:03,014:INFO:create_model() successfully completed......................................
2023-02-12 21:52:03,158:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:03,158:INFO:Creating metrics dataframe
2023-02-12 21:52:03,167:INFO:Initializing Least Angle Regression
2023-02-12 21:52:03,167:INFO:Total runtime is 0.09127573569615681 minutes
2023-02-12 21:52:03,170:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:03,171:INFO:Initializing create_model()
2023-02-12 21:52:03,171:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:03,171:INFO:Checking exceptions
2023-02-12 21:52:03,171:INFO:Importing libraries
2023-02-12 21:52:03,171:INFO:Copying training dataset
2023-02-12 21:52:03,173:INFO:Defining folds
2023-02-12 21:52:03,174:INFO:Declaring metric variables
2023-02-12 21:52:03,179:INFO:Importing untrained model
2023-02-12 21:52:03,182:INFO:Least Angle Regression Imported successfully
2023-02-12 21:52:03,189:INFO:Starting cross validation
2023-02-12 21:52:03,190:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:03,230:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,239:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,249:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,258:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,266:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,276:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,284:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,294:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,301:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,305:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,318:INFO:Calculating mean and std
2023-02-12 21:52:03,319:INFO:Creating metrics dataframe
2023-02-12 21:52:03,321:INFO:Uploading results into container
2023-02-12 21:52:03,321:INFO:Uploading model into container now
2023-02-12 21:52:03,321:INFO:_master_model_container: 5
2023-02-12 21:52:03,321:INFO:_display_container: 2
2023-02-12 21:52:03,321:INFO:Lars(random_state=123)
2023-02-12 21:52:03,321:INFO:create_model() successfully completed......................................
2023-02-12 21:52:03,482:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:03,482:INFO:Creating metrics dataframe
2023-02-12 21:52:03,492:INFO:Initializing Lasso Least Angle Regression
2023-02-12 21:52:03,492:INFO:Total runtime is 0.0966908057530721 minutes
2023-02-12 21:52:03,496:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:03,498:INFO:Initializing create_model()
2023-02-12 21:52:03,498:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:03,498:INFO:Checking exceptions
2023-02-12 21:52:03,498:INFO:Importing libraries
2023-02-12 21:52:03,498:INFO:Copying training dataset
2023-02-12 21:52:03,501:INFO:Defining folds
2023-02-12 21:52:03,501:INFO:Declaring metric variables
2023-02-12 21:52:03,504:INFO:Importing untrained model
2023-02-12 21:52:03,508:INFO:Lasso Least Angle Regression Imported successfully
2023-02-12 21:52:03,516:INFO:Starting cross validation
2023-02-12 21:52:03,517:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:03,553:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:03,561:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:03,572:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:03,581:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:03,588:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:03,597:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:03,604:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:03,615:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:03,622:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:03,628:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:03,641:INFO:Calculating mean and std
2023-02-12 21:52:03,642:INFO:Creating metrics dataframe
2023-02-12 21:52:03,645:INFO:Uploading results into container
2023-02-12 21:52:03,646:INFO:Uploading model into container now
2023-02-12 21:52:03,646:INFO:_master_model_container: 6
2023-02-12 21:52:03,646:INFO:_display_container: 2
2023-02-12 21:52:03,647:INFO:LassoLars(random_state=123)
2023-02-12 21:52:03,647:INFO:create_model() successfully completed......................................
2023-02-12 21:52:03,794:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:03,794:INFO:Creating metrics dataframe
2023-02-12 21:52:03,801:INFO:Initializing Orthogonal Matching Pursuit
2023-02-12 21:52:03,801:INFO:Total runtime is 0.10184062321980794 minutes
2023-02-12 21:52:03,810:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:03,810:INFO:Initializing create_model()
2023-02-12 21:52:03,811:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:03,811:INFO:Checking exceptions
2023-02-12 21:52:03,811:INFO:Importing libraries
2023-02-12 21:52:03,811:INFO:Copying training dataset
2023-02-12 21:52:03,814:INFO:Defining folds
2023-02-12 21:52:03,815:INFO:Declaring metric variables
2023-02-12 21:52:03,819:INFO:Importing untrained model
2023-02-12 21:52:03,823:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-12 21:52:03,830:INFO:Starting cross validation
2023-02-12 21:52:03,831:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:03,941:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,948:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,973:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,986:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:03,995:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:04,003:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:04,016:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:04,023:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:04,031:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:04,036:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:04,049:INFO:Calculating mean and std
2023-02-12 21:52:04,049:INFO:Creating metrics dataframe
2023-02-12 21:52:04,052:INFO:Uploading results into container
2023-02-12 21:52:04,053:INFO:Uploading model into container now
2023-02-12 21:52:04,053:INFO:_master_model_container: 7
2023-02-12 21:52:04,053:INFO:_display_container: 2
2023-02-12 21:52:04,053:INFO:OrthogonalMatchingPursuit()
2023-02-12 21:52:04,053:INFO:create_model() successfully completed......................................
2023-02-12 21:52:04,204:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:04,204:INFO:Creating metrics dataframe
2023-02-12 21:52:04,212:INFO:Initializing Bayesian Ridge
2023-02-12 21:52:04,212:INFO:Total runtime is 0.10870170990626017 minutes
2023-02-12 21:52:04,216:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:04,217:INFO:Initializing create_model()
2023-02-12 21:52:04,217:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:04,217:INFO:Checking exceptions
2023-02-12 21:52:04,217:INFO:Importing libraries
2023-02-12 21:52:04,217:INFO:Copying training dataset
2023-02-12 21:52:04,220:INFO:Defining folds
2023-02-12 21:52:04,220:INFO:Declaring metric variables
2023-02-12 21:52:04,223:INFO:Importing untrained model
2023-02-12 21:52:04,228:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:52:04,235:INFO:Starting cross validation
2023-02-12 21:52:04,236:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:04,366:INFO:Calculating mean and std
2023-02-12 21:52:04,367:INFO:Creating metrics dataframe
2023-02-12 21:52:04,370:INFO:Uploading results into container
2023-02-12 21:52:04,370:INFO:Uploading model into container now
2023-02-12 21:52:04,370:INFO:_master_model_container: 8
2023-02-12 21:52:04,370:INFO:_display_container: 2
2023-02-12 21:52:04,371:INFO:BayesianRidge()
2023-02-12 21:52:04,371:INFO:create_model() successfully completed......................................
2023-02-12 21:52:04,523:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:04,523:INFO:Creating metrics dataframe
2023-02-12 21:52:04,535:INFO:Initializing Passive Aggressive Regressor
2023-02-12 21:52:04,535:INFO:Total runtime is 0.11407691240310669 minutes
2023-02-12 21:52:04,537:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:04,537:INFO:Initializing create_model()
2023-02-12 21:52:04,537:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:04,538:INFO:Checking exceptions
2023-02-12 21:52:04,538:INFO:Importing libraries
2023-02-12 21:52:04,538:INFO:Copying training dataset
2023-02-12 21:52:04,540:INFO:Defining folds
2023-02-12 21:52:04,540:INFO:Declaring metric variables
2023-02-12 21:52:04,545:INFO:Importing untrained model
2023-02-12 21:52:04,549:INFO:Passive Aggressive Regressor Imported successfully
2023-02-12 21:52:04,555:INFO:Starting cross validation
2023-02-12 21:52:04,556:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:04,684:INFO:Calculating mean and std
2023-02-12 21:52:04,685:INFO:Creating metrics dataframe
2023-02-12 21:52:04,688:INFO:Uploading results into container
2023-02-12 21:52:04,688:INFO:Uploading model into container now
2023-02-12 21:52:04,688:INFO:_master_model_container: 9
2023-02-12 21:52:04,688:INFO:_display_container: 2
2023-02-12 21:52:04,690:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-12 21:52:04,690:INFO:create_model() successfully completed......................................
2023-02-12 21:52:04,837:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:04,837:INFO:Creating metrics dataframe
2023-02-12 21:52:04,849:INFO:Initializing Huber Regressor
2023-02-12 21:52:04,849:INFO:Total runtime is 0.11930561860402425 minutes
2023-02-12 21:52:04,851:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:04,851:INFO:Initializing create_model()
2023-02-12 21:52:04,852:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:04,852:INFO:Checking exceptions
2023-02-12 21:52:04,852:INFO:Importing libraries
2023-02-12 21:52:04,852:INFO:Copying training dataset
2023-02-12 21:52:04,856:INFO:Defining folds
2023-02-12 21:52:04,857:INFO:Declaring metric variables
2023-02-12 21:52:04,861:INFO:Importing untrained model
2023-02-12 21:52:04,864:INFO:Huber Regressor Imported successfully
2023-02-12 21:52:04,870:INFO:Starting cross validation
2023-02-12 21:52:04,871:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:04,933:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:04,944:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:04,948:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:04,973:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:04,987:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:05,002:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:05,005:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:05,017:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:05,029:INFO:Calculating mean and std
2023-02-12 21:52:05,030:INFO:Creating metrics dataframe
2023-02-12 21:52:05,033:INFO:Uploading results into container
2023-02-12 21:52:05,033:INFO:Uploading model into container now
2023-02-12 21:52:05,033:INFO:_master_model_container: 10
2023-02-12 21:52:05,033:INFO:_display_container: 2
2023-02-12 21:52:05,034:INFO:HuberRegressor()
2023-02-12 21:52:05,034:INFO:create_model() successfully completed......................................
2023-02-12 21:52:05,178:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:05,179:INFO:Creating metrics dataframe
2023-02-12 21:52:05,186:INFO:Initializing K Neighbors Regressor
2023-02-12 21:52:05,186:INFO:Total runtime is 0.12493322292963664 minutes
2023-02-12 21:52:05,188:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:05,189:INFO:Initializing create_model()
2023-02-12 21:52:05,189:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:05,189:INFO:Checking exceptions
2023-02-12 21:52:05,189:INFO:Importing libraries
2023-02-12 21:52:05,189:INFO:Copying training dataset
2023-02-12 21:52:05,192:INFO:Defining folds
2023-02-12 21:52:05,193:INFO:Declaring metric variables
2023-02-12 21:52:05,196:INFO:Importing untrained model
2023-02-12 21:52:05,200:INFO:K Neighbors Regressor Imported successfully
2023-02-12 21:52:05,206:INFO:Starting cross validation
2023-02-12 21:52:05,207:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:05,348:INFO:Calculating mean and std
2023-02-12 21:52:05,348:INFO:Creating metrics dataframe
2023-02-12 21:52:05,351:INFO:Uploading results into container
2023-02-12 21:52:05,352:INFO:Uploading model into container now
2023-02-12 21:52:05,352:INFO:_master_model_container: 11
2023-02-12 21:52:05,352:INFO:_display_container: 2
2023-02-12 21:52:05,352:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-12 21:52:05,353:INFO:create_model() successfully completed......................................
2023-02-12 21:52:05,499:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:05,500:INFO:Creating metrics dataframe
2023-02-12 21:52:05,512:INFO:Initializing Decision Tree Regressor
2023-02-12 21:52:05,512:INFO:Total runtime is 0.1303563117980957 minutes
2023-02-12 21:52:05,514:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:05,514:INFO:Initializing create_model()
2023-02-12 21:52:05,514:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:05,516:INFO:Checking exceptions
2023-02-12 21:52:05,516:INFO:Importing libraries
2023-02-12 21:52:05,516:INFO:Copying training dataset
2023-02-12 21:52:05,519:INFO:Defining folds
2023-02-12 21:52:05,519:INFO:Declaring metric variables
2023-02-12 21:52:05,523:INFO:Importing untrained model
2023-02-12 21:52:05,527:INFO:Decision Tree Regressor Imported successfully
2023-02-12 21:52:05,536:INFO:Starting cross validation
2023-02-12 21:52:05,537:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:05,664:INFO:Calculating mean and std
2023-02-12 21:52:05,665:INFO:Creating metrics dataframe
2023-02-12 21:52:05,667:INFO:Uploading results into container
2023-02-12 21:52:05,668:INFO:Uploading model into container now
2023-02-12 21:52:05,668:INFO:_master_model_container: 12
2023-02-12 21:52:05,668:INFO:_display_container: 2
2023-02-12 21:52:05,668:INFO:DecisionTreeRegressor(random_state=123)
2023-02-12 21:52:05,668:INFO:create_model() successfully completed......................................
2023-02-12 21:52:05,821:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:05,821:INFO:Creating metrics dataframe
2023-02-12 21:52:05,832:INFO:Initializing Random Forest Regressor
2023-02-12 21:52:05,833:INFO:Total runtime is 0.13570278882980347 minutes
2023-02-12 21:52:05,835:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:05,836:INFO:Initializing create_model()
2023-02-12 21:52:05,836:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:05,836:INFO:Checking exceptions
2023-02-12 21:52:05,836:INFO:Importing libraries
2023-02-12 21:52:05,836:INFO:Copying training dataset
2023-02-12 21:52:05,839:INFO:Defining folds
2023-02-12 21:52:05,839:INFO:Declaring metric variables
2023-02-12 21:52:05,844:INFO:Importing untrained model
2023-02-12 21:52:05,848:INFO:Random Forest Regressor Imported successfully
2023-02-12 21:52:05,855:INFO:Starting cross validation
2023-02-12 21:52:05,856:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:06,340:INFO:Calculating mean and std
2023-02-12 21:52:06,341:INFO:Creating metrics dataframe
2023-02-12 21:52:06,343:INFO:Uploading results into container
2023-02-12 21:52:06,343:INFO:Uploading model into container now
2023-02-12 21:52:06,344:INFO:_master_model_container: 13
2023-02-12 21:52:06,344:INFO:_display_container: 2
2023-02-12 21:52:06,344:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-12 21:52:06,344:INFO:create_model() successfully completed......................................
2023-02-12 21:52:06,489:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:06,489:INFO:Creating metrics dataframe
2023-02-12 21:52:06,499:INFO:Initializing Extra Trees Regressor
2023-02-12 21:52:06,499:INFO:Total runtime is 0.14681075811386107 minutes
2023-02-12 21:52:06,502:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:06,502:INFO:Initializing create_model()
2023-02-12 21:52:06,502:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:06,502:INFO:Checking exceptions
2023-02-12 21:52:06,503:INFO:Importing libraries
2023-02-12 21:52:06,503:INFO:Copying training dataset
2023-02-12 21:52:06,506:INFO:Defining folds
2023-02-12 21:52:06,507:INFO:Declaring metric variables
2023-02-12 21:52:06,511:INFO:Importing untrained model
2023-02-12 21:52:06,515:INFO:Extra Trees Regressor Imported successfully
2023-02-12 21:52:06,522:INFO:Starting cross validation
2023-02-12 21:52:06,523:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:06,907:INFO:Calculating mean and std
2023-02-12 21:52:06,909:INFO:Creating metrics dataframe
2023-02-12 21:52:06,911:INFO:Uploading results into container
2023-02-12 21:52:06,912:INFO:Uploading model into container now
2023-02-12 21:52:06,912:INFO:_master_model_container: 14
2023-02-12 21:52:06,912:INFO:_display_container: 2
2023-02-12 21:52:06,912:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-12 21:52:06,913:INFO:create_model() successfully completed......................................
2023-02-12 21:52:07,055:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:07,055:INFO:Creating metrics dataframe
2023-02-12 21:52:07,065:INFO:Initializing AdaBoost Regressor
2023-02-12 21:52:07,065:INFO:Total runtime is 0.15623915990193685 minutes
2023-02-12 21:52:07,067:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:07,069:INFO:Initializing create_model()
2023-02-12 21:52:07,069:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:07,069:INFO:Checking exceptions
2023-02-12 21:52:07,069:INFO:Importing libraries
2023-02-12 21:52:07,069:INFO:Copying training dataset
2023-02-12 21:52:07,071:INFO:Defining folds
2023-02-12 21:52:07,071:INFO:Declaring metric variables
2023-02-12 21:52:07,074:INFO:Importing untrained model
2023-02-12 21:52:07,079:INFO:AdaBoost Regressor Imported successfully
2023-02-12 21:52:07,086:INFO:Starting cross validation
2023-02-12 21:52:07,087:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:07,300:INFO:Calculating mean and std
2023-02-12 21:52:07,301:INFO:Creating metrics dataframe
2023-02-12 21:52:07,303:INFO:Uploading results into container
2023-02-12 21:52:07,304:INFO:Uploading model into container now
2023-02-12 21:52:07,304:INFO:_master_model_container: 15
2023-02-12 21:52:07,305:INFO:_display_container: 2
2023-02-12 21:52:07,305:INFO:AdaBoostRegressor(random_state=123)
2023-02-12 21:52:07,305:INFO:create_model() successfully completed......................................
2023-02-12 21:52:07,452:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:07,452:INFO:Creating metrics dataframe
2023-02-12 21:52:07,462:INFO:Initializing Gradient Boosting Regressor
2023-02-12 21:52:07,462:INFO:Total runtime is 0.1628683606783549 minutes
2023-02-12 21:52:07,465:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:07,467:INFO:Initializing create_model()
2023-02-12 21:52:07,467:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:07,467:INFO:Checking exceptions
2023-02-12 21:52:07,467:INFO:Importing libraries
2023-02-12 21:52:07,467:INFO:Copying training dataset
2023-02-12 21:52:07,469:INFO:Defining folds
2023-02-12 21:52:07,469:INFO:Declaring metric variables
2023-02-12 21:52:07,472:INFO:Importing untrained model
2023-02-12 21:52:07,478:INFO:Gradient Boosting Regressor Imported successfully
2023-02-12 21:52:07,484:INFO:Starting cross validation
2023-02-12 21:52:07,486:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:07,665:INFO:Calculating mean and std
2023-02-12 21:52:07,666:INFO:Creating metrics dataframe
2023-02-12 21:52:07,669:INFO:Uploading results into container
2023-02-12 21:52:07,669:INFO:Uploading model into container now
2023-02-12 21:52:07,669:INFO:_master_model_container: 16
2023-02-12 21:52:07,669:INFO:_display_container: 2
2023-02-12 21:52:07,670:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:52:07,670:INFO:create_model() successfully completed......................................
2023-02-12 21:52:07,818:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:07,819:INFO:Creating metrics dataframe
2023-02-12 21:52:07,829:INFO:Initializing Extreme Gradient Boosting
2023-02-12 21:52:07,829:INFO:Total runtime is 0.16897453069686888 minutes
2023-02-12 21:52:07,831:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:07,832:INFO:Initializing create_model()
2023-02-12 21:52:07,832:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:07,832:INFO:Checking exceptions
2023-02-12 21:52:07,832:INFO:Importing libraries
2023-02-12 21:52:07,832:INFO:Copying training dataset
2023-02-12 21:52:07,835:INFO:Defining folds
2023-02-12 21:52:07,835:INFO:Declaring metric variables
2023-02-12 21:52:07,838:INFO:Importing untrained model
2023-02-12 21:52:07,844:INFO:Extreme Gradient Boosting Imported successfully
2023-02-12 21:52:07,851:INFO:Starting cross validation
2023-02-12 21:52:07,851:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:08,113:INFO:Calculating mean and std
2023-02-12 21:52:08,113:INFO:Creating metrics dataframe
2023-02-12 21:52:08,116:INFO:Uploading results into container
2023-02-12 21:52:08,116:INFO:Uploading model into container now
2023-02-12 21:52:08,116:INFO:_master_model_container: 17
2023-02-12 21:52:08,118:INFO:_display_container: 2
2023-02-12 21:52:08,118:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-12 21:52:08,119:INFO:create_model() successfully completed......................................
2023-02-12 21:52:08,267:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:08,267:INFO:Creating metrics dataframe
2023-02-12 21:52:08,272:INFO:Initializing Light Gradient Boosting Machine
2023-02-12 21:52:08,272:INFO:Total runtime is 0.17636800607045489 minutes
2023-02-12 21:52:08,279:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:08,279:INFO:Initializing create_model()
2023-02-12 21:52:08,279:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:08,279:INFO:Checking exceptions
2023-02-12 21:52:08,281:INFO:Importing libraries
2023-02-12 21:52:08,281:INFO:Copying training dataset
2023-02-12 21:52:08,284:INFO:Defining folds
2023-02-12 21:52:08,284:INFO:Declaring metric variables
2023-02-12 21:52:08,289:INFO:Importing untrained model
2023-02-12 21:52:08,292:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-12 21:52:08,301:INFO:Starting cross validation
2023-02-12 21:52:08,301:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:08,542:INFO:Calculating mean and std
2023-02-12 21:52:08,543:INFO:Creating metrics dataframe
2023-02-12 21:52:08,545:INFO:Uploading results into container
2023-02-12 21:52:08,545:INFO:Uploading model into container now
2023-02-12 21:52:08,545:INFO:_master_model_container: 18
2023-02-12 21:52:08,547:INFO:_display_container: 2
2023-02-12 21:52:08,547:INFO:LGBMRegressor(random_state=123)
2023-02-12 21:52:08,547:INFO:create_model() successfully completed......................................
2023-02-12 21:52:08,712:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:08,712:INFO:Creating metrics dataframe
2023-02-12 21:52:08,729:INFO:Initializing Dummy Regressor
2023-02-12 21:52:08,730:INFO:Total runtime is 0.1839935223261515 minutes
2023-02-12 21:52:08,734:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:08,735:INFO:Initializing create_model()
2023-02-12 21:52:08,735:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024095868220>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:08,735:INFO:Checking exceptions
2023-02-12 21:52:08,735:INFO:Importing libraries
2023-02-12 21:52:08,735:INFO:Copying training dataset
2023-02-12 21:52:08,738:INFO:Defining folds
2023-02-12 21:52:08,738:INFO:Declaring metric variables
2023-02-12 21:52:08,743:INFO:Importing untrained model
2023-02-12 21:52:08,748:INFO:Dummy Regressor Imported successfully
2023-02-12 21:52:08,762:INFO:Starting cross validation
2023-02-12 21:52:08,763:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:08,893:INFO:Calculating mean and std
2023-02-12 21:52:08,895:INFO:Creating metrics dataframe
2023-02-12 21:52:08,899:INFO:Uploading results into container
2023-02-12 21:52:08,899:INFO:Uploading model into container now
2023-02-12 21:52:08,900:INFO:_master_model_container: 19
2023-02-12 21:52:08,900:INFO:_display_container: 2
2023-02-12 21:52:08,900:INFO:DummyRegressor()
2023-02-12 21:52:08,900:INFO:create_model() successfully completed......................................
2023-02-12 21:52:09,096:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:09,096:INFO:Creating metrics dataframe
2023-02-12 21:52:09,117:INFO:Initializing create_model()
2023-02-12 21:52:09,118:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:09,118:INFO:Checking exceptions
2023-02-12 21:52:09,119:INFO:Importing libraries
2023-02-12 21:52:09,120:INFO:Copying training dataset
2023-02-12 21:52:09,122:INFO:Defining folds
2023-02-12 21:52:09,123:INFO:Declaring metric variables
2023-02-12 21:52:09,123:INFO:Importing untrained model
2023-02-12 21:52:09,123:INFO:Declaring custom model
2023-02-12 21:52:09,124:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:52:09,125:INFO:Cross validation set to False
2023-02-12 21:52:09,125:INFO:Fitting Model
2023-02-12 21:52:09,150:INFO:BayesianRidge()
2023-02-12 21:52:09,150:INFO:create_model() successfully completed......................................
2023-02-12 21:52:09,333:INFO:_master_model_container: 19
2023-02-12 21:52:09,333:INFO:_display_container: 2
2023-02-12 21:52:09,333:INFO:BayesianRidge()
2023-02-12 21:52:09,333:INFO:compare_models() successfully completed......................................
2023-02-12 21:52:09,333:INFO:Initializing automl()
2023-02-12 21:52:09,333:INFO:automl(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, optimize=R2, use_holdout=False, turbo=True, return_train_score=False)
2023-02-12 21:52:09,335:INFO:Model Selection Basis : CV Results on Training set
2023-02-12 21:52:09,335:INFO:Checking model 0
2023-02-12 21:52:09,335:INFO:Checking model 1
2023-02-12 21:52:09,335:INFO:Checking model 2
2023-02-12 21:52:09,335:INFO:Checking model 3
2023-02-12 21:52:09,336:INFO:Checking model 4
2023-02-12 21:52:09,336:INFO:Checking model 5
2023-02-12 21:52:09,336:INFO:Checking model 6
2023-02-12 21:52:09,336:INFO:Checking model 7
2023-02-12 21:52:09,336:INFO:Checking model 8
2023-02-12 21:52:09,336:INFO:Checking model 9
2023-02-12 21:52:09,336:INFO:Checking model 10
2023-02-12 21:52:09,337:INFO:Checking model 11
2023-02-12 21:52:09,337:INFO:Checking model 12
2023-02-12 21:52:09,337:INFO:Checking model 13
2023-02-12 21:52:09,337:INFO:Checking model 14
2023-02-12 21:52:09,337:INFO:Checking model 15
2023-02-12 21:52:09,337:INFO:Checking model 16
2023-02-12 21:52:09,338:INFO:Checking model 17
2023-02-12 21:52:09,338:INFO:Checking model 18
2023-02-12 21:52:09,338:INFO:Initializing create_model()
2023-02-12 21:52:09,338:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A28B0CD0>, estimator=BayesianRidge(), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:09,338:INFO:Checking exceptions
2023-02-12 21:52:09,340:INFO:Importing libraries
2023-02-12 21:52:09,340:INFO:Copying training dataset
2023-02-12 21:52:09,342:INFO:Defining folds
2023-02-12 21:52:09,342:INFO:Declaring metric variables
2023-02-12 21:52:09,342:INFO:Importing untrained model
2023-02-12 21:52:09,342:INFO:Declaring custom model
2023-02-12 21:52:09,342:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:52:09,343:INFO:Cross validation set to False
2023-02-12 21:52:09,343:INFO:Fitting Model
2023-02-12 21:52:09,349:INFO:BayesianRidge()
2023-02-12 21:52:09,350:INFO:create_model() successfully completed......................................
2023-02-12 21:52:09,647:INFO:BayesianRidge()
2023-02-12 21:52:09,647:INFO:automl() successfully completed......................................
2023-02-12 21:52:35,909:INFO:PyCaret RegressionExperiment
2023-02-12 21:52:35,909:INFO:Logging name: reg-default-name
2023-02-12 21:52:35,909:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-12 21:52:35,909:INFO:version 3.0.0.rc8
2023-02-12 21:52:35,909:INFO:Initializing setup()
2023-02-12 21:52:35,909:INFO:self.USI: 57c7
2023-02-12 21:52:35,909:INFO:self._variable_keys: {'fold_generator', 'logging_param', 'transform_target_param', 'data', 'idx', 'X_test', 'gpu_n_jobs_param', 'memory', 'USI', 'y_test', 'fold_groups_param', 'y_train', 'seed', 'target_param', 'log_plots_param', 'exp_name_log', '_ml_usecase', 'X', 'X_train', 'y', 'fold_shuffle_param', 'exp_id', 'n_jobs_param', '_available_plots', 'html_param', 'gpu_param', 'pipeline'}
2023-02-12 21:52:35,909:INFO:Checking environment
2023-02-12 21:52:35,909:INFO:python_version: 3.9.13
2023-02-12 21:52:35,909:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-12 21:52:35,909:INFO:machine: AMD64
2023-02-12 21:52:35,909:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-12 21:52:35,916:INFO:Memory: svmem(total=16805040128, available=3578183680, percent=78.7, used=13226856448, free=3578183680)
2023-02-12 21:52:35,917:INFO:Physical Core: 4
2023-02-12 21:52:35,917:INFO:Logical Core: 8
2023-02-12 21:52:35,917:INFO:Checking libraries
2023-02-12 21:52:35,917:INFO:System:
2023-02-12 21:52:35,917:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-12 21:52:35,917:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-12 21:52:35,917:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-12 21:52:35,917:INFO:PyCaret required dependencies:
2023-02-12 21:52:35,917:INFO:                 pip: 23.0
2023-02-12 21:52:35,917:INFO:          setuptools: 58.1.0
2023-02-12 21:52:35,917:INFO:             pycaret: 3.0.0rc8
2023-02-12 21:52:35,917:INFO:             IPython: 8.7.0
2023-02-12 21:52:35,917:INFO:          ipywidgets: 8.0.4
2023-02-12 21:52:35,917:INFO:                tqdm: 4.64.1
2023-02-12 21:52:35,917:INFO:               numpy: 1.22.1
2023-02-12 21:52:35,917:INFO:              pandas: 1.5.2
2023-02-12 21:52:35,917:INFO:              jinja2: 3.1.2
2023-02-12 21:52:35,918:INFO:               scipy: 1.5.4
2023-02-12 21:52:35,918:INFO:              joblib: 1.2.0
2023-02-12 21:52:35,918:INFO:             sklearn: 1.1.3
2023-02-12 21:52:35,918:INFO:                pyod: 1.0.7
2023-02-12 21:52:35,918:INFO:            imblearn: 0.10.1
2023-02-12 21:52:35,918:INFO:   category_encoders: 2.6.0
2023-02-12 21:52:35,918:INFO:            lightgbm: 3.3.4
2023-02-12 21:52:35,918:INFO:               numba: 0.56.4
2023-02-12 21:52:35,918:INFO:            requests: 2.28.1
2023-02-12 21:52:35,918:INFO:          matplotlib: 3.6.2
2023-02-12 21:52:35,918:INFO:          scikitplot: 0.3.7
2023-02-12 21:52:35,918:INFO:         yellowbrick: 1.5
2023-02-12 21:52:35,918:INFO:              plotly: 5.11.0
2023-02-12 21:52:35,918:INFO:             kaleido: 0.2.1
2023-02-12 21:52:35,918:INFO:         statsmodels: 0.13.5
2023-02-12 21:52:35,918:INFO:              sktime: 0.15.1
2023-02-12 21:52:35,918:INFO:               tbats: 1.1.2
2023-02-12 21:52:35,918:INFO:            pmdarima: 2.0.2
2023-02-12 21:52:35,918:INFO:              psutil: 5.9.4
2023-02-12 21:52:35,918:INFO:PyCaret optional dependencies:
2023-02-12 21:52:35,918:INFO:                shap: 0.41.0
2023-02-12 21:52:35,918:INFO:           interpret: 0.3.0
2023-02-12 21:52:35,919:INFO:                umap: Not installed
2023-02-12 21:52:35,919:INFO:    pandas_profiling: 3.6.2
2023-02-12 21:52:35,919:INFO:  explainerdashboard: Not installed
2023-02-12 21:52:35,919:INFO:             autoviz: Not installed
2023-02-12 21:52:35,919:INFO:           fairlearn: Not installed
2023-02-12 21:52:35,919:INFO:             xgboost: 1.7.3
2023-02-12 21:52:35,919:INFO:            catboost: Not installed
2023-02-12 21:52:35,919:INFO:              kmodes: Not installed
2023-02-12 21:52:35,919:INFO:             mlxtend: Not installed
2023-02-12 21:52:35,919:INFO:       statsforecast: Not installed
2023-02-12 21:52:35,919:INFO:        tune_sklearn: Not installed
2023-02-12 21:52:35,919:INFO:                 ray: Not installed
2023-02-12 21:52:35,919:INFO:            hyperopt: Not installed
2023-02-12 21:52:35,919:INFO:              optuna: Not installed
2023-02-12 21:52:35,919:INFO:               skopt: Not installed
2023-02-12 21:52:35,919:INFO:              mlflow: Not installed
2023-02-12 21:52:35,919:INFO:              gradio: Not installed
2023-02-12 21:52:35,919:INFO:             fastapi: Not installed
2023-02-12 21:52:35,919:INFO:             uvicorn: Not installed
2023-02-12 21:52:35,919:INFO:              m2cgen: Not installed
2023-02-12 21:52:35,919:INFO:           evidently: Not installed
2023-02-12 21:52:35,919:INFO:                nltk: 3.8
2023-02-12 21:52:35,919:INFO:            pyLDAvis: Not installed
2023-02-12 21:52:35,919:INFO:              gensim: Not installed
2023-02-12 21:52:35,919:INFO:               spacy: Not installed
2023-02-12 21:52:35,920:INFO:           wordcloud: 1.8.2.2
2023-02-12 21:52:35,920:INFO:            textblob: Not installed
2023-02-12 21:52:35,920:INFO:               fugue: Not installed
2023-02-12 21:52:35,920:INFO:           streamlit: 1.16.0
2023-02-12 21:52:35,920:INFO:             prophet: Not installed
2023-02-12 21:52:35,920:INFO:None
2023-02-12 21:52:35,920:INFO:Set up data.
2023-02-12 21:52:35,925:INFO:Set up train/test split.
2023-02-12 21:52:35,928:INFO:Set up index.
2023-02-12 21:52:35,928:INFO:Set up folding strategy.
2023-02-12 21:52:35,928:INFO:Assigning column types.
2023-02-12 21:52:35,930:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-12 21:52:35,930:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:52:35,936:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:52:35,940:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:52:35,994:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,033:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,034:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:36,037:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:36,037:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,040:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,044:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,089:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,122:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,123:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:36,125:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:36,125:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-12 21:52:36,129:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,132:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,178:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,212:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,212:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:36,215:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:36,218:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,223:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,273:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,307:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,308:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:36,311:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:36,311:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-12 21:52:36,320:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,367:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,399:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,399:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:36,399:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:36,399:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,453:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,486:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,486:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:36,488:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:36,488:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-12 21:52:36,538:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,572:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,573:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:36,575:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:36,625:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,660:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,661:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:36,662:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:36,663:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-12 21:52:36,715:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,748:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:36,750:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:36,801:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:52:36,834:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:36,836:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:36,836:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-12 21:52:36,934:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:36,936:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:37,069:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:37,072:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:37,073:INFO:Preparing preprocessing pipeline...
2023-02-12 21:52:37,074:INFO:Set up column name cleaning.
2023-02-12 21:52:37,074:INFO:Set up simple imputation.
2023-02-12 21:52:37,081:INFO:Finished creating preprocessing pipeline.
2023-02-12 21:52:37,084:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-12 21:52:37,084:INFO:Creating final display dataframe.
2023-02-12 21:52:37,131:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              57c7
2023-02-12 21:52:37,236:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:37,238:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:37,337:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:52:37,340:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:52:37,340:INFO:setup() successfully completed in 1.43s...............
2023-02-12 21:52:37,340:INFO:Initializing compare_models()
2023-02-12 21:52:37,340:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-12 21:52:37,340:INFO:Checking exceptions
2023-02-12 21:52:37,341:INFO:Preparing display monitor
2023-02-12 21:52:37,365:INFO:Initializing Linear Regression
2023-02-12 21:52:37,365:INFO:Total runtime is 0.0 minutes
2023-02-12 21:52:37,369:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:37,370:INFO:Initializing create_model()
2023-02-12 21:52:37,370:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:37,370:INFO:Checking exceptions
2023-02-12 21:52:37,370:INFO:Importing libraries
2023-02-12 21:52:37,370:INFO:Copying training dataset
2023-02-12 21:52:37,373:INFO:Defining folds
2023-02-12 21:52:37,373:INFO:Declaring metric variables
2023-02-12 21:52:37,378:INFO:Importing untrained model
2023-02-12 21:52:37,381:INFO:Linear Regression Imported successfully
2023-02-12 21:52:37,388:INFO:Starting cross validation
2023-02-12 21:52:37,396:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:37,568:INFO:Calculating mean and std
2023-02-12 21:52:37,568:INFO:Creating metrics dataframe
2023-02-12 21:52:37,570:INFO:Uploading results into container
2023-02-12 21:52:37,571:INFO:Uploading model into container now
2023-02-12 21:52:37,571:INFO:_master_model_container: 1
2023-02-12 21:52:37,571:INFO:_display_container: 2
2023-02-12 21:52:37,571:INFO:LinearRegression(n_jobs=-1)
2023-02-12 21:52:37,571:INFO:create_model() successfully completed......................................
2023-02-12 21:52:37,722:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:37,722:INFO:Creating metrics dataframe
2023-02-12 21:52:37,727:INFO:Initializing Lasso Regression
2023-02-12 21:52:37,727:INFO:Total runtime is 0.006027062733968099 minutes
2023-02-12 21:52:37,731:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:37,732:INFO:Initializing create_model()
2023-02-12 21:52:37,732:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:37,732:INFO:Checking exceptions
2023-02-12 21:52:37,732:INFO:Importing libraries
2023-02-12 21:52:37,732:INFO:Copying training dataset
2023-02-12 21:52:37,734:INFO:Defining folds
2023-02-12 21:52:37,734:INFO:Declaring metric variables
2023-02-12 21:52:37,737:INFO:Importing untrained model
2023-02-12 21:52:37,740:INFO:Lasso Regression Imported successfully
2023-02-12 21:52:37,747:INFO:Starting cross validation
2023-02-12 21:52:37,748:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:37,908:INFO:Calculating mean and std
2023-02-12 21:52:37,909:INFO:Creating metrics dataframe
2023-02-12 21:52:37,911:INFO:Uploading results into container
2023-02-12 21:52:37,911:INFO:Uploading model into container now
2023-02-12 21:52:37,911:INFO:_master_model_container: 2
2023-02-12 21:52:37,912:INFO:_display_container: 2
2023-02-12 21:52:37,912:INFO:Lasso(random_state=123)
2023-02-12 21:52:37,912:INFO:create_model() successfully completed......................................
2023-02-12 21:52:38,076:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:38,076:INFO:Creating metrics dataframe
2023-02-12 21:52:38,086:INFO:Initializing Ridge Regression
2023-02-12 21:52:38,086:INFO:Total runtime is 0.012018207708994547 minutes
2023-02-12 21:52:38,089:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:38,089:INFO:Initializing create_model()
2023-02-12 21:52:38,089:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:38,089:INFO:Checking exceptions
2023-02-12 21:52:38,090:INFO:Importing libraries
2023-02-12 21:52:38,090:INFO:Copying training dataset
2023-02-12 21:52:38,093:INFO:Defining folds
2023-02-12 21:52:38,093:INFO:Declaring metric variables
2023-02-12 21:52:38,096:INFO:Importing untrained model
2023-02-12 21:52:38,100:INFO:Ridge Regression Imported successfully
2023-02-12 21:52:38,108:INFO:Starting cross validation
2023-02-12 21:52:38,109:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:38,248:INFO:Calculating mean and std
2023-02-12 21:52:38,248:INFO:Creating metrics dataframe
2023-02-12 21:52:38,251:INFO:Uploading results into container
2023-02-12 21:52:38,251:INFO:Uploading model into container now
2023-02-12 21:52:38,251:INFO:_master_model_container: 3
2023-02-12 21:52:38,252:INFO:_display_container: 2
2023-02-12 21:52:38,252:INFO:Ridge(random_state=123)
2023-02-12 21:52:38,252:INFO:create_model() successfully completed......................................
2023-02-12 21:52:38,404:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:38,404:INFO:Creating metrics dataframe
2023-02-12 21:52:38,411:INFO:Initializing Elastic Net
2023-02-12 21:52:38,412:INFO:Total runtime is 0.01744358936945597 minutes
2023-02-12 21:52:38,415:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:38,416:INFO:Initializing create_model()
2023-02-12 21:52:38,416:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:38,416:INFO:Checking exceptions
2023-02-12 21:52:38,416:INFO:Importing libraries
2023-02-12 21:52:38,416:INFO:Copying training dataset
2023-02-12 21:52:38,420:INFO:Defining folds
2023-02-12 21:52:38,420:INFO:Declaring metric variables
2023-02-12 21:52:38,423:INFO:Importing untrained model
2023-02-12 21:52:38,426:INFO:Elastic Net Imported successfully
2023-02-12 21:52:38,435:INFO:Starting cross validation
2023-02-12 21:52:38,436:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:38,662:INFO:Calculating mean and std
2023-02-12 21:52:38,663:INFO:Creating metrics dataframe
2023-02-12 21:52:38,665:INFO:Uploading results into container
2023-02-12 21:52:38,665:INFO:Uploading model into container now
2023-02-12 21:52:38,666:INFO:_master_model_container: 4
2023-02-12 21:52:38,666:INFO:_display_container: 2
2023-02-12 21:52:38,666:INFO:ElasticNet(random_state=123)
2023-02-12 21:52:38,666:INFO:create_model() successfully completed......................................
2023-02-12 21:52:38,838:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:38,838:INFO:Creating metrics dataframe
2023-02-12 21:52:38,851:INFO:Initializing Least Angle Regression
2023-02-12 21:52:38,851:INFO:Total runtime is 0.024764136473337806 minutes
2023-02-12 21:52:38,855:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:38,855:INFO:Initializing create_model()
2023-02-12 21:52:38,856:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:38,856:INFO:Checking exceptions
2023-02-12 21:52:38,856:INFO:Importing libraries
2023-02-12 21:52:38,856:INFO:Copying training dataset
2023-02-12 21:52:38,859:INFO:Defining folds
2023-02-12 21:52:38,859:INFO:Declaring metric variables
2023-02-12 21:52:38,866:INFO:Importing untrained model
2023-02-12 21:52:38,871:INFO:Least Angle Regression Imported successfully
2023-02-12 21:52:38,881:INFO:Starting cross validation
2023-02-12 21:52:38,882:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:38,929:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:38,938:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:38,950:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:38,959:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:38,969:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:38,980:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:38,988:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:38,999:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,003:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,012:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,024:INFO:Calculating mean and std
2023-02-12 21:52:39,025:INFO:Creating metrics dataframe
2023-02-12 21:52:39,028:INFO:Uploading results into container
2023-02-12 21:52:39,028:INFO:Uploading model into container now
2023-02-12 21:52:39,029:INFO:_master_model_container: 5
2023-02-12 21:52:39,029:INFO:_display_container: 2
2023-02-12 21:52:39,029:INFO:Lars(random_state=123)
2023-02-12 21:52:39,029:INFO:create_model() successfully completed......................................
2023-02-12 21:52:39,182:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:39,182:INFO:Creating metrics dataframe
2023-02-12 21:52:39,192:INFO:Initializing Lasso Least Angle Regression
2023-02-12 21:52:39,192:INFO:Total runtime is 0.030439913272857663 minutes
2023-02-12 21:52:39,196:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:39,196:INFO:Initializing create_model()
2023-02-12 21:52:39,196:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:39,196:INFO:Checking exceptions
2023-02-12 21:52:39,196:INFO:Importing libraries
2023-02-12 21:52:39,197:INFO:Copying training dataset
2023-02-12 21:52:39,200:INFO:Defining folds
2023-02-12 21:52:39,200:INFO:Declaring metric variables
2023-02-12 21:52:39,203:INFO:Importing untrained model
2023-02-12 21:52:39,208:INFO:Lasso Least Angle Regression Imported successfully
2023-02-12 21:52:39,215:INFO:Starting cross validation
2023-02-12 21:52:39,216:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:39,271:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:39,289:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:39,294:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:39,311:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:39,323:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:39,334:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:39,342:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:39,353:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:39,359:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:39,367:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:52:39,378:INFO:Calculating mean and std
2023-02-12 21:52:39,379:INFO:Creating metrics dataframe
2023-02-12 21:52:39,382:INFO:Uploading results into container
2023-02-12 21:52:39,383:INFO:Uploading model into container now
2023-02-12 21:52:39,383:INFO:_master_model_container: 6
2023-02-12 21:52:39,383:INFO:_display_container: 2
2023-02-12 21:52:39,384:INFO:LassoLars(random_state=123)
2023-02-12 21:52:39,384:INFO:create_model() successfully completed......................................
2023-02-12 21:52:39,528:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:39,529:INFO:Creating metrics dataframe
2023-02-12 21:52:39,536:INFO:Initializing Orthogonal Matching Pursuit
2023-02-12 21:52:39,536:INFO:Total runtime is 0.036178624629974364 minutes
2023-02-12 21:52:39,539:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:39,539:INFO:Initializing create_model()
2023-02-12 21:52:39,539:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:39,540:INFO:Checking exceptions
2023-02-12 21:52:39,540:INFO:Importing libraries
2023-02-12 21:52:39,540:INFO:Copying training dataset
2023-02-12 21:52:39,543:INFO:Defining folds
2023-02-12 21:52:39,544:INFO:Declaring metric variables
2023-02-12 21:52:39,548:INFO:Importing untrained model
2023-02-12 21:52:39,552:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-12 21:52:39,560:INFO:Starting cross validation
2023-02-12 21:52:39,561:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:39,596:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,606:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,614:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,621:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,631:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,640:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,649:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,657:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,665:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,669:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:52:39,682:INFO:Calculating mean and std
2023-02-12 21:52:39,683:INFO:Creating metrics dataframe
2023-02-12 21:52:39,686:INFO:Uploading results into container
2023-02-12 21:52:39,686:INFO:Uploading model into container now
2023-02-12 21:52:39,686:INFO:_master_model_container: 7
2023-02-12 21:52:39,686:INFO:_display_container: 2
2023-02-12 21:52:39,687:INFO:OrthogonalMatchingPursuit()
2023-02-12 21:52:39,687:INFO:create_model() successfully completed......................................
2023-02-12 21:52:39,831:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:39,831:INFO:Creating metrics dataframe
2023-02-12 21:52:39,837:INFO:Initializing Bayesian Ridge
2023-02-12 21:52:39,838:INFO:Total runtime is 0.04122136831283569 minutes
2023-02-12 21:52:39,842:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:39,843:INFO:Initializing create_model()
2023-02-12 21:52:39,843:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:39,843:INFO:Checking exceptions
2023-02-12 21:52:39,843:INFO:Importing libraries
2023-02-12 21:52:39,843:INFO:Copying training dataset
2023-02-12 21:52:39,846:INFO:Defining folds
2023-02-12 21:52:39,846:INFO:Declaring metric variables
2023-02-12 21:52:39,851:INFO:Importing untrained model
2023-02-12 21:52:39,855:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:52:39,862:INFO:Starting cross validation
2023-02-12 21:52:39,863:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:39,990:INFO:Calculating mean and std
2023-02-12 21:52:39,990:INFO:Creating metrics dataframe
2023-02-12 21:52:39,994:INFO:Uploading results into container
2023-02-12 21:52:39,995:INFO:Uploading model into container now
2023-02-12 21:52:39,995:INFO:_master_model_container: 8
2023-02-12 21:52:39,995:INFO:_display_container: 2
2023-02-12 21:52:39,996:INFO:BayesianRidge()
2023-02-12 21:52:39,996:INFO:create_model() successfully completed......................................
2023-02-12 21:52:40,155:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:40,155:INFO:Creating metrics dataframe
2023-02-12 21:52:40,165:INFO:Initializing Passive Aggressive Regressor
2023-02-12 21:52:40,165:INFO:Total runtime is 0.046666761239369706 minutes
2023-02-12 21:52:40,168:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:40,168:INFO:Initializing create_model()
2023-02-12 21:52:40,168:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:40,168:INFO:Checking exceptions
2023-02-12 21:52:40,170:INFO:Importing libraries
2023-02-12 21:52:40,170:INFO:Copying training dataset
2023-02-12 21:52:40,173:INFO:Defining folds
2023-02-12 21:52:40,173:INFO:Declaring metric variables
2023-02-12 21:52:40,176:INFO:Importing untrained model
2023-02-12 21:52:40,183:INFO:Passive Aggressive Regressor Imported successfully
2023-02-12 21:52:40,190:INFO:Starting cross validation
2023-02-12 21:52:40,191:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:40,368:INFO:Calculating mean and std
2023-02-12 21:52:40,369:INFO:Creating metrics dataframe
2023-02-12 21:52:40,372:INFO:Uploading results into container
2023-02-12 21:52:40,373:INFO:Uploading model into container now
2023-02-12 21:52:40,373:INFO:_master_model_container: 9
2023-02-12 21:52:40,373:INFO:_display_container: 2
2023-02-12 21:52:40,373:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-12 21:52:40,373:INFO:create_model() successfully completed......................................
2023-02-12 21:52:40,535:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:40,535:INFO:Creating metrics dataframe
2023-02-12 21:52:40,547:INFO:Initializing Huber Regressor
2023-02-12 21:52:40,547:INFO:Total runtime is 0.053033872445424395 minutes
2023-02-12 21:52:40,553:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:40,554:INFO:Initializing create_model()
2023-02-12 21:52:40,554:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:40,554:INFO:Checking exceptions
2023-02-12 21:52:40,554:INFO:Importing libraries
2023-02-12 21:52:40,554:INFO:Copying training dataset
2023-02-12 21:52:40,558:INFO:Defining folds
2023-02-12 21:52:40,558:INFO:Declaring metric variables
2023-02-12 21:52:40,563:INFO:Importing untrained model
2023-02-12 21:52:40,567:INFO:Huber Regressor Imported successfully
2023-02-12 21:52:40,576:INFO:Starting cross validation
2023-02-12 21:52:40,577:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:40,654:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:40,671:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:40,681:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:40,700:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:40,715:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:40,726:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:40,730:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:40,750:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:52:40,761:INFO:Calculating mean and std
2023-02-12 21:52:40,762:INFO:Creating metrics dataframe
2023-02-12 21:52:40,765:INFO:Uploading results into container
2023-02-12 21:52:40,765:INFO:Uploading model into container now
2023-02-12 21:52:40,766:INFO:_master_model_container: 10
2023-02-12 21:52:40,766:INFO:_display_container: 2
2023-02-12 21:52:40,766:INFO:HuberRegressor()
2023-02-12 21:52:40,767:INFO:create_model() successfully completed......................................
2023-02-12 21:52:40,948:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:40,948:INFO:Creating metrics dataframe
2023-02-12 21:52:40,957:INFO:Initializing K Neighbors Regressor
2023-02-12 21:52:40,958:INFO:Total runtime is 0.05988372961680094 minutes
2023-02-12 21:52:40,962:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:40,963:INFO:Initializing create_model()
2023-02-12 21:52:40,963:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:40,963:INFO:Checking exceptions
2023-02-12 21:52:40,963:INFO:Importing libraries
2023-02-12 21:52:40,963:INFO:Copying training dataset
2023-02-12 21:52:40,967:INFO:Defining folds
2023-02-12 21:52:40,967:INFO:Declaring metric variables
2023-02-12 21:52:40,969:INFO:Importing untrained model
2023-02-12 21:52:40,973:INFO:K Neighbors Regressor Imported successfully
2023-02-12 21:52:40,982:INFO:Starting cross validation
2023-02-12 21:52:40,983:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:41,133:INFO:Calculating mean and std
2023-02-12 21:52:41,134:INFO:Creating metrics dataframe
2023-02-12 21:52:41,137:INFO:Uploading results into container
2023-02-12 21:52:41,137:INFO:Uploading model into container now
2023-02-12 21:52:41,138:INFO:_master_model_container: 11
2023-02-12 21:52:41,138:INFO:_display_container: 2
2023-02-12 21:52:41,138:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-12 21:52:41,139:INFO:create_model() successfully completed......................................
2023-02-12 21:52:41,314:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:41,314:INFO:Creating metrics dataframe
2023-02-12 21:52:41,323:INFO:Initializing Decision Tree Regressor
2023-02-12 21:52:41,323:INFO:Total runtime is 0.06597131093343099 minutes
2023-02-12 21:52:41,326:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:41,327:INFO:Initializing create_model()
2023-02-12 21:52:41,327:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:41,327:INFO:Checking exceptions
2023-02-12 21:52:41,327:INFO:Importing libraries
2023-02-12 21:52:41,327:INFO:Copying training dataset
2023-02-12 21:52:41,332:INFO:Defining folds
2023-02-12 21:52:41,332:INFO:Declaring metric variables
2023-02-12 21:52:41,335:INFO:Importing untrained model
2023-02-12 21:52:41,338:INFO:Decision Tree Regressor Imported successfully
2023-02-12 21:52:41,344:INFO:Starting cross validation
2023-02-12 21:52:41,345:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:41,488:INFO:Calculating mean and std
2023-02-12 21:52:41,489:INFO:Creating metrics dataframe
2023-02-12 21:52:41,493:INFO:Uploading results into container
2023-02-12 21:52:41,493:INFO:Uploading model into container now
2023-02-12 21:52:41,494:INFO:_master_model_container: 12
2023-02-12 21:52:41,494:INFO:_display_container: 2
2023-02-12 21:52:41,494:INFO:DecisionTreeRegressor(random_state=123)
2023-02-12 21:52:41,494:INFO:create_model() successfully completed......................................
2023-02-12 21:52:41,679:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:41,679:INFO:Creating metrics dataframe
2023-02-12 21:52:41,689:INFO:Initializing Random Forest Regressor
2023-02-12 21:52:41,689:INFO:Total runtime is 0.07205946445465088 minutes
2023-02-12 21:52:41,694:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:41,695:INFO:Initializing create_model()
2023-02-12 21:52:41,695:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:41,695:INFO:Checking exceptions
2023-02-12 21:52:41,695:INFO:Importing libraries
2023-02-12 21:52:41,695:INFO:Copying training dataset
2023-02-12 21:52:41,699:INFO:Defining folds
2023-02-12 21:52:41,699:INFO:Declaring metric variables
2023-02-12 21:52:41,702:INFO:Importing untrained model
2023-02-12 21:52:41,706:INFO:Random Forest Regressor Imported successfully
2023-02-12 21:52:41,714:INFO:Starting cross validation
2023-02-12 21:52:41,715:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:42,130:INFO:Calculating mean and std
2023-02-12 21:52:42,131:INFO:Creating metrics dataframe
2023-02-12 21:52:42,133:INFO:Uploading results into container
2023-02-12 21:52:42,134:INFO:Uploading model into container now
2023-02-12 21:52:42,134:INFO:_master_model_container: 13
2023-02-12 21:52:42,134:INFO:_display_container: 2
2023-02-12 21:52:42,135:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-12 21:52:42,135:INFO:create_model() successfully completed......................................
2023-02-12 21:52:42,279:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:42,279:INFO:Creating metrics dataframe
2023-02-12 21:52:42,287:INFO:Initializing Extra Trees Regressor
2023-02-12 21:52:42,288:INFO:Total runtime is 0.08205008506774902 minutes
2023-02-12 21:52:42,293:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:42,293:INFO:Initializing create_model()
2023-02-12 21:52:42,293:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:42,293:INFO:Checking exceptions
2023-02-12 21:52:42,293:INFO:Importing libraries
2023-02-12 21:52:42,293:INFO:Copying training dataset
2023-02-12 21:52:42,296:INFO:Defining folds
2023-02-12 21:52:42,297:INFO:Declaring metric variables
2023-02-12 21:52:42,300:INFO:Importing untrained model
2023-02-12 21:52:42,305:INFO:Extra Trees Regressor Imported successfully
2023-02-12 21:52:42,314:INFO:Starting cross validation
2023-02-12 21:52:42,315:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:42,698:INFO:Calculating mean and std
2023-02-12 21:52:42,699:INFO:Creating metrics dataframe
2023-02-12 21:52:42,702:INFO:Uploading results into container
2023-02-12 21:52:42,702:INFO:Uploading model into container now
2023-02-12 21:52:42,703:INFO:_master_model_container: 14
2023-02-12 21:52:42,703:INFO:_display_container: 2
2023-02-12 21:52:42,703:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-12 21:52:42,703:INFO:create_model() successfully completed......................................
2023-02-12 21:52:42,869:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:42,869:INFO:Creating metrics dataframe
2023-02-12 21:52:42,881:INFO:Initializing AdaBoost Regressor
2023-02-12 21:52:42,881:INFO:Total runtime is 0.09193265835444132 minutes
2023-02-12 21:52:42,885:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:42,885:INFO:Initializing create_model()
2023-02-12 21:52:42,886:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:42,886:INFO:Checking exceptions
2023-02-12 21:52:42,886:INFO:Importing libraries
2023-02-12 21:52:42,886:INFO:Copying training dataset
2023-02-12 21:52:42,889:INFO:Defining folds
2023-02-12 21:52:42,889:INFO:Declaring metric variables
2023-02-12 21:52:42,895:INFO:Importing untrained model
2023-02-12 21:52:42,899:INFO:AdaBoost Regressor Imported successfully
2023-02-12 21:52:42,905:INFO:Starting cross validation
2023-02-12 21:52:42,905:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:43,157:INFO:Calculating mean and std
2023-02-12 21:52:43,158:INFO:Creating metrics dataframe
2023-02-12 21:52:43,162:INFO:Uploading results into container
2023-02-12 21:52:43,162:INFO:Uploading model into container now
2023-02-12 21:52:43,163:INFO:_master_model_container: 15
2023-02-12 21:52:43,163:INFO:_display_container: 2
2023-02-12 21:52:43,163:INFO:AdaBoostRegressor(random_state=123)
2023-02-12 21:52:43,163:INFO:create_model() successfully completed......................................
2023-02-12 21:52:43,339:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:43,339:INFO:Creating metrics dataframe
2023-02-12 21:52:43,362:INFO:Initializing Gradient Boosting Regressor
2023-02-12 21:52:43,362:INFO:Total runtime is 0.09995141426722208 minutes
2023-02-12 21:52:43,366:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:43,367:INFO:Initializing create_model()
2023-02-12 21:52:43,367:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:43,367:INFO:Checking exceptions
2023-02-12 21:52:43,367:INFO:Importing libraries
2023-02-12 21:52:43,367:INFO:Copying training dataset
2023-02-12 21:52:43,370:INFO:Defining folds
2023-02-12 21:52:43,370:INFO:Declaring metric variables
2023-02-12 21:52:43,375:INFO:Importing untrained model
2023-02-12 21:52:43,382:INFO:Gradient Boosting Regressor Imported successfully
2023-02-12 21:52:43,392:INFO:Starting cross validation
2023-02-12 21:52:43,393:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:43,601:INFO:Calculating mean and std
2023-02-12 21:52:43,601:INFO:Creating metrics dataframe
2023-02-12 21:52:43,604:INFO:Uploading results into container
2023-02-12 21:52:43,605:INFO:Uploading model into container now
2023-02-12 21:52:43,605:INFO:_master_model_container: 16
2023-02-12 21:52:43,605:INFO:_display_container: 2
2023-02-12 21:52:43,606:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:52:43,606:INFO:create_model() successfully completed......................................
2023-02-12 21:52:43,779:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:43,779:INFO:Creating metrics dataframe
2023-02-12 21:52:43,793:INFO:Initializing Extreme Gradient Boosting
2023-02-12 21:52:43,793:INFO:Total runtime is 0.10712732474009196 minutes
2023-02-12 21:52:43,797:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:43,797:INFO:Initializing create_model()
2023-02-12 21:52:43,797:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:43,797:INFO:Checking exceptions
2023-02-12 21:52:43,797:INFO:Importing libraries
2023-02-12 21:52:43,797:INFO:Copying training dataset
2023-02-12 21:52:43,801:INFO:Defining folds
2023-02-12 21:52:43,801:INFO:Declaring metric variables
2023-02-12 21:52:43,804:INFO:Importing untrained model
2023-02-12 21:52:43,811:INFO:Extreme Gradient Boosting Imported successfully
2023-02-12 21:52:43,818:INFO:Starting cross validation
2023-02-12 21:52:43,819:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:44,012:INFO:Calculating mean and std
2023-02-12 21:52:44,014:INFO:Creating metrics dataframe
2023-02-12 21:52:44,017:INFO:Uploading results into container
2023-02-12 21:52:44,017:INFO:Uploading model into container now
2023-02-12 21:52:44,017:INFO:_master_model_container: 17
2023-02-12 21:52:44,017:INFO:_display_container: 2
2023-02-12 21:52:44,018:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-12 21:52:44,018:INFO:create_model() successfully completed......................................
2023-02-12 21:52:44,170:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:44,171:INFO:Creating metrics dataframe
2023-02-12 21:52:44,182:INFO:Initializing Light Gradient Boosting Machine
2023-02-12 21:52:44,182:INFO:Total runtime is 0.11361984411875406 minutes
2023-02-12 21:52:44,185:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:44,185:INFO:Initializing create_model()
2023-02-12 21:52:44,185:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:44,187:INFO:Checking exceptions
2023-02-12 21:52:44,187:INFO:Importing libraries
2023-02-12 21:52:44,187:INFO:Copying training dataset
2023-02-12 21:52:44,190:INFO:Defining folds
2023-02-12 21:52:44,190:INFO:Declaring metric variables
2023-02-12 21:52:44,195:INFO:Importing untrained model
2023-02-12 21:52:44,200:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-12 21:52:44,205:INFO:Starting cross validation
2023-02-12 21:52:44,206:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:44,334:INFO:Calculating mean and std
2023-02-12 21:52:44,335:INFO:Creating metrics dataframe
2023-02-12 21:52:44,338:INFO:Uploading results into container
2023-02-12 21:52:44,339:INFO:Uploading model into container now
2023-02-12 21:52:44,340:INFO:_master_model_container: 18
2023-02-12 21:52:44,340:INFO:_display_container: 2
2023-02-12 21:52:44,340:INFO:LGBMRegressor(random_state=123)
2023-02-12 21:52:44,340:INFO:create_model() successfully completed......................................
2023-02-12 21:52:44,494:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:44,494:INFO:Creating metrics dataframe
2023-02-12 21:52:44,504:INFO:Initializing Dummy Regressor
2023-02-12 21:52:44,504:INFO:Total runtime is 0.11897342205047606 minutes
2023-02-12 21:52:44,506:INFO:SubProcess create_model() called ==================================
2023-02-12 21:52:44,506:INFO:Initializing create_model()
2023-02-12 21:52:44,506:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A2BF2C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:44,508:INFO:Checking exceptions
2023-02-12 21:52:44,508:INFO:Importing libraries
2023-02-12 21:52:44,508:INFO:Copying training dataset
2023-02-12 21:52:44,509:INFO:Defining folds
2023-02-12 21:52:44,509:INFO:Declaring metric variables
2023-02-12 21:52:44,509:INFO:Importing untrained model
2023-02-12 21:52:44,515:INFO:Dummy Regressor Imported successfully
2023-02-12 21:52:44,526:INFO:Starting cross validation
2023-02-12 21:52:44,531:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:52:44,656:INFO:Calculating mean and std
2023-02-12 21:52:44,657:INFO:Creating metrics dataframe
2023-02-12 21:52:44,659:INFO:Uploading results into container
2023-02-12 21:52:44,660:INFO:Uploading model into container now
2023-02-12 21:52:44,661:INFO:_master_model_container: 19
2023-02-12 21:52:44,661:INFO:_display_container: 2
2023-02-12 21:52:44,661:INFO:DummyRegressor()
2023-02-12 21:52:44,661:INFO:create_model() successfully completed......................................
2023-02-12 21:52:44,809:INFO:SubProcess create_model() end ==================================
2023-02-12 21:52:44,809:INFO:Creating metrics dataframe
2023-02-12 21:52:44,830:INFO:Initializing create_model()
2023-02-12 21:52:44,830:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:44,830:INFO:Checking exceptions
2023-02-12 21:52:44,832:INFO:Importing libraries
2023-02-12 21:52:44,832:INFO:Copying training dataset
2023-02-12 21:52:44,833:INFO:Defining folds
2023-02-12 21:52:44,833:INFO:Declaring metric variables
2023-02-12 21:52:44,833:INFO:Importing untrained model
2023-02-12 21:52:44,833:INFO:Declaring custom model
2023-02-12 21:52:44,833:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:52:44,835:INFO:Cross validation set to False
2023-02-12 21:52:44,835:INFO:Fitting Model
2023-02-12 21:52:44,843:INFO:BayesianRidge()
2023-02-12 21:52:44,844:INFO:create_model() successfully completed......................................
2023-02-12 21:52:45,024:INFO:_master_model_container: 19
2023-02-12 21:52:45,024:INFO:_display_container: 2
2023-02-12 21:52:45,025:INFO:BayesianRidge()
2023-02-12 21:52:45,025:INFO:compare_models() successfully completed......................................
2023-02-12 21:52:45,025:INFO:Initializing automl()
2023-02-12 21:52:45,025:INFO:automl(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, optimize=R2, use_holdout=False, turbo=True, return_train_score=False)
2023-02-12 21:52:45,025:INFO:Model Selection Basis : CV Results on Training set
2023-02-12 21:52:45,025:INFO:Checking model 0
2023-02-12 21:52:45,026:INFO:Checking model 1
2023-02-12 21:52:45,026:INFO:Checking model 2
2023-02-12 21:52:45,026:INFO:Checking model 3
2023-02-12 21:52:45,027:INFO:Checking model 4
2023-02-12 21:52:45,027:INFO:Checking model 5
2023-02-12 21:52:45,027:INFO:Checking model 6
2023-02-12 21:52:45,027:INFO:Checking model 7
2023-02-12 21:52:45,027:INFO:Checking model 8
2023-02-12 21:52:45,028:INFO:Checking model 9
2023-02-12 21:52:45,028:INFO:Checking model 10
2023-02-12 21:52:45,028:INFO:Checking model 11
2023-02-12 21:52:45,028:INFO:Checking model 12
2023-02-12 21:52:45,028:INFO:Checking model 13
2023-02-12 21:52:45,028:INFO:Checking model 14
2023-02-12 21:52:45,029:INFO:Checking model 15
2023-02-12 21:52:45,029:INFO:Checking model 16
2023-02-12 21:52:45,029:INFO:Checking model 17
2023-02-12 21:52:45,029:INFO:Checking model 18
2023-02-12 21:52:45,029:INFO:Initializing create_model()
2023-02-12 21:52:45,029:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A11252E0>, estimator=BayesianRidge(), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:52:45,029:INFO:Checking exceptions
2023-02-12 21:52:45,032:INFO:Importing libraries
2023-02-12 21:52:45,032:INFO:Copying training dataset
2023-02-12 21:52:45,033:INFO:Defining folds
2023-02-12 21:52:45,033:INFO:Declaring metric variables
2023-02-12 21:52:45,033:INFO:Importing untrained model
2023-02-12 21:52:45,033:INFO:Declaring custom model
2023-02-12 21:52:45,034:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:52:45,034:INFO:Cross validation set to False
2023-02-12 21:52:45,034:INFO:Fitting Model
2023-02-12 21:52:45,044:INFO:BayesianRidge()
2023-02-12 21:52:45,044:INFO:create_model() successfully completed......................................
2023-02-12 21:52:45,368:INFO:BayesianRidge()
2023-02-12 21:52:45,368:INFO:automl() successfully completed......................................
2023-02-12 21:53:02,470:INFO:PyCaret RegressionExperiment
2023-02-12 21:53:02,470:INFO:Logging name: reg-default-name
2023-02-12 21:53:02,470:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-12 21:53:02,470:INFO:version 3.0.0.rc8
2023-02-12 21:53:02,470:INFO:Initializing setup()
2023-02-12 21:53:02,470:INFO:self.USI: 035b
2023-02-12 21:53:02,470:INFO:self._variable_keys: {'fold_generator', 'logging_param', 'transform_target_param', 'data', 'idx', 'X_test', 'gpu_n_jobs_param', 'memory', 'USI', 'y_test', 'fold_groups_param', 'y_train', 'seed', 'target_param', 'log_plots_param', 'exp_name_log', '_ml_usecase', 'X', 'X_train', 'y', 'fold_shuffle_param', 'exp_id', 'n_jobs_param', '_available_plots', 'html_param', 'gpu_param', 'pipeline'}
2023-02-12 21:53:02,470:INFO:Checking environment
2023-02-12 21:53:02,470:INFO:python_version: 3.9.13
2023-02-12 21:53:02,470:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-12 21:53:02,470:INFO:machine: AMD64
2023-02-12 21:53:02,470:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-12 21:53:02,476:INFO:Memory: svmem(total=16805040128, available=3592826880, percent=78.6, used=13212213248, free=3592826880)
2023-02-12 21:53:02,476:INFO:Physical Core: 4
2023-02-12 21:53:02,476:INFO:Logical Core: 8
2023-02-12 21:53:02,476:INFO:Checking libraries
2023-02-12 21:53:02,476:INFO:System:
2023-02-12 21:53:02,476:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-12 21:53:02,476:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-12 21:53:02,476:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-12 21:53:02,476:INFO:PyCaret required dependencies:
2023-02-12 21:53:02,476:INFO:                 pip: 23.0
2023-02-12 21:53:02,477:INFO:          setuptools: 58.1.0
2023-02-12 21:53:02,477:INFO:             pycaret: 3.0.0rc8
2023-02-12 21:53:02,477:INFO:             IPython: 8.7.0
2023-02-12 21:53:02,477:INFO:          ipywidgets: 8.0.4
2023-02-12 21:53:02,477:INFO:                tqdm: 4.64.1
2023-02-12 21:53:02,477:INFO:               numpy: 1.22.1
2023-02-12 21:53:02,477:INFO:              pandas: 1.5.2
2023-02-12 21:53:02,477:INFO:              jinja2: 3.1.2
2023-02-12 21:53:02,477:INFO:               scipy: 1.5.4
2023-02-12 21:53:02,477:INFO:              joblib: 1.2.0
2023-02-12 21:53:02,477:INFO:             sklearn: 1.1.3
2023-02-12 21:53:02,477:INFO:                pyod: 1.0.7
2023-02-12 21:53:02,477:INFO:            imblearn: 0.10.1
2023-02-12 21:53:02,477:INFO:   category_encoders: 2.6.0
2023-02-12 21:53:02,477:INFO:            lightgbm: 3.3.4
2023-02-12 21:53:02,477:INFO:               numba: 0.56.4
2023-02-12 21:53:02,477:INFO:            requests: 2.28.1
2023-02-12 21:53:02,477:INFO:          matplotlib: 3.6.2
2023-02-12 21:53:02,477:INFO:          scikitplot: 0.3.7
2023-02-12 21:53:02,477:INFO:         yellowbrick: 1.5
2023-02-12 21:53:02,477:INFO:              plotly: 5.11.0
2023-02-12 21:53:02,477:INFO:             kaleido: 0.2.1
2023-02-12 21:53:02,477:INFO:         statsmodels: 0.13.5
2023-02-12 21:53:02,477:INFO:              sktime: 0.15.1
2023-02-12 21:53:02,477:INFO:               tbats: 1.1.2
2023-02-12 21:53:02,477:INFO:            pmdarima: 2.0.2
2023-02-12 21:53:02,477:INFO:              psutil: 5.9.4
2023-02-12 21:53:02,477:INFO:PyCaret optional dependencies:
2023-02-12 21:53:02,477:INFO:                shap: 0.41.0
2023-02-12 21:53:02,477:INFO:           interpret: 0.3.0
2023-02-12 21:53:02,477:INFO:                umap: Not installed
2023-02-12 21:53:02,477:INFO:    pandas_profiling: 3.6.2
2023-02-12 21:53:02,477:INFO:  explainerdashboard: Not installed
2023-02-12 21:53:02,478:INFO:             autoviz: Not installed
2023-02-12 21:53:02,478:INFO:           fairlearn: Not installed
2023-02-12 21:53:02,478:INFO:             xgboost: 1.7.3
2023-02-12 21:53:02,478:INFO:            catboost: Not installed
2023-02-12 21:53:02,478:INFO:              kmodes: Not installed
2023-02-12 21:53:02,478:INFO:             mlxtend: Not installed
2023-02-12 21:53:02,478:INFO:       statsforecast: Not installed
2023-02-12 21:53:02,478:INFO:        tune_sklearn: Not installed
2023-02-12 21:53:02,478:INFO:                 ray: Not installed
2023-02-12 21:53:02,478:INFO:            hyperopt: Not installed
2023-02-12 21:53:02,478:INFO:              optuna: Not installed
2023-02-12 21:53:02,478:INFO:               skopt: Not installed
2023-02-12 21:53:02,478:INFO:              mlflow: Not installed
2023-02-12 21:53:02,478:INFO:              gradio: Not installed
2023-02-12 21:53:02,478:INFO:             fastapi: Not installed
2023-02-12 21:53:02,478:INFO:             uvicorn: Not installed
2023-02-12 21:53:02,478:INFO:              m2cgen: Not installed
2023-02-12 21:53:02,478:INFO:           evidently: Not installed
2023-02-12 21:53:02,478:INFO:                nltk: 3.8
2023-02-12 21:53:02,478:INFO:            pyLDAvis: Not installed
2023-02-12 21:53:02,478:INFO:              gensim: Not installed
2023-02-12 21:53:02,478:INFO:               spacy: Not installed
2023-02-12 21:53:02,478:INFO:           wordcloud: 1.8.2.2
2023-02-12 21:53:02,478:INFO:            textblob: Not installed
2023-02-12 21:53:02,478:INFO:               fugue: Not installed
2023-02-12 21:53:02,478:INFO:           streamlit: 1.16.0
2023-02-12 21:53:02,478:INFO:             prophet: Not installed
2023-02-12 21:53:02,478:INFO:None
2023-02-12 21:53:02,478:INFO:Set up data.
2023-02-12 21:53:02,486:INFO:Set up train/test split.
2023-02-12 21:53:02,489:INFO:Set up index.
2023-02-12 21:53:02,489:INFO:Set up folding strategy.
2023-02-12 21:53:02,489:INFO:Assigning column types.
2023-02-12 21:53:02,492:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-12 21:53:02,492:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,498:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,502:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,561:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,600:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,601:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:02,603:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:02,603:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,607:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,611:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,657:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,695:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,696:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:02,698:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:02,698:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-12 21:53:02,701:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,706:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,752:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,789:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,789:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:02,791:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:02,795:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,798:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,843:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,879:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,879:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:02,881:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:02,882:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-12 21:53:02,889:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,934:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,969:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:53:02,970:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:02,972:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:02,979:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-12 21:53:03,025:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:53:03,060:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:53:03,060:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:03,062:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:03,063:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-12 21:53:03,117:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:53:03,152:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:53:03,153:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:03,155:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:03,208:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:53:03,244:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-12 21:53:03,246:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:03,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:03,248:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-12 21:53:03,300:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:53:03,336:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:03,338:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:03,393:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-12 21:53:03,431:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:03,433:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:03,433:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-12 21:53:03,528:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:03,530:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:03,624:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:03,626:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:03,627:INFO:Preparing preprocessing pipeline...
2023-02-12 21:53:03,628:INFO:Set up column name cleaning.
2023-02-12 21:53:03,628:INFO:Set up simple imputation.
2023-02-12 21:53:03,634:INFO:Finished creating preprocessing pipeline.
2023-02-12 21:53:03,638:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-12 21:53:03,638:INFO:Creating final display dataframe.
2023-02-12 21:53:03,696:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              035b
2023-02-12 21:53:03,817:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:03,821:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:03,921:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-12 21:53:03,924:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-12 21:53:03,924:INFO:setup() successfully completed in 1.45s...............
2023-02-12 21:53:03,925:INFO:Initializing compare_models()
2023-02-12 21:53:03,925:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-12 21:53:03,925:INFO:Checking exceptions
2023-02-12 21:53:03,926:INFO:Preparing display monitor
2023-02-12 21:53:03,952:INFO:Initializing Linear Regression
2023-02-12 21:53:03,952:INFO:Total runtime is 0.0 minutes
2023-02-12 21:53:03,956:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:03,956:INFO:Initializing create_model()
2023-02-12 21:53:03,956:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:03,956:INFO:Checking exceptions
2023-02-12 21:53:03,957:INFO:Importing libraries
2023-02-12 21:53:03,957:INFO:Copying training dataset
2023-02-12 21:53:03,958:INFO:Defining folds
2023-02-12 21:53:03,960:INFO:Declaring metric variables
2023-02-12 21:53:03,963:INFO:Importing untrained model
2023-02-12 21:53:03,967:INFO:Linear Regression Imported successfully
2023-02-12 21:53:03,977:INFO:Starting cross validation
2023-02-12 21:53:04,030:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:04,173:INFO:Calculating mean and std
2023-02-12 21:53:04,174:INFO:Creating metrics dataframe
2023-02-12 21:53:04,176:INFO:Uploading results into container
2023-02-12 21:53:04,176:INFO:Uploading model into container now
2023-02-12 21:53:04,177:INFO:_master_model_container: 1
2023-02-12 21:53:04,177:INFO:_display_container: 2
2023-02-12 21:53:04,177:INFO:LinearRegression(n_jobs=-1)
2023-02-12 21:53:04,177:INFO:create_model() successfully completed......................................
2023-02-12 21:53:04,330:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:04,330:INFO:Creating metrics dataframe
2023-02-12 21:53:04,335:INFO:Initializing Lasso Regression
2023-02-12 21:53:04,335:INFO:Total runtime is 0.006386355559031168 minutes
2023-02-12 21:53:04,341:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:04,342:INFO:Initializing create_model()
2023-02-12 21:53:04,342:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:04,342:INFO:Checking exceptions
2023-02-12 21:53:04,342:INFO:Importing libraries
2023-02-12 21:53:04,342:INFO:Copying training dataset
2023-02-12 21:53:04,344:INFO:Defining folds
2023-02-12 21:53:04,344:INFO:Declaring metric variables
2023-02-12 21:53:04,347:INFO:Importing untrained model
2023-02-12 21:53:04,351:INFO:Lasso Regression Imported successfully
2023-02-12 21:53:04,359:INFO:Starting cross validation
2023-02-12 21:53:04,361:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:04,492:INFO:Calculating mean and std
2023-02-12 21:53:04,492:INFO:Creating metrics dataframe
2023-02-12 21:53:04,495:INFO:Uploading results into container
2023-02-12 21:53:04,495:INFO:Uploading model into container now
2023-02-12 21:53:04,495:INFO:_master_model_container: 2
2023-02-12 21:53:04,495:INFO:_display_container: 2
2023-02-12 21:53:04,495:INFO:Lasso(random_state=123)
2023-02-12 21:53:04,495:INFO:create_model() successfully completed......................................
2023-02-12 21:53:04,642:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:04,643:INFO:Creating metrics dataframe
2023-02-12 21:53:04,651:INFO:Initializing Ridge Regression
2023-02-12 21:53:04,651:INFO:Total runtime is 0.011652040481567382 minutes
2023-02-12 21:53:04,654:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:04,654:INFO:Initializing create_model()
2023-02-12 21:53:04,654:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:04,655:INFO:Checking exceptions
2023-02-12 21:53:04,655:INFO:Importing libraries
2023-02-12 21:53:04,655:INFO:Copying training dataset
2023-02-12 21:53:04,658:INFO:Defining folds
2023-02-12 21:53:04,658:INFO:Declaring metric variables
2023-02-12 21:53:04,662:INFO:Importing untrained model
2023-02-12 21:53:04,665:INFO:Ridge Regression Imported successfully
2023-02-12 21:53:04,674:INFO:Starting cross validation
2023-02-12 21:53:04,675:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:04,811:INFO:Calculating mean and std
2023-02-12 21:53:04,811:INFO:Creating metrics dataframe
2023-02-12 21:53:04,813:INFO:Uploading results into container
2023-02-12 21:53:04,814:INFO:Uploading model into container now
2023-02-12 21:53:04,814:INFO:_master_model_container: 3
2023-02-12 21:53:04,814:INFO:_display_container: 2
2023-02-12 21:53:04,814:INFO:Ridge(random_state=123)
2023-02-12 21:53:04,814:INFO:create_model() successfully completed......................................
2023-02-12 21:53:04,960:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:04,960:INFO:Creating metrics dataframe
2023-02-12 21:53:04,967:INFO:Initializing Elastic Net
2023-02-12 21:53:04,967:INFO:Total runtime is 0.01691621939341227 minutes
2023-02-12 21:53:04,972:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:04,983:INFO:Initializing create_model()
2023-02-12 21:53:04,983:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:04,983:INFO:Checking exceptions
2023-02-12 21:53:04,983:INFO:Importing libraries
2023-02-12 21:53:04,983:INFO:Copying training dataset
2023-02-12 21:53:04,984:INFO:Defining folds
2023-02-12 21:53:04,984:INFO:Declaring metric variables
2023-02-12 21:53:04,990:INFO:Importing untrained model
2023-02-12 21:53:04,994:INFO:Elastic Net Imported successfully
2023-02-12 21:53:05,001:INFO:Starting cross validation
2023-02-12 21:53:05,002:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:05,132:INFO:Calculating mean and std
2023-02-12 21:53:05,133:INFO:Creating metrics dataframe
2023-02-12 21:53:05,134:INFO:Uploading results into container
2023-02-12 21:53:05,137:INFO:Uploading model into container now
2023-02-12 21:53:05,137:INFO:_master_model_container: 4
2023-02-12 21:53:05,137:INFO:_display_container: 2
2023-02-12 21:53:05,138:INFO:ElasticNet(random_state=123)
2023-02-12 21:53:05,138:INFO:create_model() successfully completed......................................
2023-02-12 21:53:05,289:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:05,289:INFO:Creating metrics dataframe
2023-02-12 21:53:05,297:INFO:Initializing Least Angle Regression
2023-02-12 21:53:05,297:INFO:Total runtime is 0.022427173455556233 minutes
2023-02-12 21:53:05,300:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:05,300:INFO:Initializing create_model()
2023-02-12 21:53:05,300:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:05,300:INFO:Checking exceptions
2023-02-12 21:53:05,300:INFO:Importing libraries
2023-02-12 21:53:05,300:INFO:Copying training dataset
2023-02-12 21:53:05,305:INFO:Defining folds
2023-02-12 21:53:05,305:INFO:Declaring metric variables
2023-02-12 21:53:05,307:INFO:Importing untrained model
2023-02-12 21:53:05,312:INFO:Least Angle Regression Imported successfully
2023-02-12 21:53:05,319:INFO:Starting cross validation
2023-02-12 21:53:05,321:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:05,359:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:05,370:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:05,379:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:05,390:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:05,400:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:05,411:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:05,421:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:05,429:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:05,437:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:05,445:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:05,457:INFO:Calculating mean and std
2023-02-12 21:53:05,457:INFO:Creating metrics dataframe
2023-02-12 21:53:05,461:INFO:Uploading results into container
2023-02-12 21:53:05,462:INFO:Uploading model into container now
2023-02-12 21:53:05,462:INFO:_master_model_container: 5
2023-02-12 21:53:05,462:INFO:_display_container: 2
2023-02-12 21:53:05,463:INFO:Lars(random_state=123)
2023-02-12 21:53:05,463:INFO:create_model() successfully completed......................................
2023-02-12 21:53:05,614:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:05,614:INFO:Creating metrics dataframe
2023-02-12 21:53:05,623:INFO:Initializing Lasso Least Angle Regression
2023-02-12 21:53:05,624:INFO:Total runtime is 0.027865509192148842 minutes
2023-02-12 21:53:05,627:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:05,627:INFO:Initializing create_model()
2023-02-12 21:53:05,627:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:05,627:INFO:Checking exceptions
2023-02-12 21:53:05,627:INFO:Importing libraries
2023-02-12 21:53:05,627:INFO:Copying training dataset
2023-02-12 21:53:05,631:INFO:Defining folds
2023-02-12 21:53:05,631:INFO:Declaring metric variables
2023-02-12 21:53:05,633:INFO:Importing untrained model
2023-02-12 21:53:05,638:INFO:Lasso Least Angle Regression Imported successfully
2023-02-12 21:53:05,645:INFO:Starting cross validation
2023-02-12 21:53:05,646:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:05,680:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:53:05,691:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:53:05,699:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:53:05,709:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:53:05,717:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:53:05,726:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:53:05,732:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:53:05,743:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:53:05,749:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:53:05,759:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-12 21:53:05,768:INFO:Calculating mean and std
2023-02-12 21:53:05,771:INFO:Creating metrics dataframe
2023-02-12 21:53:05,774:INFO:Uploading results into container
2023-02-12 21:53:05,774:INFO:Uploading model into container now
2023-02-12 21:53:05,774:INFO:_master_model_container: 6
2023-02-12 21:53:05,775:INFO:_display_container: 2
2023-02-12 21:53:05,775:INFO:LassoLars(random_state=123)
2023-02-12 21:53:05,775:INFO:create_model() successfully completed......................................
2023-02-12 21:53:05,946:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:05,946:INFO:Creating metrics dataframe
2023-02-12 21:53:05,954:INFO:Initializing Orthogonal Matching Pursuit
2023-02-12 21:53:05,955:INFO:Total runtime is 0.033393541971842446 minutes
2023-02-12 21:53:05,959:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:05,959:INFO:Initializing create_model()
2023-02-12 21:53:05,959:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:05,959:INFO:Checking exceptions
2023-02-12 21:53:05,959:INFO:Importing libraries
2023-02-12 21:53:05,959:INFO:Copying training dataset
2023-02-12 21:53:05,961:INFO:Defining folds
2023-02-12 21:53:05,961:INFO:Declaring metric variables
2023-02-12 21:53:05,965:INFO:Importing untrained model
2023-02-12 21:53:05,967:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-12 21:53:05,975:INFO:Starting cross validation
2023-02-12 21:53:05,976:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:06,013:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:06,022:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:06,032:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:06,042:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:06,051:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:06,060:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:06,067:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:06,077:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:06,083:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:06,093:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-12 21:53:06,104:INFO:Calculating mean and std
2023-02-12 21:53:06,105:INFO:Creating metrics dataframe
2023-02-12 21:53:06,108:INFO:Uploading results into container
2023-02-12 21:53:06,108:INFO:Uploading model into container now
2023-02-12 21:53:06,109:INFO:_master_model_container: 7
2023-02-12 21:53:06,109:INFO:_display_container: 2
2023-02-12 21:53:06,109:INFO:OrthogonalMatchingPursuit()
2023-02-12 21:53:06,109:INFO:create_model() successfully completed......................................
2023-02-12 21:53:06,256:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:06,256:INFO:Creating metrics dataframe
2023-02-12 21:53:06,264:INFO:Initializing Bayesian Ridge
2023-02-12 21:53:06,264:INFO:Total runtime is 0.03854231834411621 minutes
2023-02-12 21:53:06,266:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:06,268:INFO:Initializing create_model()
2023-02-12 21:53:06,268:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:06,268:INFO:Checking exceptions
2023-02-12 21:53:06,268:INFO:Importing libraries
2023-02-12 21:53:06,268:INFO:Copying training dataset
2023-02-12 21:53:06,272:INFO:Defining folds
2023-02-12 21:53:06,272:INFO:Declaring metric variables
2023-02-12 21:53:06,274:INFO:Importing untrained model
2023-02-12 21:53:06,279:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:53:06,285:INFO:Starting cross validation
2023-02-12 21:53:06,286:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:06,415:INFO:Calculating mean and std
2023-02-12 21:53:06,415:INFO:Creating metrics dataframe
2023-02-12 21:53:06,417:INFO:Uploading results into container
2023-02-12 21:53:06,417:INFO:Uploading model into container now
2023-02-12 21:53:06,420:INFO:_master_model_container: 8
2023-02-12 21:53:06,420:INFO:_display_container: 2
2023-02-12 21:53:06,420:INFO:BayesianRidge()
2023-02-12 21:53:06,420:INFO:create_model() successfully completed......................................
2023-02-12 21:53:06,571:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:06,571:INFO:Creating metrics dataframe
2023-02-12 21:53:06,581:INFO:Initializing Passive Aggressive Regressor
2023-02-12 21:53:06,581:INFO:Total runtime is 0.04382154941558838 minutes
2023-02-12 21:53:06,582:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:06,585:INFO:Initializing create_model()
2023-02-12 21:53:06,585:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:06,585:INFO:Checking exceptions
2023-02-12 21:53:06,585:INFO:Importing libraries
2023-02-12 21:53:06,585:INFO:Copying training dataset
2023-02-12 21:53:06,588:INFO:Defining folds
2023-02-12 21:53:06,589:INFO:Declaring metric variables
2023-02-12 21:53:06,592:INFO:Importing untrained model
2023-02-12 21:53:06,596:INFO:Passive Aggressive Regressor Imported successfully
2023-02-12 21:53:06,604:INFO:Starting cross validation
2023-02-12 21:53:06,606:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:06,738:INFO:Calculating mean and std
2023-02-12 21:53:06,738:INFO:Creating metrics dataframe
2023-02-12 21:53:06,741:INFO:Uploading results into container
2023-02-12 21:53:06,741:INFO:Uploading model into container now
2023-02-12 21:53:06,741:INFO:_master_model_container: 9
2023-02-12 21:53:06,741:INFO:_display_container: 2
2023-02-12 21:53:06,742:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-12 21:53:06,742:INFO:create_model() successfully completed......................................
2023-02-12 21:53:06,890:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:06,890:INFO:Creating metrics dataframe
2023-02-12 21:53:06,899:INFO:Initializing Huber Regressor
2023-02-12 21:53:06,899:INFO:Total runtime is 0.04911711613337199 minutes
2023-02-12 21:53:06,905:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:06,905:INFO:Initializing create_model()
2023-02-12 21:53:06,905:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:06,905:INFO:Checking exceptions
2023-02-12 21:53:06,905:INFO:Importing libraries
2023-02-12 21:53:06,905:INFO:Copying training dataset
2023-02-12 21:53:06,908:INFO:Defining folds
2023-02-12 21:53:06,908:INFO:Declaring metric variables
2023-02-12 21:53:06,911:INFO:Importing untrained model
2023-02-12 21:53:06,915:INFO:Huber Regressor Imported successfully
2023-02-12 21:53:06,924:INFO:Starting cross validation
2023-02-12 21:53:06,925:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:07,001:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:53:07,008:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:53:07,019:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:53:07,043:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:53:07,054:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:53:07,059:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:53:07,071:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:53:07,081:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-12 21:53:07,093:INFO:Calculating mean and std
2023-02-12 21:53:07,094:INFO:Creating metrics dataframe
2023-02-12 21:53:07,097:INFO:Uploading results into container
2023-02-12 21:53:07,097:INFO:Uploading model into container now
2023-02-12 21:53:07,098:INFO:_master_model_container: 10
2023-02-12 21:53:07,098:INFO:_display_container: 2
2023-02-12 21:53:07,098:INFO:HuberRegressor()
2023-02-12 21:53:07,098:INFO:create_model() successfully completed......................................
2023-02-12 21:53:07,244:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:07,244:INFO:Creating metrics dataframe
2023-02-12 21:53:07,248:INFO:Initializing K Neighbors Regressor
2023-02-12 21:53:07,248:INFO:Total runtime is 0.0549420436223348 minutes
2023-02-12 21:53:07,256:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:07,256:INFO:Initializing create_model()
2023-02-12 21:53:07,256:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:07,256:INFO:Checking exceptions
2023-02-12 21:53:07,257:INFO:Importing libraries
2023-02-12 21:53:07,257:INFO:Copying training dataset
2023-02-12 21:53:07,259:INFO:Defining folds
2023-02-12 21:53:07,260:INFO:Declaring metric variables
2023-02-12 21:53:07,263:INFO:Importing untrained model
2023-02-12 21:53:07,265:INFO:K Neighbors Regressor Imported successfully
2023-02-12 21:53:07,274:INFO:Starting cross validation
2023-02-12 21:53:07,275:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:07,412:INFO:Calculating mean and std
2023-02-12 21:53:07,413:INFO:Creating metrics dataframe
2023-02-12 21:53:07,416:INFO:Uploading results into container
2023-02-12 21:53:07,416:INFO:Uploading model into container now
2023-02-12 21:53:07,418:INFO:_master_model_container: 11
2023-02-12 21:53:07,418:INFO:_display_container: 2
2023-02-12 21:53:07,418:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-12 21:53:07,418:INFO:create_model() successfully completed......................................
2023-02-12 21:53:07,572:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:07,572:INFO:Creating metrics dataframe
2023-02-12 21:53:07,583:INFO:Initializing Decision Tree Regressor
2023-02-12 21:53:07,583:INFO:Total runtime is 0.060516007741292316 minutes
2023-02-12 21:53:07,588:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:07,588:INFO:Initializing create_model()
2023-02-12 21:53:07,588:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:07,588:INFO:Checking exceptions
2023-02-12 21:53:07,588:INFO:Importing libraries
2023-02-12 21:53:07,588:INFO:Copying training dataset
2023-02-12 21:53:07,591:INFO:Defining folds
2023-02-12 21:53:07,591:INFO:Declaring metric variables
2023-02-12 21:53:07,594:INFO:Importing untrained model
2023-02-12 21:53:07,599:INFO:Decision Tree Regressor Imported successfully
2023-02-12 21:53:07,606:INFO:Starting cross validation
2023-02-12 21:53:07,607:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:07,816:INFO:Calculating mean and std
2023-02-12 21:53:07,819:INFO:Creating metrics dataframe
2023-02-12 21:53:07,821:INFO:Uploading results into container
2023-02-12 21:53:07,822:INFO:Uploading model into container now
2023-02-12 21:53:07,822:INFO:_master_model_container: 12
2023-02-12 21:53:07,822:INFO:_display_container: 2
2023-02-12 21:53:07,822:INFO:DecisionTreeRegressor(random_state=123)
2023-02-12 21:53:07,823:INFO:create_model() successfully completed......................................
2023-02-12 21:53:07,970:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:07,970:INFO:Creating metrics dataframe
2023-02-12 21:53:07,978:INFO:Initializing Random Forest Regressor
2023-02-12 21:53:07,978:INFO:Total runtime is 0.06710728009541829 minutes
2023-02-12 21:53:07,981:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:07,981:INFO:Initializing create_model()
2023-02-12 21:53:07,981:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:07,981:INFO:Checking exceptions
2023-02-12 21:53:07,981:INFO:Importing libraries
2023-02-12 21:53:07,981:INFO:Copying training dataset
2023-02-12 21:53:07,985:INFO:Defining folds
2023-02-12 21:53:07,986:INFO:Declaring metric variables
2023-02-12 21:53:07,990:INFO:Importing untrained model
2023-02-12 21:53:07,993:INFO:Random Forest Regressor Imported successfully
2023-02-12 21:53:08,000:INFO:Starting cross validation
2023-02-12 21:53:08,001:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:08,421:INFO:Calculating mean and std
2023-02-12 21:53:08,422:INFO:Creating metrics dataframe
2023-02-12 21:53:08,424:INFO:Uploading results into container
2023-02-12 21:53:08,425:INFO:Uploading model into container now
2023-02-12 21:53:08,425:INFO:_master_model_container: 13
2023-02-12 21:53:08,425:INFO:_display_container: 2
2023-02-12 21:53:08,425:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-12 21:53:08,425:INFO:create_model() successfully completed......................................
2023-02-12 21:53:08,582:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:08,583:INFO:Creating metrics dataframe
2023-02-12 21:53:08,593:INFO:Initializing Extra Trees Regressor
2023-02-12 21:53:08,593:INFO:Total runtime is 0.07735919157663981 minutes
2023-02-12 21:53:08,596:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:08,596:INFO:Initializing create_model()
2023-02-12 21:53:08,596:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:08,596:INFO:Checking exceptions
2023-02-12 21:53:08,596:INFO:Importing libraries
2023-02-12 21:53:08,596:INFO:Copying training dataset
2023-02-12 21:53:08,600:INFO:Defining folds
2023-02-12 21:53:08,600:INFO:Declaring metric variables
2023-02-12 21:53:08,605:INFO:Importing untrained model
2023-02-12 21:53:08,607:INFO:Extra Trees Regressor Imported successfully
2023-02-12 21:53:08,614:INFO:Starting cross validation
2023-02-12 21:53:08,616:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:08,961:INFO:Calculating mean and std
2023-02-12 21:53:08,962:INFO:Creating metrics dataframe
2023-02-12 21:53:08,966:INFO:Uploading results into container
2023-02-12 21:53:08,966:INFO:Uploading model into container now
2023-02-12 21:53:08,966:INFO:_master_model_container: 14
2023-02-12 21:53:08,966:INFO:_display_container: 2
2023-02-12 21:53:08,967:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-12 21:53:08,967:INFO:create_model() successfully completed......................................
2023-02-12 21:53:09,116:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:09,116:INFO:Creating metrics dataframe
2023-02-12 21:53:09,127:INFO:Initializing AdaBoost Regressor
2023-02-12 21:53:09,128:INFO:Total runtime is 0.08627097209294637 minutes
2023-02-12 21:53:09,131:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:09,131:INFO:Initializing create_model()
2023-02-12 21:53:09,132:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:09,132:INFO:Checking exceptions
2023-02-12 21:53:09,132:INFO:Importing libraries
2023-02-12 21:53:09,132:INFO:Copying training dataset
2023-02-12 21:53:09,136:INFO:Defining folds
2023-02-12 21:53:09,136:INFO:Declaring metric variables
2023-02-12 21:53:09,140:INFO:Importing untrained model
2023-02-12 21:53:09,144:INFO:AdaBoost Regressor Imported successfully
2023-02-12 21:53:09,152:INFO:Starting cross validation
2023-02-12 21:53:09,153:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:09,367:INFO:Calculating mean and std
2023-02-12 21:53:09,368:INFO:Creating metrics dataframe
2023-02-12 21:53:09,370:INFO:Uploading results into container
2023-02-12 21:53:09,370:INFO:Uploading model into container now
2023-02-12 21:53:09,371:INFO:_master_model_container: 15
2023-02-12 21:53:09,371:INFO:_display_container: 2
2023-02-12 21:53:09,371:INFO:AdaBoostRegressor(random_state=123)
2023-02-12 21:53:09,371:INFO:create_model() successfully completed......................................
2023-02-12 21:53:09,519:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:09,519:INFO:Creating metrics dataframe
2023-02-12 21:53:09,528:INFO:Initializing Gradient Boosting Regressor
2023-02-12 21:53:09,528:INFO:Total runtime is 0.09294432799021403 minutes
2023-02-12 21:53:09,531:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:09,532:INFO:Initializing create_model()
2023-02-12 21:53:09,532:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:09,532:INFO:Checking exceptions
2023-02-12 21:53:09,532:INFO:Importing libraries
2023-02-12 21:53:09,532:INFO:Copying training dataset
2023-02-12 21:53:09,535:INFO:Defining folds
2023-02-12 21:53:09,535:INFO:Declaring metric variables
2023-02-12 21:53:09,540:INFO:Importing untrained model
2023-02-12 21:53:09,544:INFO:Gradient Boosting Regressor Imported successfully
2023-02-12 21:53:09,551:INFO:Starting cross validation
2023-02-12 21:53:09,551:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:09,721:INFO:Calculating mean and std
2023-02-12 21:53:09,722:INFO:Creating metrics dataframe
2023-02-12 21:53:09,724:INFO:Uploading results into container
2023-02-12 21:53:09,725:INFO:Uploading model into container now
2023-02-12 21:53:09,725:INFO:_master_model_container: 16
2023-02-12 21:53:09,725:INFO:_display_container: 2
2023-02-12 21:53:09,725:INFO:GradientBoostingRegressor(random_state=123)
2023-02-12 21:53:09,725:INFO:create_model() successfully completed......................................
2023-02-12 21:53:09,872:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:09,872:INFO:Creating metrics dataframe
2023-02-12 21:53:09,883:INFO:Initializing Extreme Gradient Boosting
2023-02-12 21:53:09,884:INFO:Total runtime is 0.0988710363705953 minutes
2023-02-12 21:53:09,886:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:09,887:INFO:Initializing create_model()
2023-02-12 21:53:09,887:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:09,887:INFO:Checking exceptions
2023-02-12 21:53:09,887:INFO:Importing libraries
2023-02-12 21:53:09,887:INFO:Copying training dataset
2023-02-12 21:53:09,890:INFO:Defining folds
2023-02-12 21:53:09,891:INFO:Declaring metric variables
2023-02-12 21:53:09,895:INFO:Importing untrained model
2023-02-12 21:53:09,901:INFO:Extreme Gradient Boosting Imported successfully
2023-02-12 21:53:09,907:INFO:Starting cross validation
2023-02-12 21:53:09,908:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:10,093:INFO:Calculating mean and std
2023-02-12 21:53:10,094:INFO:Creating metrics dataframe
2023-02-12 21:53:10,096:INFO:Uploading results into container
2023-02-12 21:53:10,096:INFO:Uploading model into container now
2023-02-12 21:53:10,096:INFO:_master_model_container: 17
2023-02-12 21:53:10,096:INFO:_display_container: 2
2023-02-12 21:53:10,096:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-12 21:53:10,096:INFO:create_model() successfully completed......................................
2023-02-12 21:53:10,248:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:10,248:INFO:Creating metrics dataframe
2023-02-12 21:53:10,260:INFO:Initializing Light Gradient Boosting Machine
2023-02-12 21:53:10,260:INFO:Total runtime is 0.10514688491821289 minutes
2023-02-12 21:53:10,262:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:10,265:INFO:Initializing create_model()
2023-02-12 21:53:10,265:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:10,265:INFO:Checking exceptions
2023-02-12 21:53:10,265:INFO:Importing libraries
2023-02-12 21:53:10,265:INFO:Copying training dataset
2023-02-12 21:53:10,268:INFO:Defining folds
2023-02-12 21:53:10,268:INFO:Declaring metric variables
2023-02-12 21:53:10,272:INFO:Importing untrained model
2023-02-12 21:53:10,276:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-12 21:53:10,285:INFO:Starting cross validation
2023-02-12 21:53:10,286:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:10,474:INFO:Calculating mean and std
2023-02-12 21:53:10,475:INFO:Creating metrics dataframe
2023-02-12 21:53:10,478:INFO:Uploading results into container
2023-02-12 21:53:10,478:INFO:Uploading model into container now
2023-02-12 21:53:10,479:INFO:_master_model_container: 18
2023-02-12 21:53:10,479:INFO:_display_container: 2
2023-02-12 21:53:10,479:INFO:LGBMRegressor(random_state=123)
2023-02-12 21:53:10,479:INFO:create_model() successfully completed......................................
2023-02-12 21:53:10,640:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:10,640:INFO:Creating metrics dataframe
2023-02-12 21:53:10,650:INFO:Initializing Dummy Regressor
2023-02-12 21:53:10,650:INFO:Total runtime is 0.11163292725880941 minutes
2023-02-12 21:53:10,653:INFO:SubProcess create_model() called ==================================
2023-02-12 21:53:10,654:INFO:Initializing create_model()
2023-02-12 21:53:10,654:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000240A3188B50>, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:10,654:INFO:Checking exceptions
2023-02-12 21:53:10,654:INFO:Importing libraries
2023-02-12 21:53:10,654:INFO:Copying training dataset
2023-02-12 21:53:10,657:INFO:Defining folds
2023-02-12 21:53:10,657:INFO:Declaring metric variables
2023-02-12 21:53:10,659:INFO:Importing untrained model
2023-02-12 21:53:10,664:INFO:Dummy Regressor Imported successfully
2023-02-12 21:53:10,672:INFO:Starting cross validation
2023-02-12 21:53:10,673:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-12 21:53:10,800:INFO:Calculating mean and std
2023-02-12 21:53:10,802:INFO:Creating metrics dataframe
2023-02-12 21:53:10,804:INFO:Uploading results into container
2023-02-12 21:53:10,804:INFO:Uploading model into container now
2023-02-12 21:53:10,804:INFO:_master_model_container: 19
2023-02-12 21:53:10,804:INFO:_display_container: 2
2023-02-12 21:53:10,804:INFO:DummyRegressor()
2023-02-12 21:53:10,804:INFO:create_model() successfully completed......................................
2023-02-12 21:53:10,953:INFO:SubProcess create_model() end ==================================
2023-02-12 21:53:10,954:INFO:Creating metrics dataframe
2023-02-12 21:53:10,975:INFO:Initializing create_model()
2023-02-12 21:53:10,975:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:10,975:INFO:Checking exceptions
2023-02-12 21:53:10,976:INFO:Importing libraries
2023-02-12 21:53:10,976:INFO:Copying training dataset
2023-02-12 21:53:10,978:INFO:Defining folds
2023-02-12 21:53:10,978:INFO:Declaring metric variables
2023-02-12 21:53:10,979:INFO:Importing untrained model
2023-02-12 21:53:10,979:INFO:Declaring custom model
2023-02-12 21:53:10,979:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:53:10,979:INFO:Cross validation set to False
2023-02-12 21:53:10,979:INFO:Fitting Model
2023-02-12 21:53:10,987:INFO:BayesianRidge()
2023-02-12 21:53:10,987:INFO:create_model() successfully completed......................................
2023-02-12 21:53:11,174:INFO:_master_model_container: 19
2023-02-12 21:53:11,174:INFO:_display_container: 2
2023-02-12 21:53:11,174:INFO:BayesianRidge()
2023-02-12 21:53:11,175:INFO:compare_models() successfully completed......................................
2023-02-12 21:53:42,990:INFO:Initializing automl()
2023-02-12 21:53:42,990:INFO:automl(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, optimize=R2, use_holdout=False, turbo=True, return_train_score=False)
2023-02-12 21:53:42,990:INFO:Model Selection Basis : CV Results on Training set
2023-02-12 21:53:42,990:INFO:Checking model 0
2023-02-12 21:53:42,991:INFO:Checking model 1
2023-02-12 21:53:42,991:INFO:Checking model 2
2023-02-12 21:53:42,991:INFO:Checking model 3
2023-02-12 21:53:42,991:INFO:Checking model 4
2023-02-12 21:53:42,991:INFO:Checking model 5
2023-02-12 21:53:42,991:INFO:Checking model 6
2023-02-12 21:53:42,992:INFO:Checking model 7
2023-02-12 21:53:42,992:INFO:Checking model 8
2023-02-12 21:53:42,992:INFO:Checking model 9
2023-02-12 21:53:42,992:INFO:Checking model 10
2023-02-12 21:53:42,992:INFO:Checking model 11
2023-02-12 21:53:42,992:INFO:Checking model 12
2023-02-12 21:53:42,993:INFO:Checking model 13
2023-02-12 21:53:42,993:INFO:Checking model 14
2023-02-12 21:53:42,993:INFO:Checking model 15
2023-02-12 21:53:42,993:INFO:Checking model 16
2023-02-12 21:53:42,993:INFO:Checking model 17
2023-02-12 21:53:42,993:INFO:Checking model 18
2023-02-12 21:53:42,994:INFO:Initializing create_model()
2023-02-12 21:53:42,994:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000240A2B7D0A0>, estimator=BayesianRidge(), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-12 21:53:42,994:INFO:Checking exceptions
2023-02-12 21:53:42,996:INFO:Importing libraries
2023-02-12 21:53:42,996:INFO:Copying training dataset
2023-02-12 21:53:42,998:INFO:Defining folds
2023-02-12 21:53:42,999:INFO:Declaring metric variables
2023-02-12 21:53:42,999:INFO:Importing untrained model
2023-02-12 21:53:42,999:INFO:Declaring custom model
2023-02-12 21:53:43,000:INFO:Bayesian Ridge Imported successfully
2023-02-12 21:53:43,000:INFO:Cross validation set to False
2023-02-12 21:53:43,001:INFO:Fitting Model
2023-02-12 21:53:43,015:INFO:BayesianRidge()
2023-02-12 21:53:43,015:INFO:create_model() successfully completed......................................
2023-02-12 21:53:43,372:INFO:BayesianRidge()
2023-02-12 21:53:43,372:INFO:automl() successfully completed......................................
2023-02-13 10:42:43,288:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 10:42:43,293:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 10:42:43,293:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 10:42:43,293:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 10:42:56,938:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-13 10:43:30,136:INFO:PyCaret RegressionExperiment
2023-02-13 10:43:30,136:INFO:Logging name: reg-default-name
2023-02-13 10:43:30,136:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 10:43:30,136:INFO:version 3.0.0.rc8
2023-02-13 10:43:30,136:INFO:Initializing setup()
2023-02-13 10:43:30,136:INFO:self.USI: 2890
2023-02-13 10:43:30,136:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 10:43:30,136:INFO:Checking environment
2023-02-13 10:43:30,136:INFO:python_version: 3.9.13
2023-02-13 10:43:30,136:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 10:43:30,136:INFO:machine: AMD64
2023-02-13 10:43:30,136:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 10:43:30,136:INFO:Memory: svmem(total=16805040128, available=7459758080, percent=55.6, used=9345282048, free=7459758080)
2023-02-13 10:43:30,136:INFO:Physical Core: 4
2023-02-13 10:43:30,136:INFO:Logical Core: 8
2023-02-13 10:43:30,136:INFO:Checking libraries
2023-02-13 10:43:30,136:INFO:System:
2023-02-13 10:43:30,136:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 10:43:30,136:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 10:43:30,136:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 10:43:30,136:INFO:PyCaret required dependencies:
2023-02-13 10:43:30,136:INFO:                 pip: 23.0
2023-02-13 10:43:30,136:INFO:          setuptools: 58.1.0
2023-02-13 10:43:30,136:INFO:             pycaret: 3.0.0rc8
2023-02-13 10:43:30,136:INFO:             IPython: 8.7.0
2023-02-13 10:43:30,136:INFO:          ipywidgets: 8.0.4
2023-02-13 10:43:30,136:INFO:                tqdm: 4.64.1
2023-02-13 10:43:30,136:INFO:               numpy: 1.22.1
2023-02-13 10:43:30,136:INFO:              pandas: 1.5.2
2023-02-13 10:43:30,136:INFO:              jinja2: 3.1.2
2023-02-13 10:43:30,136:INFO:               scipy: 1.5.4
2023-02-13 10:43:30,136:INFO:              joblib: 1.2.0
2023-02-13 10:43:30,136:INFO:             sklearn: 1.1.3
2023-02-13 10:43:30,136:INFO:                pyod: 1.0.7
2023-02-13 10:43:30,136:INFO:            imblearn: 0.10.1
2023-02-13 10:43:30,136:INFO:   category_encoders: 2.6.0
2023-02-13 10:43:30,136:INFO:            lightgbm: 3.3.4
2023-02-13 10:43:30,136:INFO:               numba: 0.56.4
2023-02-13 10:43:30,136:INFO:            requests: 2.28.1
2023-02-13 10:43:30,145:INFO:          matplotlib: 3.6.2
2023-02-13 10:43:30,145:INFO:          scikitplot: 0.3.7
2023-02-13 10:43:30,145:INFO:         yellowbrick: 1.5
2023-02-13 10:43:30,145:INFO:              plotly: 5.11.0
2023-02-13 10:43:30,145:INFO:             kaleido: 0.2.1
2023-02-13 10:43:30,145:INFO:         statsmodels: 0.13.5
2023-02-13 10:43:30,145:INFO:              sktime: 0.15.1
2023-02-13 10:43:30,145:INFO:               tbats: 1.1.2
2023-02-13 10:43:30,145:INFO:            pmdarima: 2.0.2
2023-02-13 10:43:30,145:INFO:              psutil: 5.9.4
2023-02-13 10:43:30,145:INFO:PyCaret optional dependencies:
2023-02-13 10:43:30,153:INFO:                shap: 0.41.0
2023-02-13 10:43:30,153:INFO:           interpret: 0.3.0
2023-02-13 10:43:30,153:INFO:                umap: Not installed
2023-02-13 10:43:30,153:INFO:    pandas_profiling: 3.6.2
2023-02-13 10:43:30,153:INFO:  explainerdashboard: Not installed
2023-02-13 10:43:30,153:INFO:             autoviz: Not installed
2023-02-13 10:43:30,153:INFO:           fairlearn: Not installed
2023-02-13 10:43:30,153:INFO:             xgboost: 1.7.3
2023-02-13 10:43:30,153:INFO:            catboost: Not installed
2023-02-13 10:43:30,153:INFO:              kmodes: Not installed
2023-02-13 10:43:30,153:INFO:             mlxtend: Not installed
2023-02-13 10:43:30,153:INFO:       statsforecast: Not installed
2023-02-13 10:43:30,153:INFO:        tune_sklearn: Not installed
2023-02-13 10:43:30,153:INFO:                 ray: Not installed
2023-02-13 10:43:30,153:INFO:            hyperopt: Not installed
2023-02-13 10:43:30,153:INFO:              optuna: Not installed
2023-02-13 10:43:30,153:INFO:               skopt: Not installed
2023-02-13 10:43:30,153:INFO:              mlflow: Not installed
2023-02-13 10:43:30,153:INFO:              gradio: Not installed
2023-02-13 10:43:30,153:INFO:             fastapi: Not installed
2023-02-13 10:43:30,153:INFO:             uvicorn: Not installed
2023-02-13 10:43:30,153:INFO:              m2cgen: Not installed
2023-02-13 10:43:30,153:INFO:           evidently: Not installed
2023-02-13 10:43:30,153:INFO:                nltk: 3.8
2023-02-13 10:43:30,153:INFO:            pyLDAvis: Not installed
2023-02-13 10:43:30,153:INFO:              gensim: Not installed
2023-02-13 10:43:30,153:INFO:               spacy: Not installed
2023-02-13 10:43:30,153:INFO:           wordcloud: 1.8.2.2
2023-02-13 10:43:30,153:INFO:            textblob: Not installed
2023-02-13 10:43:30,153:INFO:               fugue: Not installed
2023-02-13 10:43:30,161:INFO:           streamlit: 1.16.0
2023-02-13 10:43:30,161:INFO:             prophet: Not installed
2023-02-13 10:43:30,161:INFO:None
2023-02-13 10:43:30,161:INFO:Set up data.
2023-02-13 10:43:30,163:INFO:Set up train/test split.
2023-02-13 10:43:30,163:INFO:Set up index.
2023-02-13 10:43:30,163:INFO:Set up folding strategy.
2023-02-13 10:43:30,163:INFO:Assigning column types.
2023-02-13 10:43:30,169:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 10:43:30,169:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:43:30,173:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:43:30,177:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:43:30,268:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:43:30,317:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:43:30,317:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:34,199:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:34,202:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,204:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,209:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,259:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,325:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,325:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:34,339:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:34,339:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 10:43:34,350:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,358:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,443:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,519:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,519:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:34,519:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:34,527:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,527:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,591:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,626:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,626:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:34,634:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:34,634:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 10:43:34,642:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,691:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,732:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,733:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:34,733:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:34,740:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,797:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,837:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,837:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:34,837:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:34,837:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 10:43:34,911:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,951:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:43:34,951:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:34,959:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:35,008:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:43:35,051:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:43:35,051:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:35,051:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:35,057:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 10:43:35,116:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:43:35,155:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:35,156:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:35,205:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:43:35,246:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:35,253:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:35,253:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 10:43:35,380:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:35,385:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:35,491:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:35,500:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:35,501:INFO:Preparing preprocessing pipeline...
2023-02-13 10:43:35,503:INFO:Set up column name cleaning.
2023-02-13 10:43:35,503:INFO:Set up simple imputation.
2023-02-13 10:43:35,609:INFO:Finished creating preprocessing pipeline.
2023-02-13 10:43:35,626:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 10:43:35,626:INFO:Creating final display dataframe.
2023-02-13 10:43:35,961:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              2890
2023-02-13 10:43:36,100:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:36,103:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:36,196:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:43:36,200:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:43:36,200:INFO:setup() successfully completed in 6.07s...............
2023-02-13 10:43:36,200:INFO:Initializing compare_models()
2023-02-13 10:43:36,200:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 10:43:36,200:INFO:Checking exceptions
2023-02-13 10:43:36,203:INFO:Preparing display monitor
2023-02-13 10:43:36,226:INFO:Initializing Linear Regression
2023-02-13 10:43:36,227:INFO:Total runtime is 1.0204315185546874e-05 minutes
2023-02-13 10:43:36,227:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:36,227:INFO:Initializing create_model()
2023-02-13 10:43:36,227:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:36,227:INFO:Checking exceptions
2023-02-13 10:43:36,227:INFO:Importing libraries
2023-02-13 10:43:36,227:INFO:Copying training dataset
2023-02-13 10:43:36,232:INFO:Defining folds
2023-02-13 10:43:36,232:INFO:Declaring metric variables
2023-02-13 10:43:36,234:INFO:Importing untrained model
2023-02-13 10:43:36,239:INFO:Linear Regression Imported successfully
2023-02-13 10:43:36,245:INFO:Starting cross validation
2023-02-13 10:43:36,263:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:40,969:INFO:Calculating mean and std
2023-02-13 10:43:40,971:INFO:Creating metrics dataframe
2023-02-13 10:43:40,973:INFO:Uploading results into container
2023-02-13 10:43:40,975:INFO:Uploading model into container now
2023-02-13 10:43:40,976:INFO:_master_model_container: 1
2023-02-13 10:43:40,976:INFO:_display_container: 2
2023-02-13 10:43:40,977:INFO:LinearRegression(n_jobs=-1)
2023-02-13 10:43:40,977:INFO:create_model() successfully completed......................................
2023-02-13 10:43:41,085:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:41,085:INFO:Creating metrics dataframe
2023-02-13 10:43:41,092:INFO:Initializing Lasso Regression
2023-02-13 10:43:41,092:INFO:Total runtime is 0.08109311262766519 minutes
2023-02-13 10:43:41,093:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:41,096:INFO:Initializing create_model()
2023-02-13 10:43:41,096:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:41,096:INFO:Checking exceptions
2023-02-13 10:43:41,096:INFO:Importing libraries
2023-02-13 10:43:41,096:INFO:Copying training dataset
2023-02-13 10:43:41,102:INFO:Defining folds
2023-02-13 10:43:41,102:INFO:Declaring metric variables
2023-02-13 10:43:41,106:INFO:Importing untrained model
2023-02-13 10:43:41,108:INFO:Lasso Regression Imported successfully
2023-02-13 10:43:41,117:INFO:Starting cross validation
2023-02-13 10:43:41,117:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:41,280:INFO:Calculating mean and std
2023-02-13 10:43:41,280:INFO:Creating metrics dataframe
2023-02-13 10:43:41,284:INFO:Uploading results into container
2023-02-13 10:43:41,284:INFO:Uploading model into container now
2023-02-13 10:43:41,284:INFO:_master_model_container: 2
2023-02-13 10:43:41,284:INFO:_display_container: 2
2023-02-13 10:43:41,286:INFO:Lasso(random_state=42)
2023-02-13 10:43:41,286:INFO:create_model() successfully completed......................................
2023-02-13 10:43:41,396:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:41,396:INFO:Creating metrics dataframe
2023-02-13 10:43:41,402:INFO:Initializing Ridge Regression
2023-02-13 10:43:41,402:INFO:Total runtime is 0.08625965118408202 minutes
2023-02-13 10:43:41,406:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:41,406:INFO:Initializing create_model()
2023-02-13 10:43:41,406:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:41,406:INFO:Checking exceptions
2023-02-13 10:43:41,406:INFO:Importing libraries
2023-02-13 10:43:41,406:INFO:Copying training dataset
2023-02-13 10:43:41,413:INFO:Defining folds
2023-02-13 10:43:41,413:INFO:Declaring metric variables
2023-02-13 10:43:41,415:INFO:Importing untrained model
2023-02-13 10:43:41,418:INFO:Ridge Regression Imported successfully
2023-02-13 10:43:41,426:INFO:Starting cross validation
2023-02-13 10:43:41,428:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:41,603:INFO:Calculating mean and std
2023-02-13 10:43:41,607:INFO:Creating metrics dataframe
2023-02-13 10:43:41,608:INFO:Uploading results into container
2023-02-13 10:43:41,608:INFO:Uploading model into container now
2023-02-13 10:43:41,608:INFO:_master_model_container: 3
2023-02-13 10:43:41,608:INFO:_display_container: 2
2023-02-13 10:43:41,608:INFO:Ridge(random_state=42)
2023-02-13 10:43:41,608:INFO:create_model() successfully completed......................................
2023-02-13 10:43:41,721:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:41,721:INFO:Creating metrics dataframe
2023-02-13 10:43:41,729:INFO:Initializing Elastic Net
2023-02-13 10:43:41,729:INFO:Total runtime is 0.09171635309855142 minutes
2023-02-13 10:43:41,733:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:41,733:INFO:Initializing create_model()
2023-02-13 10:43:41,733:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:41,733:INFO:Checking exceptions
2023-02-13 10:43:41,733:INFO:Importing libraries
2023-02-13 10:43:41,733:INFO:Copying training dataset
2023-02-13 10:43:41,737:INFO:Defining folds
2023-02-13 10:43:41,737:INFO:Declaring metric variables
2023-02-13 10:43:41,739:INFO:Importing untrained model
2023-02-13 10:43:41,746:INFO:Elastic Net Imported successfully
2023-02-13 10:43:41,754:INFO:Starting cross validation
2023-02-13 10:43:41,754:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:41,916:INFO:Calculating mean and std
2023-02-13 10:43:41,918:INFO:Creating metrics dataframe
2023-02-13 10:43:41,921:INFO:Uploading results into container
2023-02-13 10:43:41,921:INFO:Uploading model into container now
2023-02-13 10:43:41,923:INFO:_master_model_container: 4
2023-02-13 10:43:41,923:INFO:_display_container: 2
2023-02-13 10:43:41,923:INFO:ElasticNet(random_state=42)
2023-02-13 10:43:41,923:INFO:create_model() successfully completed......................................
2023-02-13 10:43:42,013:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:42,013:INFO:Creating metrics dataframe
2023-02-13 10:43:42,018:INFO:Initializing Least Angle Regression
2023-02-13 10:43:42,018:INFO:Total runtime is 0.09652719100316363 minutes
2023-02-13 10:43:42,026:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:42,026:INFO:Initializing create_model()
2023-02-13 10:43:42,027:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:42,027:INFO:Checking exceptions
2023-02-13 10:43:42,027:INFO:Importing libraries
2023-02-13 10:43:42,027:INFO:Copying training dataset
2023-02-13 10:43:42,028:INFO:Defining folds
2023-02-13 10:43:42,028:INFO:Declaring metric variables
2023-02-13 10:43:42,034:INFO:Importing untrained model
2023-02-13 10:43:42,050:INFO:Least Angle Regression Imported successfully
2023-02-13 10:43:42,109:INFO:Starting cross validation
2023-02-13 10:43:42,111:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:42,180:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,183:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,201:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,212:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,226:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,240:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,256:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,264:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,272:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,289:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,305:INFO:Calculating mean and std
2023-02-13 10:43:42,305:INFO:Creating metrics dataframe
2023-02-13 10:43:42,309:INFO:Uploading results into container
2023-02-13 10:43:42,309:INFO:Uploading model into container now
2023-02-13 10:43:42,310:INFO:_master_model_container: 5
2023-02-13 10:43:42,310:INFO:_display_container: 2
2023-02-13 10:43:42,310:INFO:Lars(random_state=42)
2023-02-13 10:43:42,310:INFO:create_model() successfully completed......................................
2023-02-13 10:43:42,397:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:42,397:INFO:Creating metrics dataframe
2023-02-13 10:43:42,413:INFO:Initializing Lasso Least Angle Regression
2023-02-13 10:43:42,413:INFO:Total runtime is 0.10311519304911293 minutes
2023-02-13 10:43:42,413:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:42,413:INFO:Initializing create_model()
2023-02-13 10:43:42,413:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:42,413:INFO:Checking exceptions
2023-02-13 10:43:42,413:INFO:Importing libraries
2023-02-13 10:43:42,413:INFO:Copying training dataset
2023-02-13 10:43:42,413:INFO:Defining folds
2023-02-13 10:43:42,413:INFO:Declaring metric variables
2023-02-13 10:43:42,421:INFO:Importing untrained model
2023-02-13 10:43:42,421:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 10:43:42,431:INFO:Starting cross validation
2023-02-13 10:43:42,431:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:42,470:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:43:42,478:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:43:42,497:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:43:42,504:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:43:42,515:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:43:42,527:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:43:42,540:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:43:42,551:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:43:42,561:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:43:42,568:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:43:42,586:INFO:Calculating mean and std
2023-02-13 10:43:42,586:INFO:Creating metrics dataframe
2023-02-13 10:43:42,590:INFO:Uploading results into container
2023-02-13 10:43:42,590:INFO:Uploading model into container now
2023-02-13 10:43:42,590:INFO:_master_model_container: 6
2023-02-13 10:43:42,590:INFO:_display_container: 2
2023-02-13 10:43:42,591:INFO:LassoLars(random_state=42)
2023-02-13 10:43:42,591:INFO:create_model() successfully completed......................................
2023-02-13 10:43:42,694:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:42,694:INFO:Creating metrics dataframe
2023-02-13 10:43:42,699:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 10:43:42,699:INFO:Total runtime is 0.10788814226786293 minutes
2023-02-13 10:43:42,708:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:42,708:INFO:Initializing create_model()
2023-02-13 10:43:42,708:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:42,708:INFO:Checking exceptions
2023-02-13 10:43:42,708:INFO:Importing libraries
2023-02-13 10:43:42,708:INFO:Copying training dataset
2023-02-13 10:43:42,712:INFO:Defining folds
2023-02-13 10:43:42,712:INFO:Declaring metric variables
2023-02-13 10:43:42,717:INFO:Importing untrained model
2023-02-13 10:43:42,721:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 10:43:42,723:INFO:Starting cross validation
2023-02-13 10:43:42,729:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:42,770:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,781:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,790:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,801:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,812:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,822:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,828:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,840:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,851:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,863:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:43:42,880:INFO:Calculating mean and std
2023-02-13 10:43:42,880:INFO:Creating metrics dataframe
2023-02-13 10:43:42,884:INFO:Uploading results into container
2023-02-13 10:43:42,884:INFO:Uploading model into container now
2023-02-13 10:43:42,885:INFO:_master_model_container: 7
2023-02-13 10:43:42,885:INFO:_display_container: 2
2023-02-13 10:43:42,885:INFO:OrthogonalMatchingPursuit()
2023-02-13 10:43:42,885:INFO:create_model() successfully completed......................................
2023-02-13 10:43:42,984:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:42,984:INFO:Creating metrics dataframe
2023-02-13 10:43:43,000:INFO:Initializing Bayesian Ridge
2023-02-13 10:43:43,000:INFO:Total runtime is 0.11290561755498248 minutes
2023-02-13 10:43:43,004:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:43,004:INFO:Initializing create_model()
2023-02-13 10:43:43,004:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:43,004:INFO:Checking exceptions
2023-02-13 10:43:43,004:INFO:Importing libraries
2023-02-13 10:43:43,004:INFO:Copying training dataset
2023-02-13 10:43:43,006:INFO:Defining folds
2023-02-13 10:43:43,006:INFO:Declaring metric variables
2023-02-13 10:43:43,010:INFO:Importing untrained model
2023-02-13 10:43:43,015:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:43:43,019:INFO:Starting cross validation
2023-02-13 10:43:43,021:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:43,178:INFO:Calculating mean and std
2023-02-13 10:43:43,181:INFO:Creating metrics dataframe
2023-02-13 10:43:43,184:INFO:Uploading results into container
2023-02-13 10:43:43,184:INFO:Uploading model into container now
2023-02-13 10:43:43,184:INFO:_master_model_container: 8
2023-02-13 10:43:43,184:INFO:_display_container: 2
2023-02-13 10:43:43,184:INFO:BayesianRidge()
2023-02-13 10:43:43,184:INFO:create_model() successfully completed......................................
2023-02-13 10:43:43,280:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:43,280:INFO:Creating metrics dataframe
2023-02-13 10:43:43,288:INFO:Initializing Passive Aggressive Regressor
2023-02-13 10:43:43,288:INFO:Total runtime is 0.11770184834798174 minutes
2023-02-13 10:43:43,293:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:43,293:INFO:Initializing create_model()
2023-02-13 10:43:43,293:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:43,294:INFO:Checking exceptions
2023-02-13 10:43:43,294:INFO:Importing libraries
2023-02-13 10:43:43,294:INFO:Copying training dataset
2023-02-13 10:43:43,298:INFO:Defining folds
2023-02-13 10:43:43,298:INFO:Declaring metric variables
2023-02-13 10:43:43,298:INFO:Importing untrained model
2023-02-13 10:43:43,304:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 10:43:43,308:INFO:Starting cross validation
2023-02-13 10:43:43,311:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:43,460:INFO:Calculating mean and std
2023-02-13 10:43:43,460:INFO:Creating metrics dataframe
2023-02-13 10:43:43,463:INFO:Uploading results into container
2023-02-13 10:43:43,463:INFO:Uploading model into container now
2023-02-13 10:43:43,463:INFO:_master_model_container: 9
2023-02-13 10:43:43,463:INFO:_display_container: 2
2023-02-13 10:43:43,463:INFO:PassiveAggressiveRegressor(random_state=42)
2023-02-13 10:43:43,463:INFO:create_model() successfully completed......................................
2023-02-13 10:43:43,578:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:43,578:INFO:Creating metrics dataframe
2023-02-13 10:43:43,589:INFO:Initializing Huber Regressor
2023-02-13 10:43:43,589:INFO:Total runtime is 0.12272194226582842 minutes
2023-02-13 10:43:43,593:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:43,593:INFO:Initializing create_model()
2023-02-13 10:43:43,593:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:43,593:INFO:Checking exceptions
2023-02-13 10:43:43,593:INFO:Importing libraries
2023-02-13 10:43:43,593:INFO:Copying training dataset
2023-02-13 10:43:43,597:INFO:Defining folds
2023-02-13 10:43:43,597:INFO:Declaring metric variables
2023-02-13 10:43:43,601:INFO:Importing untrained model
2023-02-13 10:43:43,607:INFO:Huber Regressor Imported successfully
2023-02-13 10:43:43,618:INFO:Starting cross validation
2023-02-13 10:43:43,618:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:43,713:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:43:43,745:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:43:43,772:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:43:43,789:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:43:43,800:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:43:43,811:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:43:43,827:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:43:43,847:INFO:Calculating mean and std
2023-02-13 10:43:43,847:INFO:Creating metrics dataframe
2023-02-13 10:43:43,852:INFO:Uploading results into container
2023-02-13 10:43:43,852:INFO:Uploading model into container now
2023-02-13 10:43:43,852:INFO:_master_model_container: 10
2023-02-13 10:43:43,852:INFO:_display_container: 2
2023-02-13 10:43:43,852:INFO:HuberRegressor()
2023-02-13 10:43:43,852:INFO:create_model() successfully completed......................................
2023-02-13 10:43:43,950:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:43,950:INFO:Creating metrics dataframe
2023-02-13 10:43:43,959:INFO:Initializing K Neighbors Regressor
2023-02-13 10:43:43,959:INFO:Total runtime is 0.12888061602910356 minutes
2023-02-13 10:43:43,966:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:43,966:INFO:Initializing create_model()
2023-02-13 10:43:43,966:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:43,966:INFO:Checking exceptions
2023-02-13 10:43:43,966:INFO:Importing libraries
2023-02-13 10:43:43,966:INFO:Copying training dataset
2023-02-13 10:43:43,969:INFO:Defining folds
2023-02-13 10:43:43,969:INFO:Declaring metric variables
2023-02-13 10:43:43,974:INFO:Importing untrained model
2023-02-13 10:43:43,980:INFO:K Neighbors Regressor Imported successfully
2023-02-13 10:43:43,983:INFO:Starting cross validation
2023-02-13 10:43:43,987:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:44,149:INFO:Calculating mean and std
2023-02-13 10:43:44,149:INFO:Creating metrics dataframe
2023-02-13 10:43:44,155:INFO:Uploading results into container
2023-02-13 10:43:44,155:INFO:Uploading model into container now
2023-02-13 10:43:44,155:INFO:_master_model_container: 11
2023-02-13 10:43:44,155:INFO:_display_container: 2
2023-02-13 10:43:44,155:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:43:44,155:INFO:create_model() successfully completed......................................
2023-02-13 10:43:44,304:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:44,304:INFO:Creating metrics dataframe
2023-02-13 10:43:44,318:INFO:Initializing Decision Tree Regressor
2023-02-13 10:43:44,318:INFO:Total runtime is 0.13486379384994504 minutes
2023-02-13 10:43:44,321:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:44,321:INFO:Initializing create_model()
2023-02-13 10:43:44,321:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:44,321:INFO:Checking exceptions
2023-02-13 10:43:44,321:INFO:Importing libraries
2023-02-13 10:43:44,321:INFO:Copying training dataset
2023-02-13 10:43:44,326:INFO:Defining folds
2023-02-13 10:43:44,326:INFO:Declaring metric variables
2023-02-13 10:43:44,326:INFO:Importing untrained model
2023-02-13 10:43:44,335:INFO:Decision Tree Regressor Imported successfully
2023-02-13 10:43:44,345:INFO:Starting cross validation
2023-02-13 10:43:44,345:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:44,501:INFO:Calculating mean and std
2023-02-13 10:43:44,505:INFO:Creating metrics dataframe
2023-02-13 10:43:44,509:INFO:Uploading results into container
2023-02-13 10:43:44,510:INFO:Uploading model into container now
2023-02-13 10:43:44,510:INFO:_master_model_container: 12
2023-02-13 10:43:44,510:INFO:_display_container: 2
2023-02-13 10:43:44,510:INFO:DecisionTreeRegressor(random_state=42)
2023-02-13 10:43:44,510:INFO:create_model() successfully completed......................................
2023-02-13 10:43:44,607:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:44,607:INFO:Creating metrics dataframe
2023-02-13 10:43:44,633:INFO:Initializing Random Forest Regressor
2023-02-13 10:43:44,633:INFO:Total runtime is 0.1401115854581197 minutes
2023-02-13 10:43:44,640:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:44,642:INFO:Initializing create_model()
2023-02-13 10:43:44,643:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:44,643:INFO:Checking exceptions
2023-02-13 10:43:44,643:INFO:Importing libraries
2023-02-13 10:43:44,643:INFO:Copying training dataset
2023-02-13 10:43:44,649:INFO:Defining folds
2023-02-13 10:43:44,649:INFO:Declaring metric variables
2023-02-13 10:43:44,658:INFO:Importing untrained model
2023-02-13 10:43:44,667:INFO:Random Forest Regressor Imported successfully
2023-02-13 10:43:44,685:INFO:Starting cross validation
2023-02-13 10:43:44,686:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:45,281:INFO:Calculating mean and std
2023-02-13 10:43:45,285:INFO:Creating metrics dataframe
2023-02-13 10:43:45,286:INFO:Uploading results into container
2023-02-13 10:43:45,286:INFO:Uploading model into container now
2023-02-13 10:43:45,286:INFO:_master_model_container: 13
2023-02-13 10:43:45,286:INFO:_display_container: 2
2023-02-13 10:43:45,286:INFO:RandomForestRegressor(n_jobs=-1, random_state=42)
2023-02-13 10:43:45,286:INFO:create_model() successfully completed......................................
2023-02-13 10:43:45,395:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:45,395:INFO:Creating metrics dataframe
2023-02-13 10:43:45,403:INFO:Initializing Extra Trees Regressor
2023-02-13 10:43:45,403:INFO:Total runtime is 0.1529473304748535 minutes
2023-02-13 10:43:45,412:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:45,412:INFO:Initializing create_model()
2023-02-13 10:43:45,412:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:45,413:INFO:Checking exceptions
2023-02-13 10:43:45,413:INFO:Importing libraries
2023-02-13 10:43:45,413:INFO:Copying training dataset
2023-02-13 10:43:45,416:INFO:Defining folds
2023-02-13 10:43:45,416:INFO:Declaring metric variables
2023-02-13 10:43:45,418:INFO:Importing untrained model
2023-02-13 10:43:45,421:INFO:Extra Trees Regressor Imported successfully
2023-02-13 10:43:45,432:INFO:Starting cross validation
2023-02-13 10:43:45,433:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:45,877:INFO:Calculating mean and std
2023-02-13 10:43:45,880:INFO:Creating metrics dataframe
2023-02-13 10:43:45,881:INFO:Uploading results into container
2023-02-13 10:43:45,881:INFO:Uploading model into container now
2023-02-13 10:43:45,881:INFO:_master_model_container: 14
2023-02-13 10:43:45,881:INFO:_display_container: 2
2023-02-13 10:43:45,881:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=42)
2023-02-13 10:43:45,881:INFO:create_model() successfully completed......................................
2023-02-13 10:43:45,981:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:45,986:INFO:Creating metrics dataframe
2023-02-13 10:43:45,998:INFO:Initializing AdaBoost Regressor
2023-02-13 10:43:45,998:INFO:Total runtime is 0.1628692666689555 minutes
2023-02-13 10:43:45,998:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:45,998:INFO:Initializing create_model()
2023-02-13 10:43:45,998:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:45,998:INFO:Checking exceptions
2023-02-13 10:43:45,998:INFO:Importing libraries
2023-02-13 10:43:45,998:INFO:Copying training dataset
2023-02-13 10:43:46,004:INFO:Defining folds
2023-02-13 10:43:46,004:INFO:Declaring metric variables
2023-02-13 10:43:46,009:INFO:Importing untrained model
2023-02-13 10:43:46,013:INFO:AdaBoost Regressor Imported successfully
2023-02-13 10:43:46,020:INFO:Starting cross validation
2023-02-13 10:43:46,021:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:46,300:INFO:Calculating mean and std
2023-02-13 10:43:46,300:INFO:Creating metrics dataframe
2023-02-13 10:43:46,304:INFO:Uploading results into container
2023-02-13 10:43:46,307:INFO:Uploading model into container now
2023-02-13 10:43:46,307:INFO:_master_model_container: 15
2023-02-13 10:43:46,307:INFO:_display_container: 2
2023-02-13 10:43:46,307:INFO:AdaBoostRegressor(random_state=42)
2023-02-13 10:43:46,307:INFO:create_model() successfully completed......................................
2023-02-13 10:43:46,428:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:46,428:INFO:Creating metrics dataframe
2023-02-13 10:43:46,444:INFO:Initializing Gradient Boosting Regressor
2023-02-13 10:43:46,444:INFO:Total runtime is 0.17029815514882407 minutes
2023-02-13 10:43:46,452:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:46,452:INFO:Initializing create_model()
2023-02-13 10:43:46,452:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:46,452:INFO:Checking exceptions
2023-02-13 10:43:46,452:INFO:Importing libraries
2023-02-13 10:43:46,452:INFO:Copying training dataset
2023-02-13 10:43:46,457:INFO:Defining folds
2023-02-13 10:43:46,457:INFO:Declaring metric variables
2023-02-13 10:43:46,462:INFO:Importing untrained model
2023-02-13 10:43:46,466:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 10:43:46,474:INFO:Starting cross validation
2023-02-13 10:43:46,475:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:46,684:INFO:Calculating mean and std
2023-02-13 10:43:46,690:INFO:Creating metrics dataframe
2023-02-13 10:43:46,690:INFO:Uploading results into container
2023-02-13 10:43:46,690:INFO:Uploading model into container now
2023-02-13 10:43:46,690:INFO:_master_model_container: 16
2023-02-13 10:43:46,690:INFO:_display_container: 2
2023-02-13 10:43:46,690:INFO:GradientBoostingRegressor(random_state=42)
2023-02-13 10:43:46,690:INFO:create_model() successfully completed......................................
2023-02-13 10:43:46,785:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:46,788:INFO:Creating metrics dataframe
2023-02-13 10:43:46,799:INFO:Initializing Extreme Gradient Boosting
2023-02-13 10:43:46,799:INFO:Total runtime is 0.17622095743815105 minutes
2023-02-13 10:43:46,804:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:46,805:INFO:Initializing create_model()
2023-02-13 10:43:46,805:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:46,805:INFO:Checking exceptions
2023-02-13 10:43:46,805:INFO:Importing libraries
2023-02-13 10:43:46,805:INFO:Copying training dataset
2023-02-13 10:43:46,812:INFO:Defining folds
2023-02-13 10:43:46,812:INFO:Declaring metric variables
2023-02-13 10:43:46,820:INFO:Importing untrained model
2023-02-13 10:43:46,828:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 10:43:46,846:INFO:Starting cross validation
2023-02-13 10:43:46,846:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:47,124:INFO:Calculating mean and std
2023-02-13 10:43:47,124:INFO:Creating metrics dataframe
2023-02-13 10:43:47,130:INFO:Uploading results into container
2023-02-13 10:43:47,130:INFO:Uploading model into container now
2023-02-13 10:43:47,130:INFO:_master_model_container: 17
2023-02-13 10:43:47,130:INFO:_display_container: 2
2023-02-13 10:43:47,130:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=42, ...)
2023-02-13 10:43:47,134:INFO:create_model() successfully completed......................................
2023-02-13 10:43:47,231:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:47,231:INFO:Creating metrics dataframe
2023-02-13 10:43:47,239:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 10:43:47,245:INFO:Total runtime is 0.1836493730545044 minutes
2023-02-13 10:43:47,249:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:47,249:INFO:Initializing create_model()
2023-02-13 10:43:47,249:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:47,249:INFO:Checking exceptions
2023-02-13 10:43:47,249:INFO:Importing libraries
2023-02-13 10:43:47,249:INFO:Copying training dataset
2023-02-13 10:43:47,253:INFO:Defining folds
2023-02-13 10:43:47,253:INFO:Declaring metric variables
2023-02-13 10:43:47,256:INFO:Importing untrained model
2023-02-13 10:43:47,262:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 10:43:47,267:INFO:Starting cross validation
2023-02-13 10:43:47,270:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:47,479:INFO:Calculating mean and std
2023-02-13 10:43:47,482:INFO:Creating metrics dataframe
2023-02-13 10:43:47,483:INFO:Uploading results into container
2023-02-13 10:43:47,483:INFO:Uploading model into container now
2023-02-13 10:43:47,483:INFO:_master_model_container: 18
2023-02-13 10:43:47,483:INFO:_display_container: 2
2023-02-13 10:43:47,483:INFO:LGBMRegressor(random_state=42)
2023-02-13 10:43:47,483:INFO:create_model() successfully completed......................................
2023-02-13 10:43:47,584:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:47,584:INFO:Creating metrics dataframe
2023-02-13 10:43:47,592:INFO:Initializing Dummy Regressor
2023-02-13 10:43:47,592:INFO:Total runtime is 0.18943389654159548 minutes
2023-02-13 10:43:47,599:INFO:SubProcess create_model() called ==================================
2023-02-13 10:43:47,599:INFO:Initializing create_model()
2023-02-13 10:43:47,599:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9413EEE0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:47,599:INFO:Checking exceptions
2023-02-13 10:43:47,599:INFO:Importing libraries
2023-02-13 10:43:47,599:INFO:Copying training dataset
2023-02-13 10:43:47,603:INFO:Defining folds
2023-02-13 10:43:47,603:INFO:Declaring metric variables
2023-02-13 10:43:47,605:INFO:Importing untrained model
2023-02-13 10:43:47,612:INFO:Dummy Regressor Imported successfully
2023-02-13 10:43:47,620:INFO:Starting cross validation
2023-02-13 10:43:47,621:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:43:47,774:INFO:Calculating mean and std
2023-02-13 10:43:47,777:INFO:Creating metrics dataframe
2023-02-13 10:43:47,777:INFO:Uploading results into container
2023-02-13 10:43:47,777:INFO:Uploading model into container now
2023-02-13 10:43:47,777:INFO:_master_model_container: 19
2023-02-13 10:43:47,777:INFO:_display_container: 2
2023-02-13 10:43:47,777:INFO:DummyRegressor()
2023-02-13 10:43:47,777:INFO:create_model() successfully completed......................................
2023-02-13 10:43:47,888:INFO:SubProcess create_model() end ==================================
2023-02-13 10:43:47,888:INFO:Creating metrics dataframe
2023-02-13 10:43:47,921:INFO:Initializing create_model()
2023-02-13 10:43:47,921:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93215E20>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:43:47,921:INFO:Checking exceptions
2023-02-13 10:43:47,925:INFO:Importing libraries
2023-02-13 10:43:47,925:INFO:Copying training dataset
2023-02-13 10:43:47,927:INFO:Defining folds
2023-02-13 10:43:47,927:INFO:Declaring metric variables
2023-02-13 10:43:47,928:INFO:Importing untrained model
2023-02-13 10:43:47,928:INFO:Declaring custom model
2023-02-13 10:43:47,928:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:43:47,928:INFO:Cross validation set to False
2023-02-13 10:43:47,928:INFO:Fitting Model
2023-02-13 10:43:47,976:INFO:BayesianRidge()
2023-02-13 10:43:47,976:INFO:create_model() successfully completed......................................
2023-02-13 10:43:48,128:INFO:_master_model_container: 19
2023-02-13 10:43:48,129:INFO:_display_container: 2
2023-02-13 10:43:48,129:INFO:BayesianRidge()
2023-02-13 10:43:48,129:INFO:compare_models() successfully completed......................................
2023-02-13 10:44:06,111:INFO:PyCaret RegressionExperiment
2023-02-13 10:44:06,116:INFO:Logging name: reg-default-name
2023-02-13 10:44:06,116:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 10:44:06,116:INFO:version 3.0.0.rc8
2023-02-13 10:44:06,116:INFO:Initializing setup()
2023-02-13 10:44:06,116:INFO:self.USI: 099b
2023-02-13 10:44:06,116:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 10:44:06,116:INFO:Checking environment
2023-02-13 10:44:06,116:INFO:python_version: 3.9.13
2023-02-13 10:44:06,116:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 10:44:06,116:INFO:machine: AMD64
2023-02-13 10:44:06,116:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 10:44:06,119:INFO:Memory: svmem(total=16805040128, available=6685958144, percent=60.2, used=10119081984, free=6685958144)
2023-02-13 10:44:06,119:INFO:Physical Core: 4
2023-02-13 10:44:06,119:INFO:Logical Core: 8
2023-02-13 10:44:06,119:INFO:Checking libraries
2023-02-13 10:44:06,119:INFO:System:
2023-02-13 10:44:06,119:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 10:44:06,119:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 10:44:06,119:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 10:44:06,119:INFO:PyCaret required dependencies:
2023-02-13 10:44:06,119:INFO:                 pip: 23.0
2023-02-13 10:44:06,119:INFO:          setuptools: 58.1.0
2023-02-13 10:44:06,119:INFO:             pycaret: 3.0.0rc8
2023-02-13 10:44:06,119:INFO:             IPython: 8.7.0
2023-02-13 10:44:06,119:INFO:          ipywidgets: 8.0.4
2023-02-13 10:44:06,119:INFO:                tqdm: 4.64.1
2023-02-13 10:44:06,119:INFO:               numpy: 1.22.1
2023-02-13 10:44:06,119:INFO:              pandas: 1.5.2
2023-02-13 10:44:06,119:INFO:              jinja2: 3.1.2
2023-02-13 10:44:06,119:INFO:               scipy: 1.5.4
2023-02-13 10:44:06,119:INFO:              joblib: 1.2.0
2023-02-13 10:44:06,119:INFO:             sklearn: 1.1.3
2023-02-13 10:44:06,119:INFO:                pyod: 1.0.7
2023-02-13 10:44:06,119:INFO:            imblearn: 0.10.1
2023-02-13 10:44:06,119:INFO:   category_encoders: 2.6.0
2023-02-13 10:44:06,119:INFO:            lightgbm: 3.3.4
2023-02-13 10:44:06,119:INFO:               numba: 0.56.4
2023-02-13 10:44:06,119:INFO:            requests: 2.28.1
2023-02-13 10:44:06,119:INFO:          matplotlib: 3.6.2
2023-02-13 10:44:06,119:INFO:          scikitplot: 0.3.7
2023-02-13 10:44:06,119:INFO:         yellowbrick: 1.5
2023-02-13 10:44:06,119:INFO:              plotly: 5.11.0
2023-02-13 10:44:06,119:INFO:             kaleido: 0.2.1
2023-02-13 10:44:06,119:INFO:         statsmodels: 0.13.5
2023-02-13 10:44:06,119:INFO:              sktime: 0.15.1
2023-02-13 10:44:06,119:INFO:               tbats: 1.1.2
2023-02-13 10:44:06,119:INFO:            pmdarima: 2.0.2
2023-02-13 10:44:06,119:INFO:              psutil: 5.9.4
2023-02-13 10:44:06,119:INFO:PyCaret optional dependencies:
2023-02-13 10:44:06,119:INFO:                shap: 0.41.0
2023-02-13 10:44:06,119:INFO:           interpret: 0.3.0
2023-02-13 10:44:06,119:INFO:                umap: Not installed
2023-02-13 10:44:06,119:INFO:    pandas_profiling: 3.6.2
2023-02-13 10:44:06,119:INFO:  explainerdashboard: Not installed
2023-02-13 10:44:06,124:INFO:             autoviz: Not installed
2023-02-13 10:44:06,124:INFO:           fairlearn: Not installed
2023-02-13 10:44:06,124:INFO:             xgboost: 1.7.3
2023-02-13 10:44:06,124:INFO:            catboost: Not installed
2023-02-13 10:44:06,124:INFO:              kmodes: Not installed
2023-02-13 10:44:06,124:INFO:             mlxtend: Not installed
2023-02-13 10:44:06,124:INFO:       statsforecast: Not installed
2023-02-13 10:44:06,124:INFO:        tune_sklearn: Not installed
2023-02-13 10:44:06,124:INFO:                 ray: Not installed
2023-02-13 10:44:06,124:INFO:            hyperopt: Not installed
2023-02-13 10:44:06,124:INFO:              optuna: Not installed
2023-02-13 10:44:06,124:INFO:               skopt: Not installed
2023-02-13 10:44:06,124:INFO:              mlflow: Not installed
2023-02-13 10:44:06,124:INFO:              gradio: Not installed
2023-02-13 10:44:06,124:INFO:             fastapi: Not installed
2023-02-13 10:44:06,124:INFO:             uvicorn: Not installed
2023-02-13 10:44:06,124:INFO:              m2cgen: Not installed
2023-02-13 10:44:06,124:INFO:           evidently: Not installed
2023-02-13 10:44:06,124:INFO:                nltk: 3.8
2023-02-13 10:44:06,125:INFO:            pyLDAvis: Not installed
2023-02-13 10:44:06,125:INFO:              gensim: Not installed
2023-02-13 10:44:06,125:INFO:               spacy: Not installed
2023-02-13 10:44:06,125:INFO:           wordcloud: 1.8.2.2
2023-02-13 10:44:06,125:INFO:            textblob: Not installed
2023-02-13 10:44:06,125:INFO:               fugue: Not installed
2023-02-13 10:44:06,125:INFO:           streamlit: 1.16.0
2023-02-13 10:44:06,125:INFO:             prophet: Not installed
2023-02-13 10:44:06,125:INFO:None
2023-02-13 10:44:06,125:INFO:Set up data.
2023-02-13 10:44:06,130:INFO:Set up train/test split.
2023-02-13 10:44:06,134:INFO:Set up index.
2023-02-13 10:44:06,134:INFO:Set up folding strategy.
2023-02-13 10:44:06,134:INFO:Assigning column types.
2023-02-13 10:44:06,138:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 10:44:06,140:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,146:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,148:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,227:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,285:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,285:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:06,290:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:06,290:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,296:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,303:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,363:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,401:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,408:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:06,411:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:06,411:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 10:44:06,412:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,418:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,482:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,530:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,530:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:06,535:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:06,542:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,550:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,615:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,671:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,671:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:06,674:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:06,674:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 10:44:06,682:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,731:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,798:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,800:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:06,806:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:06,824:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,892:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,945:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:44:06,945:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:06,947:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:06,948:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 10:44:07,045:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:44:07,088:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:44:07,090:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:07,093:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:07,189:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:44:07,225:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:44:07,233:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:07,233:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:07,233:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 10:44:07,291:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:44:07,331:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:07,331:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:07,409:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:44:07,446:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:07,447:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:07,447:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 10:44:07,540:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:07,544:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:07,644:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:07,656:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:07,656:INFO:Preparing preprocessing pipeline...
2023-02-13 10:44:07,658:INFO:Set up column name cleaning.
2023-02-13 10:44:07,658:INFO:Set up simple imputation.
2023-02-13 10:44:07,711:INFO:Finished creating preprocessing pipeline.
2023-02-13 10:44:07,711:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 10:44:07,711:INFO:Creating final display dataframe.
2023-02-13 10:44:07,926:INFO:Setup _display_container:                     Description             Value
0                    Session id                14
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              099b
2023-02-13 10:44:08,054:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:08,054:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:08,166:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:44:08,166:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:44:08,166:INFO:setup() successfully completed in 2.05s...............
2023-02-13 10:44:08,166:INFO:Initializing compare_models()
2023-02-13 10:44:08,166:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 10:44:08,166:INFO:Checking exceptions
2023-02-13 10:44:08,166:INFO:Preparing display monitor
2023-02-13 10:44:08,192:INFO:Initializing Linear Regression
2023-02-13 10:44:08,193:INFO:Total runtime is 1.978476842244466e-05 minutes
2023-02-13 10:44:08,195:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:08,195:INFO:Initializing create_model()
2023-02-13 10:44:08,195:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:08,195:INFO:Checking exceptions
2023-02-13 10:44:08,195:INFO:Importing libraries
2023-02-13 10:44:08,195:INFO:Copying training dataset
2023-02-13 10:44:08,198:INFO:Defining folds
2023-02-13 10:44:08,198:INFO:Declaring metric variables
2023-02-13 10:44:08,202:INFO:Importing untrained model
2023-02-13 10:44:08,207:INFO:Linear Regression Imported successfully
2023-02-13 10:44:08,212:INFO:Starting cross validation
2023-02-13 10:44:08,213:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:08,724:INFO:Calculating mean and std
2023-02-13 10:44:08,724:INFO:Creating metrics dataframe
2023-02-13 10:44:08,730:INFO:Uploading results into container
2023-02-13 10:44:08,730:INFO:Uploading model into container now
2023-02-13 10:44:08,730:INFO:_master_model_container: 1
2023-02-13 10:44:08,730:INFO:_display_container: 2
2023-02-13 10:44:08,730:INFO:LinearRegression(n_jobs=-1)
2023-02-13 10:44:08,730:INFO:create_model() successfully completed......................................
2023-02-13 10:44:08,837:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:08,837:INFO:Creating metrics dataframe
2023-02-13 10:44:08,842:INFO:Initializing Lasso Regression
2023-02-13 10:44:08,842:INFO:Total runtime is 0.0108392596244812 minutes
2023-02-13 10:44:08,842:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:08,842:INFO:Initializing create_model()
2023-02-13 10:44:08,842:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:08,842:INFO:Checking exceptions
2023-02-13 10:44:08,842:INFO:Importing libraries
2023-02-13 10:44:08,842:INFO:Copying training dataset
2023-02-13 10:44:08,850:INFO:Defining folds
2023-02-13 10:44:08,850:INFO:Declaring metric variables
2023-02-13 10:44:08,850:INFO:Importing untrained model
2023-02-13 10:44:08,850:INFO:Lasso Regression Imported successfully
2023-02-13 10:44:08,864:INFO:Starting cross validation
2023-02-13 10:44:08,864:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:09,019:INFO:Calculating mean and std
2023-02-13 10:44:09,020:INFO:Creating metrics dataframe
2023-02-13 10:44:09,020:INFO:Uploading results into container
2023-02-13 10:44:09,023:INFO:Uploading model into container now
2023-02-13 10:44:09,023:INFO:_master_model_container: 2
2023-02-13 10:44:09,023:INFO:_display_container: 2
2023-02-13 10:44:09,023:INFO:Lasso(random_state=14)
2023-02-13 10:44:09,023:INFO:create_model() successfully completed......................................
2023-02-13 10:44:09,113:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:09,113:INFO:Creating metrics dataframe
2023-02-13 10:44:09,121:INFO:Initializing Ridge Regression
2023-02-13 10:44:09,121:INFO:Total runtime is 0.015490746498107909 minutes
2023-02-13 10:44:09,126:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:09,126:INFO:Initializing create_model()
2023-02-13 10:44:09,126:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:09,126:INFO:Checking exceptions
2023-02-13 10:44:09,126:INFO:Importing libraries
2023-02-13 10:44:09,126:INFO:Copying training dataset
2023-02-13 10:44:09,129:INFO:Defining folds
2023-02-13 10:44:09,129:INFO:Declaring metric variables
2023-02-13 10:44:09,132:INFO:Importing untrained model
2023-02-13 10:44:09,138:INFO:Ridge Regression Imported successfully
2023-02-13 10:44:09,144:INFO:Starting cross validation
2023-02-13 10:44:09,146:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:09,303:INFO:Calculating mean and std
2023-02-13 10:44:09,304:INFO:Creating metrics dataframe
2023-02-13 10:44:09,305:INFO:Uploading results into container
2023-02-13 10:44:09,305:INFO:Uploading model into container now
2023-02-13 10:44:09,305:INFO:_master_model_container: 3
2023-02-13 10:44:09,305:INFO:_display_container: 2
2023-02-13 10:44:09,305:INFO:Ridge(random_state=14)
2023-02-13 10:44:09,305:INFO:create_model() successfully completed......................................
2023-02-13 10:44:09,402:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:09,402:INFO:Creating metrics dataframe
2023-02-13 10:44:09,408:INFO:Initializing Elastic Net
2023-02-13 10:44:09,408:INFO:Total runtime is 0.02027626037597656 minutes
2023-02-13 10:44:09,408:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:09,408:INFO:Initializing create_model()
2023-02-13 10:44:09,408:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:09,408:INFO:Checking exceptions
2023-02-13 10:44:09,408:INFO:Importing libraries
2023-02-13 10:44:09,408:INFO:Copying training dataset
2023-02-13 10:44:09,417:INFO:Defining folds
2023-02-13 10:44:09,417:INFO:Declaring metric variables
2023-02-13 10:44:09,421:INFO:Importing untrained model
2023-02-13 10:44:09,425:INFO:Elastic Net Imported successfully
2023-02-13 10:44:09,433:INFO:Starting cross validation
2023-02-13 10:44:09,435:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:09,585:INFO:Calculating mean and std
2023-02-13 10:44:09,589:INFO:Creating metrics dataframe
2023-02-13 10:44:09,589:INFO:Uploading results into container
2023-02-13 10:44:09,589:INFO:Uploading model into container now
2023-02-13 10:44:09,589:INFO:_master_model_container: 4
2023-02-13 10:44:09,589:INFO:_display_container: 2
2023-02-13 10:44:09,589:INFO:ElasticNet(random_state=14)
2023-02-13 10:44:09,589:INFO:create_model() successfully completed......................................
2023-02-13 10:44:09,685:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:09,693:INFO:Creating metrics dataframe
2023-02-13 10:44:09,701:INFO:Initializing Least Angle Regression
2023-02-13 10:44:09,701:INFO:Total runtime is 0.02515976031621297 minutes
2023-02-13 10:44:09,701:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:09,701:INFO:Initializing create_model()
2023-02-13 10:44:09,701:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:09,701:INFO:Checking exceptions
2023-02-13 10:44:09,701:INFO:Importing libraries
2023-02-13 10:44:09,701:INFO:Copying training dataset
2023-02-13 10:44:09,701:INFO:Defining folds
2023-02-13 10:44:09,709:INFO:Declaring metric variables
2023-02-13 10:44:09,709:INFO:Importing untrained model
2023-02-13 10:44:09,709:INFO:Least Angle Regression Imported successfully
2023-02-13 10:44:09,722:INFO:Starting cross validation
2023-02-13 10:44:09,722:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:09,768:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:09,784:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:09,784:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:09,799:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:09,810:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:09,822:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:09,834:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:09,847:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:09,852:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:09,866:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:09,874:INFO:Calculating mean and std
2023-02-13 10:44:09,882:INFO:Creating metrics dataframe
2023-02-13 10:44:09,882:INFO:Uploading results into container
2023-02-13 10:44:09,882:INFO:Uploading model into container now
2023-02-13 10:44:09,882:INFO:_master_model_container: 5
2023-02-13 10:44:09,882:INFO:_display_container: 2
2023-02-13 10:44:09,882:INFO:Lars(random_state=14)
2023-02-13 10:44:09,882:INFO:create_model() successfully completed......................................
2023-02-13 10:44:09,978:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:09,978:INFO:Creating metrics dataframe
2023-02-13 10:44:09,986:INFO:Initializing Lasso Least Angle Regression
2023-02-13 10:44:09,986:INFO:Total runtime is 0.029906181494394935 minutes
2023-02-13 10:44:09,994:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:09,994:INFO:Initializing create_model()
2023-02-13 10:44:09,994:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:09,994:INFO:Checking exceptions
2023-02-13 10:44:09,994:INFO:Importing libraries
2023-02-13 10:44:09,994:INFO:Copying training dataset
2023-02-13 10:44:09,994:INFO:Defining folds
2023-02-13 10:44:09,994:INFO:Declaring metric variables
2023-02-13 10:44:09,994:INFO:Importing untrained model
2023-02-13 10:44:10,002:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 10:44:10,010:INFO:Starting cross validation
2023-02-13 10:44:10,010:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:10,059:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:44:10,075:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:44:10,082:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:44:10,085:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:44:10,110:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:44:10,116:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:44:10,124:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:44:10,135:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:44:10,147:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:44:10,154:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:44:10,167:INFO:Calculating mean and std
2023-02-13 10:44:10,167:INFO:Creating metrics dataframe
2023-02-13 10:44:10,173:INFO:Uploading results into container
2023-02-13 10:44:10,175:INFO:Uploading model into container now
2023-02-13 10:44:10,175:INFO:_master_model_container: 6
2023-02-13 10:44:10,175:INFO:_display_container: 2
2023-02-13 10:44:10,175:INFO:LassoLars(random_state=14)
2023-02-13 10:44:10,175:INFO:create_model() successfully completed......................................
2023-02-13 10:44:10,271:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:10,271:INFO:Creating metrics dataframe
2023-02-13 10:44:10,287:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 10:44:10,287:INFO:Total runtime is 0.034918685754140213 minutes
2023-02-13 10:44:10,303:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:10,303:INFO:Initializing create_model()
2023-02-13 10:44:10,303:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:10,303:INFO:Checking exceptions
2023-02-13 10:44:10,303:INFO:Importing libraries
2023-02-13 10:44:10,303:INFO:Copying training dataset
2023-02-13 10:44:10,311:INFO:Defining folds
2023-02-13 10:44:10,311:INFO:Declaring metric variables
2023-02-13 10:44:10,319:INFO:Importing untrained model
2023-02-13 10:44:10,327:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 10:44:10,343:INFO:Starting cross validation
2023-02-13 10:44:10,353:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:10,442:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:10,454:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:10,465:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:10,473:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:10,484:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:10,498:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:10,507:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:10,514:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:10,523:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:10,539:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:44:10,555:INFO:Calculating mean and std
2023-02-13 10:44:10,555:INFO:Creating metrics dataframe
2023-02-13 10:44:10,555:INFO:Uploading results into container
2023-02-13 10:44:10,555:INFO:Uploading model into container now
2023-02-13 10:44:10,555:INFO:_master_model_container: 7
2023-02-13 10:44:10,555:INFO:_display_container: 2
2023-02-13 10:44:10,555:INFO:OrthogonalMatchingPursuit()
2023-02-13 10:44:10,555:INFO:create_model() successfully completed......................................
2023-02-13 10:44:10,653:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:10,653:INFO:Creating metrics dataframe
2023-02-13 10:44:10,661:INFO:Initializing Bayesian Ridge
2023-02-13 10:44:10,661:INFO:Total runtime is 0.041151654720306394 minutes
2023-02-13 10:44:10,669:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:10,669:INFO:Initializing create_model()
2023-02-13 10:44:10,669:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:10,669:INFO:Checking exceptions
2023-02-13 10:44:10,669:INFO:Importing libraries
2023-02-13 10:44:10,669:INFO:Copying training dataset
2023-02-13 10:44:10,669:INFO:Defining folds
2023-02-13 10:44:10,669:INFO:Declaring metric variables
2023-02-13 10:44:10,669:INFO:Importing untrained model
2023-02-13 10:44:10,677:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:44:10,685:INFO:Starting cross validation
2023-02-13 10:44:10,685:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:10,836:INFO:Calculating mean and std
2023-02-13 10:44:10,836:INFO:Creating metrics dataframe
2023-02-13 10:44:10,836:INFO:Uploading results into container
2023-02-13 10:44:10,841:INFO:Uploading model into container now
2023-02-13 10:44:10,841:INFO:_master_model_container: 8
2023-02-13 10:44:10,841:INFO:_display_container: 2
2023-02-13 10:44:10,841:INFO:BayesianRidge()
2023-02-13 10:44:10,841:INFO:create_model() successfully completed......................................
2023-02-13 10:44:10,938:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:10,938:INFO:Creating metrics dataframe
2023-02-13 10:44:10,946:INFO:Initializing Passive Aggressive Regressor
2023-02-13 10:44:10,946:INFO:Total runtime is 0.04590438604354858 minutes
2023-02-13 10:44:10,946:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:10,946:INFO:Initializing create_model()
2023-02-13 10:44:10,954:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:10,954:INFO:Checking exceptions
2023-02-13 10:44:10,954:INFO:Importing libraries
2023-02-13 10:44:10,954:INFO:Copying training dataset
2023-02-13 10:44:10,954:INFO:Defining folds
2023-02-13 10:44:10,954:INFO:Declaring metric variables
2023-02-13 10:44:10,954:INFO:Importing untrained model
2023-02-13 10:44:10,962:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 10:44:10,970:INFO:Starting cross validation
2023-02-13 10:44:10,970:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:11,124:INFO:Calculating mean and std
2023-02-13 10:44:11,126:INFO:Creating metrics dataframe
2023-02-13 10:44:11,128:INFO:Uploading results into container
2023-02-13 10:44:11,128:INFO:Uploading model into container now
2023-02-13 10:44:11,128:INFO:_master_model_container: 9
2023-02-13 10:44:11,128:INFO:_display_container: 2
2023-02-13 10:44:11,128:INFO:PassiveAggressiveRegressor(random_state=14)
2023-02-13 10:44:11,128:INFO:create_model() successfully completed......................................
2023-02-13 10:44:11,222:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:11,222:INFO:Creating metrics dataframe
2023-02-13 10:44:11,230:INFO:Initializing Huber Regressor
2023-02-13 10:44:11,230:INFO:Total runtime is 0.050643201669057204 minutes
2023-02-13 10:44:11,230:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:11,230:INFO:Initializing create_model()
2023-02-13 10:44:11,230:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:11,230:INFO:Checking exceptions
2023-02-13 10:44:11,230:INFO:Importing libraries
2023-02-13 10:44:11,230:INFO:Copying training dataset
2023-02-13 10:44:11,239:INFO:Defining folds
2023-02-13 10:44:11,239:INFO:Declaring metric variables
2023-02-13 10:44:11,239:INFO:Importing untrained model
2023-02-13 10:44:11,239:INFO:Huber Regressor Imported successfully
2023-02-13 10:44:11,246:INFO:Starting cross validation
2023-02-13 10:44:11,246:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:11,324:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:44:11,336:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:44:11,344:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:44:11,360:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:44:11,368:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:44:11,400:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:44:11,403:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:44:11,408:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:44:11,417:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:44:11,433:INFO:Calculating mean and std
2023-02-13 10:44:11,433:INFO:Creating metrics dataframe
2023-02-13 10:44:11,433:INFO:Uploading results into container
2023-02-13 10:44:11,433:INFO:Uploading model into container now
2023-02-13 10:44:11,433:INFO:_master_model_container: 10
2023-02-13 10:44:11,433:INFO:_display_container: 2
2023-02-13 10:44:11,441:INFO:HuberRegressor()
2023-02-13 10:44:11,441:INFO:create_model() successfully completed......................................
2023-02-13 10:44:11,538:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:11,538:INFO:Creating metrics dataframe
2023-02-13 10:44:11,546:INFO:Initializing K Neighbors Regressor
2023-02-13 10:44:11,546:INFO:Total runtime is 0.05590690771738688 minutes
2023-02-13 10:44:11,546:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:11,546:INFO:Initializing create_model()
2023-02-13 10:44:11,546:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:11,546:INFO:Checking exceptions
2023-02-13 10:44:11,546:INFO:Importing libraries
2023-02-13 10:44:11,546:INFO:Copying training dataset
2023-02-13 10:44:11,554:INFO:Defining folds
2023-02-13 10:44:11,554:INFO:Declaring metric variables
2023-02-13 10:44:11,554:INFO:Importing untrained model
2023-02-13 10:44:11,562:INFO:K Neighbors Regressor Imported successfully
2023-02-13 10:44:11,570:INFO:Starting cross validation
2023-02-13 10:44:11,570:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:11,737:INFO:Calculating mean and std
2023-02-13 10:44:11,737:INFO:Creating metrics dataframe
2023-02-13 10:44:11,737:INFO:Uploading results into container
2023-02-13 10:44:11,737:INFO:Uploading model into container now
2023-02-13 10:44:11,737:INFO:_master_model_container: 11
2023-02-13 10:44:11,737:INFO:_display_container: 2
2023-02-13 10:44:11,737:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:44:11,737:INFO:create_model() successfully completed......................................
2023-02-13 10:44:11,832:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:11,832:INFO:Creating metrics dataframe
2023-02-13 10:44:11,840:INFO:Initializing Decision Tree Regressor
2023-02-13 10:44:11,840:INFO:Total runtime is 0.060811312993367506 minutes
2023-02-13 10:44:11,848:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:11,848:INFO:Initializing create_model()
2023-02-13 10:44:11,848:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:11,848:INFO:Checking exceptions
2023-02-13 10:44:11,848:INFO:Importing libraries
2023-02-13 10:44:11,848:INFO:Copying training dataset
2023-02-13 10:44:11,848:INFO:Defining folds
2023-02-13 10:44:11,848:INFO:Declaring metric variables
2023-02-13 10:44:11,856:INFO:Importing untrained model
2023-02-13 10:44:11,856:INFO:Decision Tree Regressor Imported successfully
2023-02-13 10:44:11,864:INFO:Starting cross validation
2023-02-13 10:44:11,864:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:12,074:INFO:Calculating mean and std
2023-02-13 10:44:12,074:INFO:Creating metrics dataframe
2023-02-13 10:44:12,076:INFO:Uploading results into container
2023-02-13 10:44:12,076:INFO:Uploading model into container now
2023-02-13 10:44:12,076:INFO:_master_model_container: 12
2023-02-13 10:44:12,076:INFO:_display_container: 2
2023-02-13 10:44:12,076:INFO:DecisionTreeRegressor(random_state=14)
2023-02-13 10:44:12,076:INFO:create_model() successfully completed......................................
2023-02-13 10:44:12,173:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:12,173:INFO:Creating metrics dataframe
2023-02-13 10:44:12,189:INFO:Initializing Random Forest Regressor
2023-02-13 10:44:12,189:INFO:Total runtime is 0.06662409305572509 minutes
2023-02-13 10:44:12,189:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:12,189:INFO:Initializing create_model()
2023-02-13 10:44:12,189:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:12,189:INFO:Checking exceptions
2023-02-13 10:44:12,189:INFO:Importing libraries
2023-02-13 10:44:12,189:INFO:Copying training dataset
2023-02-13 10:44:12,197:INFO:Defining folds
2023-02-13 10:44:12,197:INFO:Declaring metric variables
2023-02-13 10:44:12,197:INFO:Importing untrained model
2023-02-13 10:44:12,205:INFO:Random Forest Regressor Imported successfully
2023-02-13 10:44:12,207:INFO:Starting cross validation
2023-02-13 10:44:12,207:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:12,731:INFO:Calculating mean and std
2023-02-13 10:44:12,733:INFO:Creating metrics dataframe
2023-02-13 10:44:12,734:INFO:Uploading results into container
2023-02-13 10:44:12,734:INFO:Uploading model into container now
2023-02-13 10:44:12,734:INFO:_master_model_container: 13
2023-02-13 10:44:12,734:INFO:_display_container: 2
2023-02-13 10:44:12,738:INFO:RandomForestRegressor(n_jobs=-1, random_state=14)
2023-02-13 10:44:12,738:INFO:create_model() successfully completed......................................
2023-02-13 10:44:12,828:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:12,828:INFO:Creating metrics dataframe
2023-02-13 10:44:12,836:INFO:Initializing Extra Trees Regressor
2023-02-13 10:44:12,836:INFO:Total runtime is 0.07740742762883503 minutes
2023-02-13 10:44:12,844:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:12,844:INFO:Initializing create_model()
2023-02-13 10:44:12,844:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:12,844:INFO:Checking exceptions
2023-02-13 10:44:12,844:INFO:Importing libraries
2023-02-13 10:44:12,844:INFO:Copying training dataset
2023-02-13 10:44:12,844:INFO:Defining folds
2023-02-13 10:44:12,844:INFO:Declaring metric variables
2023-02-13 10:44:12,852:INFO:Importing untrained model
2023-02-13 10:44:12,852:INFO:Extra Trees Regressor Imported successfully
2023-02-13 10:44:12,860:INFO:Starting cross validation
2023-02-13 10:44:12,860:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:13,304:INFO:Calculating mean and std
2023-02-13 10:44:13,307:INFO:Creating metrics dataframe
2023-02-13 10:44:13,308:INFO:Uploading results into container
2023-02-13 10:44:13,308:INFO:Uploading model into container now
2023-02-13 10:44:13,308:INFO:_master_model_container: 14
2023-02-13 10:44:13,308:INFO:_display_container: 2
2023-02-13 10:44:13,308:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=14)
2023-02-13 10:44:13,311:INFO:create_model() successfully completed......................................
2023-02-13 10:44:13,408:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:13,410:INFO:Creating metrics dataframe
2023-02-13 10:44:13,422:INFO:Initializing AdaBoost Regressor
2023-02-13 10:44:13,422:INFO:Total runtime is 0.08717811504999795 minutes
2023-02-13 10:44:13,425:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:13,427:INFO:Initializing create_model()
2023-02-13 10:44:13,427:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:13,427:INFO:Checking exceptions
2023-02-13 10:44:13,427:INFO:Importing libraries
2023-02-13 10:44:13,427:INFO:Copying training dataset
2023-02-13 10:44:13,429:INFO:Defining folds
2023-02-13 10:44:13,429:INFO:Declaring metric variables
2023-02-13 10:44:13,434:INFO:Importing untrained model
2023-02-13 10:44:13,439:INFO:AdaBoost Regressor Imported successfully
2023-02-13 10:44:13,441:INFO:Starting cross validation
2023-02-13 10:44:13,447:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:13,700:INFO:Calculating mean and std
2023-02-13 10:44:13,700:INFO:Creating metrics dataframe
2023-02-13 10:44:13,707:INFO:Uploading results into container
2023-02-13 10:44:13,709:INFO:Uploading model into container now
2023-02-13 10:44:13,709:INFO:_master_model_container: 15
2023-02-13 10:44:13,709:INFO:_display_container: 2
2023-02-13 10:44:13,709:INFO:AdaBoostRegressor(random_state=14)
2023-02-13 10:44:13,709:INFO:create_model() successfully completed......................................
2023-02-13 10:44:13,811:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:13,811:INFO:Creating metrics dataframe
2023-02-13 10:44:13,821:INFO:Initializing Gradient Boosting Regressor
2023-02-13 10:44:13,821:INFO:Total runtime is 0.09381630818049111 minutes
2023-02-13 10:44:13,821:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:13,821:INFO:Initializing create_model()
2023-02-13 10:44:13,821:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:13,821:INFO:Checking exceptions
2023-02-13 10:44:13,821:INFO:Importing libraries
2023-02-13 10:44:13,821:INFO:Copying training dataset
2023-02-13 10:44:13,827:INFO:Defining folds
2023-02-13 10:44:13,827:INFO:Declaring metric variables
2023-02-13 10:44:13,827:INFO:Importing untrained model
2023-02-13 10:44:13,838:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 10:44:13,848:INFO:Starting cross validation
2023-02-13 10:44:13,848:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:14,063:INFO:Calculating mean and std
2023-02-13 10:44:14,063:INFO:Creating metrics dataframe
2023-02-13 10:44:14,063:INFO:Uploading results into container
2023-02-13 10:44:14,071:INFO:Uploading model into container now
2023-02-13 10:44:14,071:INFO:_master_model_container: 16
2023-02-13 10:44:14,071:INFO:_display_container: 2
2023-02-13 10:44:14,071:INFO:GradientBoostingRegressor(random_state=14)
2023-02-13 10:44:14,073:INFO:create_model() successfully completed......................................
2023-02-13 10:44:14,168:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:14,168:INFO:Creating metrics dataframe
2023-02-13 10:44:14,178:INFO:Initializing Extreme Gradient Boosting
2023-02-13 10:44:14,178:INFO:Total runtime is 0.09977674881617227 minutes
2023-02-13 10:44:14,178:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:14,178:INFO:Initializing create_model()
2023-02-13 10:44:14,178:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:14,184:INFO:Checking exceptions
2023-02-13 10:44:14,184:INFO:Importing libraries
2023-02-13 10:44:14,184:INFO:Copying training dataset
2023-02-13 10:44:14,187:INFO:Defining folds
2023-02-13 10:44:14,187:INFO:Declaring metric variables
2023-02-13 10:44:14,191:INFO:Importing untrained model
2023-02-13 10:44:14,194:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 10:44:14,203:INFO:Starting cross validation
2023-02-13 10:44:14,205:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:14,448:INFO:Calculating mean and std
2023-02-13 10:44:14,448:INFO:Creating metrics dataframe
2023-02-13 10:44:14,455:INFO:Uploading results into container
2023-02-13 10:44:14,455:INFO:Uploading model into container now
2023-02-13 10:44:14,455:INFO:_master_model_container: 17
2023-02-13 10:44:14,455:INFO:_display_container: 2
2023-02-13 10:44:14,455:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=14, ...)
2023-02-13 10:44:14,455:INFO:create_model() successfully completed......................................
2023-02-13 10:44:14,569:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:14,569:INFO:Creating metrics dataframe
2023-02-13 10:44:14,601:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 10:44:14,601:INFO:Total runtime is 0.10682369470596312 minutes
2023-02-13 10:44:14,613:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:14,613:INFO:Initializing create_model()
2023-02-13 10:44:14,613:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:14,613:INFO:Checking exceptions
2023-02-13 10:44:14,613:INFO:Importing libraries
2023-02-13 10:44:14,613:INFO:Copying training dataset
2023-02-13 10:44:14,620:INFO:Defining folds
2023-02-13 10:44:14,620:INFO:Declaring metric variables
2023-02-13 10:44:14,628:INFO:Importing untrained model
2023-02-13 10:44:14,640:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 10:44:14,647:INFO:Starting cross validation
2023-02-13 10:44:14,650:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:14,822:INFO:Calculating mean and std
2023-02-13 10:44:14,822:INFO:Creating metrics dataframe
2023-02-13 10:44:14,822:INFO:Uploading results into container
2023-02-13 10:44:14,822:INFO:Uploading model into container now
2023-02-13 10:44:14,822:INFO:_master_model_container: 18
2023-02-13 10:44:14,822:INFO:_display_container: 2
2023-02-13 10:44:14,828:INFO:LGBMRegressor(random_state=14)
2023-02-13 10:44:14,828:INFO:create_model() successfully completed......................................
2023-02-13 10:44:14,920:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:14,920:INFO:Creating metrics dataframe
2023-02-13 10:44:14,937:INFO:Initializing Dummy Regressor
2023-02-13 10:44:14,937:INFO:Total runtime is 0.11241614421208698 minutes
2023-02-13 10:44:14,943:INFO:SubProcess create_model() called ==================================
2023-02-13 10:44:14,943:INFO:Initializing create_model()
2023-02-13 10:44:14,943:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94081E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:14,943:INFO:Checking exceptions
2023-02-13 10:44:14,943:INFO:Importing libraries
2023-02-13 10:44:14,943:INFO:Copying training dataset
2023-02-13 10:44:14,945:INFO:Defining folds
2023-02-13 10:44:14,945:INFO:Declaring metric variables
2023-02-13 10:44:14,959:INFO:Importing untrained model
2023-02-13 10:44:14,962:INFO:Dummy Regressor Imported successfully
2023-02-13 10:44:14,978:INFO:Starting cross validation
2023-02-13 10:44:14,986:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:44:15,183:INFO:Calculating mean and std
2023-02-13 10:44:15,185:INFO:Creating metrics dataframe
2023-02-13 10:44:15,185:INFO:Uploading results into container
2023-02-13 10:44:15,189:INFO:Uploading model into container now
2023-02-13 10:44:15,189:INFO:_master_model_container: 19
2023-02-13 10:44:15,189:INFO:_display_container: 2
2023-02-13 10:44:15,189:INFO:DummyRegressor()
2023-02-13 10:44:15,189:INFO:create_model() successfully completed......................................
2023-02-13 10:44:15,287:INFO:SubProcess create_model() end ==================================
2023-02-13 10:44:15,287:INFO:Creating metrics dataframe
2023-02-13 10:44:15,313:INFO:Initializing create_model()
2023-02-13 10:44:15,313:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938242B0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:44:15,314:INFO:Checking exceptions
2023-02-13 10:44:15,314:INFO:Importing libraries
2023-02-13 10:44:15,314:INFO:Copying training dataset
2023-02-13 10:44:15,314:INFO:Defining folds
2023-02-13 10:44:15,314:INFO:Declaring metric variables
2023-02-13 10:44:15,314:INFO:Importing untrained model
2023-02-13 10:44:15,314:INFO:Declaring custom model
2023-02-13 10:44:15,314:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:44:15,314:INFO:Cross validation set to False
2023-02-13 10:44:15,314:INFO:Fitting Model
2023-02-13 10:44:15,353:INFO:BayesianRidge()
2023-02-13 10:44:15,353:INFO:create_model() successfully completed......................................
2023-02-13 10:44:15,502:INFO:_master_model_container: 19
2023-02-13 10:44:15,502:INFO:_display_container: 2
2023-02-13 10:44:15,502:INFO:BayesianRidge()
2023-02-13 10:44:15,502:INFO:compare_models() successfully completed......................................
2023-02-13 10:45:58,472:INFO:PyCaret RegressionExperiment
2023-02-13 10:45:58,472:INFO:Logging name: reg-default-name
2023-02-13 10:45:58,472:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 10:45:58,472:INFO:version 3.0.0.rc8
2023-02-13 10:45:58,472:INFO:Initializing setup()
2023-02-13 10:45:58,472:INFO:self.USI: 4311
2023-02-13 10:45:58,472:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 10:45:58,472:INFO:Checking environment
2023-02-13 10:45:58,472:INFO:python_version: 3.9.13
2023-02-13 10:45:58,472:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 10:45:58,472:INFO:machine: AMD64
2023-02-13 10:45:58,472:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 10:45:58,472:INFO:Memory: svmem(total=16805040128, available=6370062336, percent=62.1, used=10434977792, free=6370062336)
2023-02-13 10:45:58,472:INFO:Physical Core: 4
2023-02-13 10:45:58,472:INFO:Logical Core: 8
2023-02-13 10:45:58,472:INFO:Checking libraries
2023-02-13 10:45:58,472:INFO:System:
2023-02-13 10:45:58,472:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 10:45:58,481:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 10:45:58,481:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 10:45:58,481:INFO:PyCaret required dependencies:
2023-02-13 10:45:58,481:INFO:                 pip: 23.0
2023-02-13 10:45:58,481:INFO:          setuptools: 58.1.0
2023-02-13 10:45:58,481:INFO:             pycaret: 3.0.0rc8
2023-02-13 10:45:58,481:INFO:             IPython: 8.7.0
2023-02-13 10:45:58,481:INFO:          ipywidgets: 8.0.4
2023-02-13 10:45:58,481:INFO:                tqdm: 4.64.1
2023-02-13 10:45:58,481:INFO:               numpy: 1.22.1
2023-02-13 10:45:58,481:INFO:              pandas: 1.5.2
2023-02-13 10:45:58,481:INFO:              jinja2: 3.1.2
2023-02-13 10:45:58,481:INFO:               scipy: 1.5.4
2023-02-13 10:45:58,481:INFO:              joblib: 1.2.0
2023-02-13 10:45:58,481:INFO:             sklearn: 1.1.3
2023-02-13 10:45:58,481:INFO:                pyod: 1.0.7
2023-02-13 10:45:58,481:INFO:            imblearn: 0.10.1
2023-02-13 10:45:58,481:INFO:   category_encoders: 2.6.0
2023-02-13 10:45:58,481:INFO:            lightgbm: 3.3.4
2023-02-13 10:45:58,481:INFO:               numba: 0.56.4
2023-02-13 10:45:58,481:INFO:            requests: 2.28.1
2023-02-13 10:45:58,481:INFO:          matplotlib: 3.6.2
2023-02-13 10:45:58,481:INFO:          scikitplot: 0.3.7
2023-02-13 10:45:58,481:INFO:         yellowbrick: 1.5
2023-02-13 10:45:58,481:INFO:              plotly: 5.11.0
2023-02-13 10:45:58,481:INFO:             kaleido: 0.2.1
2023-02-13 10:45:58,481:INFO:         statsmodels: 0.13.5
2023-02-13 10:45:58,481:INFO:              sktime: 0.15.1
2023-02-13 10:45:58,481:INFO:               tbats: 1.1.2
2023-02-13 10:45:58,481:INFO:            pmdarima: 2.0.2
2023-02-13 10:45:58,481:INFO:              psutil: 5.9.4
2023-02-13 10:45:58,482:INFO:PyCaret optional dependencies:
2023-02-13 10:45:58,482:INFO:                shap: 0.41.0
2023-02-13 10:45:58,482:INFO:           interpret: 0.3.0
2023-02-13 10:45:58,482:INFO:                umap: Not installed
2023-02-13 10:45:58,482:INFO:    pandas_profiling: 3.6.2
2023-02-13 10:45:58,482:INFO:  explainerdashboard: Not installed
2023-02-13 10:45:58,482:INFO:             autoviz: Not installed
2023-02-13 10:45:58,482:INFO:           fairlearn: Not installed
2023-02-13 10:45:58,482:INFO:             xgboost: 1.7.3
2023-02-13 10:45:58,482:INFO:            catboost: Not installed
2023-02-13 10:45:58,482:INFO:              kmodes: Not installed
2023-02-13 10:45:58,482:INFO:             mlxtend: Not installed
2023-02-13 10:45:58,482:INFO:       statsforecast: Not installed
2023-02-13 10:45:58,482:INFO:        tune_sklearn: Not installed
2023-02-13 10:45:58,482:INFO:                 ray: Not installed
2023-02-13 10:45:58,482:INFO:            hyperopt: Not installed
2023-02-13 10:45:58,482:INFO:              optuna: Not installed
2023-02-13 10:45:58,482:INFO:               skopt: Not installed
2023-02-13 10:45:58,482:INFO:              mlflow: Not installed
2023-02-13 10:45:58,482:INFO:              gradio: Not installed
2023-02-13 10:45:58,482:INFO:             fastapi: Not installed
2023-02-13 10:45:58,482:INFO:             uvicorn: Not installed
2023-02-13 10:45:58,482:INFO:              m2cgen: Not installed
2023-02-13 10:45:58,482:INFO:           evidently: Not installed
2023-02-13 10:45:58,482:INFO:                nltk: 3.8
2023-02-13 10:45:58,482:INFO:            pyLDAvis: Not installed
2023-02-13 10:45:58,482:INFO:              gensim: Not installed
2023-02-13 10:45:58,482:INFO:               spacy: Not installed
2023-02-13 10:45:58,482:INFO:           wordcloud: 1.8.2.2
2023-02-13 10:45:58,482:INFO:            textblob: Not installed
2023-02-13 10:45:58,482:INFO:               fugue: Not installed
2023-02-13 10:45:58,482:INFO:           streamlit: 1.16.0
2023-02-13 10:45:58,485:INFO:             prophet: Not installed
2023-02-13 10:45:58,485:INFO:None
2023-02-13 10:45:58,485:INFO:Set up data.
2023-02-13 10:45:58,490:INFO:Set up train/test split.
2023-02-13 10:45:58,493:INFO:Set up index.
2023-02-13 10:45:58,493:INFO:Set up folding strategy.
2023-02-13 10:45:58,493:INFO:Assigning column types.
2023-02-13 10:45:58,500:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 10:45:58,500:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,505:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,505:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,586:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,643:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,643:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:58,645:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:58,645:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,651:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,653:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,709:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,758:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,758:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:58,766:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:58,768:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 10:45:58,771:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,777:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,831:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,871:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,871:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:58,879:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:58,887:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,895:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:45:58,989:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,043:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,043:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:59,047:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:59,047:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 10:45:59,052:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,101:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,133:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,133:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:59,133:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:59,141:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,190:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,239:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,239:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:59,239:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:59,239:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 10:45:59,299:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,337:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,337:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:59,341:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:59,386:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,455:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,455:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:59,463:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:59,463:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 10:45:59,550:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,593:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:59,599:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:59,685:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:45:59,721:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:59,721:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:59,721:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 10:45:59,835:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:59,837:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:59,926:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:45:59,926:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:45:59,933:INFO:Preparing preprocessing pipeline...
2023-02-13 10:45:59,933:INFO:Set up column name cleaning.
2023-02-13 10:45:59,933:INFO:Set up simple imputation.
2023-02-13 10:45:59,957:INFO:Finished creating preprocessing pipeline.
2023-02-13 10:45:59,965:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 10:45:59,965:INFO:Creating final display dataframe.
2023-02-13 10:46:00,164:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              4311
2023-02-13 10:46:00,338:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:00,339:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:00,442:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:00,442:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:00,442:INFO:setup() successfully completed in 1.97s...............
2023-02-13 10:46:00,442:INFO:Initializing compare_models()
2023-02-13 10:46:00,442:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 10:46:00,442:INFO:Checking exceptions
2023-02-13 10:46:00,442:INFO:Preparing display monitor
2023-02-13 10:46:00,466:INFO:Initializing Linear Regression
2023-02-13 10:46:00,466:INFO:Total runtime is 0.0 minutes
2023-02-13 10:46:00,472:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:00,472:INFO:Initializing create_model()
2023-02-13 10:46:00,472:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:00,472:INFO:Checking exceptions
2023-02-13 10:46:00,472:INFO:Importing libraries
2023-02-13 10:46:00,472:INFO:Copying training dataset
2023-02-13 10:46:00,475:INFO:Defining folds
2023-02-13 10:46:00,475:INFO:Declaring metric variables
2023-02-13 10:46:00,475:INFO:Importing untrained model
2023-02-13 10:46:00,483:INFO:Linear Regression Imported successfully
2023-02-13 10:46:00,494:INFO:Starting cross validation
2023-02-13 10:46:00,495:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:00,662:INFO:Calculating mean and std
2023-02-13 10:46:00,662:INFO:Creating metrics dataframe
2023-02-13 10:46:00,672:INFO:Uploading results into container
2023-02-13 10:46:00,672:INFO:Uploading model into container now
2023-02-13 10:46:00,672:INFO:_master_model_container: 1
2023-02-13 10:46:00,672:INFO:_display_container: 2
2023-02-13 10:46:00,672:INFO:LinearRegression(n_jobs=-1)
2023-02-13 10:46:00,672:INFO:create_model() successfully completed......................................
2023-02-13 10:46:00,833:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:00,833:INFO:Creating metrics dataframe
2023-02-13 10:46:00,834:INFO:Initializing Lasso Regression
2023-02-13 10:46:00,834:INFO:Total runtime is 0.006123872598012289 minutes
2023-02-13 10:46:00,842:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:00,842:INFO:Initializing create_model()
2023-02-13 10:46:00,842:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:00,842:INFO:Checking exceptions
2023-02-13 10:46:00,842:INFO:Importing libraries
2023-02-13 10:46:00,842:INFO:Copying training dataset
2023-02-13 10:46:00,844:INFO:Defining folds
2023-02-13 10:46:00,844:INFO:Declaring metric variables
2023-02-13 10:46:00,844:INFO:Importing untrained model
2023-02-13 10:46:00,852:INFO:Lasso Regression Imported successfully
2023-02-13 10:46:00,858:INFO:Starting cross validation
2023-02-13 10:46:00,858:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:01,023:INFO:Calculating mean and std
2023-02-13 10:46:01,023:INFO:Creating metrics dataframe
2023-02-13 10:46:01,023:INFO:Uploading results into container
2023-02-13 10:46:01,030:INFO:Uploading model into container now
2023-02-13 10:46:01,030:INFO:_master_model_container: 2
2023-02-13 10:46:01,030:INFO:_display_container: 2
2023-02-13 10:46:01,031:INFO:Lasso(random_state=123)
2023-02-13 10:46:01,031:INFO:create_model() successfully completed......................................
2023-02-13 10:46:01,123:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:01,123:INFO:Creating metrics dataframe
2023-02-13 10:46:01,135:INFO:Initializing Ridge Regression
2023-02-13 10:46:01,135:INFO:Total runtime is 0.01114876667658488 minutes
2023-02-13 10:46:01,139:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:01,139:INFO:Initializing create_model()
2023-02-13 10:46:01,140:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:01,140:INFO:Checking exceptions
2023-02-13 10:46:01,140:INFO:Importing libraries
2023-02-13 10:46:01,140:INFO:Copying training dataset
2023-02-13 10:46:01,142:INFO:Defining folds
2023-02-13 10:46:01,142:INFO:Declaring metric variables
2023-02-13 10:46:01,142:INFO:Importing untrained model
2023-02-13 10:46:01,147:INFO:Ridge Regression Imported successfully
2023-02-13 10:46:01,153:INFO:Starting cross validation
2023-02-13 10:46:01,153:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:01,308:INFO:Calculating mean and std
2023-02-13 10:46:01,308:INFO:Creating metrics dataframe
2023-02-13 10:46:01,308:INFO:Uploading results into container
2023-02-13 10:46:01,308:INFO:Uploading model into container now
2023-02-13 10:46:01,308:INFO:_master_model_container: 3
2023-02-13 10:46:01,308:INFO:_display_container: 2
2023-02-13 10:46:01,308:INFO:Ridge(random_state=123)
2023-02-13 10:46:01,308:INFO:create_model() successfully completed......................................
2023-02-13 10:46:01,406:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:01,406:INFO:Creating metrics dataframe
2023-02-13 10:46:01,415:INFO:Initializing Elastic Net
2023-02-13 10:46:01,415:INFO:Total runtime is 0.015818234284718832 minutes
2023-02-13 10:46:01,415:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:01,415:INFO:Initializing create_model()
2023-02-13 10:46:01,415:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:01,415:INFO:Checking exceptions
2023-02-13 10:46:01,415:INFO:Importing libraries
2023-02-13 10:46:01,415:INFO:Copying training dataset
2023-02-13 10:46:01,423:INFO:Defining folds
2023-02-13 10:46:01,423:INFO:Declaring metric variables
2023-02-13 10:46:01,427:INFO:Importing untrained model
2023-02-13 10:46:01,430:INFO:Elastic Net Imported successfully
2023-02-13 10:46:01,435:INFO:Starting cross validation
2023-02-13 10:46:01,438:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:01,602:INFO:Calculating mean and std
2023-02-13 10:46:01,602:INFO:Creating metrics dataframe
2023-02-13 10:46:01,602:INFO:Uploading results into container
2023-02-13 10:46:01,602:INFO:Uploading model into container now
2023-02-13 10:46:01,602:INFO:_master_model_container: 4
2023-02-13 10:46:01,602:INFO:_display_container: 2
2023-02-13 10:46:01,610:INFO:ElasticNet(random_state=123)
2023-02-13 10:46:01,610:INFO:create_model() successfully completed......................................
2023-02-13 10:46:01,701:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:01,701:INFO:Creating metrics dataframe
2023-02-13 10:46:01,708:INFO:Initializing Least Angle Regression
2023-02-13 10:46:01,708:INFO:Total runtime is 0.020694998900095622 minutes
2023-02-13 10:46:01,713:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:01,713:INFO:Initializing create_model()
2023-02-13 10:46:01,713:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:01,713:INFO:Checking exceptions
2023-02-13 10:46:01,713:INFO:Importing libraries
2023-02-13 10:46:01,713:INFO:Copying training dataset
2023-02-13 10:46:01,718:INFO:Defining folds
2023-02-13 10:46:01,718:INFO:Declaring metric variables
2023-02-13 10:46:01,720:INFO:Importing untrained model
2023-02-13 10:46:01,724:INFO:Least Angle Regression Imported successfully
2023-02-13 10:46:01,733:INFO:Starting cross validation
2023-02-13 10:46:01,734:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:01,773:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:01,785:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:01,799:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:01,807:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:01,816:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:01,831:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:01,839:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:01,856:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:01,865:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:01,873:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:01,888:INFO:Calculating mean and std
2023-02-13 10:46:01,888:INFO:Creating metrics dataframe
2023-02-13 10:46:01,896:INFO:Uploading results into container
2023-02-13 10:46:01,896:INFO:Uploading model into container now
2023-02-13 10:46:01,896:INFO:_master_model_container: 5
2023-02-13 10:46:01,902:INFO:_display_container: 2
2023-02-13 10:46:01,902:INFO:Lars(random_state=123)
2023-02-13 10:46:01,902:INFO:create_model() successfully completed......................................
2023-02-13 10:46:02,044:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:02,044:INFO:Creating metrics dataframe
2023-02-13 10:46:02,067:INFO:Initializing Lasso Least Angle Regression
2023-02-13 10:46:02,067:INFO:Total runtime is 0.02667497793833415 minutes
2023-02-13 10:46:02,070:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:02,070:INFO:Initializing create_model()
2023-02-13 10:46:02,070:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:02,077:INFO:Checking exceptions
2023-02-13 10:46:02,077:INFO:Importing libraries
2023-02-13 10:46:02,077:INFO:Copying training dataset
2023-02-13 10:46:02,078:INFO:Defining folds
2023-02-13 10:46:02,086:INFO:Declaring metric variables
2023-02-13 10:46:02,094:INFO:Importing untrained model
2023-02-13 10:46:02,107:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 10:46:02,125:INFO:Starting cross validation
2023-02-13 10:46:02,128:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:02,193:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:02,217:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:02,226:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:02,234:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:02,250:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:02,261:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:02,272:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:02,283:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:02,292:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:02,300:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:02,316:INFO:Calculating mean and std
2023-02-13 10:46:02,316:INFO:Creating metrics dataframe
2023-02-13 10:46:02,316:INFO:Uploading results into container
2023-02-13 10:46:02,316:INFO:Uploading model into container now
2023-02-13 10:46:02,316:INFO:_master_model_container: 6
2023-02-13 10:46:02,316:INFO:_display_container: 2
2023-02-13 10:46:02,316:INFO:LassoLars(random_state=123)
2023-02-13 10:46:02,316:INFO:create_model() successfully completed......................................
2023-02-13 10:46:02,415:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:02,415:INFO:Creating metrics dataframe
2023-02-13 10:46:02,424:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 10:46:02,424:INFO:Total runtime is 0.03263195355733236 minutes
2023-02-13 10:46:02,426:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:02,426:INFO:Initializing create_model()
2023-02-13 10:46:02,426:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:02,426:INFO:Checking exceptions
2023-02-13 10:46:02,426:INFO:Importing libraries
2023-02-13 10:46:02,428:INFO:Copying training dataset
2023-02-13 10:46:02,432:INFO:Defining folds
2023-02-13 10:46:02,432:INFO:Declaring metric variables
2023-02-13 10:46:02,433:INFO:Importing untrained model
2023-02-13 10:46:02,438:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 10:46:02,447:INFO:Starting cross validation
2023-02-13 10:46:02,447:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:02,489:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:02,496:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:02,513:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:02,542:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:02,542:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:02,553:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:02,561:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:02,618:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:02,629:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:02,629:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:02,648:INFO:Calculating mean and std
2023-02-13 10:46:02,650:INFO:Creating metrics dataframe
2023-02-13 10:46:02,651:INFO:Uploading results into container
2023-02-13 10:46:02,651:INFO:Uploading model into container now
2023-02-13 10:46:02,651:INFO:_master_model_container: 7
2023-02-13 10:46:02,651:INFO:_display_container: 2
2023-02-13 10:46:02,651:INFO:OrthogonalMatchingPursuit()
2023-02-13 10:46:02,651:INFO:create_model() successfully completed......................................
2023-02-13 10:46:02,749:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:02,749:INFO:Creating metrics dataframe
2023-02-13 10:46:02,759:INFO:Initializing Bayesian Ridge
2023-02-13 10:46:02,766:INFO:Total runtime is 0.03832528193791707 minutes
2023-02-13 10:46:02,766:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:02,766:INFO:Initializing create_model()
2023-02-13 10:46:02,766:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:02,766:INFO:Checking exceptions
2023-02-13 10:46:02,766:INFO:Importing libraries
2023-02-13 10:46:02,766:INFO:Copying training dataset
2023-02-13 10:46:02,774:INFO:Defining folds
2023-02-13 10:46:02,774:INFO:Declaring metric variables
2023-02-13 10:46:02,774:INFO:Importing untrained model
2023-02-13 10:46:02,781:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:46:02,789:INFO:Starting cross validation
2023-02-13 10:46:02,792:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:02,954:INFO:Calculating mean and std
2023-02-13 10:46:02,954:INFO:Creating metrics dataframe
2023-02-13 10:46:02,954:INFO:Uploading results into container
2023-02-13 10:46:02,954:INFO:Uploading model into container now
2023-02-13 10:46:02,954:INFO:_master_model_container: 8
2023-02-13 10:46:02,954:INFO:_display_container: 2
2023-02-13 10:46:02,954:INFO:BayesianRidge()
2023-02-13 10:46:02,954:INFO:create_model() successfully completed......................................
2023-02-13 10:46:03,052:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:03,052:INFO:Creating metrics dataframe
2023-02-13 10:46:03,066:INFO:Initializing Passive Aggressive Regressor
2023-02-13 10:46:03,066:INFO:Total runtime is 0.04332337776819865 minutes
2023-02-13 10:46:03,068:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:03,068:INFO:Initializing create_model()
2023-02-13 10:46:03,068:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:03,070:INFO:Checking exceptions
2023-02-13 10:46:03,070:INFO:Importing libraries
2023-02-13 10:46:03,070:INFO:Copying training dataset
2023-02-13 10:46:03,070:INFO:Defining folds
2023-02-13 10:46:03,070:INFO:Declaring metric variables
2023-02-13 10:46:03,076:INFO:Importing untrained model
2023-02-13 10:46:03,078:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 10:46:03,085:INFO:Starting cross validation
2023-02-13 10:46:03,085:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:03,233:INFO:Calculating mean and std
2023-02-13 10:46:03,233:INFO:Creating metrics dataframe
2023-02-13 10:46:03,241:INFO:Uploading results into container
2023-02-13 10:46:03,241:INFO:Uploading model into container now
2023-02-13 10:46:03,243:INFO:_master_model_container: 9
2023-02-13 10:46:03,243:INFO:_display_container: 2
2023-02-13 10:46:03,243:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-13 10:46:03,243:INFO:create_model() successfully completed......................................
2023-02-13 10:46:03,338:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:03,338:INFO:Creating metrics dataframe
2023-02-13 10:46:03,347:INFO:Initializing Huber Regressor
2023-02-13 10:46:03,347:INFO:Total runtime is 0.04800514777501424 minutes
2023-02-13 10:46:03,347:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:03,347:INFO:Initializing create_model()
2023-02-13 10:46:03,347:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:03,347:INFO:Checking exceptions
2023-02-13 10:46:03,347:INFO:Importing libraries
2023-02-13 10:46:03,347:INFO:Copying training dataset
2023-02-13 10:46:03,355:INFO:Defining folds
2023-02-13 10:46:03,355:INFO:Declaring metric variables
2023-02-13 10:46:03,359:INFO:Importing untrained model
2023-02-13 10:46:03,363:INFO:Huber Regressor Imported successfully
2023-02-13 10:46:03,371:INFO:Starting cross validation
2023-02-13 10:46:03,371:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:03,445:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:03,450:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:03,457:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:03,490:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:03,513:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:03,514:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:03,523:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:03,539:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:03,555:INFO:Calculating mean and std
2023-02-13 10:46:03,555:INFO:Creating metrics dataframe
2023-02-13 10:46:03,560:INFO:Uploading results into container
2023-02-13 10:46:03,560:INFO:Uploading model into container now
2023-02-13 10:46:03,560:INFO:_master_model_container: 10
2023-02-13 10:46:03,561:INFO:_display_container: 2
2023-02-13 10:46:03,561:INFO:HuberRegressor()
2023-02-13 10:46:03,561:INFO:create_model() successfully completed......................................
2023-02-13 10:46:03,654:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:03,654:INFO:Creating metrics dataframe
2023-02-13 10:46:03,662:INFO:Initializing K Neighbors Regressor
2023-02-13 10:46:03,662:INFO:Total runtime is 0.05325429836908976 minutes
2023-02-13 10:46:03,662:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:03,662:INFO:Initializing create_model()
2023-02-13 10:46:03,662:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:03,662:INFO:Checking exceptions
2023-02-13 10:46:03,662:INFO:Importing libraries
2023-02-13 10:46:03,662:INFO:Copying training dataset
2023-02-13 10:46:03,670:INFO:Defining folds
2023-02-13 10:46:03,670:INFO:Declaring metric variables
2023-02-13 10:46:03,670:INFO:Importing untrained model
2023-02-13 10:46:03,670:INFO:K Neighbors Regressor Imported successfully
2023-02-13 10:46:03,683:INFO:Starting cross validation
2023-02-13 10:46:03,686:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:03,851:INFO:Calculating mean and std
2023-02-13 10:46:03,853:INFO:Creating metrics dataframe
2023-02-13 10:46:03,855:INFO:Uploading results into container
2023-02-13 10:46:03,855:INFO:Uploading model into container now
2023-02-13 10:46:03,855:INFO:_master_model_container: 11
2023-02-13 10:46:03,855:INFO:_display_container: 2
2023-02-13 10:46:03,855:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:46:03,855:INFO:create_model() successfully completed......................................
2023-02-13 10:46:03,951:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:03,951:INFO:Creating metrics dataframe
2023-02-13 10:46:03,959:INFO:Initializing Decision Tree Regressor
2023-02-13 10:46:03,959:INFO:Total runtime is 0.05820695559183756 minutes
2023-02-13 10:46:03,965:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:03,965:INFO:Initializing create_model()
2023-02-13 10:46:03,965:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:03,965:INFO:Checking exceptions
2023-02-13 10:46:03,965:INFO:Importing libraries
2023-02-13 10:46:03,965:INFO:Copying training dataset
2023-02-13 10:46:03,967:INFO:Defining folds
2023-02-13 10:46:03,967:INFO:Declaring metric variables
2023-02-13 10:46:03,967:INFO:Importing untrained model
2023-02-13 10:46:03,967:INFO:Decision Tree Regressor Imported successfully
2023-02-13 10:46:03,975:INFO:Starting cross validation
2023-02-13 10:46:03,975:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:04,140:INFO:Calculating mean and std
2023-02-13 10:46:04,140:INFO:Creating metrics dataframe
2023-02-13 10:46:04,145:INFO:Uploading results into container
2023-02-13 10:46:04,145:INFO:Uploading model into container now
2023-02-13 10:46:04,147:INFO:_master_model_container: 12
2023-02-13 10:46:04,147:INFO:_display_container: 2
2023-02-13 10:46:04,147:INFO:DecisionTreeRegressor(random_state=123)
2023-02-13 10:46:04,147:INFO:create_model() successfully completed......................................
2023-02-13 10:46:04,253:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:04,253:INFO:Creating metrics dataframe
2023-02-13 10:46:04,269:INFO:Initializing Random Forest Regressor
2023-02-13 10:46:04,272:INFO:Total runtime is 0.06342565218607585 minutes
2023-02-13 10:46:04,274:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:04,274:INFO:Initializing create_model()
2023-02-13 10:46:04,274:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:04,275:INFO:Checking exceptions
2023-02-13 10:46:04,275:INFO:Importing libraries
2023-02-13 10:46:04,275:INFO:Copying training dataset
2023-02-13 10:46:04,277:INFO:Defining folds
2023-02-13 10:46:04,277:INFO:Declaring metric variables
2023-02-13 10:46:04,277:INFO:Importing untrained model
2023-02-13 10:46:04,277:INFO:Random Forest Regressor Imported successfully
2023-02-13 10:46:04,289:INFO:Starting cross validation
2023-02-13 10:46:04,292:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:04,805:INFO:Calculating mean and std
2023-02-13 10:46:04,805:INFO:Creating metrics dataframe
2023-02-13 10:46:04,809:INFO:Uploading results into container
2023-02-13 10:46:04,809:INFO:Uploading model into container now
2023-02-13 10:46:04,811:INFO:_master_model_container: 13
2023-02-13 10:46:04,811:INFO:_display_container: 2
2023-02-13 10:46:04,812:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-13 10:46:04,812:INFO:create_model() successfully completed......................................
2023-02-13 10:46:04,906:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:04,906:INFO:Creating metrics dataframe
2023-02-13 10:46:04,914:INFO:Initializing Extra Trees Regressor
2023-02-13 10:46:04,914:INFO:Total runtime is 0.07413413921991985 minutes
2023-02-13 10:46:04,922:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:04,922:INFO:Initializing create_model()
2023-02-13 10:46:04,922:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:04,922:INFO:Checking exceptions
2023-02-13 10:46:04,922:INFO:Importing libraries
2023-02-13 10:46:04,922:INFO:Copying training dataset
2023-02-13 10:46:04,927:INFO:Defining folds
2023-02-13 10:46:04,927:INFO:Declaring metric variables
2023-02-13 10:46:04,931:INFO:Importing untrained model
2023-02-13 10:46:04,931:INFO:Extra Trees Regressor Imported successfully
2023-02-13 10:46:04,939:INFO:Starting cross validation
2023-02-13 10:46:04,944:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:05,345:INFO:Calculating mean and std
2023-02-13 10:46:05,345:INFO:Creating metrics dataframe
2023-02-13 10:46:05,353:INFO:Uploading results into container
2023-02-13 10:46:05,353:INFO:Uploading model into container now
2023-02-13 10:46:05,353:INFO:_master_model_container: 14
2023-02-13 10:46:05,353:INFO:_display_container: 2
2023-02-13 10:46:05,353:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-13 10:46:05,353:INFO:create_model() successfully completed......................................
2023-02-13 10:46:05,450:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:05,450:INFO:Creating metrics dataframe
2023-02-13 10:46:05,458:INFO:Initializing AdaBoost Regressor
2023-02-13 10:46:05,458:INFO:Total runtime is 0.08318721850713096 minutes
2023-02-13 10:46:05,458:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:05,458:INFO:Initializing create_model()
2023-02-13 10:46:05,458:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:05,458:INFO:Checking exceptions
2023-02-13 10:46:05,458:INFO:Importing libraries
2023-02-13 10:46:05,458:INFO:Copying training dataset
2023-02-13 10:46:05,466:INFO:Defining folds
2023-02-13 10:46:05,466:INFO:Declaring metric variables
2023-02-13 10:46:05,466:INFO:Importing untrained model
2023-02-13 10:46:05,466:INFO:AdaBoost Regressor Imported successfully
2023-02-13 10:46:05,478:INFO:Starting cross validation
2023-02-13 10:46:05,482:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:05,735:INFO:Calculating mean and std
2023-02-13 10:46:05,735:INFO:Creating metrics dataframe
2023-02-13 10:46:05,745:INFO:Uploading results into container
2023-02-13 10:46:05,745:INFO:Uploading model into container now
2023-02-13 10:46:05,746:INFO:_master_model_container: 15
2023-02-13 10:46:05,746:INFO:_display_container: 2
2023-02-13 10:46:05,746:INFO:AdaBoostRegressor(random_state=123)
2023-02-13 10:46:05,746:INFO:create_model() successfully completed......................................
2023-02-13 10:46:05,840:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:05,840:INFO:Creating metrics dataframe
2023-02-13 10:46:05,856:INFO:Initializing Gradient Boosting Regressor
2023-02-13 10:46:05,856:INFO:Total runtime is 0.0898269295692444 minutes
2023-02-13 10:46:05,856:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:05,856:INFO:Initializing create_model()
2023-02-13 10:46:05,856:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:05,856:INFO:Checking exceptions
2023-02-13 10:46:05,856:INFO:Importing libraries
2023-02-13 10:46:05,856:INFO:Copying training dataset
2023-02-13 10:46:05,865:INFO:Defining folds
2023-02-13 10:46:05,865:INFO:Declaring metric variables
2023-02-13 10:46:05,865:INFO:Importing untrained model
2023-02-13 10:46:05,865:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 10:46:05,872:INFO:Starting cross validation
2023-02-13 10:46:05,879:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:06,085:INFO:Calculating mean and std
2023-02-13 10:46:06,090:INFO:Creating metrics dataframe
2023-02-13 10:46:06,093:INFO:Uploading results into container
2023-02-13 10:46:06,093:INFO:Uploading model into container now
2023-02-13 10:46:06,093:INFO:_master_model_container: 16
2023-02-13 10:46:06,093:INFO:_display_container: 2
2023-02-13 10:46:06,093:INFO:GradientBoostingRegressor(random_state=123)
2023-02-13 10:46:06,093:INFO:create_model() successfully completed......................................
2023-02-13 10:46:06,191:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:06,191:INFO:Creating metrics dataframe
2023-02-13 10:46:06,199:INFO:Initializing Extreme Gradient Boosting
2023-02-13 10:46:06,199:INFO:Total runtime is 0.09553944667180381 minutes
2023-02-13 10:46:06,210:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:06,210:INFO:Initializing create_model()
2023-02-13 10:46:06,210:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:06,210:INFO:Checking exceptions
2023-02-13 10:46:06,210:INFO:Importing libraries
2023-02-13 10:46:06,210:INFO:Copying training dataset
2023-02-13 10:46:06,210:INFO:Defining folds
2023-02-13 10:46:06,210:INFO:Declaring metric variables
2023-02-13 10:46:06,216:INFO:Importing untrained model
2023-02-13 10:46:06,216:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 10:46:06,228:INFO:Starting cross validation
2023-02-13 10:46:06,230:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:06,471:INFO:Calculating mean and std
2023-02-13 10:46:06,471:INFO:Creating metrics dataframe
2023-02-13 10:46:06,476:INFO:Uploading results into container
2023-02-13 10:46:06,476:INFO:Uploading model into container now
2023-02-13 10:46:06,476:INFO:_master_model_container: 17
2023-02-13 10:46:06,476:INFO:_display_container: 2
2023-02-13 10:46:06,478:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-13 10:46:06,478:INFO:create_model() successfully completed......................................
2023-02-13 10:46:06,567:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:06,567:INFO:Creating metrics dataframe
2023-02-13 10:46:06,583:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 10:46:06,583:INFO:Total runtime is 0.10194875796635947 minutes
2023-02-13 10:46:06,588:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:06,588:INFO:Initializing create_model()
2023-02-13 10:46:06,588:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:06,588:INFO:Checking exceptions
2023-02-13 10:46:06,588:INFO:Importing libraries
2023-02-13 10:46:06,588:INFO:Copying training dataset
2023-02-13 10:46:06,590:INFO:Defining folds
2023-02-13 10:46:06,590:INFO:Declaring metric variables
2023-02-13 10:46:06,595:INFO:Importing untrained model
2023-02-13 10:46:06,600:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 10:46:06,603:INFO:Starting cross validation
2023-02-13 10:46:06,607:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:06,773:INFO:Calculating mean and std
2023-02-13 10:46:06,773:INFO:Creating metrics dataframe
2023-02-13 10:46:06,782:INFO:Uploading results into container
2023-02-13 10:46:06,782:INFO:Uploading model into container now
2023-02-13 10:46:06,784:INFO:_master_model_container: 18
2023-02-13 10:46:06,784:INFO:_display_container: 2
2023-02-13 10:46:06,784:INFO:LGBMRegressor(random_state=123)
2023-02-13 10:46:06,784:INFO:create_model() successfully completed......................................
2023-02-13 10:46:06,882:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:06,884:INFO:Creating metrics dataframe
2023-02-13 10:46:06,896:INFO:Initializing Dummy Regressor
2023-02-13 10:46:06,896:INFO:Total runtime is 0.1071560303370158 minutes
2023-02-13 10:46:06,896:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:06,896:INFO:Initializing create_model()
2023-02-13 10:46:06,896:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A983FB8E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:06,896:INFO:Checking exceptions
2023-02-13 10:46:06,896:INFO:Importing libraries
2023-02-13 10:46:06,896:INFO:Copying training dataset
2023-02-13 10:46:06,904:INFO:Defining folds
2023-02-13 10:46:06,904:INFO:Declaring metric variables
2023-02-13 10:46:06,904:INFO:Importing untrained model
2023-02-13 10:46:06,914:INFO:Dummy Regressor Imported successfully
2023-02-13 10:46:06,920:INFO:Starting cross validation
2023-02-13 10:46:06,920:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:07,100:INFO:Calculating mean and std
2023-02-13 10:46:07,100:INFO:Creating metrics dataframe
2023-02-13 10:46:07,100:INFO:Uploading results into container
2023-02-13 10:46:07,100:INFO:Uploading model into container now
2023-02-13 10:46:07,100:INFO:_master_model_container: 19
2023-02-13 10:46:07,100:INFO:_display_container: 2
2023-02-13 10:46:07,100:INFO:DummyRegressor()
2023-02-13 10:46:07,100:INFO:create_model() successfully completed......................................
2023-02-13 10:46:07,197:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:07,197:INFO:Creating metrics dataframe
2023-02-13 10:46:07,221:INFO:Initializing create_model()
2023-02-13 10:46:07,221:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93FB3B20>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:07,221:INFO:Checking exceptions
2023-02-13 10:46:07,221:INFO:Importing libraries
2023-02-13 10:46:07,221:INFO:Copying training dataset
2023-02-13 10:46:07,221:INFO:Defining folds
2023-02-13 10:46:07,221:INFO:Declaring metric variables
2023-02-13 10:46:07,221:INFO:Importing untrained model
2023-02-13 10:46:07,221:INFO:Declaring custom model
2023-02-13 10:46:07,221:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:46:07,221:INFO:Cross validation set to False
2023-02-13 10:46:07,221:INFO:Fitting Model
2023-02-13 10:46:07,245:INFO:BayesianRidge()
2023-02-13 10:46:07,245:INFO:create_model() successfully completed......................................
2023-02-13 10:46:07,383:INFO:_master_model_container: 19
2023-02-13 10:46:07,383:INFO:_display_container: 2
2023-02-13 10:46:07,383:INFO:BayesianRidge()
2023-02-13 10:46:07,383:INFO:compare_models() successfully completed......................................
2023-02-13 10:46:15,441:INFO:PyCaret RegressionExperiment
2023-02-13 10:46:15,446:INFO:Logging name: reg-default-name
2023-02-13 10:46:15,446:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 10:46:15,446:INFO:version 3.0.0.rc8
2023-02-13 10:46:15,446:INFO:Initializing setup()
2023-02-13 10:46:15,446:INFO:self.USI: 6ca9
2023-02-13 10:46:15,446:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 10:46:15,446:INFO:Checking environment
2023-02-13 10:46:15,446:INFO:python_version: 3.9.13
2023-02-13 10:46:15,446:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 10:46:15,446:INFO:machine: AMD64
2023-02-13 10:46:15,446:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 10:46:15,448:INFO:Memory: svmem(total=16805040128, available=6375047168, percent=62.1, used=10429992960, free=6375047168)
2023-02-13 10:46:15,448:INFO:Physical Core: 4
2023-02-13 10:46:15,448:INFO:Logical Core: 8
2023-02-13 10:46:15,448:INFO:Checking libraries
2023-02-13 10:46:15,448:INFO:System:
2023-02-13 10:46:15,448:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 10:46:15,448:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 10:46:15,448:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 10:46:15,448:INFO:PyCaret required dependencies:
2023-02-13 10:46:15,448:INFO:                 pip: 23.0
2023-02-13 10:46:15,448:INFO:          setuptools: 58.1.0
2023-02-13 10:46:15,448:INFO:             pycaret: 3.0.0rc8
2023-02-13 10:46:15,448:INFO:             IPython: 8.7.0
2023-02-13 10:46:15,448:INFO:          ipywidgets: 8.0.4
2023-02-13 10:46:15,448:INFO:                tqdm: 4.64.1
2023-02-13 10:46:15,448:INFO:               numpy: 1.22.1
2023-02-13 10:46:15,448:INFO:              pandas: 1.5.2
2023-02-13 10:46:15,448:INFO:              jinja2: 3.1.2
2023-02-13 10:46:15,448:INFO:               scipy: 1.5.4
2023-02-13 10:46:15,448:INFO:              joblib: 1.2.0
2023-02-13 10:46:15,448:INFO:             sklearn: 1.1.3
2023-02-13 10:46:15,448:INFO:                pyod: 1.0.7
2023-02-13 10:46:15,448:INFO:            imblearn: 0.10.1
2023-02-13 10:46:15,448:INFO:   category_encoders: 2.6.0
2023-02-13 10:46:15,448:INFO:            lightgbm: 3.3.4
2023-02-13 10:46:15,448:INFO:               numba: 0.56.4
2023-02-13 10:46:15,448:INFO:            requests: 2.28.1
2023-02-13 10:46:15,448:INFO:          matplotlib: 3.6.2
2023-02-13 10:46:15,448:INFO:          scikitplot: 0.3.7
2023-02-13 10:46:15,448:INFO:         yellowbrick: 1.5
2023-02-13 10:46:15,448:INFO:              plotly: 5.11.0
2023-02-13 10:46:15,448:INFO:             kaleido: 0.2.1
2023-02-13 10:46:15,448:INFO:         statsmodels: 0.13.5
2023-02-13 10:46:15,448:INFO:              sktime: 0.15.1
2023-02-13 10:46:15,448:INFO:               tbats: 1.1.2
2023-02-13 10:46:15,448:INFO:            pmdarima: 2.0.2
2023-02-13 10:46:15,448:INFO:              psutil: 5.9.4
2023-02-13 10:46:15,448:INFO:PyCaret optional dependencies:
2023-02-13 10:46:15,448:INFO:                shap: 0.41.0
2023-02-13 10:46:15,448:INFO:           interpret: 0.3.0
2023-02-13 10:46:15,448:INFO:                umap: Not installed
2023-02-13 10:46:15,454:INFO:    pandas_profiling: 3.6.2
2023-02-13 10:46:15,454:INFO:  explainerdashboard: Not installed
2023-02-13 10:46:15,454:INFO:             autoviz: Not installed
2023-02-13 10:46:15,454:INFO:           fairlearn: Not installed
2023-02-13 10:46:15,454:INFO:             xgboost: 1.7.3
2023-02-13 10:46:15,454:INFO:            catboost: Not installed
2023-02-13 10:46:15,454:INFO:              kmodes: Not installed
2023-02-13 10:46:15,454:INFO:             mlxtend: Not installed
2023-02-13 10:46:15,454:INFO:       statsforecast: Not installed
2023-02-13 10:46:15,454:INFO:        tune_sklearn: Not installed
2023-02-13 10:46:15,454:INFO:                 ray: Not installed
2023-02-13 10:46:15,454:INFO:            hyperopt: Not installed
2023-02-13 10:46:15,454:INFO:              optuna: Not installed
2023-02-13 10:46:15,454:INFO:               skopt: Not installed
2023-02-13 10:46:15,454:INFO:              mlflow: Not installed
2023-02-13 10:46:15,454:INFO:              gradio: Not installed
2023-02-13 10:46:15,454:INFO:             fastapi: Not installed
2023-02-13 10:46:15,454:INFO:             uvicorn: Not installed
2023-02-13 10:46:15,454:INFO:              m2cgen: Not installed
2023-02-13 10:46:15,454:INFO:           evidently: Not installed
2023-02-13 10:46:15,454:INFO:                nltk: 3.8
2023-02-13 10:46:15,454:INFO:            pyLDAvis: Not installed
2023-02-13 10:46:15,454:INFO:              gensim: Not installed
2023-02-13 10:46:15,454:INFO:               spacy: Not installed
2023-02-13 10:46:15,454:INFO:           wordcloud: 1.8.2.2
2023-02-13 10:46:15,454:INFO:            textblob: Not installed
2023-02-13 10:46:15,454:INFO:               fugue: Not installed
2023-02-13 10:46:15,454:INFO:           streamlit: 1.16.0
2023-02-13 10:46:15,454:INFO:             prophet: Not installed
2023-02-13 10:46:15,454:INFO:None
2023-02-13 10:46:15,454:INFO:Set up data.
2023-02-13 10:46:15,460:INFO:Set up train/test split.
2023-02-13 10:46:15,462:INFO:Set up index.
2023-02-13 10:46:15,462:INFO:Set up folding strategy.
2023-02-13 10:46:15,464:INFO:Assigning column types.
2023-02-13 10:46:15,467:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 10:46:15,467:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,475:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,478:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,539:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,596:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,596:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:15,596:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:15,596:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,609:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,612:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,666:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,708:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,708:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:15,708:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:15,708:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 10:46:15,708:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,716:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,772:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,806:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,806:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:15,806:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:15,814:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,815:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,855:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,897:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,897:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:15,904:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:15,904:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 10:46:15,904:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,953:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,993:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:15,993:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:16,001:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:16,010:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:16,051:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:16,091:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:16,091:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:16,091:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:16,091:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 10:46:16,149:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:16,191:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:16,192:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:16,192:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:16,246:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:16,283:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:16,283:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:16,286:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:16,286:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 10:46:16,339:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:16,374:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:16,380:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:16,442:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:16,527:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:16,527:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:16,527:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 10:46:16,636:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:16,641:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:16,739:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:16,739:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:16,739:INFO:Preparing preprocessing pipeline...
2023-02-13 10:46:16,739:INFO:Set up column name cleaning.
2023-02-13 10:46:16,739:INFO:Set up simple imputation.
2023-02-13 10:46:16,755:INFO:Finished creating preprocessing pipeline.
2023-02-13 10:46:16,755:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 10:46:16,755:INFO:Creating final display dataframe.
2023-02-13 10:46:16,895:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              6ca9
2023-02-13 10:46:17,024:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:17,032:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:17,134:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:17,139:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:17,139:INFO:setup() successfully completed in 1.7s...............
2023-02-13 10:46:17,139:INFO:Initializing compare_models()
2023-02-13 10:46:17,139:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 10:46:17,139:INFO:Checking exceptions
2023-02-13 10:46:17,139:INFO:Preparing display monitor
2023-02-13 10:46:17,196:INFO:Initializing Linear Regression
2023-02-13 10:46:17,197:INFO:Total runtime is 1.691579818725586e-05 minutes
2023-02-13 10:46:17,201:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:17,201:INFO:Initializing create_model()
2023-02-13 10:46:17,201:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:17,201:INFO:Checking exceptions
2023-02-13 10:46:17,201:INFO:Importing libraries
2023-02-13 10:46:17,201:INFO:Copying training dataset
2023-02-13 10:46:17,204:INFO:Defining folds
2023-02-13 10:46:17,204:INFO:Declaring metric variables
2023-02-13 10:46:17,204:INFO:Importing untrained model
2023-02-13 10:46:17,215:INFO:Linear Regression Imported successfully
2023-02-13 10:46:17,223:INFO:Starting cross validation
2023-02-13 10:46:17,225:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:17,420:INFO:Calculating mean and std
2023-02-13 10:46:17,420:INFO:Creating metrics dataframe
2023-02-13 10:46:17,422:INFO:Uploading results into container
2023-02-13 10:46:17,422:INFO:Uploading model into container now
2023-02-13 10:46:17,422:INFO:_master_model_container: 1
2023-02-13 10:46:17,422:INFO:_display_container: 2
2023-02-13 10:46:17,422:INFO:LinearRegression(n_jobs=-1)
2023-02-13 10:46:17,422:INFO:create_model() successfully completed......................................
2023-02-13 10:46:17,525:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:17,525:INFO:Creating metrics dataframe
2023-02-13 10:46:17,533:INFO:Initializing Lasso Regression
2023-02-13 10:46:17,533:INFO:Total runtime is 0.005615941683451335 minutes
2023-02-13 10:46:17,537:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:17,537:INFO:Initializing create_model()
2023-02-13 10:46:17,537:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:17,537:INFO:Checking exceptions
2023-02-13 10:46:17,537:INFO:Importing libraries
2023-02-13 10:46:17,537:INFO:Copying training dataset
2023-02-13 10:46:17,541:INFO:Defining folds
2023-02-13 10:46:17,541:INFO:Declaring metric variables
2023-02-13 10:46:17,541:INFO:Importing untrained model
2023-02-13 10:46:17,541:INFO:Lasso Regression Imported successfully
2023-02-13 10:46:17,554:INFO:Starting cross validation
2023-02-13 10:46:17,555:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:17,717:INFO:Calculating mean and std
2023-02-13 10:46:17,717:INFO:Creating metrics dataframe
2023-02-13 10:46:17,717:INFO:Uploading results into container
2023-02-13 10:46:17,723:INFO:Uploading model into container now
2023-02-13 10:46:17,723:INFO:_master_model_container: 2
2023-02-13 10:46:17,723:INFO:_display_container: 2
2023-02-13 10:46:17,723:INFO:Lasso(random_state=42)
2023-02-13 10:46:17,723:INFO:create_model() successfully completed......................................
2023-02-13 10:46:17,821:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:17,821:INFO:Creating metrics dataframe
2023-02-13 10:46:17,821:INFO:Initializing Ridge Regression
2023-02-13 10:46:17,821:INFO:Total runtime is 0.010414218902587891 minutes
2023-02-13 10:46:17,829:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:17,829:INFO:Initializing create_model()
2023-02-13 10:46:17,829:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:17,829:INFO:Checking exceptions
2023-02-13 10:46:17,829:INFO:Importing libraries
2023-02-13 10:46:17,829:INFO:Copying training dataset
2023-02-13 10:46:17,829:INFO:Defining folds
2023-02-13 10:46:17,829:INFO:Declaring metric variables
2023-02-13 10:46:17,837:INFO:Importing untrained model
2023-02-13 10:46:17,837:INFO:Ridge Regression Imported successfully
2023-02-13 10:46:17,845:INFO:Starting cross validation
2023-02-13 10:46:17,845:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:18,066:INFO:Calculating mean and std
2023-02-13 10:46:18,066:INFO:Creating metrics dataframe
2023-02-13 10:46:18,066:INFO:Uploading results into container
2023-02-13 10:46:18,066:INFO:Uploading model into container now
2023-02-13 10:46:18,066:INFO:_master_model_container: 3
2023-02-13 10:46:18,066:INFO:_display_container: 2
2023-02-13 10:46:18,066:INFO:Ridge(random_state=42)
2023-02-13 10:46:18,066:INFO:create_model() successfully completed......................................
2023-02-13 10:46:18,155:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:18,155:INFO:Creating metrics dataframe
2023-02-13 10:46:18,166:INFO:Initializing Elastic Net
2023-02-13 10:46:18,166:INFO:Total runtime is 0.01616422732671102 minutes
2023-02-13 10:46:18,172:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:18,172:INFO:Initializing create_model()
2023-02-13 10:46:18,172:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:18,172:INFO:Checking exceptions
2023-02-13 10:46:18,172:INFO:Importing libraries
2023-02-13 10:46:18,172:INFO:Copying training dataset
2023-02-13 10:46:18,172:INFO:Defining folds
2023-02-13 10:46:18,172:INFO:Declaring metric variables
2023-02-13 10:46:18,172:INFO:Importing untrained model
2023-02-13 10:46:18,182:INFO:Elastic Net Imported successfully
2023-02-13 10:46:18,188:INFO:Starting cross validation
2023-02-13 10:46:18,188:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:18,353:INFO:Calculating mean and std
2023-02-13 10:46:18,354:INFO:Creating metrics dataframe
2023-02-13 10:46:18,358:INFO:Uploading results into container
2023-02-13 10:46:18,358:INFO:Uploading model into container now
2023-02-13 10:46:18,358:INFO:_master_model_container: 4
2023-02-13 10:46:18,360:INFO:_display_container: 2
2023-02-13 10:46:18,360:INFO:ElasticNet(random_state=42)
2023-02-13 10:46:18,360:INFO:create_model() successfully completed......................................
2023-02-13 10:46:18,459:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:18,459:INFO:Creating metrics dataframe
2023-02-13 10:46:18,467:INFO:Initializing Least Angle Regression
2023-02-13 10:46:18,467:INFO:Total runtime is 0.021187774340311688 minutes
2023-02-13 10:46:18,467:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:18,467:INFO:Initializing create_model()
2023-02-13 10:46:18,467:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:18,467:INFO:Checking exceptions
2023-02-13 10:46:18,467:INFO:Importing libraries
2023-02-13 10:46:18,467:INFO:Copying training dataset
2023-02-13 10:46:18,467:INFO:Defining folds
2023-02-13 10:46:18,467:INFO:Declaring metric variables
2023-02-13 10:46:18,475:INFO:Importing untrained model
2023-02-13 10:46:18,475:INFO:Least Angle Regression Imported successfully
2023-02-13 10:46:18,483:INFO:Starting cross validation
2023-02-13 10:46:18,483:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:18,535:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:18,540:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:18,552:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:18,562:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:18,575:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:18,586:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:18,598:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:18,604:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:18,623:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:18,631:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:18,640:INFO:Calculating mean and std
2023-02-13 10:46:18,648:INFO:Creating metrics dataframe
2023-02-13 10:46:18,650:INFO:Uploading results into container
2023-02-13 10:46:18,650:INFO:Uploading model into container now
2023-02-13 10:46:18,652:INFO:_master_model_container: 5
2023-02-13 10:46:18,652:INFO:_display_container: 2
2023-02-13 10:46:18,652:INFO:Lars(random_state=42)
2023-02-13 10:46:18,652:INFO:create_model() successfully completed......................................
2023-02-13 10:46:18,748:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:18,748:INFO:Creating metrics dataframe
2023-02-13 10:46:18,753:INFO:Initializing Lasso Least Angle Regression
2023-02-13 10:46:18,753:INFO:Total runtime is 0.025962420304616294 minutes
2023-02-13 10:46:18,762:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:18,762:INFO:Initializing create_model()
2023-02-13 10:46:18,762:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:18,763:INFO:Checking exceptions
2023-02-13 10:46:18,763:INFO:Importing libraries
2023-02-13 10:46:18,763:INFO:Copying training dataset
2023-02-13 10:46:18,765:INFO:Defining folds
2023-02-13 10:46:18,765:INFO:Declaring metric variables
2023-02-13 10:46:18,770:INFO:Importing untrained model
2023-02-13 10:46:18,770:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 10:46:18,778:INFO:Starting cross validation
2023-02-13 10:46:18,778:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:18,832:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:18,844:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:18,861:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:18,873:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:18,878:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:18,890:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:18,903:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:18,917:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:18,925:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:18,936:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:18,952:INFO:Calculating mean and std
2023-02-13 10:46:18,952:INFO:Creating metrics dataframe
2023-02-13 10:46:18,957:INFO:Uploading results into container
2023-02-13 10:46:18,958:INFO:Uploading model into container now
2023-02-13 10:46:18,958:INFO:_master_model_container: 6
2023-02-13 10:46:18,958:INFO:_display_container: 2
2023-02-13 10:46:18,958:INFO:LassoLars(random_state=42)
2023-02-13 10:46:18,958:INFO:create_model() successfully completed......................................
2023-02-13 10:46:19,057:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:19,057:INFO:Creating metrics dataframe
2023-02-13 10:46:19,067:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 10:46:19,067:INFO:Total runtime is 0.031186576684316 minutes
2023-02-13 10:46:19,073:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:19,073:INFO:Initializing create_model()
2023-02-13 10:46:19,073:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:19,073:INFO:Checking exceptions
2023-02-13 10:46:19,073:INFO:Importing libraries
2023-02-13 10:46:19,073:INFO:Copying training dataset
2023-02-13 10:46:19,073:INFO:Defining folds
2023-02-13 10:46:19,073:INFO:Declaring metric variables
2023-02-13 10:46:19,081:INFO:Importing untrained model
2023-02-13 10:46:19,081:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 10:46:19,089:INFO:Starting cross validation
2023-02-13 10:46:19,089:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:19,135:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:19,144:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:19,157:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:19,170:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:19,178:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:19,187:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:19,203:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:19,213:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:19,221:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:19,231:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:19,244:INFO:Calculating mean and std
2023-02-13 10:46:19,244:INFO:Creating metrics dataframe
2023-02-13 10:46:19,251:INFO:Uploading results into container
2023-02-13 10:46:19,251:INFO:Uploading model into container now
2023-02-13 10:46:19,251:INFO:_master_model_container: 7
2023-02-13 10:46:19,251:INFO:_display_container: 2
2023-02-13 10:46:19,251:INFO:OrthogonalMatchingPursuit()
2023-02-13 10:46:19,253:INFO:create_model() successfully completed......................................
2023-02-13 10:46:19,343:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:19,343:INFO:Creating metrics dataframe
2023-02-13 10:46:19,354:INFO:Initializing Bayesian Ridge
2023-02-13 10:46:19,354:INFO:Total runtime is 0.0359643300374349 minutes
2023-02-13 10:46:19,354:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:19,354:INFO:Initializing create_model()
2023-02-13 10:46:19,354:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:19,354:INFO:Checking exceptions
2023-02-13 10:46:19,354:INFO:Importing libraries
2023-02-13 10:46:19,354:INFO:Copying training dataset
2023-02-13 10:46:19,360:INFO:Defining folds
2023-02-13 10:46:19,361:INFO:Declaring metric variables
2023-02-13 10:46:19,365:INFO:Importing untrained model
2023-02-13 10:46:19,368:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:46:19,375:INFO:Starting cross validation
2023-02-13 10:46:19,377:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:19,532:INFO:Calculating mean and std
2023-02-13 10:46:19,532:INFO:Creating metrics dataframe
2023-02-13 10:46:19,532:INFO:Uploading results into container
2023-02-13 10:46:19,532:INFO:Uploading model into container now
2023-02-13 10:46:19,532:INFO:_master_model_container: 8
2023-02-13 10:46:19,532:INFO:_display_container: 2
2023-02-13 10:46:19,532:INFO:BayesianRidge()
2023-02-13 10:46:19,540:INFO:create_model() successfully completed......................................
2023-02-13 10:46:19,629:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:19,629:INFO:Creating metrics dataframe
2023-02-13 10:46:19,637:INFO:Initializing Passive Aggressive Regressor
2023-02-13 10:46:19,637:INFO:Total runtime is 0.04069336255391439 minutes
2023-02-13 10:46:19,645:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:19,645:INFO:Initializing create_model()
2023-02-13 10:46:19,645:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:19,645:INFO:Checking exceptions
2023-02-13 10:46:19,645:INFO:Importing libraries
2023-02-13 10:46:19,645:INFO:Copying training dataset
2023-02-13 10:46:19,645:INFO:Defining folds
2023-02-13 10:46:19,645:INFO:Declaring metric variables
2023-02-13 10:46:19,653:INFO:Importing untrained model
2023-02-13 10:46:19,656:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 10:46:19,662:INFO:Starting cross validation
2023-02-13 10:46:19,663:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:19,870:INFO:Calculating mean and std
2023-02-13 10:46:19,870:INFO:Creating metrics dataframe
2023-02-13 10:46:19,875:INFO:Uploading results into container
2023-02-13 10:46:19,875:INFO:Uploading model into container now
2023-02-13 10:46:19,875:INFO:_master_model_container: 9
2023-02-13 10:46:19,875:INFO:_display_container: 2
2023-02-13 10:46:19,875:INFO:PassiveAggressiveRegressor(random_state=42)
2023-02-13 10:46:19,875:INFO:create_model() successfully completed......................................
2023-02-13 10:46:19,973:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:19,973:INFO:Creating metrics dataframe
2023-02-13 10:46:19,981:INFO:Initializing Huber Regressor
2023-02-13 10:46:19,981:INFO:Total runtime is 0.04642051060994466 minutes
2023-02-13 10:46:19,988:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:19,988:INFO:Initializing create_model()
2023-02-13 10:46:19,988:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:19,988:INFO:Checking exceptions
2023-02-13 10:46:19,988:INFO:Importing libraries
2023-02-13 10:46:19,988:INFO:Copying training dataset
2023-02-13 10:46:19,989:INFO:Defining folds
2023-02-13 10:46:19,989:INFO:Declaring metric variables
2023-02-13 10:46:19,992:INFO:Importing untrained model
2023-02-13 10:46:19,997:INFO:Huber Regressor Imported successfully
2023-02-13 10:46:20,005:INFO:Starting cross validation
2023-02-13 10:46:20,006:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:20,070:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:20,097:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:20,111:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:20,137:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:20,146:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:20,162:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:20,169:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:20,169:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:20,187:INFO:Calculating mean and std
2023-02-13 10:46:20,190:INFO:Creating metrics dataframe
2023-02-13 10:46:20,193:INFO:Uploading results into container
2023-02-13 10:46:20,193:INFO:Uploading model into container now
2023-02-13 10:46:20,193:INFO:_master_model_container: 10
2023-02-13 10:46:20,195:INFO:_display_container: 2
2023-02-13 10:46:20,195:INFO:HuberRegressor()
2023-02-13 10:46:20,195:INFO:create_model() successfully completed......................................
2023-02-13 10:46:20,290:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:20,290:INFO:Creating metrics dataframe
2023-02-13 10:46:20,299:INFO:Initializing K Neighbors Regressor
2023-02-13 10:46:20,299:INFO:Total runtime is 0.05172583262125651 minutes
2023-02-13 10:46:20,299:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:20,299:INFO:Initializing create_model()
2023-02-13 10:46:20,299:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:20,299:INFO:Checking exceptions
2023-02-13 10:46:20,299:INFO:Importing libraries
2023-02-13 10:46:20,299:INFO:Copying training dataset
2023-02-13 10:46:20,304:INFO:Defining folds
2023-02-13 10:46:20,304:INFO:Declaring metric variables
2023-02-13 10:46:20,306:INFO:Importing untrained model
2023-02-13 10:46:20,308:INFO:K Neighbors Regressor Imported successfully
2023-02-13 10:46:20,317:INFO:Starting cross validation
2023-02-13 10:46:20,320:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:20,482:INFO:Calculating mean and std
2023-02-13 10:46:20,484:INFO:Creating metrics dataframe
2023-02-13 10:46:20,486:INFO:Uploading results into container
2023-02-13 10:46:20,486:INFO:Uploading model into container now
2023-02-13 10:46:20,486:INFO:_master_model_container: 11
2023-02-13 10:46:20,486:INFO:_display_container: 2
2023-02-13 10:46:20,486:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:46:20,486:INFO:create_model() successfully completed......................................
2023-02-13 10:46:20,601:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:20,601:INFO:Creating metrics dataframe
2023-02-13 10:46:20,625:INFO:Initializing Decision Tree Regressor
2023-02-13 10:46:20,627:INFO:Total runtime is 0.05719424486160278 minutes
2023-02-13 10:46:20,637:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:20,637:INFO:Initializing create_model()
2023-02-13 10:46:20,637:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:20,637:INFO:Checking exceptions
2023-02-13 10:46:20,637:INFO:Importing libraries
2023-02-13 10:46:20,639:INFO:Copying training dataset
2023-02-13 10:46:20,646:INFO:Defining folds
2023-02-13 10:46:20,646:INFO:Declaring metric variables
2023-02-13 10:46:20,660:INFO:Importing untrained model
2023-02-13 10:46:20,669:INFO:Decision Tree Regressor Imported successfully
2023-02-13 10:46:20,683:INFO:Starting cross validation
2023-02-13 10:46:20,688:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:20,896:INFO:Calculating mean and std
2023-02-13 10:46:20,896:INFO:Creating metrics dataframe
2023-02-13 10:46:20,896:INFO:Uploading results into container
2023-02-13 10:46:20,896:INFO:Uploading model into container now
2023-02-13 10:46:20,896:INFO:_master_model_container: 12
2023-02-13 10:46:20,896:INFO:_display_container: 2
2023-02-13 10:46:20,896:INFO:DecisionTreeRegressor(random_state=42)
2023-02-13 10:46:20,896:INFO:create_model() successfully completed......................................
2023-02-13 10:46:20,998:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:20,998:INFO:Creating metrics dataframe
2023-02-13 10:46:21,002:INFO:Initializing Random Forest Regressor
2023-02-13 10:46:21,002:INFO:Total runtime is 0.06343745390574138 minutes
2023-02-13 10:46:21,010:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:21,012:INFO:Initializing create_model()
2023-02-13 10:46:21,012:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:21,012:INFO:Checking exceptions
2023-02-13 10:46:21,012:INFO:Importing libraries
2023-02-13 10:46:21,012:INFO:Copying training dataset
2023-02-13 10:46:21,015:INFO:Defining folds
2023-02-13 10:46:21,015:INFO:Declaring metric variables
2023-02-13 10:46:21,019:INFO:Importing untrained model
2023-02-13 10:46:21,022:INFO:Random Forest Regressor Imported successfully
2023-02-13 10:46:21,027:INFO:Starting cross validation
2023-02-13 10:46:21,027:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:21,522:INFO:Calculating mean and std
2023-02-13 10:46:21,522:INFO:Creating metrics dataframe
2023-02-13 10:46:21,526:INFO:Uploading results into container
2023-02-13 10:46:21,526:INFO:Uploading model into container now
2023-02-13 10:46:21,526:INFO:_master_model_container: 13
2023-02-13 10:46:21,526:INFO:_display_container: 2
2023-02-13 10:46:21,526:INFO:RandomForestRegressor(n_jobs=-1, random_state=42)
2023-02-13 10:46:21,526:INFO:create_model() successfully completed......................................
2023-02-13 10:46:21,640:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:21,640:INFO:Creating metrics dataframe
2023-02-13 10:46:21,648:INFO:Initializing Extra Trees Regressor
2023-02-13 10:46:21,648:INFO:Total runtime is 0.07419900496800741 minutes
2023-02-13 10:46:21,657:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:21,657:INFO:Initializing create_model()
2023-02-13 10:46:21,658:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:21,658:INFO:Checking exceptions
2023-02-13 10:46:21,658:INFO:Importing libraries
2023-02-13 10:46:21,658:INFO:Copying training dataset
2023-02-13 10:46:21,660:INFO:Defining folds
2023-02-13 10:46:21,660:INFO:Declaring metric variables
2023-02-13 10:46:21,664:INFO:Importing untrained model
2023-02-13 10:46:21,669:INFO:Extra Trees Regressor Imported successfully
2023-02-13 10:46:21,674:INFO:Starting cross validation
2023-02-13 10:46:21,676:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:22,079:INFO:Calculating mean and std
2023-02-13 10:46:22,082:INFO:Creating metrics dataframe
2023-02-13 10:46:22,084:INFO:Uploading results into container
2023-02-13 10:46:22,084:INFO:Uploading model into container now
2023-02-13 10:46:22,084:INFO:_master_model_container: 14
2023-02-13 10:46:22,084:INFO:_display_container: 2
2023-02-13 10:46:22,084:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=42)
2023-02-13 10:46:22,084:INFO:create_model() successfully completed......................................
2023-02-13 10:46:22,183:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:22,183:INFO:Creating metrics dataframe
2023-02-13 10:46:22,188:INFO:Initializing AdaBoost Regressor
2023-02-13 10:46:22,188:INFO:Total runtime is 0.08321036895116171 minutes
2023-02-13 10:46:22,198:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:22,198:INFO:Initializing create_model()
2023-02-13 10:46:22,198:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:22,198:INFO:Checking exceptions
2023-02-13 10:46:22,198:INFO:Importing libraries
2023-02-13 10:46:22,198:INFO:Copying training dataset
2023-02-13 10:46:22,201:INFO:Defining folds
2023-02-13 10:46:22,201:INFO:Declaring metric variables
2023-02-13 10:46:22,204:INFO:Importing untrained model
2023-02-13 10:46:22,208:INFO:AdaBoost Regressor Imported successfully
2023-02-13 10:46:22,213:INFO:Starting cross validation
2023-02-13 10:46:22,218:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:22,483:INFO:Calculating mean and std
2023-02-13 10:46:22,486:INFO:Creating metrics dataframe
2023-02-13 10:46:22,487:INFO:Uploading results into container
2023-02-13 10:46:22,487:INFO:Uploading model into container now
2023-02-13 10:46:22,490:INFO:_master_model_container: 15
2023-02-13 10:46:22,490:INFO:_display_container: 2
2023-02-13 10:46:22,490:INFO:AdaBoostRegressor(random_state=42)
2023-02-13 10:46:22,490:INFO:create_model() successfully completed......................................
2023-02-13 10:46:22,589:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:22,589:INFO:Creating metrics dataframe
2023-02-13 10:46:22,598:INFO:Initializing Gradient Boosting Regressor
2023-02-13 10:46:22,598:INFO:Total runtime is 0.09004064400990805 minutes
2023-02-13 10:46:22,602:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:22,602:INFO:Initializing create_model()
2023-02-13 10:46:22,602:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:22,602:INFO:Checking exceptions
2023-02-13 10:46:22,602:INFO:Importing libraries
2023-02-13 10:46:22,602:INFO:Copying training dataset
2023-02-13 10:46:22,607:INFO:Defining folds
2023-02-13 10:46:22,607:INFO:Declaring metric variables
2023-02-13 10:46:22,611:INFO:Importing untrained model
2023-02-13 10:46:22,616:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 10:46:22,623:INFO:Starting cross validation
2023-02-13 10:46:22,624:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:22,834:INFO:Calculating mean and std
2023-02-13 10:46:22,834:INFO:Creating metrics dataframe
2023-02-13 10:46:22,834:INFO:Uploading results into container
2023-02-13 10:46:22,834:INFO:Uploading model into container now
2023-02-13 10:46:22,834:INFO:_master_model_container: 16
2023-02-13 10:46:22,834:INFO:_display_container: 2
2023-02-13 10:46:22,834:INFO:GradientBoostingRegressor(random_state=42)
2023-02-13 10:46:22,834:INFO:create_model() successfully completed......................................
2023-02-13 10:46:22,932:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:22,932:INFO:Creating metrics dataframe
2023-02-13 10:46:22,942:INFO:Initializing Extreme Gradient Boosting
2023-02-13 10:46:22,942:INFO:Total runtime is 0.09577091932296754 minutes
2023-02-13 10:46:22,945:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:22,945:INFO:Initializing create_model()
2023-02-13 10:46:22,946:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:22,946:INFO:Checking exceptions
2023-02-13 10:46:22,946:INFO:Importing libraries
2023-02-13 10:46:22,946:INFO:Copying training dataset
2023-02-13 10:46:22,949:INFO:Defining folds
2023-02-13 10:46:22,949:INFO:Declaring metric variables
2023-02-13 10:46:22,951:INFO:Importing untrained model
2023-02-13 10:46:22,955:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 10:46:22,963:INFO:Starting cross validation
2023-02-13 10:46:22,964:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:23,176:INFO:Calculating mean and std
2023-02-13 10:46:23,176:INFO:Creating metrics dataframe
2023-02-13 10:46:23,184:INFO:Uploading results into container
2023-02-13 10:46:23,184:INFO:Uploading model into container now
2023-02-13 10:46:23,184:INFO:_master_model_container: 17
2023-02-13 10:46:23,184:INFO:_display_container: 2
2023-02-13 10:46:23,184:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=42, ...)
2023-02-13 10:46:23,184:INFO:create_model() successfully completed......................................
2023-02-13 10:46:23,282:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:23,284:INFO:Creating metrics dataframe
2023-02-13 10:46:23,293:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 10:46:23,293:INFO:Total runtime is 0.10162549018859864 minutes
2023-02-13 10:46:23,293:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:23,298:INFO:Initializing create_model()
2023-02-13 10:46:23,298:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:23,298:INFO:Checking exceptions
2023-02-13 10:46:23,298:INFO:Importing libraries
2023-02-13 10:46:23,298:INFO:Copying training dataset
2023-02-13 10:46:23,301:INFO:Defining folds
2023-02-13 10:46:23,301:INFO:Declaring metric variables
2023-02-13 10:46:23,304:INFO:Importing untrained model
2023-02-13 10:46:23,306:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 10:46:23,314:INFO:Starting cross validation
2023-02-13 10:46:23,317:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:23,546:INFO:Calculating mean and std
2023-02-13 10:46:23,546:INFO:Creating metrics dataframe
2023-02-13 10:46:23,550:INFO:Uploading results into container
2023-02-13 10:46:23,550:INFO:Uploading model into container now
2023-02-13 10:46:23,550:INFO:_master_model_container: 18
2023-02-13 10:46:23,550:INFO:_display_container: 2
2023-02-13 10:46:23,550:INFO:LGBMRegressor(random_state=42)
2023-02-13 10:46:23,550:INFO:create_model() successfully completed......................................
2023-02-13 10:46:23,647:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:23,647:INFO:Creating metrics dataframe
2023-02-13 10:46:23,655:INFO:Initializing Dummy Regressor
2023-02-13 10:46:23,655:INFO:Total runtime is 0.1076565424601237 minutes
2023-02-13 10:46:23,659:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:23,659:INFO:Initializing create_model()
2023-02-13 10:46:23,659:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F0FDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:23,659:INFO:Checking exceptions
2023-02-13 10:46:23,659:INFO:Importing libraries
2023-02-13 10:46:23,659:INFO:Copying training dataset
2023-02-13 10:46:23,665:INFO:Defining folds
2023-02-13 10:46:23,665:INFO:Declaring metric variables
2023-02-13 10:46:23,666:INFO:Importing untrained model
2023-02-13 10:46:23,671:INFO:Dummy Regressor Imported successfully
2023-02-13 10:46:23,679:INFO:Starting cross validation
2023-02-13 10:46:23,682:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:23,836:INFO:Calculating mean and std
2023-02-13 10:46:23,836:INFO:Creating metrics dataframe
2023-02-13 10:46:23,836:INFO:Uploading results into container
2023-02-13 10:46:23,836:INFO:Uploading model into container now
2023-02-13 10:46:23,836:INFO:_master_model_container: 19
2023-02-13 10:46:23,836:INFO:_display_container: 2
2023-02-13 10:46:23,836:INFO:DummyRegressor()
2023-02-13 10:46:23,842:INFO:create_model() successfully completed......................................
2023-02-13 10:46:23,941:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:23,941:INFO:Creating metrics dataframe
2023-02-13 10:46:23,960:INFO:Initializing create_model()
2023-02-13 10:46:23,960:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9418A670>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:23,965:INFO:Checking exceptions
2023-02-13 10:46:23,965:INFO:Importing libraries
2023-02-13 10:46:23,965:INFO:Copying training dataset
2023-02-13 10:46:23,965:INFO:Defining folds
2023-02-13 10:46:23,965:INFO:Declaring metric variables
2023-02-13 10:46:23,965:INFO:Importing untrained model
2023-02-13 10:46:23,965:INFO:Declaring custom model
2023-02-13 10:46:23,965:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:46:23,965:INFO:Cross validation set to False
2023-02-13 10:46:23,965:INFO:Fitting Model
2023-02-13 10:46:23,981:INFO:BayesianRidge()
2023-02-13 10:46:23,981:INFO:create_model() successfully completed......................................
2023-02-13 10:46:24,134:INFO:_master_model_container: 19
2023-02-13 10:46:24,134:INFO:_display_container: 2
2023-02-13 10:46:24,134:INFO:BayesianRidge()
2023-02-13 10:46:24,134:INFO:compare_models() successfully completed......................................
2023-02-13 10:46:30,693:INFO:PyCaret RegressionExperiment
2023-02-13 10:46:30,694:INFO:Logging name: reg-default-name
2023-02-13 10:46:30,694:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 10:46:30,694:INFO:version 3.0.0.rc8
2023-02-13 10:46:30,694:INFO:Initializing setup()
2023-02-13 10:46:30,694:INFO:self.USI: 40e6
2023-02-13 10:46:30,694:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 10:46:30,694:INFO:Checking environment
2023-02-13 10:46:30,694:INFO:python_version: 3.9.13
2023-02-13 10:46:30,694:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 10:46:30,694:INFO:machine: AMD64
2023-02-13 10:46:30,694:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 10:46:30,696:INFO:Memory: svmem(total=16805040128, available=6378860544, percent=62.0, used=10426179584, free=6378860544)
2023-02-13 10:46:30,696:INFO:Physical Core: 4
2023-02-13 10:46:30,696:INFO:Logical Core: 8
2023-02-13 10:46:30,696:INFO:Checking libraries
2023-02-13 10:46:30,696:INFO:System:
2023-02-13 10:46:30,696:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 10:46:30,696:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 10:46:30,696:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 10:46:30,696:INFO:PyCaret required dependencies:
2023-02-13 10:46:30,696:INFO:                 pip: 23.0
2023-02-13 10:46:30,696:INFO:          setuptools: 58.1.0
2023-02-13 10:46:30,696:INFO:             pycaret: 3.0.0rc8
2023-02-13 10:46:30,696:INFO:             IPython: 8.7.0
2023-02-13 10:46:30,696:INFO:          ipywidgets: 8.0.4
2023-02-13 10:46:30,696:INFO:                tqdm: 4.64.1
2023-02-13 10:46:30,696:INFO:               numpy: 1.22.1
2023-02-13 10:46:30,696:INFO:              pandas: 1.5.2
2023-02-13 10:46:30,696:INFO:              jinja2: 3.1.2
2023-02-13 10:46:30,696:INFO:               scipy: 1.5.4
2023-02-13 10:46:30,696:INFO:              joblib: 1.2.0
2023-02-13 10:46:30,696:INFO:             sklearn: 1.1.3
2023-02-13 10:46:30,696:INFO:                pyod: 1.0.7
2023-02-13 10:46:30,696:INFO:            imblearn: 0.10.1
2023-02-13 10:46:30,696:INFO:   category_encoders: 2.6.0
2023-02-13 10:46:30,696:INFO:            lightgbm: 3.3.4
2023-02-13 10:46:30,696:INFO:               numba: 0.56.4
2023-02-13 10:46:30,696:INFO:            requests: 2.28.1
2023-02-13 10:46:30,696:INFO:          matplotlib: 3.6.2
2023-02-13 10:46:30,696:INFO:          scikitplot: 0.3.7
2023-02-13 10:46:30,696:INFO:         yellowbrick: 1.5
2023-02-13 10:46:30,696:INFO:              plotly: 5.11.0
2023-02-13 10:46:30,696:INFO:             kaleido: 0.2.1
2023-02-13 10:46:30,696:INFO:         statsmodels: 0.13.5
2023-02-13 10:46:30,700:INFO:              sktime: 0.15.1
2023-02-13 10:46:30,700:INFO:               tbats: 1.1.2
2023-02-13 10:46:30,700:INFO:            pmdarima: 2.0.2
2023-02-13 10:46:30,700:INFO:              psutil: 5.9.4
2023-02-13 10:46:30,700:INFO:PyCaret optional dependencies:
2023-02-13 10:46:30,700:INFO:                shap: 0.41.0
2023-02-13 10:46:30,700:INFO:           interpret: 0.3.0
2023-02-13 10:46:30,700:INFO:                umap: Not installed
2023-02-13 10:46:30,700:INFO:    pandas_profiling: 3.6.2
2023-02-13 10:46:30,700:INFO:  explainerdashboard: Not installed
2023-02-13 10:46:30,700:INFO:             autoviz: Not installed
2023-02-13 10:46:30,700:INFO:           fairlearn: Not installed
2023-02-13 10:46:30,700:INFO:             xgboost: 1.7.3
2023-02-13 10:46:30,700:INFO:            catboost: Not installed
2023-02-13 10:46:30,700:INFO:              kmodes: Not installed
2023-02-13 10:46:30,700:INFO:             mlxtend: Not installed
2023-02-13 10:46:30,700:INFO:       statsforecast: Not installed
2023-02-13 10:46:30,700:INFO:        tune_sklearn: Not installed
2023-02-13 10:46:30,700:INFO:                 ray: Not installed
2023-02-13 10:46:30,700:INFO:            hyperopt: Not installed
2023-02-13 10:46:30,700:INFO:              optuna: Not installed
2023-02-13 10:46:30,700:INFO:               skopt: Not installed
2023-02-13 10:46:30,700:INFO:              mlflow: Not installed
2023-02-13 10:46:30,700:INFO:              gradio: Not installed
2023-02-13 10:46:30,700:INFO:             fastapi: Not installed
2023-02-13 10:46:30,700:INFO:             uvicorn: Not installed
2023-02-13 10:46:30,700:INFO:              m2cgen: Not installed
2023-02-13 10:46:30,700:INFO:           evidently: Not installed
2023-02-13 10:46:30,700:INFO:                nltk: 3.8
2023-02-13 10:46:30,700:INFO:            pyLDAvis: Not installed
2023-02-13 10:46:30,700:INFO:              gensim: Not installed
2023-02-13 10:46:30,700:INFO:               spacy: Not installed
2023-02-13 10:46:30,700:INFO:           wordcloud: 1.8.2.2
2023-02-13 10:46:30,700:INFO:            textblob: Not installed
2023-02-13 10:46:30,700:INFO:               fugue: Not installed
2023-02-13 10:46:30,700:INFO:           streamlit: 1.16.0
2023-02-13 10:46:30,700:INFO:             prophet: Not installed
2023-02-13 10:46:30,700:INFO:None
2023-02-13 10:46:30,700:INFO:Set up data.
2023-02-13 10:46:30,705:INFO:Set up train/test split.
2023-02-13 10:46:30,705:INFO:Set up index.
2023-02-13 10:46:30,705:INFO:Set up folding strategy.
2023-02-13 10:46:30,711:INFO:Assigning column types.
2023-02-13 10:46:30,712:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 10:46:30,713:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,716:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,722:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,772:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,802:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,810:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:30,810:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:30,810:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,810:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,823:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,873:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,909:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,909:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:30,915:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:30,915:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 10:46:30,917:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,925:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:30,974:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,008:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,008:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:31,015:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:31,015:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,024:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,071:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,108:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,109:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:31,109:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:31,109:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 10:46:31,116:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,182:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,221:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,221:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:31,227:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:31,235:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,291:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,323:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,323:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:31,326:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:31,326:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 10:46:31,375:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,415:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,415:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:31,415:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:31,473:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,506:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,506:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:31,506:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:31,514:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 10:46:31,587:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,645:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:31,651:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:31,747:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:46:31,857:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:31,857:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:31,857:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 10:46:31,954:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:31,962:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:32,052:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:32,052:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:32,052:INFO:Preparing preprocessing pipeline...
2023-02-13 10:46:32,052:INFO:Set up column name cleaning.
2023-02-13 10:46:32,052:INFO:Set up simple imputation.
2023-02-13 10:46:32,092:INFO:Finished creating preprocessing pipeline.
2023-02-13 10:46:32,092:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 10:46:32,092:INFO:Creating final display dataframe.
2023-02-13 10:46:32,454:INFO:Setup _display_container:                     Description             Value
0                    Session id                56
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              40e6
2023-02-13 10:46:32,613:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:32,617:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:32,728:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:46:32,728:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:46:32,728:INFO:setup() successfully completed in 2.03s...............
2023-02-13 10:46:32,728:INFO:Initializing compare_models()
2023-02-13 10:46:32,728:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 10:46:32,728:INFO:Checking exceptions
2023-02-13 10:46:32,728:INFO:Preparing display monitor
2023-02-13 10:46:32,761:INFO:Initializing Linear Regression
2023-02-13 10:46:32,761:INFO:Total runtime is 0.0 minutes
2023-02-13 10:46:32,768:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:32,768:INFO:Initializing create_model()
2023-02-13 10:46:32,768:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:32,768:INFO:Checking exceptions
2023-02-13 10:46:32,768:INFO:Importing libraries
2023-02-13 10:46:32,768:INFO:Copying training dataset
2023-02-13 10:46:32,770:INFO:Defining folds
2023-02-13 10:46:32,770:INFO:Declaring metric variables
2023-02-13 10:46:32,774:INFO:Importing untrained model
2023-02-13 10:46:32,778:INFO:Linear Regression Imported successfully
2023-02-13 10:46:32,787:INFO:Starting cross validation
2023-02-13 10:46:32,789:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:33,291:INFO:Calculating mean and std
2023-02-13 10:46:33,291:INFO:Creating metrics dataframe
2023-02-13 10:46:33,294:INFO:Uploading results into container
2023-02-13 10:46:33,294:INFO:Uploading model into container now
2023-02-13 10:46:33,294:INFO:_master_model_container: 1
2023-02-13 10:46:33,294:INFO:_display_container: 2
2023-02-13 10:46:33,294:INFO:LinearRegression(n_jobs=-1)
2023-02-13 10:46:33,294:INFO:create_model() successfully completed......................................
2023-02-13 10:46:33,426:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:33,426:INFO:Creating metrics dataframe
2023-02-13 10:46:33,438:INFO:Initializing Lasso Regression
2023-02-13 10:46:33,438:INFO:Total runtime is 0.011276956399281819 minutes
2023-02-13 10:46:33,442:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:33,442:INFO:Initializing create_model()
2023-02-13 10:46:33,442:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:33,442:INFO:Checking exceptions
2023-02-13 10:46:33,442:INFO:Importing libraries
2023-02-13 10:46:33,442:INFO:Copying training dataset
2023-02-13 10:46:33,445:INFO:Defining folds
2023-02-13 10:46:33,445:INFO:Declaring metric variables
2023-02-13 10:46:33,446:INFO:Importing untrained model
2023-02-13 10:46:33,450:INFO:Lasso Regression Imported successfully
2023-02-13 10:46:33,462:INFO:Starting cross validation
2023-02-13 10:46:33,462:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:33,692:INFO:Calculating mean and std
2023-02-13 10:46:33,692:INFO:Creating metrics dataframe
2023-02-13 10:46:33,692:INFO:Uploading results into container
2023-02-13 10:46:33,692:INFO:Uploading model into container now
2023-02-13 10:46:33,692:INFO:_master_model_container: 2
2023-02-13 10:46:33,692:INFO:_display_container: 2
2023-02-13 10:46:33,692:INFO:Lasso(random_state=56)
2023-02-13 10:46:33,692:INFO:create_model() successfully completed......................................
2023-02-13 10:46:33,799:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:33,799:INFO:Creating metrics dataframe
2023-02-13 10:46:33,807:INFO:Initializing Ridge Regression
2023-02-13 10:46:33,807:INFO:Total runtime is 0.017424917221069335 minutes
2023-02-13 10:46:33,807:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:33,807:INFO:Initializing create_model()
2023-02-13 10:46:33,807:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:33,807:INFO:Checking exceptions
2023-02-13 10:46:33,807:INFO:Importing libraries
2023-02-13 10:46:33,807:INFO:Copying training dataset
2023-02-13 10:46:33,815:INFO:Defining folds
2023-02-13 10:46:33,815:INFO:Declaring metric variables
2023-02-13 10:46:33,815:INFO:Importing untrained model
2023-02-13 10:46:33,825:INFO:Ridge Regression Imported successfully
2023-02-13 10:46:33,831:INFO:Starting cross validation
2023-02-13 10:46:33,831:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:33,995:INFO:Calculating mean and std
2023-02-13 10:46:33,995:INFO:Creating metrics dataframe
2023-02-13 10:46:33,998:INFO:Uploading results into container
2023-02-13 10:46:33,998:INFO:Uploading model into container now
2023-02-13 10:46:33,998:INFO:_master_model_container: 3
2023-02-13 10:46:34,000:INFO:_display_container: 2
2023-02-13 10:46:34,000:INFO:Ridge(random_state=56)
2023-02-13 10:46:34,000:INFO:create_model() successfully completed......................................
2023-02-13 10:46:34,100:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:34,100:INFO:Creating metrics dataframe
2023-02-13 10:46:34,108:INFO:Initializing Elastic Net
2023-02-13 10:46:34,108:INFO:Total runtime is 0.022443683942159016 minutes
2023-02-13 10:46:34,118:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:34,126:INFO:Initializing create_model()
2023-02-13 10:46:34,126:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:34,126:INFO:Checking exceptions
2023-02-13 10:46:34,126:INFO:Importing libraries
2023-02-13 10:46:34,126:INFO:Copying training dataset
2023-02-13 10:46:34,134:INFO:Defining folds
2023-02-13 10:46:34,134:INFO:Declaring metric variables
2023-02-13 10:46:34,135:INFO:Importing untrained model
2023-02-13 10:46:34,143:INFO:Elastic Net Imported successfully
2023-02-13 10:46:34,152:INFO:Starting cross validation
2023-02-13 10:46:34,154:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:34,317:INFO:Calculating mean and std
2023-02-13 10:46:34,322:INFO:Creating metrics dataframe
2023-02-13 10:46:34,323:INFO:Uploading results into container
2023-02-13 10:46:34,323:INFO:Uploading model into container now
2023-02-13 10:46:34,323:INFO:_master_model_container: 4
2023-02-13 10:46:34,323:INFO:_display_container: 2
2023-02-13 10:46:34,323:INFO:ElasticNet(random_state=56)
2023-02-13 10:46:34,323:INFO:create_model() successfully completed......................................
2023-02-13 10:46:34,438:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:34,438:INFO:Creating metrics dataframe
2023-02-13 10:46:34,440:INFO:Initializing Least Angle Regression
2023-02-13 10:46:34,446:INFO:Total runtime is 0.028078802426656085 minutes
2023-02-13 10:46:34,446:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:34,446:INFO:Initializing create_model()
2023-02-13 10:46:34,446:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:34,446:INFO:Checking exceptions
2023-02-13 10:46:34,446:INFO:Importing libraries
2023-02-13 10:46:34,446:INFO:Copying training dataset
2023-02-13 10:46:34,446:INFO:Defining folds
2023-02-13 10:46:34,446:INFO:Declaring metric variables
2023-02-13 10:46:34,454:INFO:Importing untrained model
2023-02-13 10:46:34,462:INFO:Least Angle Regression Imported successfully
2023-02-13 10:46:34,472:INFO:Starting cross validation
2023-02-13 10:46:34,472:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:34,520:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:34,532:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:34,562:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:34,571:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:34,586:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:34,602:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:34,608:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:34,622:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:34,632:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:34,646:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:34,674:INFO:Calculating mean and std
2023-02-13 10:46:34,675:INFO:Creating metrics dataframe
2023-02-13 10:46:34,678:INFO:Uploading results into container
2023-02-13 10:46:34,678:INFO:Uploading model into container now
2023-02-13 10:46:34,678:INFO:_master_model_container: 5
2023-02-13 10:46:34,678:INFO:_display_container: 2
2023-02-13 10:46:34,678:INFO:Lars(random_state=56)
2023-02-13 10:46:34,682:INFO:create_model() successfully completed......................................
2023-02-13 10:46:34,802:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:34,802:INFO:Creating metrics dataframe
2023-02-13 10:46:34,810:INFO:Initializing Lasso Least Angle Regression
2023-02-13 10:46:34,810:INFO:Total runtime is 0.034150715668996176 minutes
2023-02-13 10:46:34,820:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:34,821:INFO:Initializing create_model()
2023-02-13 10:46:34,821:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:34,821:INFO:Checking exceptions
2023-02-13 10:46:34,821:INFO:Importing libraries
2023-02-13 10:46:34,821:INFO:Copying training dataset
2023-02-13 10:46:34,824:INFO:Defining folds
2023-02-13 10:46:34,824:INFO:Declaring metric variables
2023-02-13 10:46:34,829:INFO:Importing untrained model
2023-02-13 10:46:34,836:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 10:46:34,840:INFO:Starting cross validation
2023-02-13 10:46:34,844:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:34,894:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:34,905:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:34,917:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:34,939:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:34,941:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:34,951:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:34,963:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:34,975:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:34,991:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:34,999:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:46:35,017:INFO:Calculating mean and std
2023-02-13 10:46:35,017:INFO:Creating metrics dataframe
2023-02-13 10:46:35,022:INFO:Uploading results into container
2023-02-13 10:46:35,023:INFO:Uploading model into container now
2023-02-13 10:46:35,023:INFO:_master_model_container: 6
2023-02-13 10:46:35,023:INFO:_display_container: 2
2023-02-13 10:46:35,023:INFO:LassoLars(random_state=56)
2023-02-13 10:46:35,025:INFO:create_model() successfully completed......................................
2023-02-13 10:46:35,124:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:35,124:INFO:Creating metrics dataframe
2023-02-13 10:46:35,133:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 10:46:35,133:INFO:Total runtime is 0.03952970504760742 minutes
2023-02-13 10:46:35,143:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:35,143:INFO:Initializing create_model()
2023-02-13 10:46:35,146:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:35,146:INFO:Checking exceptions
2023-02-13 10:46:35,146:INFO:Importing libraries
2023-02-13 10:46:35,146:INFO:Copying training dataset
2023-02-13 10:46:35,148:INFO:Defining folds
2023-02-13 10:46:35,148:INFO:Declaring metric variables
2023-02-13 10:46:35,154:INFO:Importing untrained model
2023-02-13 10:46:35,158:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 10:46:35,164:INFO:Starting cross validation
2023-02-13 10:46:35,166:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:35,246:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:35,259:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:35,271:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:35,281:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:35,289:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:35,298:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:35,313:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:35,323:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:35,334:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:35,346:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:46:35,362:INFO:Calculating mean and std
2023-02-13 10:46:35,366:INFO:Creating metrics dataframe
2023-02-13 10:46:35,367:INFO:Uploading results into container
2023-02-13 10:46:35,370:INFO:Uploading model into container now
2023-02-13 10:46:35,370:INFO:_master_model_container: 7
2023-02-13 10:46:35,370:INFO:_display_container: 2
2023-02-13 10:46:35,371:INFO:OrthogonalMatchingPursuit()
2023-02-13 10:46:35,371:INFO:create_model() successfully completed......................................
2023-02-13 10:46:35,465:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:35,465:INFO:Creating metrics dataframe
2023-02-13 10:46:35,477:INFO:Initializing Bayesian Ridge
2023-02-13 10:46:35,477:INFO:Total runtime is 0.04525256156921387 minutes
2023-02-13 10:46:35,484:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:35,485:INFO:Initializing create_model()
2023-02-13 10:46:35,485:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:35,485:INFO:Checking exceptions
2023-02-13 10:46:35,485:INFO:Importing libraries
2023-02-13 10:46:35,485:INFO:Copying training dataset
2023-02-13 10:46:35,487:INFO:Defining folds
2023-02-13 10:46:35,487:INFO:Declaring metric variables
2023-02-13 10:46:35,487:INFO:Importing untrained model
2023-02-13 10:46:35,494:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:46:35,503:INFO:Starting cross validation
2023-02-13 10:46:35,503:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:35,659:INFO:Calculating mean and std
2023-02-13 10:46:35,659:INFO:Creating metrics dataframe
2023-02-13 10:46:35,664:INFO:Uploading results into container
2023-02-13 10:46:35,664:INFO:Uploading model into container now
2023-02-13 10:46:35,664:INFO:_master_model_container: 8
2023-02-13 10:46:35,664:INFO:_display_container: 2
2023-02-13 10:46:35,664:INFO:BayesianRidge()
2023-02-13 10:46:35,664:INFO:create_model() successfully completed......................................
2023-02-13 10:46:35,772:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:35,772:INFO:Creating metrics dataframe
2023-02-13 10:46:35,781:INFO:Initializing Passive Aggressive Regressor
2023-02-13 10:46:35,781:INFO:Total runtime is 0.05032659769058227 minutes
2023-02-13 10:46:35,788:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:35,788:INFO:Initializing create_model()
2023-02-13 10:46:35,788:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:35,788:INFO:Checking exceptions
2023-02-13 10:46:35,788:INFO:Importing libraries
2023-02-13 10:46:35,788:INFO:Copying training dataset
2023-02-13 10:46:35,792:INFO:Defining folds
2023-02-13 10:46:35,792:INFO:Declaring metric variables
2023-02-13 10:46:35,795:INFO:Importing untrained model
2023-02-13 10:46:35,801:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 10:46:35,809:INFO:Starting cross validation
2023-02-13 10:46:35,811:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:35,976:INFO:Calculating mean and std
2023-02-13 10:46:35,977:INFO:Creating metrics dataframe
2023-02-13 10:46:35,978:INFO:Uploading results into container
2023-02-13 10:46:35,978:INFO:Uploading model into container now
2023-02-13 10:46:35,978:INFO:_master_model_container: 9
2023-02-13 10:46:35,978:INFO:_display_container: 2
2023-02-13 10:46:35,982:INFO:PassiveAggressiveRegressor(random_state=56)
2023-02-13 10:46:35,982:INFO:create_model() successfully completed......................................
2023-02-13 10:46:36,115:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:36,115:INFO:Creating metrics dataframe
2023-02-13 10:46:36,140:INFO:Initializing Huber Regressor
2023-02-13 10:46:36,146:INFO:Total runtime is 0.056408079465230306 minutes
2023-02-13 10:46:36,155:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:36,156:INFO:Initializing create_model()
2023-02-13 10:46:36,156:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:36,156:INFO:Checking exceptions
2023-02-13 10:46:36,157:INFO:Importing libraries
2023-02-13 10:46:36,157:INFO:Copying training dataset
2023-02-13 10:46:36,163:INFO:Defining folds
2023-02-13 10:46:36,163:INFO:Declaring metric variables
2023-02-13 10:46:36,172:INFO:Importing untrained model
2023-02-13 10:46:36,182:INFO:Huber Regressor Imported successfully
2023-02-13 10:46:36,205:INFO:Starting cross validation
2023-02-13 10:46:36,208:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:36,315:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:36,337:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:36,337:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:36,368:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:36,381:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:36,428:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:36,435:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:36,451:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:36,465:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:46:36,478:INFO:Calculating mean and std
2023-02-13 10:46:36,478:INFO:Creating metrics dataframe
2023-02-13 10:46:36,485:INFO:Uploading results into container
2023-02-13 10:46:36,485:INFO:Uploading model into container now
2023-02-13 10:46:36,486:INFO:_master_model_container: 10
2023-02-13 10:46:36,486:INFO:_display_container: 2
2023-02-13 10:46:36,486:INFO:HuberRegressor()
2023-02-13 10:46:36,486:INFO:create_model() successfully completed......................................
2023-02-13 10:46:36,584:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:36,584:INFO:Creating metrics dataframe
2023-02-13 10:46:36,600:INFO:Initializing K Neighbors Regressor
2023-02-13 10:46:36,600:INFO:Total runtime is 0.06397242546081543 minutes
2023-02-13 10:46:36,603:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:36,603:INFO:Initializing create_model()
2023-02-13 10:46:36,603:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:36,603:INFO:Checking exceptions
2023-02-13 10:46:36,603:INFO:Importing libraries
2023-02-13 10:46:36,603:INFO:Copying training dataset
2023-02-13 10:46:36,605:INFO:Defining folds
2023-02-13 10:46:36,605:INFO:Declaring metric variables
2023-02-13 10:46:36,608:INFO:Importing untrained model
2023-02-13 10:46:36,614:INFO:K Neighbors Regressor Imported successfully
2023-02-13 10:46:36,622:INFO:Starting cross validation
2023-02-13 10:46:36,624:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:36,792:INFO:Calculating mean and std
2023-02-13 10:46:36,792:INFO:Creating metrics dataframe
2023-02-13 10:46:36,797:INFO:Uploading results into container
2023-02-13 10:46:36,797:INFO:Uploading model into container now
2023-02-13 10:46:36,797:INFO:_master_model_container: 11
2023-02-13 10:46:36,797:INFO:_display_container: 2
2023-02-13 10:46:36,797:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:46:36,797:INFO:create_model() successfully completed......................................
2023-02-13 10:46:36,894:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:36,894:INFO:Creating metrics dataframe
2023-02-13 10:46:36,906:INFO:Initializing Decision Tree Regressor
2023-02-13 10:46:36,906:INFO:Total runtime is 0.06908079783121744 minutes
2023-02-13 10:46:36,916:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:36,918:INFO:Initializing create_model()
2023-02-13 10:46:36,918:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:36,919:INFO:Checking exceptions
2023-02-13 10:46:36,919:INFO:Importing libraries
2023-02-13 10:46:36,919:INFO:Copying training dataset
2023-02-13 10:46:36,926:INFO:Defining folds
2023-02-13 10:46:36,926:INFO:Declaring metric variables
2023-02-13 10:46:36,938:INFO:Importing untrained model
2023-02-13 10:46:36,948:INFO:Decision Tree Regressor Imported successfully
2023-02-13 10:46:36,965:INFO:Starting cross validation
2023-02-13 10:46:36,968:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:37,188:INFO:Calculating mean and std
2023-02-13 10:46:37,188:INFO:Creating metrics dataframe
2023-02-13 10:46:37,191:INFO:Uploading results into container
2023-02-13 10:46:37,191:INFO:Uploading model into container now
2023-02-13 10:46:37,191:INFO:_master_model_container: 12
2023-02-13 10:46:37,193:INFO:_display_container: 2
2023-02-13 10:46:37,193:INFO:DecisionTreeRegressor(random_state=56)
2023-02-13 10:46:37,193:INFO:create_model() successfully completed......................................
2023-02-13 10:46:37,295:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:37,295:INFO:Creating metrics dataframe
2023-02-13 10:46:37,302:INFO:Initializing Random Forest Regressor
2023-02-13 10:46:37,302:INFO:Total runtime is 0.0756777286529541 minutes
2023-02-13 10:46:37,310:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:37,310:INFO:Initializing create_model()
2023-02-13 10:46:37,310:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:37,310:INFO:Checking exceptions
2023-02-13 10:46:37,310:INFO:Importing libraries
2023-02-13 10:46:37,310:INFO:Copying training dataset
2023-02-13 10:46:37,315:INFO:Defining folds
2023-02-13 10:46:37,315:INFO:Declaring metric variables
2023-02-13 10:46:37,319:INFO:Importing untrained model
2023-02-13 10:46:37,319:INFO:Random Forest Regressor Imported successfully
2023-02-13 10:46:37,330:INFO:Starting cross validation
2023-02-13 10:46:37,330:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:37,866:INFO:Calculating mean and std
2023-02-13 10:46:37,869:INFO:Creating metrics dataframe
2023-02-13 10:46:37,870:INFO:Uploading results into container
2023-02-13 10:46:37,870:INFO:Uploading model into container now
2023-02-13 10:46:37,873:INFO:_master_model_container: 13
2023-02-13 10:46:37,873:INFO:_display_container: 2
2023-02-13 10:46:37,873:INFO:RandomForestRegressor(n_jobs=-1, random_state=56)
2023-02-13 10:46:37,873:INFO:create_model() successfully completed......................................
2023-02-13 10:46:37,981:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:37,981:INFO:Creating metrics dataframe
2023-02-13 10:46:37,989:INFO:Initializing Extra Trees Regressor
2023-02-13 10:46:37,989:INFO:Total runtime is 0.08712767362594603 minutes
2023-02-13 10:46:37,989:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:37,997:INFO:Initializing create_model()
2023-02-13 10:46:37,997:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:37,997:INFO:Checking exceptions
2023-02-13 10:46:37,997:INFO:Importing libraries
2023-02-13 10:46:37,997:INFO:Copying training dataset
2023-02-13 10:46:37,997:INFO:Defining folds
2023-02-13 10:46:37,997:INFO:Declaring metric variables
2023-02-13 10:46:37,997:INFO:Importing untrained model
2023-02-13 10:46:38,008:INFO:Extra Trees Regressor Imported successfully
2023-02-13 10:46:38,016:INFO:Starting cross validation
2023-02-13 10:46:38,017:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:38,408:INFO:Calculating mean and std
2023-02-13 10:46:38,408:INFO:Creating metrics dataframe
2023-02-13 10:46:38,412:INFO:Uploading results into container
2023-02-13 10:46:38,412:INFO:Uploading model into container now
2023-02-13 10:46:38,412:INFO:_master_model_container: 14
2023-02-13 10:46:38,412:INFO:_display_container: 2
2023-02-13 10:46:38,412:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=56)
2023-02-13 10:46:38,412:INFO:create_model() successfully completed......................................
2023-02-13 10:46:38,512:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:38,518:INFO:Creating metrics dataframe
2023-02-13 10:46:38,528:INFO:Initializing AdaBoost Regressor
2023-02-13 10:46:38,528:INFO:Total runtime is 0.09610203504562377 minutes
2023-02-13 10:46:38,533:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:38,533:INFO:Initializing create_model()
2023-02-13 10:46:38,533:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:38,533:INFO:Checking exceptions
2023-02-13 10:46:38,533:INFO:Importing libraries
2023-02-13 10:46:38,533:INFO:Copying training dataset
2023-02-13 10:46:38,536:INFO:Defining folds
2023-02-13 10:46:38,536:INFO:Declaring metric variables
2023-02-13 10:46:38,536:INFO:Importing untrained model
2023-02-13 10:46:38,544:INFO:AdaBoost Regressor Imported successfully
2023-02-13 10:46:38,557:INFO:Starting cross validation
2023-02-13 10:46:38,557:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:38,831:INFO:Calculating mean and std
2023-02-13 10:46:38,831:INFO:Creating metrics dataframe
2023-02-13 10:46:38,836:INFO:Uploading results into container
2023-02-13 10:46:38,836:INFO:Uploading model into container now
2023-02-13 10:46:38,836:INFO:_master_model_container: 15
2023-02-13 10:46:38,839:INFO:_display_container: 2
2023-02-13 10:46:38,839:INFO:AdaBoostRegressor(random_state=56)
2023-02-13 10:46:38,839:INFO:create_model() successfully completed......................................
2023-02-13 10:46:38,936:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:38,936:INFO:Creating metrics dataframe
2023-02-13 10:46:38,952:INFO:Initializing Gradient Boosting Regressor
2023-02-13 10:46:38,952:INFO:Total runtime is 0.1031809647878011 minutes
2023-02-13 10:46:38,954:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:38,954:INFO:Initializing create_model()
2023-02-13 10:46:38,954:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:38,954:INFO:Checking exceptions
2023-02-13 10:46:38,954:INFO:Importing libraries
2023-02-13 10:46:38,954:INFO:Copying training dataset
2023-02-13 10:46:38,959:INFO:Defining folds
2023-02-13 10:46:38,959:INFO:Declaring metric variables
2023-02-13 10:46:38,962:INFO:Importing untrained model
2023-02-13 10:46:38,966:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 10:46:38,974:INFO:Starting cross validation
2023-02-13 10:46:38,975:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:39,202:INFO:Calculating mean and std
2023-02-13 10:46:39,202:INFO:Creating metrics dataframe
2023-02-13 10:46:39,207:INFO:Uploading results into container
2023-02-13 10:46:39,207:INFO:Uploading model into container now
2023-02-13 10:46:39,208:INFO:_master_model_container: 16
2023-02-13 10:46:39,208:INFO:_display_container: 2
2023-02-13 10:46:39,208:INFO:GradientBoostingRegressor(random_state=56)
2023-02-13 10:46:39,208:INFO:create_model() successfully completed......................................
2023-02-13 10:46:39,304:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:39,312:INFO:Creating metrics dataframe
2023-02-13 10:46:39,324:INFO:Initializing Extreme Gradient Boosting
2023-02-13 10:46:39,324:INFO:Total runtime is 0.1093742291132609 minutes
2023-02-13 10:46:39,325:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:39,325:INFO:Initializing create_model()
2023-02-13 10:46:39,325:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:39,328:INFO:Checking exceptions
2023-02-13 10:46:39,328:INFO:Importing libraries
2023-02-13 10:46:39,328:INFO:Copying training dataset
2023-02-13 10:46:39,331:INFO:Defining folds
2023-02-13 10:46:39,331:INFO:Declaring metric variables
2023-02-13 10:46:39,333:INFO:Importing untrained model
2023-02-13 10:46:39,340:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 10:46:39,348:INFO:Starting cross validation
2023-02-13 10:46:39,349:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:39,564:INFO:Calculating mean and std
2023-02-13 10:46:39,566:INFO:Creating metrics dataframe
2023-02-13 10:46:39,568:INFO:Uploading results into container
2023-02-13 10:46:39,568:INFO:Uploading model into container now
2023-02-13 10:46:39,568:INFO:_master_model_container: 17
2023-02-13 10:46:39,568:INFO:_display_container: 2
2023-02-13 10:46:39,568:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=56, ...)
2023-02-13 10:46:39,568:INFO:create_model() successfully completed......................................
2023-02-13 10:46:39,786:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:39,786:INFO:Creating metrics dataframe
2023-02-13 10:46:39,821:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 10:46:39,821:INFO:Total runtime is 0.11766474644343058 minutes
2023-02-13 10:46:39,829:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:39,829:INFO:Initializing create_model()
2023-02-13 10:46:39,829:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:39,829:INFO:Checking exceptions
2023-02-13 10:46:39,829:INFO:Importing libraries
2023-02-13 10:46:39,829:INFO:Copying training dataset
2023-02-13 10:46:39,832:INFO:Defining folds
2023-02-13 10:46:39,832:INFO:Declaring metric variables
2023-02-13 10:46:39,844:INFO:Importing untrained model
2023-02-13 10:46:39,856:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 10:46:39,875:INFO:Starting cross validation
2023-02-13 10:46:39,877:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:40,213:INFO:Calculating mean and std
2023-02-13 10:46:40,219:INFO:Creating metrics dataframe
2023-02-13 10:46:40,227:INFO:Uploading results into container
2023-02-13 10:46:40,227:INFO:Uploading model into container now
2023-02-13 10:46:40,227:INFO:_master_model_container: 18
2023-02-13 10:46:40,227:INFO:_display_container: 2
2023-02-13 10:46:40,232:INFO:LGBMRegressor(random_state=56)
2023-02-13 10:46:40,232:INFO:create_model() successfully completed......................................
2023-02-13 10:46:40,399:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:40,399:INFO:Creating metrics dataframe
2023-02-13 10:46:40,430:INFO:Initializing Dummy Regressor
2023-02-13 10:46:40,430:INFO:Total runtime is 0.12781339089075724 minutes
2023-02-13 10:46:40,436:INFO:SubProcess create_model() called ==================================
2023-02-13 10:46:40,436:INFO:Initializing create_model()
2023-02-13 10:46:40,436:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A94113CD0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:40,436:INFO:Checking exceptions
2023-02-13 10:46:40,436:INFO:Importing libraries
2023-02-13 10:46:40,436:INFO:Copying training dataset
2023-02-13 10:46:40,447:INFO:Defining folds
2023-02-13 10:46:40,447:INFO:Declaring metric variables
2023-02-13 10:46:40,458:INFO:Importing untrained model
2023-02-13 10:46:40,463:INFO:Dummy Regressor Imported successfully
2023-02-13 10:46:40,489:INFO:Starting cross validation
2023-02-13 10:46:40,491:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:46:40,781:INFO:Calculating mean and std
2023-02-13 10:46:40,781:INFO:Creating metrics dataframe
2023-02-13 10:46:40,796:INFO:Uploading results into container
2023-02-13 10:46:40,796:INFO:Uploading model into container now
2023-02-13 10:46:40,796:INFO:_master_model_container: 19
2023-02-13 10:46:40,796:INFO:_display_container: 2
2023-02-13 10:46:40,796:INFO:DummyRegressor()
2023-02-13 10:46:40,796:INFO:create_model() successfully completed......................................
2023-02-13 10:46:40,978:INFO:SubProcess create_model() end ==================================
2023-02-13 10:46:40,978:INFO:Creating metrics dataframe
2023-02-13 10:46:41,028:INFO:Initializing create_model()
2023-02-13 10:46:41,028:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A9382B190>, estimator=KNeighborsRegressor(n_jobs=-1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:46:41,028:INFO:Checking exceptions
2023-02-13 10:46:41,031:INFO:Importing libraries
2023-02-13 10:46:41,031:INFO:Copying training dataset
2023-02-13 10:46:41,034:INFO:Defining folds
2023-02-13 10:46:41,034:INFO:Declaring metric variables
2023-02-13 10:46:41,034:INFO:Importing untrained model
2023-02-13 10:46:41,034:INFO:Declaring custom model
2023-02-13 10:46:41,034:INFO:K Neighbors Regressor Imported successfully
2023-02-13 10:46:41,034:INFO:Cross validation set to False
2023-02-13 10:46:41,034:INFO:Fitting Model
2023-02-13 10:46:41,105:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:46:41,105:INFO:create_model() successfully completed......................................
2023-02-13 10:46:41,370:INFO:_master_model_container: 19
2023-02-13 10:46:41,371:INFO:_display_container: 2
2023-02-13 10:46:41,371:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:46:41,371:INFO:compare_models() successfully completed......................................
2023-02-13 10:47:23,090:INFO:PyCaret RegressionExperiment
2023-02-13 10:47:23,090:INFO:Logging name: reg-default-name
2023-02-13 10:47:23,090:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 10:47:23,090:INFO:version 3.0.0.rc8
2023-02-13 10:47:23,090:INFO:Initializing setup()
2023-02-13 10:47:23,090:INFO:self.USI: 4728
2023-02-13 10:47:23,090:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 10:47:23,090:INFO:Checking environment
2023-02-13 10:47:23,090:INFO:python_version: 3.9.13
2023-02-13 10:47:23,090:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 10:47:23,090:INFO:machine: AMD64
2023-02-13 10:47:23,090:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 10:47:23,090:INFO:Memory: svmem(total=16805040128, available=6406205440, percent=61.9, used=10398834688, free=6406205440)
2023-02-13 10:47:23,090:INFO:Physical Core: 4
2023-02-13 10:47:23,090:INFO:Logical Core: 8
2023-02-13 10:47:23,090:INFO:Checking libraries
2023-02-13 10:47:23,090:INFO:System:
2023-02-13 10:47:23,090:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 10:47:23,098:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 10:47:23,098:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 10:47:23,098:INFO:PyCaret required dependencies:
2023-02-13 10:47:23,098:INFO:                 pip: 23.0
2023-02-13 10:47:23,098:INFO:          setuptools: 58.1.0
2023-02-13 10:47:23,098:INFO:             pycaret: 3.0.0rc8
2023-02-13 10:47:23,098:INFO:             IPython: 8.7.0
2023-02-13 10:47:23,098:INFO:          ipywidgets: 8.0.4
2023-02-13 10:47:23,098:INFO:                tqdm: 4.64.1
2023-02-13 10:47:23,098:INFO:               numpy: 1.22.1
2023-02-13 10:47:23,098:INFO:              pandas: 1.5.2
2023-02-13 10:47:23,098:INFO:              jinja2: 3.1.2
2023-02-13 10:47:23,098:INFO:               scipy: 1.5.4
2023-02-13 10:47:23,098:INFO:              joblib: 1.2.0
2023-02-13 10:47:23,098:INFO:             sklearn: 1.1.3
2023-02-13 10:47:23,098:INFO:                pyod: 1.0.7
2023-02-13 10:47:23,098:INFO:            imblearn: 0.10.1
2023-02-13 10:47:23,098:INFO:   category_encoders: 2.6.0
2023-02-13 10:47:23,098:INFO:            lightgbm: 3.3.4
2023-02-13 10:47:23,098:INFO:               numba: 0.56.4
2023-02-13 10:47:23,098:INFO:            requests: 2.28.1
2023-02-13 10:47:23,098:INFO:          matplotlib: 3.6.2
2023-02-13 10:47:23,098:INFO:          scikitplot: 0.3.7
2023-02-13 10:47:23,098:INFO:         yellowbrick: 1.5
2023-02-13 10:47:23,098:INFO:              plotly: 5.11.0
2023-02-13 10:47:23,098:INFO:             kaleido: 0.2.1
2023-02-13 10:47:23,098:INFO:         statsmodels: 0.13.5
2023-02-13 10:47:23,098:INFO:              sktime: 0.15.1
2023-02-13 10:47:23,098:INFO:               tbats: 1.1.2
2023-02-13 10:47:23,098:INFO:            pmdarima: 2.0.2
2023-02-13 10:47:23,098:INFO:              psutil: 5.9.4
2023-02-13 10:47:23,098:INFO:PyCaret optional dependencies:
2023-02-13 10:47:23,098:INFO:                shap: 0.41.0
2023-02-13 10:47:23,098:INFO:           interpret: 0.3.0
2023-02-13 10:47:23,098:INFO:                umap: Not installed
2023-02-13 10:47:23,098:INFO:    pandas_profiling: 3.6.2
2023-02-13 10:47:23,098:INFO:  explainerdashboard: Not installed
2023-02-13 10:47:23,098:INFO:             autoviz: Not installed
2023-02-13 10:47:23,098:INFO:           fairlearn: Not installed
2023-02-13 10:47:23,098:INFO:             xgboost: 1.7.3
2023-02-13 10:47:23,098:INFO:            catboost: Not installed
2023-02-13 10:47:23,098:INFO:              kmodes: Not installed
2023-02-13 10:47:23,098:INFO:             mlxtend: Not installed
2023-02-13 10:47:23,098:INFO:       statsforecast: Not installed
2023-02-13 10:47:23,098:INFO:        tune_sklearn: Not installed
2023-02-13 10:47:23,098:INFO:                 ray: Not installed
2023-02-13 10:47:23,098:INFO:            hyperopt: Not installed
2023-02-13 10:47:23,098:INFO:              optuna: Not installed
2023-02-13 10:47:23,098:INFO:               skopt: Not installed
2023-02-13 10:47:23,098:INFO:              mlflow: Not installed
2023-02-13 10:47:23,098:INFO:              gradio: Not installed
2023-02-13 10:47:23,098:INFO:             fastapi: Not installed
2023-02-13 10:47:23,098:INFO:             uvicorn: Not installed
2023-02-13 10:47:23,098:INFO:              m2cgen: Not installed
2023-02-13 10:47:23,098:INFO:           evidently: Not installed
2023-02-13 10:47:23,098:INFO:                nltk: 3.8
2023-02-13 10:47:23,098:INFO:            pyLDAvis: Not installed
2023-02-13 10:47:23,098:INFO:              gensim: Not installed
2023-02-13 10:47:23,098:INFO:               spacy: Not installed
2023-02-13 10:47:23,098:INFO:           wordcloud: 1.8.2.2
2023-02-13 10:47:23,098:INFO:            textblob: Not installed
2023-02-13 10:47:23,098:INFO:               fugue: Not installed
2023-02-13 10:47:23,098:INFO:           streamlit: 1.16.0
2023-02-13 10:47:23,098:INFO:             prophet: Not installed
2023-02-13 10:47:23,098:INFO:None
2023-02-13 10:47:23,098:INFO:Set up data.
2023-02-13 10:47:23,100:INFO:Set up train/test split.
2023-02-13 10:47:23,107:INFO:Set up index.
2023-02-13 10:47:23,108:INFO:Set up folding strategy.
2023-02-13 10:47:23,108:INFO:Assigning column types.
2023-02-13 10:47:23,108:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 10:47:23,108:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,114:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,114:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,180:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,214:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,221:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:23,224:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:23,224:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,227:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,229:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,281:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,311:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,311:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:23,311:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:23,311:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 10:47:23,322:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,324:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,373:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,407:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,410:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:23,413:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:23,413:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,423:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,474:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,511:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,511:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:23,515:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:23,515:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 10:47:23,522:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,568:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,605:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,605:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:23,605:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:23,616:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,663:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,698:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,698:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:23,704:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:23,706:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 10:47:23,764:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,805:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,805:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:23,808:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:23,868:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,929:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:23,937:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:23,939:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:23,939:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 10:47:24,037:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:24,154:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:24,158:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:24,242:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:24,282:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:24,289:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:24,289:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 10:47:24,388:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:24,390:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:24,500:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:24,503:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:24,504:INFO:Preparing preprocessing pipeline...
2023-02-13 10:47:24,504:INFO:Set up column name cleaning.
2023-02-13 10:47:24,504:INFO:Set up simple imputation.
2023-02-13 10:47:24,554:INFO:Finished creating preprocessing pipeline.
2023-02-13 10:47:24,558:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 10:47:24,558:INFO:Creating final display dataframe.
2023-02-13 10:47:24,796:INFO:Setup _display_container:                     Description             Value
0                    Session id               200
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              4728
2023-02-13 10:47:24,928:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:24,931:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:25,033:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:25,036:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:25,036:INFO:setup() successfully completed in 1.95s...............
2023-02-13 10:47:25,036:INFO:Initializing compare_models()
2023-02-13 10:47:25,036:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 10:47:25,040:INFO:Checking exceptions
2023-02-13 10:47:25,040:INFO:Preparing display monitor
2023-02-13 10:47:25,065:INFO:Initializing Linear Regression
2023-02-13 10:47:25,065:INFO:Total runtime is 0.0 minutes
2023-02-13 10:47:25,070:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:25,070:INFO:Initializing create_model()
2023-02-13 10:47:25,070:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:25,070:INFO:Checking exceptions
2023-02-13 10:47:25,070:INFO:Importing libraries
2023-02-13 10:47:25,070:INFO:Copying training dataset
2023-02-13 10:47:25,074:INFO:Defining folds
2023-02-13 10:47:25,074:INFO:Declaring metric variables
2023-02-13 10:47:25,074:INFO:Importing untrained model
2023-02-13 10:47:25,084:INFO:Linear Regression Imported successfully
2023-02-13 10:47:25,095:INFO:Starting cross validation
2023-02-13 10:47:25,096:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:25,557:INFO:Calculating mean and std
2023-02-13 10:47:25,557:INFO:Creating metrics dataframe
2023-02-13 10:47:25,557:INFO:Uploading results into container
2023-02-13 10:47:25,557:INFO:Uploading model into container now
2023-02-13 10:47:25,557:INFO:_master_model_container: 1
2023-02-13 10:47:25,557:INFO:_display_container: 2
2023-02-13 10:47:25,557:INFO:LinearRegression(n_jobs=-1)
2023-02-13 10:47:25,557:INFO:create_model() successfully completed......................................
2023-02-13 10:47:25,664:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:25,664:INFO:Creating metrics dataframe
2023-02-13 10:47:25,669:INFO:Initializing Lasso Regression
2023-02-13 10:47:25,669:INFO:Total runtime is 0.010065992673238119 minutes
2023-02-13 10:47:25,669:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:25,669:INFO:Initializing create_model()
2023-02-13 10:47:25,669:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:25,669:INFO:Checking exceptions
2023-02-13 10:47:25,669:INFO:Importing libraries
2023-02-13 10:47:25,669:INFO:Copying training dataset
2023-02-13 10:47:25,677:INFO:Defining folds
2023-02-13 10:47:25,677:INFO:Declaring metric variables
2023-02-13 10:47:25,677:INFO:Importing untrained model
2023-02-13 10:47:25,677:INFO:Lasso Regression Imported successfully
2023-02-13 10:47:25,685:INFO:Starting cross validation
2023-02-13 10:47:25,685:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:25,841:INFO:Calculating mean and std
2023-02-13 10:47:25,841:INFO:Creating metrics dataframe
2023-02-13 10:47:25,848:INFO:Uploading results into container
2023-02-13 10:47:25,848:INFO:Uploading model into container now
2023-02-13 10:47:25,848:INFO:_master_model_container: 2
2023-02-13 10:47:25,848:INFO:_display_container: 2
2023-02-13 10:47:25,848:INFO:Lasso(random_state=200)
2023-02-13 10:47:25,848:INFO:create_model() successfully completed......................................
2023-02-13 10:47:25,953:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:25,953:INFO:Creating metrics dataframe
2023-02-13 10:47:25,993:INFO:Initializing Ridge Regression
2023-02-13 10:47:25,993:INFO:Total runtime is 0.015466543038686116 minutes
2023-02-13 10:47:25,995:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:25,995:INFO:Initializing create_model()
2023-02-13 10:47:25,995:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:25,995:INFO:Checking exceptions
2023-02-13 10:47:25,998:INFO:Importing libraries
2023-02-13 10:47:25,998:INFO:Copying training dataset
2023-02-13 10:47:25,998:INFO:Defining folds
2023-02-13 10:47:25,998:INFO:Declaring metric variables
2023-02-13 10:47:26,005:INFO:Importing untrained model
2023-02-13 10:47:26,011:INFO:Ridge Regression Imported successfully
2023-02-13 10:47:26,019:INFO:Starting cross validation
2023-02-13 10:47:26,020:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:26,191:INFO:Calculating mean and std
2023-02-13 10:47:26,191:INFO:Creating metrics dataframe
2023-02-13 10:47:26,196:INFO:Uploading results into container
2023-02-13 10:47:26,196:INFO:Uploading model into container now
2023-02-13 10:47:26,196:INFO:_master_model_container: 3
2023-02-13 10:47:26,196:INFO:_display_container: 2
2023-02-13 10:47:26,196:INFO:Ridge(random_state=200)
2023-02-13 10:47:26,196:INFO:create_model() successfully completed......................................
2023-02-13 10:47:26,316:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:26,316:INFO:Creating metrics dataframe
2023-02-13 10:47:26,340:INFO:Initializing Elastic Net
2023-02-13 10:47:26,341:INFO:Total runtime is 0.02125523885091146 minutes
2023-02-13 10:47:26,348:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:26,348:INFO:Initializing create_model()
2023-02-13 10:47:26,348:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:26,348:INFO:Checking exceptions
2023-02-13 10:47:26,350:INFO:Importing libraries
2023-02-13 10:47:26,350:INFO:Copying training dataset
2023-02-13 10:47:26,357:INFO:Defining folds
2023-02-13 10:47:26,357:INFO:Declaring metric variables
2023-02-13 10:47:26,370:INFO:Importing untrained model
2023-02-13 10:47:26,378:INFO:Elastic Net Imported successfully
2023-02-13 10:47:26,396:INFO:Starting cross validation
2023-02-13 10:47:26,400:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:26,601:INFO:Calculating mean and std
2023-02-13 10:47:26,601:INFO:Creating metrics dataframe
2023-02-13 10:47:26,608:INFO:Uploading results into container
2023-02-13 10:47:26,610:INFO:Uploading model into container now
2023-02-13 10:47:26,610:INFO:_master_model_container: 4
2023-02-13 10:47:26,610:INFO:_display_container: 2
2023-02-13 10:47:26,610:INFO:ElasticNet(random_state=200)
2023-02-13 10:47:26,610:INFO:create_model() successfully completed......................................
2023-02-13 10:47:26,706:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:26,706:INFO:Creating metrics dataframe
2023-02-13 10:47:26,714:INFO:Initializing Least Angle Regression
2023-02-13 10:47:26,714:INFO:Total runtime is 0.02747652530670166 minutes
2023-02-13 10:47:26,722:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:26,722:INFO:Initializing create_model()
2023-02-13 10:47:26,722:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:26,722:INFO:Checking exceptions
2023-02-13 10:47:26,722:INFO:Importing libraries
2023-02-13 10:47:26,722:INFO:Copying training dataset
2023-02-13 10:47:26,722:INFO:Defining folds
2023-02-13 10:47:26,722:INFO:Declaring metric variables
2023-02-13 10:47:26,722:INFO:Importing untrained model
2023-02-13 10:47:26,730:INFO:Least Angle Regression Imported successfully
2023-02-13 10:47:26,738:INFO:Starting cross validation
2023-02-13 10:47:26,738:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:26,787:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:26,793:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:26,804:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:26,820:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:26,830:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:26,838:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:26,855:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:26,868:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:26,876:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:26,887:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:26,906:INFO:Calculating mean and std
2023-02-13 10:47:26,906:INFO:Creating metrics dataframe
2023-02-13 10:47:26,909:INFO:Uploading results into container
2023-02-13 10:47:26,910:INFO:Uploading model into container now
2023-02-13 10:47:26,910:INFO:_master_model_container: 5
2023-02-13 10:47:26,910:INFO:_display_container: 2
2023-02-13 10:47:26,911:INFO:Lars(random_state=200)
2023-02-13 10:47:26,911:INFO:create_model() successfully completed......................................
2023-02-13 10:47:27,007:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:27,007:INFO:Creating metrics dataframe
2023-02-13 10:47:27,019:INFO:Initializing Lasso Least Angle Regression
2023-02-13 10:47:27,019:INFO:Total runtime is 0.03255725304285685 minutes
2023-02-13 10:47:27,019:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:27,019:INFO:Initializing create_model()
2023-02-13 10:47:27,019:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:27,019:INFO:Checking exceptions
2023-02-13 10:47:27,019:INFO:Importing libraries
2023-02-13 10:47:27,019:INFO:Copying training dataset
2023-02-13 10:47:27,024:INFO:Defining folds
2023-02-13 10:47:27,024:INFO:Declaring metric variables
2023-02-13 10:47:27,029:INFO:Importing untrained model
2023-02-13 10:47:27,032:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 10:47:27,041:INFO:Starting cross validation
2023-02-13 10:47:27,041:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:27,083:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:27,097:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:27,109:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:27,122:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:27,130:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:27,139:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:27,151:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:27,160:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:27,175:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:27,188:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:27,204:INFO:Calculating mean and std
2023-02-13 10:47:27,204:INFO:Creating metrics dataframe
2023-02-13 10:47:27,205:INFO:Uploading results into container
2023-02-13 10:47:27,205:INFO:Uploading model into container now
2023-02-13 10:47:27,205:INFO:_master_model_container: 6
2023-02-13 10:47:27,205:INFO:_display_container: 2
2023-02-13 10:47:27,205:INFO:LassoLars(random_state=200)
2023-02-13 10:47:27,205:INFO:create_model() successfully completed......................................
2023-02-13 10:47:27,305:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:27,305:INFO:Creating metrics dataframe
2023-02-13 10:47:27,319:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 10:47:27,320:INFO:Total runtime is 0.0375722606976827 minutes
2023-02-13 10:47:27,323:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:27,324:INFO:Initializing create_model()
2023-02-13 10:47:27,324:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:27,324:INFO:Checking exceptions
2023-02-13 10:47:27,324:INFO:Importing libraries
2023-02-13 10:47:27,324:INFO:Copying training dataset
2023-02-13 10:47:27,325:INFO:Defining folds
2023-02-13 10:47:27,325:INFO:Declaring metric variables
2023-02-13 10:47:27,329:INFO:Importing untrained model
2023-02-13 10:47:27,333:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 10:47:27,336:INFO:Starting cross validation
2023-02-13 10:47:27,336:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:27,485:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:27,494:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:27,511:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:27,524:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:27,540:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:27,549:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:27,558:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:27,569:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:27,580:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:27,591:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:27,608:INFO:Calculating mean and std
2023-02-13 10:47:27,608:INFO:Creating metrics dataframe
2023-02-13 10:47:27,608:INFO:Uploading results into container
2023-02-13 10:47:27,608:INFO:Uploading model into container now
2023-02-13 10:47:27,608:INFO:_master_model_container: 7
2023-02-13 10:47:27,608:INFO:_display_container: 2
2023-02-13 10:47:27,608:INFO:OrthogonalMatchingPursuit()
2023-02-13 10:47:27,608:INFO:create_model() successfully completed......................................
2023-02-13 10:47:27,719:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:27,719:INFO:Creating metrics dataframe
2023-02-13 10:47:27,723:INFO:Initializing Bayesian Ridge
2023-02-13 10:47:27,723:INFO:Total runtime is 0.0442959984143575 minutes
2023-02-13 10:47:27,731:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:27,731:INFO:Initializing create_model()
2023-02-13 10:47:27,731:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:27,731:INFO:Checking exceptions
2023-02-13 10:47:27,731:INFO:Importing libraries
2023-02-13 10:47:27,731:INFO:Copying training dataset
2023-02-13 10:47:27,736:INFO:Defining folds
2023-02-13 10:47:27,736:INFO:Declaring metric variables
2023-02-13 10:47:27,739:INFO:Importing untrained model
2023-02-13 10:47:27,739:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:47:27,748:INFO:Starting cross validation
2023-02-13 10:47:27,748:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:27,917:INFO:Calculating mean and std
2023-02-13 10:47:27,917:INFO:Creating metrics dataframe
2023-02-13 10:47:27,917:INFO:Uploading results into container
2023-02-13 10:47:27,917:INFO:Uploading model into container now
2023-02-13 10:47:27,917:INFO:_master_model_container: 8
2023-02-13 10:47:27,917:INFO:_display_container: 2
2023-02-13 10:47:27,917:INFO:BayesianRidge()
2023-02-13 10:47:27,917:INFO:create_model() successfully completed......................................
2023-02-13 10:47:28,067:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:28,067:INFO:Creating metrics dataframe
2023-02-13 10:47:28,088:INFO:Initializing Passive Aggressive Regressor
2023-02-13 10:47:28,088:INFO:Total runtime is 0.05037736495335897 minutes
2023-02-13 10:47:28,096:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:28,104:INFO:Initializing create_model()
2023-02-13 10:47:28,104:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:28,104:INFO:Checking exceptions
2023-02-13 10:47:28,104:INFO:Importing libraries
2023-02-13 10:47:28,104:INFO:Copying training dataset
2023-02-13 10:47:28,104:INFO:Defining folds
2023-02-13 10:47:28,104:INFO:Declaring metric variables
2023-02-13 10:47:28,121:INFO:Importing untrained model
2023-02-13 10:47:28,129:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 10:47:28,145:INFO:Starting cross validation
2023-02-13 10:47:28,145:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:28,324:INFO:Calculating mean and std
2023-02-13 10:47:28,324:INFO:Creating metrics dataframe
2023-02-13 10:47:28,332:INFO:Uploading results into container
2023-02-13 10:47:28,332:INFO:Uploading model into container now
2023-02-13 10:47:28,334:INFO:_master_model_container: 9
2023-02-13 10:47:28,334:INFO:_display_container: 2
2023-02-13 10:47:28,334:INFO:PassiveAggressiveRegressor(random_state=200)
2023-02-13 10:47:28,334:INFO:create_model() successfully completed......................................
2023-02-13 10:47:28,450:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:28,450:INFO:Creating metrics dataframe
2023-02-13 10:47:28,465:INFO:Initializing Huber Regressor
2023-02-13 10:47:28,465:INFO:Total runtime is 0.05666438738505046 minutes
2023-02-13 10:47:28,467:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:28,467:INFO:Initializing create_model()
2023-02-13 10:47:28,467:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:28,467:INFO:Checking exceptions
2023-02-13 10:47:28,467:INFO:Importing libraries
2023-02-13 10:47:28,467:INFO:Copying training dataset
2023-02-13 10:47:28,472:INFO:Defining folds
2023-02-13 10:47:28,472:INFO:Declaring metric variables
2023-02-13 10:47:28,472:INFO:Importing untrained model
2023-02-13 10:47:28,483:INFO:Huber Regressor Imported successfully
2023-02-13 10:47:28,488:INFO:Starting cross validation
2023-02-13 10:47:28,488:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:28,571:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:28,579:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:28,604:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:28,611:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:28,627:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:28,639:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:28,652:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:28,660:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:28,671:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:28,684:INFO:Calculating mean and std
2023-02-13 10:47:28,684:INFO:Creating metrics dataframe
2023-02-13 10:47:28,693:INFO:Uploading results into container
2023-02-13 10:47:28,693:INFO:Uploading model into container now
2023-02-13 10:47:28,693:INFO:_master_model_container: 10
2023-02-13 10:47:28,693:INFO:_display_container: 2
2023-02-13 10:47:28,693:INFO:HuberRegressor()
2023-02-13 10:47:28,693:INFO:create_model() successfully completed......................................
2023-02-13 10:47:28,790:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:28,790:INFO:Creating metrics dataframe
2023-02-13 10:47:28,800:INFO:Initializing K Neighbors Regressor
2023-02-13 10:47:28,800:INFO:Total runtime is 0.06225170691808065 minutes
2023-02-13 10:47:28,807:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:28,807:INFO:Initializing create_model()
2023-02-13 10:47:28,807:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:28,807:INFO:Checking exceptions
2023-02-13 10:47:28,807:INFO:Importing libraries
2023-02-13 10:47:28,807:INFO:Copying training dataset
2023-02-13 10:47:28,807:INFO:Defining folds
2023-02-13 10:47:28,807:INFO:Declaring metric variables
2023-02-13 10:47:28,807:INFO:Importing untrained model
2023-02-13 10:47:28,815:INFO:K Neighbors Regressor Imported successfully
2023-02-13 10:47:28,823:INFO:Starting cross validation
2023-02-13 10:47:28,823:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:28,985:INFO:Calculating mean and std
2023-02-13 10:47:28,994:INFO:Creating metrics dataframe
2023-02-13 10:47:28,994:INFO:Uploading results into container
2023-02-13 10:47:28,994:INFO:Uploading model into container now
2023-02-13 10:47:28,994:INFO:_master_model_container: 11
2023-02-13 10:47:28,994:INFO:_display_container: 2
2023-02-13 10:47:28,994:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:47:28,994:INFO:create_model() successfully completed......................................
2023-02-13 10:47:29,083:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:29,083:INFO:Creating metrics dataframe
2023-02-13 10:47:29,099:INFO:Initializing Decision Tree Regressor
2023-02-13 10:47:29,099:INFO:Total runtime is 0.06722217003504435 minutes
2023-02-13 10:47:29,099:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:29,099:INFO:Initializing create_model()
2023-02-13 10:47:29,099:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:29,099:INFO:Checking exceptions
2023-02-13 10:47:29,099:INFO:Importing libraries
2023-02-13 10:47:29,099:INFO:Copying training dataset
2023-02-13 10:47:29,107:INFO:Defining folds
2023-02-13 10:47:29,107:INFO:Declaring metric variables
2023-02-13 10:47:29,107:INFO:Importing untrained model
2023-02-13 10:47:29,107:INFO:Decision Tree Regressor Imported successfully
2023-02-13 10:47:29,115:INFO:Starting cross validation
2023-02-13 10:47:29,115:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:29,309:INFO:Calculating mean and std
2023-02-13 10:47:29,309:INFO:Creating metrics dataframe
2023-02-13 10:47:29,309:INFO:Uploading results into container
2023-02-13 10:47:29,309:INFO:Uploading model into container now
2023-02-13 10:47:29,309:INFO:_master_model_container: 12
2023-02-13 10:47:29,309:INFO:_display_container: 2
2023-02-13 10:47:29,309:INFO:DecisionTreeRegressor(random_state=200)
2023-02-13 10:47:29,309:INFO:create_model() successfully completed......................................
2023-02-13 10:47:29,407:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:29,407:INFO:Creating metrics dataframe
2023-02-13 10:47:29,422:INFO:Initializing Random Forest Regressor
2023-02-13 10:47:29,422:INFO:Total runtime is 0.07261842886606852 minutes
2023-02-13 10:47:29,422:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:29,422:INFO:Initializing create_model()
2023-02-13 10:47:29,422:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:29,422:INFO:Checking exceptions
2023-02-13 10:47:29,422:INFO:Importing libraries
2023-02-13 10:47:29,422:INFO:Copying training dataset
2023-02-13 10:47:29,422:INFO:Defining folds
2023-02-13 10:47:29,422:INFO:Declaring metric variables
2023-02-13 10:47:29,431:INFO:Importing untrained model
2023-02-13 10:47:29,431:INFO:Random Forest Regressor Imported successfully
2023-02-13 10:47:29,439:INFO:Starting cross validation
2023-02-13 10:47:29,439:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:29,938:INFO:Calculating mean and std
2023-02-13 10:47:29,938:INFO:Creating metrics dataframe
2023-02-13 10:47:29,938:INFO:Uploading results into container
2023-02-13 10:47:29,938:INFO:Uploading model into container now
2023-02-13 10:47:29,938:INFO:_master_model_container: 13
2023-02-13 10:47:29,938:INFO:_display_container: 2
2023-02-13 10:47:29,945:INFO:RandomForestRegressor(n_jobs=-1, random_state=200)
2023-02-13 10:47:29,945:INFO:create_model() successfully completed......................................
2023-02-13 10:47:30,042:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:30,042:INFO:Creating metrics dataframe
2023-02-13 10:47:30,050:INFO:Initializing Extra Trees Regressor
2023-02-13 10:47:30,050:INFO:Total runtime is 0.083073361714681 minutes
2023-02-13 10:47:30,050:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:30,058:INFO:Initializing create_model()
2023-02-13 10:47:30,058:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:30,058:INFO:Checking exceptions
2023-02-13 10:47:30,058:INFO:Importing libraries
2023-02-13 10:47:30,058:INFO:Copying training dataset
2023-02-13 10:47:30,058:INFO:Defining folds
2023-02-13 10:47:30,058:INFO:Declaring metric variables
2023-02-13 10:47:30,058:INFO:Importing untrained model
2023-02-13 10:47:30,066:INFO:Extra Trees Regressor Imported successfully
2023-02-13 10:47:30,070:INFO:Starting cross validation
2023-02-13 10:47:30,074:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:30,491:INFO:Calculating mean and std
2023-02-13 10:47:30,491:INFO:Creating metrics dataframe
2023-02-13 10:47:30,499:INFO:Uploading results into container
2023-02-13 10:47:30,499:INFO:Uploading model into container now
2023-02-13 10:47:30,499:INFO:_master_model_container: 14
2023-02-13 10:47:30,499:INFO:_display_container: 2
2023-02-13 10:47:30,499:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=200)
2023-02-13 10:47:30,499:INFO:create_model() successfully completed......................................
2023-02-13 10:47:30,595:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:30,595:INFO:Creating metrics dataframe
2023-02-13 10:47:30,603:INFO:Initializing AdaBoost Regressor
2023-02-13 10:47:30,603:INFO:Total runtime is 0.09228624900182089 minutes
2023-02-13 10:47:30,603:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:30,611:INFO:Initializing create_model()
2023-02-13 10:47:30,611:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:30,611:INFO:Checking exceptions
2023-02-13 10:47:30,611:INFO:Importing libraries
2023-02-13 10:47:30,611:INFO:Copying training dataset
2023-02-13 10:47:30,611:INFO:Defining folds
2023-02-13 10:47:30,611:INFO:Declaring metric variables
2023-02-13 10:47:30,619:INFO:Importing untrained model
2023-02-13 10:47:30,619:INFO:AdaBoost Regressor Imported successfully
2023-02-13 10:47:30,627:INFO:Starting cross validation
2023-02-13 10:47:30,627:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:30,885:INFO:Calculating mean and std
2023-02-13 10:47:30,893:INFO:Creating metrics dataframe
2023-02-13 10:47:30,893:INFO:Uploading results into container
2023-02-13 10:47:30,893:INFO:Uploading model into container now
2023-02-13 10:47:30,893:INFO:_master_model_container: 15
2023-02-13 10:47:30,893:INFO:_display_container: 2
2023-02-13 10:47:30,893:INFO:AdaBoostRegressor(random_state=200)
2023-02-13 10:47:30,893:INFO:create_model() successfully completed......................................
2023-02-13 10:47:30,990:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:30,990:INFO:Creating metrics dataframe
2023-02-13 10:47:30,998:INFO:Initializing Gradient Boosting Regressor
2023-02-13 10:47:30,998:INFO:Total runtime is 0.09887529214223227 minutes
2023-02-13 10:47:31,006:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:31,006:INFO:Initializing create_model()
2023-02-13 10:47:31,006:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:31,006:INFO:Checking exceptions
2023-02-13 10:47:31,006:INFO:Importing libraries
2023-02-13 10:47:31,006:INFO:Copying training dataset
2023-02-13 10:47:31,006:INFO:Defining folds
2023-02-13 10:47:31,006:INFO:Declaring metric variables
2023-02-13 10:47:31,014:INFO:Importing untrained model
2023-02-13 10:47:31,014:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 10:47:31,022:INFO:Starting cross validation
2023-02-13 10:47:31,022:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:31,223:INFO:Calculating mean and std
2023-02-13 10:47:31,223:INFO:Creating metrics dataframe
2023-02-13 10:47:31,231:INFO:Uploading results into container
2023-02-13 10:47:31,231:INFO:Uploading model into container now
2023-02-13 10:47:31,231:INFO:_master_model_container: 16
2023-02-13 10:47:31,231:INFO:_display_container: 2
2023-02-13 10:47:31,231:INFO:GradientBoostingRegressor(random_state=200)
2023-02-13 10:47:31,231:INFO:create_model() successfully completed......................................
2023-02-13 10:47:31,328:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:31,328:INFO:Creating metrics dataframe
2023-02-13 10:47:31,336:INFO:Initializing Extreme Gradient Boosting
2023-02-13 10:47:31,336:INFO:Total runtime is 0.10450616280237834 minutes
2023-02-13 10:47:31,336:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:31,336:INFO:Initializing create_model()
2023-02-13 10:47:31,336:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:31,336:INFO:Checking exceptions
2023-02-13 10:47:31,336:INFO:Importing libraries
2023-02-13 10:47:31,336:INFO:Copying training dataset
2023-02-13 10:47:31,344:INFO:Defining folds
2023-02-13 10:47:31,344:INFO:Declaring metric variables
2023-02-13 10:47:31,344:INFO:Importing untrained model
2023-02-13 10:47:31,352:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 10:47:31,360:INFO:Starting cross validation
2023-02-13 10:47:31,360:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:31,603:INFO:Calculating mean and std
2023-02-13 10:47:31,603:INFO:Creating metrics dataframe
2023-02-13 10:47:31,611:INFO:Uploading results into container
2023-02-13 10:47:31,611:INFO:Uploading model into container now
2023-02-13 10:47:31,611:INFO:_master_model_container: 17
2023-02-13 10:47:31,611:INFO:_display_container: 2
2023-02-13 10:47:31,611:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=200, ...)
2023-02-13 10:47:31,611:INFO:create_model() successfully completed......................................
2023-02-13 10:47:31,724:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:31,724:INFO:Creating metrics dataframe
2023-02-13 10:47:31,756:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 10:47:31,756:INFO:Total runtime is 0.1115050514539083 minutes
2023-02-13 10:47:31,764:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:31,764:INFO:Initializing create_model()
2023-02-13 10:47:31,764:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:31,764:INFO:Checking exceptions
2023-02-13 10:47:31,764:INFO:Importing libraries
2023-02-13 10:47:31,764:INFO:Copying training dataset
2023-02-13 10:47:31,773:INFO:Defining folds
2023-02-13 10:47:31,773:INFO:Declaring metric variables
2023-02-13 10:47:31,780:INFO:Importing untrained model
2023-02-13 10:47:31,788:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 10:47:31,812:INFO:Starting cross validation
2023-02-13 10:47:31,812:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:32,025:INFO:Calculating mean and std
2023-02-13 10:47:32,025:INFO:Creating metrics dataframe
2023-02-13 10:47:32,034:INFO:Uploading results into container
2023-02-13 10:47:32,034:INFO:Uploading model into container now
2023-02-13 10:47:32,034:INFO:_master_model_container: 18
2023-02-13 10:47:32,034:INFO:_display_container: 2
2023-02-13 10:47:32,034:INFO:LGBMRegressor(random_state=200)
2023-02-13 10:47:32,034:INFO:create_model() successfully completed......................................
2023-02-13 10:47:32,130:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:32,130:INFO:Creating metrics dataframe
2023-02-13 10:47:32,138:INFO:Initializing Dummy Regressor
2023-02-13 10:47:32,138:INFO:Total runtime is 0.11787954966227214 minutes
2023-02-13 10:47:32,138:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:32,146:INFO:Initializing create_model()
2023-02-13 10:47:32,146:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BC0700>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:32,146:INFO:Checking exceptions
2023-02-13 10:47:32,146:INFO:Importing libraries
2023-02-13 10:47:32,146:INFO:Copying training dataset
2023-02-13 10:47:32,146:INFO:Defining folds
2023-02-13 10:47:32,146:INFO:Declaring metric variables
2023-02-13 10:47:32,146:INFO:Importing untrained model
2023-02-13 10:47:32,154:INFO:Dummy Regressor Imported successfully
2023-02-13 10:47:32,162:INFO:Starting cross validation
2023-02-13 10:47:32,162:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:32,323:INFO:Calculating mean and std
2023-02-13 10:47:32,323:INFO:Creating metrics dataframe
2023-02-13 10:47:32,325:INFO:Uploading results into container
2023-02-13 10:47:32,325:INFO:Uploading model into container now
2023-02-13 10:47:32,325:INFO:_master_model_container: 19
2023-02-13 10:47:32,325:INFO:_display_container: 2
2023-02-13 10:47:32,325:INFO:DummyRegressor()
2023-02-13 10:47:32,330:INFO:create_model() successfully completed......................................
2023-02-13 10:47:32,463:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:32,469:INFO:Creating metrics dataframe
2023-02-13 10:47:32,517:INFO:Initializing create_model()
2023-02-13 10:47:32,517:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93A22BE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:32,517:INFO:Checking exceptions
2023-02-13 10:47:32,525:INFO:Importing libraries
2023-02-13 10:47:32,525:INFO:Copying training dataset
2023-02-13 10:47:32,533:INFO:Defining folds
2023-02-13 10:47:32,533:INFO:Declaring metric variables
2023-02-13 10:47:32,533:INFO:Importing untrained model
2023-02-13 10:47:32,533:INFO:Declaring custom model
2023-02-13 10:47:32,533:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:47:32,533:INFO:Cross validation set to False
2023-02-13 10:47:32,533:INFO:Fitting Model
2023-02-13 10:47:32,612:INFO:BayesianRidge()
2023-02-13 10:47:32,613:INFO:create_model() successfully completed......................................
2023-02-13 10:47:32,890:INFO:_master_model_container: 19
2023-02-13 10:47:32,890:INFO:_display_container: 2
2023-02-13 10:47:32,890:INFO:BayesianRidge()
2023-02-13 10:47:32,890:INFO:compare_models() successfully completed......................................
2023-02-13 10:47:41,881:INFO:PyCaret RegressionExperiment
2023-02-13 10:47:41,881:INFO:Logging name: reg-default-name
2023-02-13 10:47:41,881:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 10:47:41,881:INFO:version 3.0.0.rc8
2023-02-13 10:47:41,881:INFO:Initializing setup()
2023-02-13 10:47:41,881:INFO:self.USI: 8cb4
2023-02-13 10:47:41,881:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 10:47:41,881:INFO:Checking environment
2023-02-13 10:47:41,881:INFO:python_version: 3.9.13
2023-02-13 10:47:41,881:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 10:47:41,883:INFO:machine: AMD64
2023-02-13 10:47:41,883:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 10:47:41,887:INFO:Memory: svmem(total=16805040128, available=6354980864, percent=62.2, used=10450059264, free=6354980864)
2023-02-13 10:47:41,888:INFO:Physical Core: 4
2023-02-13 10:47:41,888:INFO:Logical Core: 8
2023-02-13 10:47:41,888:INFO:Checking libraries
2023-02-13 10:47:41,888:INFO:System:
2023-02-13 10:47:41,888:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 10:47:41,888:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 10:47:41,888:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 10:47:41,888:INFO:PyCaret required dependencies:
2023-02-13 10:47:41,888:INFO:                 pip: 23.0
2023-02-13 10:47:41,888:INFO:          setuptools: 58.1.0
2023-02-13 10:47:41,888:INFO:             pycaret: 3.0.0rc8
2023-02-13 10:47:41,888:INFO:             IPython: 8.7.0
2023-02-13 10:47:41,888:INFO:          ipywidgets: 8.0.4
2023-02-13 10:47:41,888:INFO:                tqdm: 4.64.1
2023-02-13 10:47:41,888:INFO:               numpy: 1.22.1
2023-02-13 10:47:41,888:INFO:              pandas: 1.5.2
2023-02-13 10:47:41,888:INFO:              jinja2: 3.1.2
2023-02-13 10:47:41,888:INFO:               scipy: 1.5.4
2023-02-13 10:47:41,888:INFO:              joblib: 1.2.0
2023-02-13 10:47:41,888:INFO:             sklearn: 1.1.3
2023-02-13 10:47:41,888:INFO:                pyod: 1.0.7
2023-02-13 10:47:41,888:INFO:            imblearn: 0.10.1
2023-02-13 10:47:41,888:INFO:   category_encoders: 2.6.0
2023-02-13 10:47:41,888:INFO:            lightgbm: 3.3.4
2023-02-13 10:47:41,888:INFO:               numba: 0.56.4
2023-02-13 10:47:41,888:INFO:            requests: 2.28.1
2023-02-13 10:47:41,888:INFO:          matplotlib: 3.6.2
2023-02-13 10:47:41,888:INFO:          scikitplot: 0.3.7
2023-02-13 10:47:41,888:INFO:         yellowbrick: 1.5
2023-02-13 10:47:41,888:INFO:              plotly: 5.11.0
2023-02-13 10:47:41,888:INFO:             kaleido: 0.2.1
2023-02-13 10:47:41,888:INFO:         statsmodels: 0.13.5
2023-02-13 10:47:41,888:INFO:              sktime: 0.15.1
2023-02-13 10:47:41,888:INFO:               tbats: 1.1.2
2023-02-13 10:47:41,888:INFO:            pmdarima: 2.0.2
2023-02-13 10:47:41,888:INFO:              psutil: 5.9.4
2023-02-13 10:47:41,888:INFO:PyCaret optional dependencies:
2023-02-13 10:47:41,888:INFO:                shap: 0.41.0
2023-02-13 10:47:41,888:INFO:           interpret: 0.3.0
2023-02-13 10:47:41,888:INFO:                umap: Not installed
2023-02-13 10:47:41,888:INFO:    pandas_profiling: 3.6.2
2023-02-13 10:47:41,888:INFO:  explainerdashboard: Not installed
2023-02-13 10:47:41,888:INFO:             autoviz: Not installed
2023-02-13 10:47:41,888:INFO:           fairlearn: Not installed
2023-02-13 10:47:41,888:INFO:             xgboost: 1.7.3
2023-02-13 10:47:41,888:INFO:            catboost: Not installed
2023-02-13 10:47:41,888:INFO:              kmodes: Not installed
2023-02-13 10:47:41,888:INFO:             mlxtend: Not installed
2023-02-13 10:47:41,888:INFO:       statsforecast: Not installed
2023-02-13 10:47:41,888:INFO:        tune_sklearn: Not installed
2023-02-13 10:47:41,888:INFO:                 ray: Not installed
2023-02-13 10:47:41,888:INFO:            hyperopt: Not installed
2023-02-13 10:47:41,888:INFO:              optuna: Not installed
2023-02-13 10:47:41,888:INFO:               skopt: Not installed
2023-02-13 10:47:41,888:INFO:              mlflow: Not installed
2023-02-13 10:47:41,888:INFO:              gradio: Not installed
2023-02-13 10:47:41,888:INFO:             fastapi: Not installed
2023-02-13 10:47:41,888:INFO:             uvicorn: Not installed
2023-02-13 10:47:41,888:INFO:              m2cgen: Not installed
2023-02-13 10:47:41,888:INFO:           evidently: Not installed
2023-02-13 10:47:41,888:INFO:                nltk: 3.8
2023-02-13 10:47:41,888:INFO:            pyLDAvis: Not installed
2023-02-13 10:47:41,888:INFO:              gensim: Not installed
2023-02-13 10:47:41,888:INFO:               spacy: Not installed
2023-02-13 10:47:41,888:INFO:           wordcloud: 1.8.2.2
2023-02-13 10:47:41,888:INFO:            textblob: Not installed
2023-02-13 10:47:41,888:INFO:               fugue: Not installed
2023-02-13 10:47:41,888:INFO:           streamlit: 1.16.0
2023-02-13 10:47:41,888:INFO:             prophet: Not installed
2023-02-13 10:47:41,888:INFO:None
2023-02-13 10:47:41,888:INFO:Set up data.
2023-02-13 10:47:41,896:INFO:Set up train/test split.
2023-02-13 10:47:41,897:INFO:Set up index.
2023-02-13 10:47:41,897:INFO:Set up folding strategy.
2023-02-13 10:47:41,897:INFO:Assigning column types.
2023-02-13 10:47:41,897:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 10:47:41,897:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:47:41,905:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:47:41,913:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:41,993:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,061:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,061:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:42,069:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:42,069:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,071:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,076:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,154:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,259:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,259:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:42,267:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:42,267:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 10:47:42,284:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,300:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,463:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,509:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,509:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:42,513:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:42,517:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,520:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,569:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,602:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,602:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:42,602:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:42,602:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 10:47:42,610:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,659:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,692:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,700:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:42,702:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:42,708:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,765:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,797:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,797:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:42,797:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:42,804:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 10:47:42,859:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,912:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:42,912:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:42,920:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:42,990:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:43,021:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:47:43,027:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:43,027:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:43,027:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 10:47:43,084:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:43,124:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:43,132:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:43,188:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:47:43,223:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:43,223:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:43,223:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 10:47:43,312:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:43,312:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:43,410:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:43,410:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:43,410:INFO:Preparing preprocessing pipeline...
2023-02-13 10:47:43,410:INFO:Set up column name cleaning.
2023-02-13 10:47:43,410:INFO:Set up simple imputation.
2023-02-13 10:47:43,459:INFO:Finished creating preprocessing pipeline.
2023-02-13 10:47:43,459:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 10:47:43,459:INFO:Creating final display dataframe.
2023-02-13 10:47:43,672:INFO:Setup _display_container:                     Description             Value
0                    Session id               122
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              8cb4
2023-02-13 10:47:43,791:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:43,793:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:43,885:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:47:43,885:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:47:43,885:INFO:setup() successfully completed in 2.0s...............
2023-02-13 10:47:43,885:INFO:Initializing compare_models()
2023-02-13 10:47:43,885:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 10:47:43,885:INFO:Checking exceptions
2023-02-13 10:47:43,891:INFO:Preparing display monitor
2023-02-13 10:47:43,914:INFO:Initializing Linear Regression
2023-02-13 10:47:43,916:INFO:Total runtime is 0.0 minutes
2023-02-13 10:47:43,919:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:43,920:INFO:Initializing create_model()
2023-02-13 10:47:43,920:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:43,920:INFO:Checking exceptions
2023-02-13 10:47:43,920:INFO:Importing libraries
2023-02-13 10:47:43,920:INFO:Copying training dataset
2023-02-13 10:47:43,920:INFO:Defining folds
2023-02-13 10:47:43,920:INFO:Declaring metric variables
2023-02-13 10:47:43,925:INFO:Importing untrained model
2023-02-13 10:47:43,927:INFO:Linear Regression Imported successfully
2023-02-13 10:47:43,937:INFO:Starting cross validation
2023-02-13 10:47:43,939:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:44,430:INFO:Calculating mean and std
2023-02-13 10:47:44,430:INFO:Creating metrics dataframe
2023-02-13 10:47:44,430:INFO:Uploading results into container
2023-02-13 10:47:44,435:INFO:Uploading model into container now
2023-02-13 10:47:44,435:INFO:_master_model_container: 1
2023-02-13 10:47:44,435:INFO:_display_container: 2
2023-02-13 10:47:44,435:INFO:LinearRegression(n_jobs=-1)
2023-02-13 10:47:44,435:INFO:create_model() successfully completed......................................
2023-02-13 10:47:44,536:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:44,536:INFO:Creating metrics dataframe
2023-02-13 10:47:44,544:INFO:Initializing Lasso Regression
2023-02-13 10:47:44,544:INFO:Total runtime is 0.010506196816762289 minutes
2023-02-13 10:47:44,556:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:44,556:INFO:Initializing create_model()
2023-02-13 10:47:44,556:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:44,556:INFO:Checking exceptions
2023-02-13 10:47:44,556:INFO:Importing libraries
2023-02-13 10:47:44,556:INFO:Copying training dataset
2023-02-13 10:47:44,559:INFO:Defining folds
2023-02-13 10:47:44,559:INFO:Declaring metric variables
2023-02-13 10:47:44,562:INFO:Importing untrained model
2023-02-13 10:47:44,564:INFO:Lasso Regression Imported successfully
2023-02-13 10:47:44,569:INFO:Starting cross validation
2023-02-13 10:47:44,569:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:44,738:INFO:Calculating mean and std
2023-02-13 10:47:44,738:INFO:Creating metrics dataframe
2023-02-13 10:47:44,738:INFO:Uploading results into container
2023-02-13 10:47:44,742:INFO:Uploading model into container now
2023-02-13 10:47:44,742:INFO:_master_model_container: 2
2023-02-13 10:47:44,742:INFO:_display_container: 2
2023-02-13 10:47:44,742:INFO:Lasso(random_state=122)
2023-02-13 10:47:44,743:INFO:create_model() successfully completed......................................
2023-02-13 10:47:44,842:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:44,842:INFO:Creating metrics dataframe
2023-02-13 10:47:44,849:INFO:Initializing Ridge Regression
2023-02-13 10:47:44,851:INFO:Total runtime is 0.015617076555887857 minutes
2023-02-13 10:47:44,854:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:44,854:INFO:Initializing create_model()
2023-02-13 10:47:44,854:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:44,854:INFO:Checking exceptions
2023-02-13 10:47:44,854:INFO:Importing libraries
2023-02-13 10:47:44,854:INFO:Copying training dataset
2023-02-13 10:47:44,857:INFO:Defining folds
2023-02-13 10:47:44,857:INFO:Declaring metric variables
2023-02-13 10:47:44,858:INFO:Importing untrained model
2023-02-13 10:47:44,858:INFO:Ridge Regression Imported successfully
2023-02-13 10:47:44,869:INFO:Starting cross validation
2023-02-13 10:47:44,871:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:45,043:INFO:Calculating mean and std
2023-02-13 10:47:45,046:INFO:Creating metrics dataframe
2023-02-13 10:47:45,048:INFO:Uploading results into container
2023-02-13 10:47:45,048:INFO:Uploading model into container now
2023-02-13 10:47:45,048:INFO:_master_model_container: 3
2023-02-13 10:47:45,048:INFO:_display_container: 2
2023-02-13 10:47:45,048:INFO:Ridge(random_state=122)
2023-02-13 10:47:45,048:INFO:create_model() successfully completed......................................
2023-02-13 10:47:45,150:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:45,150:INFO:Creating metrics dataframe
2023-02-13 10:47:45,153:INFO:Initializing Elastic Net
2023-02-13 10:47:45,153:INFO:Total runtime is 0.020645928382873532 minutes
2023-02-13 10:47:45,161:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:45,161:INFO:Initializing create_model()
2023-02-13 10:47:45,161:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:45,161:INFO:Checking exceptions
2023-02-13 10:47:45,161:INFO:Importing libraries
2023-02-13 10:47:45,161:INFO:Copying training dataset
2023-02-13 10:47:45,166:INFO:Defining folds
2023-02-13 10:47:45,166:INFO:Declaring metric variables
2023-02-13 10:47:45,169:INFO:Importing untrained model
2023-02-13 10:47:45,169:INFO:Elastic Net Imported successfully
2023-02-13 10:47:45,182:INFO:Starting cross validation
2023-02-13 10:47:45,185:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:45,355:INFO:Calculating mean and std
2023-02-13 10:47:45,357:INFO:Creating metrics dataframe
2023-02-13 10:47:45,359:INFO:Uploading results into container
2023-02-13 10:47:45,359:INFO:Uploading model into container now
2023-02-13 10:47:45,359:INFO:_master_model_container: 4
2023-02-13 10:47:45,359:INFO:_display_container: 2
2023-02-13 10:47:45,359:INFO:ElasticNet(random_state=122)
2023-02-13 10:47:45,359:INFO:create_model() successfully completed......................................
2023-02-13 10:47:45,489:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:45,489:INFO:Creating metrics dataframe
2023-02-13 10:47:45,509:INFO:Initializing Least Angle Regression
2023-02-13 10:47:45,511:INFO:Total runtime is 0.026622907320658362 minutes
2023-02-13 10:47:45,514:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:45,517:INFO:Initializing create_model()
2023-02-13 10:47:45,517:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:45,517:INFO:Checking exceptions
2023-02-13 10:47:45,517:INFO:Importing libraries
2023-02-13 10:47:45,517:INFO:Copying training dataset
2023-02-13 10:47:45,522:INFO:Defining folds
2023-02-13 10:47:45,522:INFO:Declaring metric variables
2023-02-13 10:47:45,527:INFO:Importing untrained model
2023-02-13 10:47:45,530:INFO:Least Angle Regression Imported successfully
2023-02-13 10:47:45,544:INFO:Starting cross validation
2023-02-13 10:47:45,544:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:45,606:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:45,621:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:45,639:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:45,646:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:45,661:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:45,669:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:45,684:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:45,694:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:45,704:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:45,712:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:45,729:INFO:Calculating mean and std
2023-02-13 10:47:45,729:INFO:Creating metrics dataframe
2023-02-13 10:47:45,729:INFO:Uploading results into container
2023-02-13 10:47:45,729:INFO:Uploading model into container now
2023-02-13 10:47:45,734:INFO:_master_model_container: 5
2023-02-13 10:47:45,734:INFO:_display_container: 2
2023-02-13 10:47:45,734:INFO:Lars(random_state=122)
2023-02-13 10:47:45,734:INFO:create_model() successfully completed......................................
2023-02-13 10:47:45,835:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:45,835:INFO:Creating metrics dataframe
2023-02-13 10:47:45,843:INFO:Initializing Lasso Least Angle Regression
2023-02-13 10:47:45,843:INFO:Total runtime is 0.032154381275177 minutes
2023-02-13 10:47:45,843:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:45,843:INFO:Initializing create_model()
2023-02-13 10:47:45,843:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:45,843:INFO:Checking exceptions
2023-02-13 10:47:45,843:INFO:Importing libraries
2023-02-13 10:47:45,843:INFO:Copying training dataset
2023-02-13 10:47:45,851:INFO:Defining folds
2023-02-13 10:47:45,851:INFO:Declaring metric variables
2023-02-13 10:47:45,851:INFO:Importing untrained model
2023-02-13 10:47:45,860:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 10:47:45,867:INFO:Starting cross validation
2023-02-13 10:47:45,867:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:45,918:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:45,928:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:45,941:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:45,958:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:45,961:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:45,976:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:45,982:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:45,994:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:45,999:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:46,013:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:47:46,028:INFO:Calculating mean and std
2023-02-13 10:47:46,028:INFO:Creating metrics dataframe
2023-02-13 10:47:46,034:INFO:Uploading results into container
2023-02-13 10:47:46,034:INFO:Uploading model into container now
2023-02-13 10:47:46,036:INFO:_master_model_container: 6
2023-02-13 10:47:46,036:INFO:_display_container: 2
2023-02-13 10:47:46,036:INFO:LassoLars(random_state=122)
2023-02-13 10:47:46,036:INFO:create_model() successfully completed......................................
2023-02-13 10:47:46,133:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:46,134:INFO:Creating metrics dataframe
2023-02-13 10:47:46,139:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 10:47:46,139:INFO:Total runtime is 0.03709096908569336 minutes
2023-02-13 10:47:46,139:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:46,139:INFO:Initializing create_model()
2023-02-13 10:47:46,139:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:46,139:INFO:Checking exceptions
2023-02-13 10:47:46,139:INFO:Importing libraries
2023-02-13 10:47:46,139:INFO:Copying training dataset
2023-02-13 10:47:46,150:INFO:Defining folds
2023-02-13 10:47:46,151:INFO:Declaring metric variables
2023-02-13 10:47:46,151:INFO:Importing untrained model
2023-02-13 10:47:46,156:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 10:47:46,164:INFO:Starting cross validation
2023-02-13 10:47:46,180:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:46,237:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:46,254:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:46,283:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:46,294:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:46,311:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:46,314:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:46,327:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:46,341:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:46,349:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:46,363:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:47:46,376:INFO:Calculating mean and std
2023-02-13 10:47:46,376:INFO:Creating metrics dataframe
2023-02-13 10:47:46,385:INFO:Uploading results into container
2023-02-13 10:47:46,385:INFO:Uploading model into container now
2023-02-13 10:47:46,385:INFO:_master_model_container: 7
2023-02-13 10:47:46,385:INFO:_display_container: 2
2023-02-13 10:47:46,385:INFO:OrthogonalMatchingPursuit()
2023-02-13 10:47:46,385:INFO:create_model() successfully completed......................................
2023-02-13 10:47:46,483:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:46,483:INFO:Creating metrics dataframe
2023-02-13 10:47:46,494:INFO:Initializing Bayesian Ridge
2023-02-13 10:47:46,494:INFO:Total runtime is 0.04300517638524373 minutes
2023-02-13 10:47:46,499:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:46,500:INFO:Initializing create_model()
2023-02-13 10:47:46,500:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:46,500:INFO:Checking exceptions
2023-02-13 10:47:46,500:INFO:Importing libraries
2023-02-13 10:47:46,501:INFO:Copying training dataset
2023-02-13 10:47:46,501:INFO:Defining folds
2023-02-13 10:47:46,501:INFO:Declaring metric variables
2023-02-13 10:47:46,506:INFO:Importing untrained model
2023-02-13 10:47:46,516:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:47:46,531:INFO:Starting cross validation
2023-02-13 10:47:46,531:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:46,719:INFO:Calculating mean and std
2023-02-13 10:47:46,719:INFO:Creating metrics dataframe
2023-02-13 10:47:46,719:INFO:Uploading results into container
2023-02-13 10:47:46,719:INFO:Uploading model into container now
2023-02-13 10:47:46,719:INFO:_master_model_container: 8
2023-02-13 10:47:46,719:INFO:_display_container: 2
2023-02-13 10:47:46,719:INFO:BayesianRidge()
2023-02-13 10:47:46,719:INFO:create_model() successfully completed......................................
2023-02-13 10:47:46,815:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:46,823:INFO:Creating metrics dataframe
2023-02-13 10:47:46,831:INFO:Initializing Passive Aggressive Regressor
2023-02-13 10:47:46,831:INFO:Total runtime is 0.04862265984217326 minutes
2023-02-13 10:47:46,831:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:46,831:INFO:Initializing create_model()
2023-02-13 10:47:46,831:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:46,831:INFO:Checking exceptions
2023-02-13 10:47:46,831:INFO:Importing libraries
2023-02-13 10:47:46,831:INFO:Copying training dataset
2023-02-13 10:47:46,831:INFO:Defining folds
2023-02-13 10:47:46,839:INFO:Declaring metric variables
2023-02-13 10:47:46,847:INFO:Importing untrained model
2023-02-13 10:47:46,855:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 10:47:46,871:INFO:Starting cross validation
2023-02-13 10:47:46,879:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:47,068:INFO:Calculating mean and std
2023-02-13 10:47:47,074:INFO:Creating metrics dataframe
2023-02-13 10:47:47,074:INFO:Uploading results into container
2023-02-13 10:47:47,074:INFO:Uploading model into container now
2023-02-13 10:47:47,074:INFO:_master_model_container: 9
2023-02-13 10:47:47,074:INFO:_display_container: 2
2023-02-13 10:47:47,074:INFO:PassiveAggressiveRegressor(random_state=122)
2023-02-13 10:47:47,074:INFO:create_model() successfully completed......................................
2023-02-13 10:47:47,171:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:47,171:INFO:Creating metrics dataframe
2023-02-13 10:47:47,179:INFO:Initializing Huber Regressor
2023-02-13 10:47:47,179:INFO:Total runtime is 0.05441760619481405 minutes
2023-02-13 10:47:47,187:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:47,187:INFO:Initializing create_model()
2023-02-13 10:47:47,187:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:47,187:INFO:Checking exceptions
2023-02-13 10:47:47,187:INFO:Importing libraries
2023-02-13 10:47:47,187:INFO:Copying training dataset
2023-02-13 10:47:47,187:INFO:Defining folds
2023-02-13 10:47:47,187:INFO:Declaring metric variables
2023-02-13 10:47:47,195:INFO:Importing untrained model
2023-02-13 10:47:47,196:INFO:Huber Regressor Imported successfully
2023-02-13 10:47:47,205:INFO:Starting cross validation
2023-02-13 10:47:47,205:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:47,277:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:47,301:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:47,322:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:47,333:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:47,341:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:47,358:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:47,377:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:47,382:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:47,390:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:47:47,406:INFO:Calculating mean and std
2023-02-13 10:47:47,406:INFO:Creating metrics dataframe
2023-02-13 10:47:47,406:INFO:Uploading results into container
2023-02-13 10:47:47,406:INFO:Uploading model into container now
2023-02-13 10:47:47,406:INFO:_master_model_container: 10
2023-02-13 10:47:47,406:INFO:_display_container: 2
2023-02-13 10:47:47,406:INFO:HuberRegressor()
2023-02-13 10:47:47,406:INFO:create_model() successfully completed......................................
2023-02-13 10:47:47,503:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:47,503:INFO:Creating metrics dataframe
2023-02-13 10:47:47,519:INFO:Initializing K Neighbors Regressor
2023-02-13 10:47:47,519:INFO:Total runtime is 0.06008788744608561 minutes
2023-02-13 10:47:47,519:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:47,519:INFO:Initializing create_model()
2023-02-13 10:47:47,519:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:47,519:INFO:Checking exceptions
2023-02-13 10:47:47,519:INFO:Importing libraries
2023-02-13 10:47:47,519:INFO:Copying training dataset
2023-02-13 10:47:47,519:INFO:Defining folds
2023-02-13 10:47:47,519:INFO:Declaring metric variables
2023-02-13 10:47:47,527:INFO:Importing untrained model
2023-02-13 10:47:47,535:INFO:K Neighbors Regressor Imported successfully
2023-02-13 10:47:47,543:INFO:Starting cross validation
2023-02-13 10:47:47,543:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:47,708:INFO:Calculating mean and std
2023-02-13 10:47:47,708:INFO:Creating metrics dataframe
2023-02-13 10:47:47,708:INFO:Uploading results into container
2023-02-13 10:47:47,713:INFO:Uploading model into container now
2023-02-13 10:47:47,713:INFO:_master_model_container: 11
2023-02-13 10:47:47,713:INFO:_display_container: 2
2023-02-13 10:47:47,714:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:47:47,714:INFO:create_model() successfully completed......................................
2023-02-13 10:47:47,803:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:47,803:INFO:Creating metrics dataframe
2023-02-13 10:47:47,819:INFO:Initializing Decision Tree Regressor
2023-02-13 10:47:47,819:INFO:Total runtime is 0.0650827169418335 minutes
2023-02-13 10:47:47,819:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:47,819:INFO:Initializing create_model()
2023-02-13 10:47:47,819:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:47,819:INFO:Checking exceptions
2023-02-13 10:47:47,819:INFO:Importing libraries
2023-02-13 10:47:47,819:INFO:Copying training dataset
2023-02-13 10:47:47,827:INFO:Defining folds
2023-02-13 10:47:47,827:INFO:Declaring metric variables
2023-02-13 10:47:47,830:INFO:Importing untrained model
2023-02-13 10:47:47,835:INFO:Decision Tree Regressor Imported successfully
2023-02-13 10:47:47,841:INFO:Starting cross validation
2023-02-13 10:47:47,843:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:48,033:INFO:Calculating mean and std
2023-02-13 10:47:48,033:INFO:Creating metrics dataframe
2023-02-13 10:47:48,033:INFO:Uploading results into container
2023-02-13 10:47:48,033:INFO:Uploading model into container now
2023-02-13 10:47:48,033:INFO:_master_model_container: 12
2023-02-13 10:47:48,033:INFO:_display_container: 2
2023-02-13 10:47:48,033:INFO:DecisionTreeRegressor(random_state=122)
2023-02-13 10:47:48,033:INFO:create_model() successfully completed......................................
2023-02-13 10:47:48,131:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:48,131:INFO:Creating metrics dataframe
2023-02-13 10:47:48,137:INFO:Initializing Random Forest Regressor
2023-02-13 10:47:48,137:INFO:Total runtime is 0.07039146820704142 minutes
2023-02-13 10:47:48,144:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:48,144:INFO:Initializing create_model()
2023-02-13 10:47:48,144:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:48,144:INFO:Checking exceptions
2023-02-13 10:47:48,145:INFO:Importing libraries
2023-02-13 10:47:48,145:INFO:Copying training dataset
2023-02-13 10:47:48,147:INFO:Defining folds
2023-02-13 10:47:48,147:INFO:Declaring metric variables
2023-02-13 10:47:48,152:INFO:Importing untrained model
2023-02-13 10:47:48,152:INFO:Random Forest Regressor Imported successfully
2023-02-13 10:47:48,163:INFO:Starting cross validation
2023-02-13 10:47:48,164:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:48,658:INFO:Calculating mean and std
2023-02-13 10:47:48,658:INFO:Creating metrics dataframe
2023-02-13 10:47:48,662:INFO:Uploading results into container
2023-02-13 10:47:48,662:INFO:Uploading model into container now
2023-02-13 10:47:48,663:INFO:_master_model_container: 13
2023-02-13 10:47:48,663:INFO:_display_container: 2
2023-02-13 10:47:48,663:INFO:RandomForestRegressor(n_jobs=-1, random_state=122)
2023-02-13 10:47:48,664:INFO:create_model() successfully completed......................................
2023-02-13 10:47:48,774:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:48,774:INFO:Creating metrics dataframe
2023-02-13 10:47:48,791:INFO:Initializing Extra Trees Regressor
2023-02-13 10:47:48,791:INFO:Total runtime is 0.08128252426783245 minutes
2023-02-13 10:47:48,804:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:48,804:INFO:Initializing create_model()
2023-02-13 10:47:48,804:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:48,804:INFO:Checking exceptions
2023-02-13 10:47:48,804:INFO:Importing libraries
2023-02-13 10:47:48,804:INFO:Copying training dataset
2023-02-13 10:47:48,809:INFO:Defining folds
2023-02-13 10:47:48,809:INFO:Declaring metric variables
2023-02-13 10:47:48,816:INFO:Importing untrained model
2023-02-13 10:47:48,823:INFO:Extra Trees Regressor Imported successfully
2023-02-13 10:47:48,834:INFO:Starting cross validation
2023-02-13 10:47:48,839:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:49,296:INFO:Calculating mean and std
2023-02-13 10:47:49,296:INFO:Creating metrics dataframe
2023-02-13 10:47:49,299:INFO:Uploading results into container
2023-02-13 10:47:49,299:INFO:Uploading model into container now
2023-02-13 10:47:49,299:INFO:_master_model_container: 14
2023-02-13 10:47:49,299:INFO:_display_container: 2
2023-02-13 10:47:49,299:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=122)
2023-02-13 10:47:49,299:INFO:create_model() successfully completed......................................
2023-02-13 10:47:49,400:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:49,400:INFO:Creating metrics dataframe
2023-02-13 10:47:49,408:INFO:Initializing AdaBoost Regressor
2023-02-13 10:47:49,408:INFO:Total runtime is 0.09157780408859253 minutes
2023-02-13 10:47:49,416:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:49,416:INFO:Initializing create_model()
2023-02-13 10:47:49,416:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:49,416:INFO:Checking exceptions
2023-02-13 10:47:49,416:INFO:Importing libraries
2023-02-13 10:47:49,416:INFO:Copying training dataset
2023-02-13 10:47:49,416:INFO:Defining folds
2023-02-13 10:47:49,416:INFO:Declaring metric variables
2023-02-13 10:47:49,416:INFO:Importing untrained model
2023-02-13 10:47:49,424:INFO:AdaBoost Regressor Imported successfully
2023-02-13 10:47:49,432:INFO:Starting cross validation
2023-02-13 10:47:49,432:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:49,689:INFO:Calculating mean and std
2023-02-13 10:47:49,689:INFO:Creating metrics dataframe
2023-02-13 10:47:49,689:INFO:Uploading results into container
2023-02-13 10:47:49,689:INFO:Uploading model into container now
2023-02-13 10:47:49,689:INFO:_master_model_container: 15
2023-02-13 10:47:49,689:INFO:_display_container: 2
2023-02-13 10:47:49,689:INFO:AdaBoostRegressor(random_state=122)
2023-02-13 10:47:49,689:INFO:create_model() successfully completed......................................
2023-02-13 10:47:49,786:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:49,786:INFO:Creating metrics dataframe
2023-02-13 10:47:49,800:INFO:Initializing Gradient Boosting Regressor
2023-02-13 10:47:49,800:INFO:Total runtime is 0.0981017271677653 minutes
2023-02-13 10:47:49,802:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:49,802:INFO:Initializing create_model()
2023-02-13 10:47:49,802:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:49,802:INFO:Checking exceptions
2023-02-13 10:47:49,802:INFO:Importing libraries
2023-02-13 10:47:49,802:INFO:Copying training dataset
2023-02-13 10:47:49,802:INFO:Defining folds
2023-02-13 10:47:49,802:INFO:Declaring metric variables
2023-02-13 10:47:49,810:INFO:Importing untrained model
2023-02-13 10:47:49,810:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 10:47:49,818:INFO:Starting cross validation
2023-02-13 10:47:49,818:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:50,037:INFO:Calculating mean and std
2023-02-13 10:47:50,037:INFO:Creating metrics dataframe
2023-02-13 10:47:50,037:INFO:Uploading results into container
2023-02-13 10:47:50,037:INFO:Uploading model into container now
2023-02-13 10:47:50,037:INFO:_master_model_container: 16
2023-02-13 10:47:50,037:INFO:_display_container: 2
2023-02-13 10:47:50,045:INFO:GradientBoostingRegressor(random_state=122)
2023-02-13 10:47:50,045:INFO:create_model() successfully completed......................................
2023-02-13 10:47:50,141:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:50,141:INFO:Creating metrics dataframe
2023-02-13 10:47:50,149:INFO:Initializing Extreme Gradient Boosting
2023-02-13 10:47:50,149:INFO:Total runtime is 0.10392774740854899 minutes
2023-02-13 10:47:50,149:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:50,149:INFO:Initializing create_model()
2023-02-13 10:47:50,149:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:50,149:INFO:Checking exceptions
2023-02-13 10:47:50,149:INFO:Importing libraries
2023-02-13 10:47:50,149:INFO:Copying training dataset
2023-02-13 10:47:50,157:INFO:Defining folds
2023-02-13 10:47:50,157:INFO:Declaring metric variables
2023-02-13 10:47:50,157:INFO:Importing untrained model
2023-02-13 10:47:50,165:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 10:47:50,173:INFO:Starting cross validation
2023-02-13 10:47:50,173:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:50,429:INFO:Calculating mean and std
2023-02-13 10:47:50,429:INFO:Creating metrics dataframe
2023-02-13 10:47:50,429:INFO:Uploading results into container
2023-02-13 10:47:50,429:INFO:Uploading model into container now
2023-02-13 10:47:50,429:INFO:_master_model_container: 17
2023-02-13 10:47:50,429:INFO:_display_container: 2
2023-02-13 10:47:50,436:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=122, ...)
2023-02-13 10:47:50,436:INFO:create_model() successfully completed......................................
2023-02-13 10:47:50,531:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:50,531:INFO:Creating metrics dataframe
2023-02-13 10:47:50,542:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 10:47:50,542:INFO:Total runtime is 0.1104767084121704 minutes
2023-02-13 10:47:50,542:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:50,542:INFO:Initializing create_model()
2023-02-13 10:47:50,542:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:50,542:INFO:Checking exceptions
2023-02-13 10:47:50,542:INFO:Importing libraries
2023-02-13 10:47:50,542:INFO:Copying training dataset
2023-02-13 10:47:50,550:INFO:Defining folds
2023-02-13 10:47:50,550:INFO:Declaring metric variables
2023-02-13 10:47:50,550:INFO:Importing untrained model
2023-02-13 10:47:50,558:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 10:47:50,566:INFO:Starting cross validation
2023-02-13 10:47:50,566:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:50,733:INFO:Calculating mean and std
2023-02-13 10:47:50,733:INFO:Creating metrics dataframe
2023-02-13 10:47:50,738:INFO:Uploading results into container
2023-02-13 10:47:50,738:INFO:Uploading model into container now
2023-02-13 10:47:50,738:INFO:_master_model_container: 18
2023-02-13 10:47:50,738:INFO:_display_container: 2
2023-02-13 10:47:50,738:INFO:LGBMRegressor(random_state=122)
2023-02-13 10:47:50,738:INFO:create_model() successfully completed......................................
2023-02-13 10:47:50,835:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:50,835:INFO:Creating metrics dataframe
2023-02-13 10:47:50,851:INFO:Initializing Dummy Regressor
2023-02-13 10:47:50,851:INFO:Total runtime is 0.11561429897944131 minutes
2023-02-13 10:47:50,851:INFO:SubProcess create_model() called ==================================
2023-02-13 10:47:50,851:INFO:Initializing create_model()
2023-02-13 10:47:50,851:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93A05E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:50,851:INFO:Checking exceptions
2023-02-13 10:47:50,851:INFO:Importing libraries
2023-02-13 10:47:50,851:INFO:Copying training dataset
2023-02-13 10:47:50,859:INFO:Defining folds
2023-02-13 10:47:50,859:INFO:Declaring metric variables
2023-02-13 10:47:50,859:INFO:Importing untrained model
2023-02-13 10:47:50,867:INFO:Dummy Regressor Imported successfully
2023-02-13 10:47:50,875:INFO:Starting cross validation
2023-02-13 10:47:50,875:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:47:51,044:INFO:Calculating mean and std
2023-02-13 10:47:51,044:INFO:Creating metrics dataframe
2023-02-13 10:47:51,052:INFO:Uploading results into container
2023-02-13 10:47:51,052:INFO:Uploading model into container now
2023-02-13 10:47:51,052:INFO:_master_model_container: 19
2023-02-13 10:47:51,052:INFO:_display_container: 2
2023-02-13 10:47:51,052:INFO:DummyRegressor()
2023-02-13 10:47:51,052:INFO:create_model() successfully completed......................................
2023-02-13 10:47:51,168:INFO:SubProcess create_model() end ==================================
2023-02-13 10:47:51,168:INFO:Creating metrics dataframe
2023-02-13 10:47:51,196:INFO:Initializing create_model()
2023-02-13 10:47:51,196:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A942D70D0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:47:51,196:INFO:Checking exceptions
2023-02-13 10:47:51,196:INFO:Importing libraries
2023-02-13 10:47:51,196:INFO:Copying training dataset
2023-02-13 10:47:51,203:INFO:Defining folds
2023-02-13 10:47:51,203:INFO:Declaring metric variables
2023-02-13 10:47:51,203:INFO:Importing untrained model
2023-02-13 10:47:51,203:INFO:Declaring custom model
2023-02-13 10:47:51,203:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:47:51,203:INFO:Cross validation set to False
2023-02-13 10:47:51,203:INFO:Fitting Model
2023-02-13 10:47:51,241:INFO:BayesianRidge()
2023-02-13 10:47:51,241:INFO:create_model() successfully completed......................................
2023-02-13 10:47:51,386:INFO:_master_model_container: 19
2023-02-13 10:47:51,386:INFO:_display_container: 2
2023-02-13 10:47:51,386:INFO:BayesianRidge()
2023-02-13 10:47:51,386:INFO:compare_models() successfully completed......................................
2023-02-13 10:48:02,698:INFO:PyCaret RegressionExperiment
2023-02-13 10:48:02,698:INFO:Logging name: reg-default-name
2023-02-13 10:48:02,698:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 10:48:02,698:INFO:version 3.0.0.rc8
2023-02-13 10:48:02,698:INFO:Initializing setup()
2023-02-13 10:48:02,698:INFO:self.USI: d7f2
2023-02-13 10:48:02,698:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 10:48:02,698:INFO:Checking environment
2023-02-13 10:48:02,698:INFO:python_version: 3.9.13
2023-02-13 10:48:02,698:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 10:48:02,698:INFO:machine: AMD64
2023-02-13 10:48:02,698:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 10:48:02,702:INFO:Memory: svmem(total=16805040128, available=6359699456, percent=62.2, used=10445340672, free=6359699456)
2023-02-13 10:48:02,702:INFO:Physical Core: 4
2023-02-13 10:48:02,702:INFO:Logical Core: 8
2023-02-13 10:48:02,702:INFO:Checking libraries
2023-02-13 10:48:02,702:INFO:System:
2023-02-13 10:48:02,702:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 10:48:02,702:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 10:48:02,702:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 10:48:02,702:INFO:PyCaret required dependencies:
2023-02-13 10:48:02,702:INFO:                 pip: 23.0
2023-02-13 10:48:02,702:INFO:          setuptools: 58.1.0
2023-02-13 10:48:02,702:INFO:             pycaret: 3.0.0rc8
2023-02-13 10:48:02,702:INFO:             IPython: 8.7.0
2023-02-13 10:48:02,702:INFO:          ipywidgets: 8.0.4
2023-02-13 10:48:02,702:INFO:                tqdm: 4.64.1
2023-02-13 10:48:02,702:INFO:               numpy: 1.22.1
2023-02-13 10:48:02,702:INFO:              pandas: 1.5.2
2023-02-13 10:48:02,702:INFO:              jinja2: 3.1.2
2023-02-13 10:48:02,702:INFO:               scipy: 1.5.4
2023-02-13 10:48:02,702:INFO:              joblib: 1.2.0
2023-02-13 10:48:02,702:INFO:             sklearn: 1.1.3
2023-02-13 10:48:02,702:INFO:                pyod: 1.0.7
2023-02-13 10:48:02,702:INFO:            imblearn: 0.10.1
2023-02-13 10:48:02,702:INFO:   category_encoders: 2.6.0
2023-02-13 10:48:02,702:INFO:            lightgbm: 3.3.4
2023-02-13 10:48:02,702:INFO:               numba: 0.56.4
2023-02-13 10:48:02,702:INFO:            requests: 2.28.1
2023-02-13 10:48:02,702:INFO:          matplotlib: 3.6.2
2023-02-13 10:48:02,702:INFO:          scikitplot: 0.3.7
2023-02-13 10:48:02,702:INFO:         yellowbrick: 1.5
2023-02-13 10:48:02,702:INFO:              plotly: 5.11.0
2023-02-13 10:48:02,702:INFO:             kaleido: 0.2.1
2023-02-13 10:48:02,702:INFO:         statsmodels: 0.13.5
2023-02-13 10:48:02,702:INFO:              sktime: 0.15.1
2023-02-13 10:48:02,702:INFO:               tbats: 1.1.2
2023-02-13 10:48:02,702:INFO:            pmdarima: 2.0.2
2023-02-13 10:48:02,702:INFO:              psutil: 5.9.4
2023-02-13 10:48:02,702:INFO:PyCaret optional dependencies:
2023-02-13 10:48:02,702:INFO:                shap: 0.41.0
2023-02-13 10:48:02,702:INFO:           interpret: 0.3.0
2023-02-13 10:48:02,702:INFO:                umap: Not installed
2023-02-13 10:48:02,702:INFO:    pandas_profiling: 3.6.2
2023-02-13 10:48:02,702:INFO:  explainerdashboard: Not installed
2023-02-13 10:48:02,702:INFO:             autoviz: Not installed
2023-02-13 10:48:02,702:INFO:           fairlearn: Not installed
2023-02-13 10:48:02,702:INFO:             xgboost: 1.7.3
2023-02-13 10:48:02,702:INFO:            catboost: Not installed
2023-02-13 10:48:02,702:INFO:              kmodes: Not installed
2023-02-13 10:48:02,702:INFO:             mlxtend: Not installed
2023-02-13 10:48:02,702:INFO:       statsforecast: Not installed
2023-02-13 10:48:02,702:INFO:        tune_sklearn: Not installed
2023-02-13 10:48:02,702:INFO:                 ray: Not installed
2023-02-13 10:48:02,702:INFO:            hyperopt: Not installed
2023-02-13 10:48:02,702:INFO:              optuna: Not installed
2023-02-13 10:48:02,702:INFO:               skopt: Not installed
2023-02-13 10:48:02,702:INFO:              mlflow: Not installed
2023-02-13 10:48:02,702:INFO:              gradio: Not installed
2023-02-13 10:48:02,702:INFO:             fastapi: Not installed
2023-02-13 10:48:02,702:INFO:             uvicorn: Not installed
2023-02-13 10:48:02,702:INFO:              m2cgen: Not installed
2023-02-13 10:48:02,702:INFO:           evidently: Not installed
2023-02-13 10:48:02,702:INFO:                nltk: 3.8
2023-02-13 10:48:02,702:INFO:            pyLDAvis: Not installed
2023-02-13 10:48:02,702:INFO:              gensim: Not installed
2023-02-13 10:48:02,702:INFO:               spacy: Not installed
2023-02-13 10:48:02,702:INFO:           wordcloud: 1.8.2.2
2023-02-13 10:48:02,702:INFO:            textblob: Not installed
2023-02-13 10:48:02,702:INFO:               fugue: Not installed
2023-02-13 10:48:02,702:INFO:           streamlit: 1.16.0
2023-02-13 10:48:02,702:INFO:             prophet: Not installed
2023-02-13 10:48:02,702:INFO:None
2023-02-13 10:48:02,702:INFO:Set up data.
2023-02-13 10:48:02,710:INFO:Set up train/test split.
2023-02-13 10:48:02,716:INFO:Set up index.
2023-02-13 10:48:02,716:INFO:Set up folding strategy.
2023-02-13 10:48:02,716:INFO:Assigning column types.
2023-02-13 10:48:02,718:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 10:48:02,718:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:48:02,726:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:02,730:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:02,794:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:02,842:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:02,842:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:02,851:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:02,852:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:48:02,852:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:02,859:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:02,917:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:02,957:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:02,957:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:02,957:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:02,964:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 10:48:02,968:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:02,971:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,027:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,067:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,067:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:03,073:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:03,073:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,081:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,134:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,172:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,172:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:03,180:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:03,180:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 10:48:03,189:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,251:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,288:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,288:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:03,296:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:03,304:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,401:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,441:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,441:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:03,441:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:03,441:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 10:48:03,516:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,557:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,558:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:03,558:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:03,624:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,664:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,664:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:03,667:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:03,667:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 10:48:03,762:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,800:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:03,805:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:03,883:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:03,952:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:03,954:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:03,954:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 10:48:04,116:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:04,120:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:04,231:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:04,233:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:04,233:INFO:Preparing preprocessing pipeline...
2023-02-13 10:48:04,233:INFO:Set up column name cleaning.
2023-02-13 10:48:04,233:INFO:Set up simple imputation.
2023-02-13 10:48:04,274:INFO:Finished creating preprocessing pipeline.
2023-02-13 10:48:04,281:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 10:48:04,281:INFO:Creating final display dataframe.
2023-02-13 10:48:04,760:INFO:Setup _display_container:                     Description             Value
0                    Session id                80
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              d7f2
2023-02-13 10:48:05,020:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:05,032:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:05,208:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:05,208:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:05,217:INFO:setup() successfully completed in 2.52s...............
2023-02-13 10:48:05,217:INFO:Initializing compare_models()
2023-02-13 10:48:05,217:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 10:48:05,217:INFO:Checking exceptions
2023-02-13 10:48:05,217:INFO:Preparing display monitor
2023-02-13 10:48:05,273:INFO:Initializing Linear Regression
2023-02-13 10:48:05,274:INFO:Total runtime is 1.033941904703776e-05 minutes
2023-02-13 10:48:05,279:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:05,279:INFO:Initializing create_model()
2023-02-13 10:48:05,279:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:05,279:INFO:Checking exceptions
2023-02-13 10:48:05,279:INFO:Importing libraries
2023-02-13 10:48:05,279:INFO:Copying training dataset
2023-02-13 10:48:05,283:INFO:Defining folds
2023-02-13 10:48:05,283:INFO:Declaring metric variables
2023-02-13 10:48:05,291:INFO:Importing untrained model
2023-02-13 10:48:05,299:INFO:Linear Regression Imported successfully
2023-02-13 10:48:05,314:INFO:Starting cross validation
2023-02-13 10:48:05,317:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:05,834:INFO:Calculating mean and std
2023-02-13 10:48:05,834:INFO:Creating metrics dataframe
2023-02-13 10:48:05,839:INFO:Uploading results into container
2023-02-13 10:48:05,839:INFO:Uploading model into container now
2023-02-13 10:48:05,839:INFO:_master_model_container: 1
2023-02-13 10:48:05,839:INFO:_display_container: 2
2023-02-13 10:48:05,839:INFO:LinearRegression(n_jobs=-1)
2023-02-13 10:48:05,839:INFO:create_model() successfully completed......................................
2023-02-13 10:48:05,938:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:05,938:INFO:Creating metrics dataframe
2023-02-13 10:48:05,951:INFO:Initializing Lasso Regression
2023-02-13 10:48:05,951:INFO:Total runtime is 0.011306452751159669 minutes
2023-02-13 10:48:05,955:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:05,955:INFO:Initializing create_model()
2023-02-13 10:48:05,955:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:05,955:INFO:Checking exceptions
2023-02-13 10:48:05,955:INFO:Importing libraries
2023-02-13 10:48:05,955:INFO:Copying training dataset
2023-02-13 10:48:05,956:INFO:Defining folds
2023-02-13 10:48:05,956:INFO:Declaring metric variables
2023-02-13 10:48:05,958:INFO:Importing untrained model
2023-02-13 10:48:05,961:INFO:Lasso Regression Imported successfully
2023-02-13 10:48:05,969:INFO:Starting cross validation
2023-02-13 10:48:05,971:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:06,140:INFO:Calculating mean and std
2023-02-13 10:48:06,140:INFO:Creating metrics dataframe
2023-02-13 10:48:06,140:INFO:Uploading results into container
2023-02-13 10:48:06,148:INFO:Uploading model into container now
2023-02-13 10:48:06,149:INFO:_master_model_container: 2
2023-02-13 10:48:06,149:INFO:_display_container: 2
2023-02-13 10:48:06,149:INFO:Lasso(random_state=80)
2023-02-13 10:48:06,149:INFO:create_model() successfully completed......................................
2023-02-13 10:48:06,238:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:06,238:INFO:Creating metrics dataframe
2023-02-13 10:48:06,250:INFO:Initializing Ridge Regression
2023-02-13 10:48:06,250:INFO:Total runtime is 0.016288932164510092 minutes
2023-02-13 10:48:06,252:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:06,254:INFO:Initializing create_model()
2023-02-13 10:48:06,254:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:06,254:INFO:Checking exceptions
2023-02-13 10:48:06,254:INFO:Importing libraries
2023-02-13 10:48:06,254:INFO:Copying training dataset
2023-02-13 10:48:06,257:INFO:Defining folds
2023-02-13 10:48:06,257:INFO:Declaring metric variables
2023-02-13 10:48:06,261:INFO:Importing untrained model
2023-02-13 10:48:06,264:INFO:Ridge Regression Imported successfully
2023-02-13 10:48:06,271:INFO:Starting cross validation
2023-02-13 10:48:06,274:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:06,432:INFO:Calculating mean and std
2023-02-13 10:48:06,432:INFO:Creating metrics dataframe
2023-02-13 10:48:06,438:INFO:Uploading results into container
2023-02-13 10:48:06,438:INFO:Uploading model into container now
2023-02-13 10:48:06,438:INFO:_master_model_container: 3
2023-02-13 10:48:06,438:INFO:_display_container: 2
2023-02-13 10:48:06,438:INFO:Ridge(random_state=80)
2023-02-13 10:48:06,438:INFO:create_model() successfully completed......................................
2023-02-13 10:48:06,535:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:06,536:INFO:Creating metrics dataframe
2023-02-13 10:48:06,543:INFO:Initializing Elastic Net
2023-02-13 10:48:06,543:INFO:Total runtime is 0.02117160161336263 minutes
2023-02-13 10:48:06,545:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:06,545:INFO:Initializing create_model()
2023-02-13 10:48:06,545:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:06,545:INFO:Checking exceptions
2023-02-13 10:48:06,545:INFO:Importing libraries
2023-02-13 10:48:06,545:INFO:Copying training dataset
2023-02-13 10:48:06,552:INFO:Defining folds
2023-02-13 10:48:06,552:INFO:Declaring metric variables
2023-02-13 10:48:06,555:INFO:Importing untrained model
2023-02-13 10:48:06,559:INFO:Elastic Net Imported successfully
2023-02-13 10:48:06,561:INFO:Starting cross validation
2023-02-13 10:48:06,568:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:06,724:INFO:Calculating mean and std
2023-02-13 10:48:06,724:INFO:Creating metrics dataframe
2023-02-13 10:48:06,724:INFO:Uploading results into container
2023-02-13 10:48:06,724:INFO:Uploading model into container now
2023-02-13 10:48:06,724:INFO:_master_model_container: 4
2023-02-13 10:48:06,730:INFO:_display_container: 2
2023-02-13 10:48:06,730:INFO:ElasticNet(random_state=80)
2023-02-13 10:48:06,730:INFO:create_model() successfully completed......................................
2023-02-13 10:48:06,820:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:06,820:INFO:Creating metrics dataframe
2023-02-13 10:48:06,837:INFO:Initializing Least Angle Regression
2023-02-13 10:48:06,837:INFO:Total runtime is 0.026061463356018066 minutes
2023-02-13 10:48:06,841:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:06,841:INFO:Initializing create_model()
2023-02-13 10:48:06,841:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:06,841:INFO:Checking exceptions
2023-02-13 10:48:06,841:INFO:Importing libraries
2023-02-13 10:48:06,842:INFO:Copying training dataset
2023-02-13 10:48:06,845:INFO:Defining folds
2023-02-13 10:48:06,845:INFO:Declaring metric variables
2023-02-13 10:48:06,846:INFO:Importing untrained model
2023-02-13 10:48:06,854:INFO:Least Angle Regression Imported successfully
2023-02-13 10:48:06,858:INFO:Starting cross validation
2023-02-13 10:48:06,860:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:06,897:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:06,912:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:06,924:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:06,936:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:06,944:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:06,958:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:06,966:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:06,977:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:06,985:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:06,994:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:07,014:INFO:Calculating mean and std
2023-02-13 10:48:07,018:INFO:Creating metrics dataframe
2023-02-13 10:48:07,018:INFO:Uploading results into container
2023-02-13 10:48:07,018:INFO:Uploading model into container now
2023-02-13 10:48:07,018:INFO:_master_model_container: 5
2023-02-13 10:48:07,018:INFO:_display_container: 2
2023-02-13 10:48:07,018:INFO:Lars(random_state=80)
2023-02-13 10:48:07,018:INFO:create_model() successfully completed......................................
2023-02-13 10:48:07,139:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:07,141:INFO:Creating metrics dataframe
2023-02-13 10:48:07,157:INFO:Initializing Lasso Least Angle Regression
2023-02-13 10:48:07,165:INFO:Total runtime is 0.031398836771647134 minutes
2023-02-13 10:48:07,173:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:07,173:INFO:Initializing create_model()
2023-02-13 10:48:07,173:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:07,173:INFO:Checking exceptions
2023-02-13 10:48:07,173:INFO:Importing libraries
2023-02-13 10:48:07,173:INFO:Copying training dataset
2023-02-13 10:48:07,181:INFO:Defining folds
2023-02-13 10:48:07,183:INFO:Declaring metric variables
2023-02-13 10:48:07,192:INFO:Importing untrained model
2023-02-13 10:48:07,202:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 10:48:07,214:INFO:Starting cross validation
2023-02-13 10:48:07,214:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:07,319:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:07,332:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:07,341:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:07,353:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:07,365:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:07,376:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:07,388:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:07,401:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:07,412:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:07,425:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:07,435:INFO:Calculating mean and std
2023-02-13 10:48:07,435:INFO:Creating metrics dataframe
2023-02-13 10:48:07,443:INFO:Uploading results into container
2023-02-13 10:48:07,443:INFO:Uploading model into container now
2023-02-13 10:48:07,443:INFO:_master_model_container: 6
2023-02-13 10:48:07,443:INFO:_display_container: 2
2023-02-13 10:48:07,443:INFO:LassoLars(random_state=80)
2023-02-13 10:48:07,443:INFO:create_model() successfully completed......................................
2023-02-13 10:48:07,580:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:07,580:INFO:Creating metrics dataframe
2023-02-13 10:48:07,611:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 10:48:07,611:INFO:Total runtime is 0.0389639933904012 minutes
2023-02-13 10:48:07,619:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:07,619:INFO:Initializing create_model()
2023-02-13 10:48:07,619:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:07,619:INFO:Checking exceptions
2023-02-13 10:48:07,621:INFO:Importing libraries
2023-02-13 10:48:07,621:INFO:Copying training dataset
2023-02-13 10:48:07,627:INFO:Defining folds
2023-02-13 10:48:07,627:INFO:Declaring metric variables
2023-02-13 10:48:07,637:INFO:Importing untrained model
2023-02-13 10:48:07,649:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 10:48:07,662:INFO:Starting cross validation
2023-02-13 10:48:07,668:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:07,744:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:07,761:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:07,777:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:07,796:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:07,810:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:07,826:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:07,840:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:07,856:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:07,868:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:07,883:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:07,900:INFO:Calculating mean and std
2023-02-13 10:48:07,906:INFO:Creating metrics dataframe
2023-02-13 10:48:07,908:INFO:Uploading results into container
2023-02-13 10:48:07,908:INFO:Uploading model into container now
2023-02-13 10:48:07,913:INFO:_master_model_container: 7
2023-02-13 10:48:07,913:INFO:_display_container: 2
2023-02-13 10:48:07,913:INFO:OrthogonalMatchingPursuit()
2023-02-13 10:48:07,913:INFO:create_model() successfully completed......................................
2023-02-13 10:48:08,035:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:08,035:INFO:Creating metrics dataframe
2023-02-13 10:48:08,039:INFO:Initializing Bayesian Ridge
2023-02-13 10:48:08,039:INFO:Total runtime is 0.0461017370223999 minutes
2023-02-13 10:48:08,043:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:08,043:INFO:Initializing create_model()
2023-02-13 10:48:08,043:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:08,047:INFO:Checking exceptions
2023-02-13 10:48:08,047:INFO:Importing libraries
2023-02-13 10:48:08,047:INFO:Copying training dataset
2023-02-13 10:48:08,050:INFO:Defining folds
2023-02-13 10:48:08,050:INFO:Declaring metric variables
2023-02-13 10:48:08,054:INFO:Importing untrained model
2023-02-13 10:48:08,055:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:48:08,063:INFO:Starting cross validation
2023-02-13 10:48:08,066:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:08,220:INFO:Calculating mean and std
2023-02-13 10:48:08,220:INFO:Creating metrics dataframe
2023-02-13 10:48:08,220:INFO:Uploading results into container
2023-02-13 10:48:08,220:INFO:Uploading model into container now
2023-02-13 10:48:08,220:INFO:_master_model_container: 8
2023-02-13 10:48:08,220:INFO:_display_container: 2
2023-02-13 10:48:08,220:INFO:BayesianRidge()
2023-02-13 10:48:08,220:INFO:create_model() successfully completed......................................
2023-02-13 10:48:08,317:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:08,325:INFO:Creating metrics dataframe
2023-02-13 10:48:08,341:INFO:Initializing Passive Aggressive Regressor
2023-02-13 10:48:08,341:INFO:Total runtime is 0.05114163955052693 minutes
2023-02-13 10:48:08,349:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:08,349:INFO:Initializing create_model()
2023-02-13 10:48:08,349:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:08,349:INFO:Checking exceptions
2023-02-13 10:48:08,349:INFO:Importing libraries
2023-02-13 10:48:08,349:INFO:Copying training dataset
2023-02-13 10:48:08,357:INFO:Defining folds
2023-02-13 10:48:08,357:INFO:Declaring metric variables
2023-02-13 10:48:08,365:INFO:Importing untrained model
2023-02-13 10:48:08,373:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 10:48:08,390:INFO:Starting cross validation
2023-02-13 10:48:08,394:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:08,562:INFO:Calculating mean and std
2023-02-13 10:48:08,562:INFO:Creating metrics dataframe
2023-02-13 10:48:08,562:INFO:Uploading results into container
2023-02-13 10:48:08,562:INFO:Uploading model into container now
2023-02-13 10:48:08,570:INFO:_master_model_container: 9
2023-02-13 10:48:08,570:INFO:_display_container: 2
2023-02-13 10:48:08,570:INFO:PassiveAggressiveRegressor(random_state=80)
2023-02-13 10:48:08,570:INFO:create_model() successfully completed......................................
2023-02-13 10:48:08,706:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:08,706:INFO:Creating metrics dataframe
2023-02-13 10:48:08,722:INFO:Initializing Huber Regressor
2023-02-13 10:48:08,722:INFO:Total runtime is 0.057478149731953934 minutes
2023-02-13 10:48:08,730:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:08,730:INFO:Initializing create_model()
2023-02-13 10:48:08,730:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:08,730:INFO:Checking exceptions
2023-02-13 10:48:08,730:INFO:Importing libraries
2023-02-13 10:48:08,730:INFO:Copying training dataset
2023-02-13 10:48:08,734:INFO:Defining folds
2023-02-13 10:48:08,734:INFO:Declaring metric variables
2023-02-13 10:48:08,738:INFO:Importing untrained model
2023-02-13 10:48:08,746:INFO:Huber Regressor Imported successfully
2023-02-13 10:48:08,754:INFO:Starting cross validation
2023-02-13 10:48:08,754:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:08,838:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:08,839:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:08,848:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:08,860:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:08,876:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:08,889:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:08,900:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:08,908:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:08,921:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:08,921:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:08,938:INFO:Calculating mean and std
2023-02-13 10:48:08,938:INFO:Creating metrics dataframe
2023-02-13 10:48:08,941:INFO:Uploading results into container
2023-02-13 10:48:08,941:INFO:Uploading model into container now
2023-02-13 10:48:08,941:INFO:_master_model_container: 10
2023-02-13 10:48:08,941:INFO:_display_container: 2
2023-02-13 10:48:08,941:INFO:HuberRegressor()
2023-02-13 10:48:08,944:INFO:create_model() successfully completed......................................
2023-02-13 10:48:09,038:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:09,038:INFO:Creating metrics dataframe
2023-02-13 10:48:09,046:INFO:Initializing K Neighbors Regressor
2023-02-13 10:48:09,046:INFO:Total runtime is 0.06288253466288249 minutes
2023-02-13 10:48:09,046:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:09,046:INFO:Initializing create_model()
2023-02-13 10:48:09,046:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:09,046:INFO:Checking exceptions
2023-02-13 10:48:09,046:INFO:Importing libraries
2023-02-13 10:48:09,046:INFO:Copying training dataset
2023-02-13 10:48:09,046:INFO:Defining folds
2023-02-13 10:48:09,046:INFO:Declaring metric variables
2023-02-13 10:48:09,056:INFO:Importing untrained model
2023-02-13 10:48:09,056:INFO:K Neighbors Regressor Imported successfully
2023-02-13 10:48:09,065:INFO:Starting cross validation
2023-02-13 10:48:09,071:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:09,283:INFO:Calculating mean and std
2023-02-13 10:48:09,283:INFO:Creating metrics dataframe
2023-02-13 10:48:09,283:INFO:Uploading results into container
2023-02-13 10:48:09,283:INFO:Uploading model into container now
2023-02-13 10:48:09,283:INFO:_master_model_container: 11
2023-02-13 10:48:09,289:INFO:_display_container: 2
2023-02-13 10:48:09,289:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:48:09,289:INFO:create_model() successfully completed......................................
2023-02-13 10:48:09,378:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:09,378:INFO:Creating metrics dataframe
2023-02-13 10:48:09,394:INFO:Initializing Decision Tree Regressor
2023-02-13 10:48:09,394:INFO:Total runtime is 0.06868323882420858 minutes
2023-02-13 10:48:09,394:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:09,394:INFO:Initializing create_model()
2023-02-13 10:48:09,394:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:09,394:INFO:Checking exceptions
2023-02-13 10:48:09,394:INFO:Importing libraries
2023-02-13 10:48:09,394:INFO:Copying training dataset
2023-02-13 10:48:09,402:INFO:Defining folds
2023-02-13 10:48:09,402:INFO:Declaring metric variables
2023-02-13 10:48:09,402:INFO:Importing untrained model
2023-02-13 10:48:09,410:INFO:Decision Tree Regressor Imported successfully
2023-02-13 10:48:09,418:INFO:Starting cross validation
2023-02-13 10:48:09,418:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:09,570:INFO:Calculating mean and std
2023-02-13 10:48:09,570:INFO:Creating metrics dataframe
2023-02-13 10:48:09,580:INFO:Uploading results into container
2023-02-13 10:48:09,580:INFO:Uploading model into container now
2023-02-13 10:48:09,580:INFO:_master_model_container: 12
2023-02-13 10:48:09,580:INFO:_display_container: 2
2023-02-13 10:48:09,580:INFO:DecisionTreeRegressor(random_state=80)
2023-02-13 10:48:09,580:INFO:create_model() successfully completed......................................
2023-02-13 10:48:09,675:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:09,675:INFO:Creating metrics dataframe
2023-02-13 10:48:09,683:INFO:Initializing Random Forest Regressor
2023-02-13 10:48:09,683:INFO:Total runtime is 0.07349813381830853 minutes
2023-02-13 10:48:09,691:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:09,691:INFO:Initializing create_model()
2023-02-13 10:48:09,691:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:09,691:INFO:Checking exceptions
2023-02-13 10:48:09,691:INFO:Importing libraries
2023-02-13 10:48:09,691:INFO:Copying training dataset
2023-02-13 10:48:09,691:INFO:Defining folds
2023-02-13 10:48:09,691:INFO:Declaring metric variables
2023-02-13 10:48:09,699:INFO:Importing untrained model
2023-02-13 10:48:09,699:INFO:Random Forest Regressor Imported successfully
2023-02-13 10:48:09,707:INFO:Starting cross validation
2023-02-13 10:48:09,707:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:10,211:INFO:Calculating mean and std
2023-02-13 10:48:10,214:INFO:Creating metrics dataframe
2023-02-13 10:48:10,214:INFO:Uploading results into container
2023-02-13 10:48:10,214:INFO:Uploading model into container now
2023-02-13 10:48:10,214:INFO:_master_model_container: 13
2023-02-13 10:48:10,214:INFO:_display_container: 2
2023-02-13 10:48:10,214:INFO:RandomForestRegressor(n_jobs=-1, random_state=80)
2023-02-13 10:48:10,214:INFO:create_model() successfully completed......................................
2023-02-13 10:48:10,328:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:10,328:INFO:Creating metrics dataframe
2023-02-13 10:48:10,348:INFO:Initializing Extra Trees Regressor
2023-02-13 10:48:10,348:INFO:Total runtime is 0.08458777268727621 minutes
2023-02-13 10:48:10,356:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:10,358:INFO:Initializing create_model()
2023-02-13 10:48:10,358:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:10,358:INFO:Checking exceptions
2023-02-13 10:48:10,358:INFO:Importing libraries
2023-02-13 10:48:10,358:INFO:Copying training dataset
2023-02-13 10:48:10,365:INFO:Defining folds
2023-02-13 10:48:10,367:INFO:Declaring metric variables
2023-02-13 10:48:10,369:INFO:Importing untrained model
2023-02-13 10:48:10,385:INFO:Extra Trees Regressor Imported successfully
2023-02-13 10:48:10,406:INFO:Starting cross validation
2023-02-13 10:48:10,406:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:10,859:INFO:Calculating mean and std
2023-02-13 10:48:10,859:INFO:Creating metrics dataframe
2023-02-13 10:48:10,864:INFO:Uploading results into container
2023-02-13 10:48:10,865:INFO:Uploading model into container now
2023-02-13 10:48:10,865:INFO:_master_model_container: 14
2023-02-13 10:48:10,865:INFO:_display_container: 2
2023-02-13 10:48:10,865:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=80)
2023-02-13 10:48:10,865:INFO:create_model() successfully completed......................................
2023-02-13 10:48:10,965:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:10,965:INFO:Creating metrics dataframe
2023-02-13 10:48:10,973:INFO:Initializing AdaBoost Regressor
2023-02-13 10:48:10,973:INFO:Total runtime is 0.0950077772140503 minutes
2023-02-13 10:48:10,976:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:10,976:INFO:Initializing create_model()
2023-02-13 10:48:10,976:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:10,976:INFO:Checking exceptions
2023-02-13 10:48:10,980:INFO:Importing libraries
2023-02-13 10:48:10,980:INFO:Copying training dataset
2023-02-13 10:48:10,983:INFO:Defining folds
2023-02-13 10:48:10,983:INFO:Declaring metric variables
2023-02-13 10:48:10,984:INFO:Importing untrained model
2023-02-13 10:48:10,990:INFO:AdaBoost Regressor Imported successfully
2023-02-13 10:48:10,995:INFO:Starting cross validation
2023-02-13 10:48:10,998:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:11,251:INFO:Calculating mean and std
2023-02-13 10:48:11,251:INFO:Creating metrics dataframe
2023-02-13 10:48:11,259:INFO:Uploading results into container
2023-02-13 10:48:11,260:INFO:Uploading model into container now
2023-02-13 10:48:11,260:INFO:_master_model_container: 15
2023-02-13 10:48:11,260:INFO:_display_container: 2
2023-02-13 10:48:11,260:INFO:AdaBoostRegressor(random_state=80)
2023-02-13 10:48:11,260:INFO:create_model() successfully completed......................................
2023-02-13 10:48:11,359:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:11,359:INFO:Creating metrics dataframe
2023-02-13 10:48:11,365:INFO:Initializing Gradient Boosting Regressor
2023-02-13 10:48:11,365:INFO:Total runtime is 0.10153445005416871 minutes
2023-02-13 10:48:11,373:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:11,373:INFO:Initializing create_model()
2023-02-13 10:48:11,373:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:11,373:INFO:Checking exceptions
2023-02-13 10:48:11,373:INFO:Importing libraries
2023-02-13 10:48:11,373:INFO:Copying training dataset
2023-02-13 10:48:11,376:INFO:Defining folds
2023-02-13 10:48:11,376:INFO:Declaring metric variables
2023-02-13 10:48:11,381:INFO:Importing untrained model
2023-02-13 10:48:11,386:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 10:48:11,391:INFO:Starting cross validation
2023-02-13 10:48:11,394:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:11,645:INFO:Calculating mean and std
2023-02-13 10:48:11,649:INFO:Creating metrics dataframe
2023-02-13 10:48:11,650:INFO:Uploading results into container
2023-02-13 10:48:11,650:INFO:Uploading model into container now
2023-02-13 10:48:11,650:INFO:_master_model_container: 16
2023-02-13 10:48:11,650:INFO:_display_container: 2
2023-02-13 10:48:11,653:INFO:GradientBoostingRegressor(random_state=80)
2023-02-13 10:48:11,653:INFO:create_model() successfully completed......................................
2023-02-13 10:48:11,746:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:11,746:INFO:Creating metrics dataframe
2023-02-13 10:48:11,749:INFO:Initializing Extreme Gradient Boosting
2023-02-13 10:48:11,749:INFO:Total runtime is 0.10793378750483196 minutes
2023-02-13 10:48:11,758:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:11,758:INFO:Initializing create_model()
2023-02-13 10:48:11,758:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:11,758:INFO:Checking exceptions
2023-02-13 10:48:11,758:INFO:Importing libraries
2023-02-13 10:48:11,758:INFO:Copying training dataset
2023-02-13 10:48:11,762:INFO:Defining folds
2023-02-13 10:48:11,762:INFO:Declaring metric variables
2023-02-13 10:48:11,768:INFO:Importing untrained model
2023-02-13 10:48:11,772:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 10:48:11,775:INFO:Starting cross validation
2023-02-13 10:48:11,780:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:12,012:INFO:Calculating mean and std
2023-02-13 10:48:12,012:INFO:Creating metrics dataframe
2023-02-13 10:48:12,012:INFO:Uploading results into container
2023-02-13 10:48:12,012:INFO:Uploading model into container now
2023-02-13 10:48:12,018:INFO:_master_model_container: 17
2023-02-13 10:48:12,018:INFO:_display_container: 2
2023-02-13 10:48:12,018:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=80, ...)
2023-02-13 10:48:12,018:INFO:create_model() successfully completed......................................
2023-02-13 10:48:12,109:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:12,109:INFO:Creating metrics dataframe
2023-02-13 10:48:12,127:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 10:48:12,127:INFO:Total runtime is 0.1142356038093567 minutes
2023-02-13 10:48:12,130:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:12,130:INFO:Initializing create_model()
2023-02-13 10:48:12,130:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:12,130:INFO:Checking exceptions
2023-02-13 10:48:12,130:INFO:Importing libraries
2023-02-13 10:48:12,130:INFO:Copying training dataset
2023-02-13 10:48:12,134:INFO:Defining folds
2023-02-13 10:48:12,134:INFO:Declaring metric variables
2023-02-13 10:48:12,136:INFO:Importing untrained model
2023-02-13 10:48:12,140:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 10:48:12,149:INFO:Starting cross validation
2023-02-13 10:48:12,149:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:12,320:INFO:Calculating mean and std
2023-02-13 10:48:12,320:INFO:Creating metrics dataframe
2023-02-13 10:48:12,325:INFO:Uploading results into container
2023-02-13 10:48:12,325:INFO:Uploading model into container now
2023-02-13 10:48:12,328:INFO:_master_model_container: 18
2023-02-13 10:48:12,328:INFO:_display_container: 2
2023-02-13 10:48:12,328:INFO:LGBMRegressor(random_state=80)
2023-02-13 10:48:12,328:INFO:create_model() successfully completed......................................
2023-02-13 10:48:12,416:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:12,416:INFO:Creating metrics dataframe
2023-02-13 10:48:12,434:INFO:Initializing Dummy Regressor
2023-02-13 10:48:12,434:INFO:Total runtime is 0.11935751835505168 minutes
2023-02-13 10:48:12,438:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:12,438:INFO:Initializing create_model()
2023-02-13 10:48:12,438:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93BA64C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:12,439:INFO:Checking exceptions
2023-02-13 10:48:12,439:INFO:Importing libraries
2023-02-13 10:48:12,439:INFO:Copying training dataset
2023-02-13 10:48:12,441:INFO:Defining folds
2023-02-13 10:48:12,441:INFO:Declaring metric variables
2023-02-13 10:48:12,444:INFO:Importing untrained model
2023-02-13 10:48:12,449:INFO:Dummy Regressor Imported successfully
2023-02-13 10:48:12,456:INFO:Starting cross validation
2023-02-13 10:48:12,457:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:12,609:INFO:Calculating mean and std
2023-02-13 10:48:12,609:INFO:Creating metrics dataframe
2023-02-13 10:48:12,615:INFO:Uploading results into container
2023-02-13 10:48:12,615:INFO:Uploading model into container now
2023-02-13 10:48:12,615:INFO:_master_model_container: 19
2023-02-13 10:48:12,615:INFO:_display_container: 2
2023-02-13 10:48:12,615:INFO:DummyRegressor()
2023-02-13 10:48:12,615:INFO:create_model() successfully completed......................................
2023-02-13 10:48:12,710:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:12,710:INFO:Creating metrics dataframe
2023-02-13 10:48:12,735:INFO:Initializing create_model()
2023-02-13 10:48:12,735:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A938176D0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:12,738:INFO:Checking exceptions
2023-02-13 10:48:12,740:INFO:Importing libraries
2023-02-13 10:48:12,740:INFO:Copying training dataset
2023-02-13 10:48:12,740:INFO:Defining folds
2023-02-13 10:48:12,743:INFO:Declaring metric variables
2023-02-13 10:48:12,743:INFO:Importing untrained model
2023-02-13 10:48:12,743:INFO:Declaring custom model
2023-02-13 10:48:12,743:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:48:12,743:INFO:Cross validation set to False
2023-02-13 10:48:12,743:INFO:Fitting Model
2023-02-13 10:48:12,775:INFO:BayesianRidge()
2023-02-13 10:48:12,775:INFO:create_model() successfully completed......................................
2023-02-13 10:48:12,907:INFO:_master_model_container: 19
2023-02-13 10:48:12,907:INFO:_display_container: 2
2023-02-13 10:48:12,907:INFO:BayesianRidge()
2023-02-13 10:48:12,907:INFO:compare_models() successfully completed......................................
2023-02-13 10:48:26,655:INFO:PyCaret RegressionExperiment
2023-02-13 10:48:26,655:INFO:Logging name: reg-default-name
2023-02-13 10:48:26,655:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 10:48:26,655:INFO:version 3.0.0.rc8
2023-02-13 10:48:26,655:INFO:Initializing setup()
2023-02-13 10:48:26,655:INFO:self.USI: 1e30
2023-02-13 10:48:26,655:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 10:48:26,655:INFO:Checking environment
2023-02-13 10:48:26,655:INFO:python_version: 3.9.13
2023-02-13 10:48:26,655:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 10:48:26,655:INFO:machine: AMD64
2023-02-13 10:48:26,655:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 10:48:26,661:INFO:Memory: svmem(total=16805040128, available=6352764928, percent=62.2, used=10452275200, free=6352764928)
2023-02-13 10:48:26,662:INFO:Physical Core: 4
2023-02-13 10:48:26,662:INFO:Logical Core: 8
2023-02-13 10:48:26,662:INFO:Checking libraries
2023-02-13 10:48:26,662:INFO:System:
2023-02-13 10:48:26,662:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 10:48:26,662:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 10:48:26,662:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 10:48:26,662:INFO:PyCaret required dependencies:
2023-02-13 10:48:26,662:INFO:                 pip: 23.0
2023-02-13 10:48:26,662:INFO:          setuptools: 58.1.0
2023-02-13 10:48:26,662:INFO:             pycaret: 3.0.0rc8
2023-02-13 10:48:26,662:INFO:             IPython: 8.7.0
2023-02-13 10:48:26,662:INFO:          ipywidgets: 8.0.4
2023-02-13 10:48:26,662:INFO:                tqdm: 4.64.1
2023-02-13 10:48:26,662:INFO:               numpy: 1.22.1
2023-02-13 10:48:26,662:INFO:              pandas: 1.5.2
2023-02-13 10:48:26,662:INFO:              jinja2: 3.1.2
2023-02-13 10:48:26,662:INFO:               scipy: 1.5.4
2023-02-13 10:48:26,662:INFO:              joblib: 1.2.0
2023-02-13 10:48:26,662:INFO:             sklearn: 1.1.3
2023-02-13 10:48:26,662:INFO:                pyod: 1.0.7
2023-02-13 10:48:26,662:INFO:            imblearn: 0.10.1
2023-02-13 10:48:26,662:INFO:   category_encoders: 2.6.0
2023-02-13 10:48:26,662:INFO:            lightgbm: 3.3.4
2023-02-13 10:48:26,662:INFO:               numba: 0.56.4
2023-02-13 10:48:26,662:INFO:            requests: 2.28.1
2023-02-13 10:48:26,662:INFO:          matplotlib: 3.6.2
2023-02-13 10:48:26,662:INFO:          scikitplot: 0.3.7
2023-02-13 10:48:26,662:INFO:         yellowbrick: 1.5
2023-02-13 10:48:26,662:INFO:              plotly: 5.11.0
2023-02-13 10:48:26,662:INFO:             kaleido: 0.2.1
2023-02-13 10:48:26,662:INFO:         statsmodels: 0.13.5
2023-02-13 10:48:26,663:INFO:              sktime: 0.15.1
2023-02-13 10:48:26,663:INFO:               tbats: 1.1.2
2023-02-13 10:48:26,663:INFO:            pmdarima: 2.0.2
2023-02-13 10:48:26,663:INFO:              psutil: 5.9.4
2023-02-13 10:48:26,663:INFO:PyCaret optional dependencies:
2023-02-13 10:48:26,663:INFO:                shap: 0.41.0
2023-02-13 10:48:26,663:INFO:           interpret: 0.3.0
2023-02-13 10:48:26,663:INFO:                umap: Not installed
2023-02-13 10:48:26,663:INFO:    pandas_profiling: 3.6.2
2023-02-13 10:48:26,663:INFO:  explainerdashboard: Not installed
2023-02-13 10:48:26,663:INFO:             autoviz: Not installed
2023-02-13 10:48:26,663:INFO:           fairlearn: Not installed
2023-02-13 10:48:26,663:INFO:             xgboost: 1.7.3
2023-02-13 10:48:26,663:INFO:            catboost: Not installed
2023-02-13 10:48:26,663:INFO:              kmodes: Not installed
2023-02-13 10:48:26,663:INFO:             mlxtend: Not installed
2023-02-13 10:48:26,663:INFO:       statsforecast: Not installed
2023-02-13 10:48:26,663:INFO:        tune_sklearn: Not installed
2023-02-13 10:48:26,663:INFO:                 ray: Not installed
2023-02-13 10:48:26,663:INFO:            hyperopt: Not installed
2023-02-13 10:48:26,663:INFO:              optuna: Not installed
2023-02-13 10:48:26,663:INFO:               skopt: Not installed
2023-02-13 10:48:26,663:INFO:              mlflow: Not installed
2023-02-13 10:48:26,663:INFO:              gradio: Not installed
2023-02-13 10:48:26,663:INFO:             fastapi: Not installed
2023-02-13 10:48:26,663:INFO:             uvicorn: Not installed
2023-02-13 10:48:26,663:INFO:              m2cgen: Not installed
2023-02-13 10:48:26,663:INFO:           evidently: Not installed
2023-02-13 10:48:26,663:INFO:                nltk: 3.8
2023-02-13 10:48:26,663:INFO:            pyLDAvis: Not installed
2023-02-13 10:48:26,663:INFO:              gensim: Not installed
2023-02-13 10:48:26,663:INFO:               spacy: Not installed
2023-02-13 10:48:26,663:INFO:           wordcloud: 1.8.2.2
2023-02-13 10:48:26,663:INFO:            textblob: Not installed
2023-02-13 10:48:26,663:INFO:               fugue: Not installed
2023-02-13 10:48:26,663:INFO:           streamlit: 1.16.0
2023-02-13 10:48:26,664:INFO:             prophet: Not installed
2023-02-13 10:48:26,664:INFO:None
2023-02-13 10:48:26,664:INFO:Set up data.
2023-02-13 10:48:26,668:INFO:Set up train/test split.
2023-02-13 10:48:26,671:INFO:Set up index.
2023-02-13 10:48:26,671:INFO:Set up folding strategy.
2023-02-13 10:48:26,671:INFO:Assigning column types.
2023-02-13 10:48:26,674:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 10:48:26,674:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,677:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,681:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,725:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,767:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,767:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:26,767:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:26,767:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,774:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,774:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,823:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,864:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,864:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:26,867:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:26,867:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 10:48:26,872:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,877:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,929:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,971:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,971:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:26,978:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:26,983:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:26,988:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,046:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,078:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,078:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:27,078:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:27,078:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 10:48:27,086:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,139:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,178:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,178:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:27,178:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:27,187:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,235:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,275:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,275:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:27,275:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:27,275:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 10:48:27,338:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,381:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,381:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:27,382:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:27,439:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,478:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,478:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:27,480:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:27,480:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 10:48:27,538:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,573:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:27,573:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:27,662:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:27,743:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:27,743:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:27,743:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 10:48:27,874:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:27,874:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:27,988:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:27,988:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:27,996:INFO:Preparing preprocessing pipeline...
2023-02-13 10:48:27,996:INFO:Set up column name cleaning.
2023-02-13 10:48:27,996:INFO:Set up simple imputation.
2023-02-13 10:48:28,042:INFO:Finished creating preprocessing pipeline.
2023-02-13 10:48:28,047:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 10:48:28,047:INFO:Creating final display dataframe.
2023-02-13 10:48:28,264:INFO:Setup _display_container:                     Description             Value
0                    Session id                60
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              1e30
2023-02-13 10:48:28,403:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:28,403:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:28,517:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:28,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:28,517:INFO:setup() successfully completed in 1.86s...............
2023-02-13 10:48:28,517:INFO:Initializing compare_models()
2023-02-13 10:48:28,517:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 10:48:28,517:INFO:Checking exceptions
2023-02-13 10:48:28,529:INFO:Preparing display monitor
2023-02-13 10:48:28,582:INFO:Initializing Linear Regression
2023-02-13 10:48:28,583:INFO:Total runtime is 1.4090538024902344e-05 minutes
2023-02-13 10:48:28,583:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:28,583:INFO:Initializing create_model()
2023-02-13 10:48:28,583:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:28,583:INFO:Checking exceptions
2023-02-13 10:48:28,583:INFO:Importing libraries
2023-02-13 10:48:28,583:INFO:Copying training dataset
2023-02-13 10:48:28,591:INFO:Defining folds
2023-02-13 10:48:28,591:INFO:Declaring metric variables
2023-02-13 10:48:28,601:INFO:Importing untrained model
2023-02-13 10:48:28,607:INFO:Linear Regression Imported successfully
2023-02-13 10:48:28,616:INFO:Starting cross validation
2023-02-13 10:48:28,618:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:29,060:INFO:Calculating mean and std
2023-02-13 10:48:29,060:INFO:Creating metrics dataframe
2023-02-13 10:48:29,064:INFO:Uploading results into container
2023-02-13 10:48:29,064:INFO:Uploading model into container now
2023-02-13 10:48:29,064:INFO:_master_model_container: 1
2023-02-13 10:48:29,064:INFO:_display_container: 2
2023-02-13 10:48:29,064:INFO:LinearRegression(n_jobs=-1)
2023-02-13 10:48:29,064:INFO:create_model() successfully completed......................................
2023-02-13 10:48:29,175:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:29,176:INFO:Creating metrics dataframe
2023-02-13 10:48:29,183:INFO:Initializing Lasso Regression
2023-02-13 10:48:29,183:INFO:Total runtime is 0.010025564829508463 minutes
2023-02-13 10:48:29,188:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:29,188:INFO:Initializing create_model()
2023-02-13 10:48:29,189:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:29,189:INFO:Checking exceptions
2023-02-13 10:48:29,189:INFO:Importing libraries
2023-02-13 10:48:29,189:INFO:Copying training dataset
2023-02-13 10:48:29,190:INFO:Defining folds
2023-02-13 10:48:29,191:INFO:Declaring metric variables
2023-02-13 10:48:29,194:INFO:Importing untrained model
2023-02-13 10:48:29,198:INFO:Lasso Regression Imported successfully
2023-02-13 10:48:29,202:INFO:Starting cross validation
2023-02-13 10:48:29,206:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:29,361:INFO:Calculating mean and std
2023-02-13 10:48:29,361:INFO:Creating metrics dataframe
2023-02-13 10:48:29,363:INFO:Uploading results into container
2023-02-13 10:48:29,363:INFO:Uploading model into container now
2023-02-13 10:48:29,363:INFO:_master_model_container: 2
2023-02-13 10:48:29,363:INFO:_display_container: 2
2023-02-13 10:48:29,363:INFO:Lasso(random_state=60)
2023-02-13 10:48:29,363:INFO:create_model() successfully completed......................................
2023-02-13 10:48:29,460:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:29,460:INFO:Creating metrics dataframe
2023-02-13 10:48:29,468:INFO:Initializing Ridge Regression
2023-02-13 10:48:29,468:INFO:Total runtime is 0.014763323465983072 minutes
2023-02-13 10:48:29,470:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:29,470:INFO:Initializing create_model()
2023-02-13 10:48:29,470:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:29,470:INFO:Checking exceptions
2023-02-13 10:48:29,470:INFO:Importing libraries
2023-02-13 10:48:29,470:INFO:Copying training dataset
2023-02-13 10:48:29,470:INFO:Defining folds
2023-02-13 10:48:29,470:INFO:Declaring metric variables
2023-02-13 10:48:29,476:INFO:Importing untrained model
2023-02-13 10:48:29,476:INFO:Ridge Regression Imported successfully
2023-02-13 10:48:29,492:INFO:Starting cross validation
2023-02-13 10:48:29,492:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:29,704:INFO:Calculating mean and std
2023-02-13 10:48:29,704:INFO:Creating metrics dataframe
2023-02-13 10:48:29,704:INFO:Uploading results into container
2023-02-13 10:48:29,704:INFO:Uploading model into container now
2023-02-13 10:48:29,710:INFO:_master_model_container: 3
2023-02-13 10:48:29,710:INFO:_display_container: 2
2023-02-13 10:48:29,710:INFO:Ridge(random_state=60)
2023-02-13 10:48:29,710:INFO:create_model() successfully completed......................................
2023-02-13 10:48:29,802:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:29,802:INFO:Creating metrics dataframe
2023-02-13 10:48:29,810:INFO:Initializing Elastic Net
2023-02-13 10:48:29,810:INFO:Total runtime is 0.020460744698842365 minutes
2023-02-13 10:48:29,818:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:29,818:INFO:Initializing create_model()
2023-02-13 10:48:29,818:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:29,818:INFO:Checking exceptions
2023-02-13 10:48:29,818:INFO:Importing libraries
2023-02-13 10:48:29,818:INFO:Copying training dataset
2023-02-13 10:48:29,818:INFO:Defining folds
2023-02-13 10:48:29,818:INFO:Declaring metric variables
2023-02-13 10:48:29,818:INFO:Importing untrained model
2023-02-13 10:48:29,826:INFO:Elastic Net Imported successfully
2023-02-13 10:48:29,834:INFO:Starting cross validation
2023-02-13 10:48:29,834:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:29,998:INFO:Calculating mean and std
2023-02-13 10:48:29,998:INFO:Creating metrics dataframe
2023-02-13 10:48:29,998:INFO:Uploading results into container
2023-02-13 10:48:29,998:INFO:Uploading model into container now
2023-02-13 10:48:29,998:INFO:_master_model_container: 4
2023-02-13 10:48:29,998:INFO:_display_container: 2
2023-02-13 10:48:29,998:INFO:ElasticNet(random_state=60)
2023-02-13 10:48:29,998:INFO:create_model() successfully completed......................................
2023-02-13 10:48:30,094:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:30,094:INFO:Creating metrics dataframe
2023-02-13 10:48:30,102:INFO:Initializing Least Angle Regression
2023-02-13 10:48:30,102:INFO:Total runtime is 0.025338168938954672 minutes
2023-02-13 10:48:30,110:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:30,110:INFO:Initializing create_model()
2023-02-13 10:48:30,110:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:30,110:INFO:Checking exceptions
2023-02-13 10:48:30,110:INFO:Importing libraries
2023-02-13 10:48:30,110:INFO:Copying training dataset
2023-02-13 10:48:30,110:INFO:Defining folds
2023-02-13 10:48:30,110:INFO:Declaring metric variables
2023-02-13 10:48:30,110:INFO:Importing untrained model
2023-02-13 10:48:30,118:INFO:Least Angle Regression Imported successfully
2023-02-13 10:48:30,126:INFO:Starting cross validation
2023-02-13 10:48:30,126:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:30,174:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,182:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,192:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,209:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,221:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,234:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,243:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,257:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,266:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,273:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,293:INFO:Calculating mean and std
2023-02-13 10:48:30,293:INFO:Creating metrics dataframe
2023-02-13 10:48:30,298:INFO:Uploading results into container
2023-02-13 10:48:30,298:INFO:Uploading model into container now
2023-02-13 10:48:30,298:INFO:_master_model_container: 5
2023-02-13 10:48:30,298:INFO:_display_container: 2
2023-02-13 10:48:30,298:INFO:Lars(random_state=60)
2023-02-13 10:48:30,298:INFO:create_model() successfully completed......................................
2023-02-13 10:48:30,395:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:30,395:INFO:Creating metrics dataframe
2023-02-13 10:48:30,403:INFO:Initializing Lasso Least Angle Regression
2023-02-13 10:48:30,403:INFO:Total runtime is 0.03035128116607666 minutes
2023-02-13 10:48:30,411:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:30,411:INFO:Initializing create_model()
2023-02-13 10:48:30,411:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:30,411:INFO:Checking exceptions
2023-02-13 10:48:30,411:INFO:Importing libraries
2023-02-13 10:48:30,411:INFO:Copying training dataset
2023-02-13 10:48:30,411:INFO:Defining folds
2023-02-13 10:48:30,411:INFO:Declaring metric variables
2023-02-13 10:48:30,411:INFO:Importing untrained model
2023-02-13 10:48:30,419:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 10:48:30,427:INFO:Starting cross validation
2023-02-13 10:48:30,427:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:30,472:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:30,483:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:30,494:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:30,503:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:30,518:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:30,530:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:30,539:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:30,549:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:30,561:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:30,568:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:30,582:INFO:Calculating mean and std
2023-02-13 10:48:30,582:INFO:Creating metrics dataframe
2023-02-13 10:48:30,582:INFO:Uploading results into container
2023-02-13 10:48:30,582:INFO:Uploading model into container now
2023-02-13 10:48:30,582:INFO:_master_model_container: 6
2023-02-13 10:48:30,582:INFO:_display_container: 2
2023-02-13 10:48:30,582:INFO:LassoLars(random_state=60)
2023-02-13 10:48:30,589:INFO:create_model() successfully completed......................................
2023-02-13 10:48:30,679:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:30,679:INFO:Creating metrics dataframe
2023-02-13 10:48:30,687:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 10:48:30,687:INFO:Total runtime is 0.03508267800013224 minutes
2023-02-13 10:48:30,695:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:30,695:INFO:Initializing create_model()
2023-02-13 10:48:30,695:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:30,695:INFO:Checking exceptions
2023-02-13 10:48:30,695:INFO:Importing libraries
2023-02-13 10:48:30,695:INFO:Copying training dataset
2023-02-13 10:48:30,695:INFO:Defining folds
2023-02-13 10:48:30,695:INFO:Declaring metric variables
2023-02-13 10:48:30,695:INFO:Importing untrained model
2023-02-13 10:48:30,703:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 10:48:30,713:INFO:Starting cross validation
2023-02-13 10:48:30,713:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:30,753:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,764:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,777:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,789:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,798:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,810:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,819:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,828:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,839:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,848:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:30,861:INFO:Calculating mean and std
2023-02-13 10:48:30,861:INFO:Creating metrics dataframe
2023-02-13 10:48:30,868:INFO:Uploading results into container
2023-02-13 10:48:30,868:INFO:Uploading model into container now
2023-02-13 10:48:30,868:INFO:_master_model_container: 7
2023-02-13 10:48:30,868:INFO:_display_container: 2
2023-02-13 10:48:30,868:INFO:OrthogonalMatchingPursuit()
2023-02-13 10:48:30,868:INFO:create_model() successfully completed......................................
2023-02-13 10:48:30,965:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:30,965:INFO:Creating metrics dataframe
2023-02-13 10:48:30,981:INFO:Initializing Bayesian Ridge
2023-02-13 10:48:30,981:INFO:Total runtime is 0.03998853762944539 minutes
2023-02-13 10:48:30,989:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:30,989:INFO:Initializing create_model()
2023-02-13 10:48:30,989:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:30,989:INFO:Checking exceptions
2023-02-13 10:48:30,989:INFO:Importing libraries
2023-02-13 10:48:30,989:INFO:Copying training dataset
2023-02-13 10:48:30,989:INFO:Defining folds
2023-02-13 10:48:30,989:INFO:Declaring metric variables
2023-02-13 10:48:30,997:INFO:Importing untrained model
2023-02-13 10:48:31,005:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:48:31,013:INFO:Starting cross validation
2023-02-13 10:48:31,013:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:31,218:INFO:Calculating mean and std
2023-02-13 10:48:31,225:INFO:Creating metrics dataframe
2023-02-13 10:48:31,227:INFO:Uploading results into container
2023-02-13 10:48:31,227:INFO:Uploading model into container now
2023-02-13 10:48:31,227:INFO:_master_model_container: 8
2023-02-13 10:48:31,227:INFO:_display_container: 2
2023-02-13 10:48:31,227:INFO:BayesianRidge()
2023-02-13 10:48:31,227:INFO:create_model() successfully completed......................................
2023-02-13 10:48:31,325:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:31,325:INFO:Creating metrics dataframe
2023-02-13 10:48:31,331:INFO:Initializing Passive Aggressive Regressor
2023-02-13 10:48:31,331:INFO:Total runtime is 0.0458213210105896 minutes
2023-02-13 10:48:31,340:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:31,340:INFO:Initializing create_model()
2023-02-13 10:48:31,340:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:31,340:INFO:Checking exceptions
2023-02-13 10:48:31,340:INFO:Importing libraries
2023-02-13 10:48:31,340:INFO:Copying training dataset
2023-02-13 10:48:31,340:INFO:Defining folds
2023-02-13 10:48:31,340:INFO:Declaring metric variables
2023-02-13 10:48:31,347:INFO:Importing untrained model
2023-02-13 10:48:31,347:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 10:48:31,356:INFO:Starting cross validation
2023-02-13 10:48:31,356:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:31,518:INFO:Calculating mean and std
2023-02-13 10:48:31,518:INFO:Creating metrics dataframe
2023-02-13 10:48:31,518:INFO:Uploading results into container
2023-02-13 10:48:31,518:INFO:Uploading model into container now
2023-02-13 10:48:31,518:INFO:_master_model_container: 9
2023-02-13 10:48:31,518:INFO:_display_container: 2
2023-02-13 10:48:31,518:INFO:PassiveAggressiveRegressor(random_state=60)
2023-02-13 10:48:31,518:INFO:create_model() successfully completed......................................
2023-02-13 10:48:31,616:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:31,616:INFO:Creating metrics dataframe
2023-02-13 10:48:31,624:INFO:Initializing Huber Regressor
2023-02-13 10:48:31,624:INFO:Total runtime is 0.050694318612416585 minutes
2023-02-13 10:48:31,624:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:31,624:INFO:Initializing create_model()
2023-02-13 10:48:31,624:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:31,624:INFO:Checking exceptions
2023-02-13 10:48:31,624:INFO:Importing libraries
2023-02-13 10:48:31,624:INFO:Copying training dataset
2023-02-13 10:48:31,632:INFO:Defining folds
2023-02-13 10:48:31,632:INFO:Declaring metric variables
2023-02-13 10:48:31,632:INFO:Importing untrained model
2023-02-13 10:48:31,632:INFO:Huber Regressor Imported successfully
2023-02-13 10:48:31,640:INFO:Starting cross validation
2023-02-13 10:48:31,640:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:31,705:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:31,721:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:31,729:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:31,749:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:31,762:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:31,770:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:31,786:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:31,795:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:31,803:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:31,814:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:31,828:INFO:Calculating mean and std
2023-02-13 10:48:31,828:INFO:Creating metrics dataframe
2023-02-13 10:48:31,828:INFO:Uploading results into container
2023-02-13 10:48:31,828:INFO:Uploading model into container now
2023-02-13 10:48:31,828:INFO:_master_model_container: 10
2023-02-13 10:48:31,828:INFO:_display_container: 2
2023-02-13 10:48:31,828:INFO:HuberRegressor()
2023-02-13 10:48:31,828:INFO:create_model() successfully completed......................................
2023-02-13 10:48:31,933:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:31,933:INFO:Creating metrics dataframe
2023-02-13 10:48:31,957:INFO:Initializing K Neighbors Regressor
2023-02-13 10:48:31,957:INFO:Total runtime is 0.05624984900156657 minutes
2023-02-13 10:48:31,965:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:31,965:INFO:Initializing create_model()
2023-02-13 10:48:31,965:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:31,965:INFO:Checking exceptions
2023-02-13 10:48:31,965:INFO:Importing libraries
2023-02-13 10:48:31,965:INFO:Copying training dataset
2023-02-13 10:48:31,975:INFO:Defining folds
2023-02-13 10:48:31,975:INFO:Declaring metric variables
2023-02-13 10:48:31,989:INFO:Importing untrained model
2023-02-13 10:48:31,998:INFO:K Neighbors Regressor Imported successfully
2023-02-13 10:48:32,008:INFO:Starting cross validation
2023-02-13 10:48:32,014:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:32,184:INFO:Calculating mean and std
2023-02-13 10:48:32,184:INFO:Creating metrics dataframe
2023-02-13 10:48:32,186:INFO:Uploading results into container
2023-02-13 10:48:32,186:INFO:Uploading model into container now
2023-02-13 10:48:32,186:INFO:_master_model_container: 11
2023-02-13 10:48:32,186:INFO:_display_container: 2
2023-02-13 10:48:32,186:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:48:32,186:INFO:create_model() successfully completed......................................
2023-02-13 10:48:32,276:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:32,276:INFO:Creating metrics dataframe
2023-02-13 10:48:32,293:INFO:Initializing Decision Tree Regressor
2023-02-13 10:48:32,294:INFO:Total runtime is 0.061869863669077554 minutes
2023-02-13 10:48:32,295:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:32,295:INFO:Initializing create_model()
2023-02-13 10:48:32,295:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:32,295:INFO:Checking exceptions
2023-02-13 10:48:32,295:INFO:Importing libraries
2023-02-13 10:48:32,295:INFO:Copying training dataset
2023-02-13 10:48:32,298:INFO:Defining folds
2023-02-13 10:48:32,301:INFO:Declaring metric variables
2023-02-13 10:48:32,303:INFO:Importing untrained model
2023-02-13 10:48:32,306:INFO:Decision Tree Regressor Imported successfully
2023-02-13 10:48:32,311:INFO:Starting cross validation
2023-02-13 10:48:32,311:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:32,497:INFO:Calculating mean and std
2023-02-13 10:48:32,497:INFO:Creating metrics dataframe
2023-02-13 10:48:32,505:INFO:Uploading results into container
2023-02-13 10:48:32,505:INFO:Uploading model into container now
2023-02-13 10:48:32,506:INFO:_master_model_container: 12
2023-02-13 10:48:32,506:INFO:_display_container: 2
2023-02-13 10:48:32,506:INFO:DecisionTreeRegressor(random_state=60)
2023-02-13 10:48:32,506:INFO:create_model() successfully completed......................................
2023-02-13 10:48:32,595:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:32,595:INFO:Creating metrics dataframe
2023-02-13 10:48:32,612:INFO:Initializing Random Forest Regressor
2023-02-13 10:48:32,612:INFO:Total runtime is 0.06716435750325521 minutes
2023-02-13 10:48:32,612:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:32,612:INFO:Initializing create_model()
2023-02-13 10:48:32,612:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:32,612:INFO:Checking exceptions
2023-02-13 10:48:32,612:INFO:Importing libraries
2023-02-13 10:48:32,612:INFO:Copying training dataset
2023-02-13 10:48:32,612:INFO:Defining folds
2023-02-13 10:48:32,612:INFO:Declaring metric variables
2023-02-13 10:48:32,620:INFO:Importing untrained model
2023-02-13 10:48:32,623:INFO:Random Forest Regressor Imported successfully
2023-02-13 10:48:32,628:INFO:Starting cross validation
2023-02-13 10:48:32,628:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:33,139:INFO:Calculating mean and std
2023-02-13 10:48:33,139:INFO:Creating metrics dataframe
2023-02-13 10:48:33,142:INFO:Uploading results into container
2023-02-13 10:48:33,142:INFO:Uploading model into container now
2023-02-13 10:48:33,142:INFO:_master_model_container: 13
2023-02-13 10:48:33,142:INFO:_display_container: 2
2023-02-13 10:48:33,142:INFO:RandomForestRegressor(n_jobs=-1, random_state=60)
2023-02-13 10:48:33,142:INFO:create_model() successfully completed......................................
2023-02-13 10:48:33,246:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:33,246:INFO:Creating metrics dataframe
2023-02-13 10:48:33,257:INFO:Initializing Extra Trees Regressor
2023-02-13 10:48:33,257:INFO:Total runtime is 0.07792077859242758 minutes
2023-02-13 10:48:33,257:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:33,257:INFO:Initializing create_model()
2023-02-13 10:48:33,257:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:33,257:INFO:Checking exceptions
2023-02-13 10:48:33,257:INFO:Importing libraries
2023-02-13 10:48:33,257:INFO:Copying training dataset
2023-02-13 10:48:33,262:INFO:Defining folds
2023-02-13 10:48:33,262:INFO:Declaring metric variables
2023-02-13 10:48:33,262:INFO:Importing untrained model
2023-02-13 10:48:33,262:INFO:Extra Trees Regressor Imported successfully
2023-02-13 10:48:33,276:INFO:Starting cross validation
2023-02-13 10:48:33,276:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:33,689:INFO:Calculating mean and std
2023-02-13 10:48:33,689:INFO:Creating metrics dataframe
2023-02-13 10:48:33,689:INFO:Uploading results into container
2023-02-13 10:48:33,689:INFO:Uploading model into container now
2023-02-13 10:48:33,689:INFO:_master_model_container: 14
2023-02-13 10:48:33,689:INFO:_display_container: 2
2023-02-13 10:48:33,696:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=60)
2023-02-13 10:48:33,696:INFO:create_model() successfully completed......................................
2023-02-13 10:48:33,788:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:33,788:INFO:Creating metrics dataframe
2023-02-13 10:48:33,794:INFO:Initializing AdaBoost Regressor
2023-02-13 10:48:33,794:INFO:Total runtime is 0.08687031666437785 minutes
2023-02-13 10:48:33,804:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:33,804:INFO:Initializing create_model()
2023-02-13 10:48:33,804:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:33,804:INFO:Checking exceptions
2023-02-13 10:48:33,804:INFO:Importing libraries
2023-02-13 10:48:33,804:INFO:Copying training dataset
2023-02-13 10:48:33,804:INFO:Defining folds
2023-02-13 10:48:33,804:INFO:Declaring metric variables
2023-02-13 10:48:33,811:INFO:Importing untrained model
2023-02-13 10:48:33,811:INFO:AdaBoost Regressor Imported successfully
2023-02-13 10:48:33,821:INFO:Starting cross validation
2023-02-13 10:48:33,821:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:34,078:INFO:Calculating mean and std
2023-02-13 10:48:34,078:INFO:Creating metrics dataframe
2023-02-13 10:48:34,078:INFO:Uploading results into container
2023-02-13 10:48:34,078:INFO:Uploading model into container now
2023-02-13 10:48:34,086:INFO:_master_model_container: 15
2023-02-13 10:48:34,086:INFO:_display_container: 2
2023-02-13 10:48:34,086:INFO:AdaBoostRegressor(random_state=60)
2023-02-13 10:48:34,086:INFO:create_model() successfully completed......................................
2023-02-13 10:48:34,177:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:34,177:INFO:Creating metrics dataframe
2023-02-13 10:48:34,193:INFO:Initializing Gradient Boosting Regressor
2023-02-13 10:48:34,193:INFO:Total runtime is 0.09351856311162313 minutes
2023-02-13 10:48:34,193:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:34,193:INFO:Initializing create_model()
2023-02-13 10:48:34,193:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:34,193:INFO:Checking exceptions
2023-02-13 10:48:34,193:INFO:Importing libraries
2023-02-13 10:48:34,193:INFO:Copying training dataset
2023-02-13 10:48:34,193:INFO:Defining folds
2023-02-13 10:48:34,193:INFO:Declaring metric variables
2023-02-13 10:48:34,201:INFO:Importing untrained model
2023-02-13 10:48:34,201:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 10:48:34,209:INFO:Starting cross validation
2023-02-13 10:48:34,209:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:34,445:INFO:Calculating mean and std
2023-02-13 10:48:34,445:INFO:Creating metrics dataframe
2023-02-13 10:48:34,451:INFO:Uploading results into container
2023-02-13 10:48:34,451:INFO:Uploading model into container now
2023-02-13 10:48:34,451:INFO:_master_model_container: 16
2023-02-13 10:48:34,451:INFO:_display_container: 2
2023-02-13 10:48:34,451:INFO:GradientBoostingRegressor(random_state=60)
2023-02-13 10:48:34,451:INFO:create_model() successfully completed......................................
2023-02-13 10:48:34,543:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:34,543:INFO:Creating metrics dataframe
2023-02-13 10:48:34,559:INFO:Initializing Extreme Gradient Boosting
2023-02-13 10:48:34,559:INFO:Total runtime is 0.09962621529897053 minutes
2023-02-13 10:48:34,559:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:34,559:INFO:Initializing create_model()
2023-02-13 10:48:34,559:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:34,559:INFO:Checking exceptions
2023-02-13 10:48:34,559:INFO:Importing libraries
2023-02-13 10:48:34,559:INFO:Copying training dataset
2023-02-13 10:48:34,559:INFO:Defining folds
2023-02-13 10:48:34,559:INFO:Declaring metric variables
2023-02-13 10:48:34,567:INFO:Importing untrained model
2023-02-13 10:48:34,567:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 10:48:34,578:INFO:Starting cross validation
2023-02-13 10:48:34,578:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:34,788:INFO:Calculating mean and std
2023-02-13 10:48:34,796:INFO:Creating metrics dataframe
2023-02-13 10:48:34,796:INFO:Uploading results into container
2023-02-13 10:48:34,796:INFO:Uploading model into container now
2023-02-13 10:48:34,796:INFO:_master_model_container: 17
2023-02-13 10:48:34,796:INFO:_display_container: 2
2023-02-13 10:48:34,796:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=60, ...)
2023-02-13 10:48:34,796:INFO:create_model() successfully completed......................................
2023-02-13 10:48:34,895:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:34,895:INFO:Creating metrics dataframe
2023-02-13 10:48:34,911:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 10:48:34,911:INFO:Total runtime is 0.1054883082707723 minutes
2023-02-13 10:48:34,911:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:34,911:INFO:Initializing create_model()
2023-02-13 10:48:34,911:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:34,911:INFO:Checking exceptions
2023-02-13 10:48:34,911:INFO:Importing libraries
2023-02-13 10:48:34,911:INFO:Copying training dataset
2023-02-13 10:48:34,911:INFO:Defining folds
2023-02-13 10:48:34,911:INFO:Declaring metric variables
2023-02-13 10:48:34,922:INFO:Importing untrained model
2023-02-13 10:48:34,922:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 10:48:34,936:INFO:Starting cross validation
2023-02-13 10:48:34,936:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:35,131:INFO:Calculating mean and std
2023-02-13 10:48:35,131:INFO:Creating metrics dataframe
2023-02-13 10:48:35,139:INFO:Uploading results into container
2023-02-13 10:48:35,139:INFO:Uploading model into container now
2023-02-13 10:48:35,139:INFO:_master_model_container: 18
2023-02-13 10:48:35,139:INFO:_display_container: 2
2023-02-13 10:48:35,139:INFO:LGBMRegressor(random_state=60)
2023-02-13 10:48:35,139:INFO:create_model() successfully completed......................................
2023-02-13 10:48:35,227:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:35,227:INFO:Creating metrics dataframe
2023-02-13 10:48:35,243:INFO:Initializing Dummy Regressor
2023-02-13 10:48:35,243:INFO:Total runtime is 0.11102504730224609 minutes
2023-02-13 10:48:35,243:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:35,243:INFO:Initializing create_model()
2023-02-13 10:48:35,243:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9839F160>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:35,243:INFO:Checking exceptions
2023-02-13 10:48:35,243:INFO:Importing libraries
2023-02-13 10:48:35,243:INFO:Copying training dataset
2023-02-13 10:48:35,251:INFO:Defining folds
2023-02-13 10:48:35,251:INFO:Declaring metric variables
2023-02-13 10:48:35,251:INFO:Importing untrained model
2023-02-13 10:48:35,259:INFO:Dummy Regressor Imported successfully
2023-02-13 10:48:35,267:INFO:Starting cross validation
2023-02-13 10:48:35,267:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:35,424:INFO:Calculating mean and std
2023-02-13 10:48:35,424:INFO:Creating metrics dataframe
2023-02-13 10:48:35,424:INFO:Uploading results into container
2023-02-13 10:48:35,424:INFO:Uploading model into container now
2023-02-13 10:48:35,424:INFO:_master_model_container: 19
2023-02-13 10:48:35,424:INFO:_display_container: 2
2023-02-13 10:48:35,431:INFO:DummyRegressor()
2023-02-13 10:48:35,431:INFO:create_model() successfully completed......................................
2023-02-13 10:48:35,527:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:35,527:INFO:Creating metrics dataframe
2023-02-13 10:48:35,543:INFO:Initializing create_model()
2023-02-13 10:48:35,543:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A933EF550>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:35,543:INFO:Checking exceptions
2023-02-13 10:48:35,543:INFO:Importing libraries
2023-02-13 10:48:35,543:INFO:Copying training dataset
2023-02-13 10:48:35,551:INFO:Defining folds
2023-02-13 10:48:35,551:INFO:Declaring metric variables
2023-02-13 10:48:35,551:INFO:Importing untrained model
2023-02-13 10:48:35,551:INFO:Declaring custom model
2023-02-13 10:48:35,551:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:48:35,551:INFO:Cross validation set to False
2023-02-13 10:48:35,551:INFO:Fitting Model
2023-02-13 10:48:35,584:INFO:BayesianRidge()
2023-02-13 10:48:35,584:INFO:create_model() successfully completed......................................
2023-02-13 10:48:35,722:INFO:_master_model_container: 19
2023-02-13 10:48:35,730:INFO:_display_container: 2
2023-02-13 10:48:35,730:INFO:BayesianRidge()
2023-02-13 10:48:35,730:INFO:compare_models() successfully completed......................................
2023-02-13 10:48:44,646:INFO:PyCaret RegressionExperiment
2023-02-13 10:48:44,646:INFO:Logging name: reg-default-name
2023-02-13 10:48:44,648:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 10:48:44,648:INFO:version 3.0.0.rc8
2023-02-13 10:48:44,648:INFO:Initializing setup()
2023-02-13 10:48:44,648:INFO:self.USI: 7364
2023-02-13 10:48:44,648:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 10:48:44,648:INFO:Checking environment
2023-02-13 10:48:44,648:INFO:python_version: 3.9.13
2023-02-13 10:48:44,648:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 10:48:44,648:INFO:machine: AMD64
2023-02-13 10:48:44,648:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 10:48:44,653:INFO:Memory: svmem(total=16805040128, available=6298451968, percent=62.5, used=10506588160, free=6298451968)
2023-02-13 10:48:44,653:INFO:Physical Core: 4
2023-02-13 10:48:44,653:INFO:Logical Core: 8
2023-02-13 10:48:44,653:INFO:Checking libraries
2023-02-13 10:48:44,653:INFO:System:
2023-02-13 10:48:44,653:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 10:48:44,653:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 10:48:44,653:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 10:48:44,653:INFO:PyCaret required dependencies:
2023-02-13 10:48:44,653:INFO:                 pip: 23.0
2023-02-13 10:48:44,653:INFO:          setuptools: 58.1.0
2023-02-13 10:48:44,653:INFO:             pycaret: 3.0.0rc8
2023-02-13 10:48:44,653:INFO:             IPython: 8.7.0
2023-02-13 10:48:44,653:INFO:          ipywidgets: 8.0.4
2023-02-13 10:48:44,653:INFO:                tqdm: 4.64.1
2023-02-13 10:48:44,653:INFO:               numpy: 1.22.1
2023-02-13 10:48:44,653:INFO:              pandas: 1.5.2
2023-02-13 10:48:44,653:INFO:              jinja2: 3.1.2
2023-02-13 10:48:44,653:INFO:               scipy: 1.5.4
2023-02-13 10:48:44,653:INFO:              joblib: 1.2.0
2023-02-13 10:48:44,653:INFO:             sklearn: 1.1.3
2023-02-13 10:48:44,653:INFO:                pyod: 1.0.7
2023-02-13 10:48:44,653:INFO:            imblearn: 0.10.1
2023-02-13 10:48:44,653:INFO:   category_encoders: 2.6.0
2023-02-13 10:48:44,653:INFO:            lightgbm: 3.3.4
2023-02-13 10:48:44,653:INFO:               numba: 0.56.4
2023-02-13 10:48:44,653:INFO:            requests: 2.28.1
2023-02-13 10:48:44,653:INFO:          matplotlib: 3.6.2
2023-02-13 10:48:44,653:INFO:          scikitplot: 0.3.7
2023-02-13 10:48:44,653:INFO:         yellowbrick: 1.5
2023-02-13 10:48:44,653:INFO:              plotly: 5.11.0
2023-02-13 10:48:44,653:INFO:             kaleido: 0.2.1
2023-02-13 10:48:44,653:INFO:         statsmodels: 0.13.5
2023-02-13 10:48:44,653:INFO:              sktime: 0.15.1
2023-02-13 10:48:44,653:INFO:               tbats: 1.1.2
2023-02-13 10:48:44,653:INFO:            pmdarima: 2.0.2
2023-02-13 10:48:44,653:INFO:              psutil: 5.9.4
2023-02-13 10:48:44,655:INFO:PyCaret optional dependencies:
2023-02-13 10:48:44,655:INFO:                shap: 0.41.0
2023-02-13 10:48:44,655:INFO:           interpret: 0.3.0
2023-02-13 10:48:44,655:INFO:                umap: Not installed
2023-02-13 10:48:44,655:INFO:    pandas_profiling: 3.6.2
2023-02-13 10:48:44,655:INFO:  explainerdashboard: Not installed
2023-02-13 10:48:44,655:INFO:             autoviz: Not installed
2023-02-13 10:48:44,655:INFO:           fairlearn: Not installed
2023-02-13 10:48:44,655:INFO:             xgboost: 1.7.3
2023-02-13 10:48:44,655:INFO:            catboost: Not installed
2023-02-13 10:48:44,655:INFO:              kmodes: Not installed
2023-02-13 10:48:44,655:INFO:             mlxtend: Not installed
2023-02-13 10:48:44,655:INFO:       statsforecast: Not installed
2023-02-13 10:48:44,655:INFO:        tune_sklearn: Not installed
2023-02-13 10:48:44,655:INFO:                 ray: Not installed
2023-02-13 10:48:44,655:INFO:            hyperopt: Not installed
2023-02-13 10:48:44,655:INFO:              optuna: Not installed
2023-02-13 10:48:44,656:INFO:               skopt: Not installed
2023-02-13 10:48:44,656:INFO:              mlflow: Not installed
2023-02-13 10:48:44,656:INFO:              gradio: Not installed
2023-02-13 10:48:44,656:INFO:             fastapi: Not installed
2023-02-13 10:48:44,656:INFO:             uvicorn: Not installed
2023-02-13 10:48:44,656:INFO:              m2cgen: Not installed
2023-02-13 10:48:44,656:INFO:           evidently: Not installed
2023-02-13 10:48:44,656:INFO:                nltk: 3.8
2023-02-13 10:48:44,656:INFO:            pyLDAvis: Not installed
2023-02-13 10:48:44,656:INFO:              gensim: Not installed
2023-02-13 10:48:44,656:INFO:               spacy: Not installed
2023-02-13 10:48:44,656:INFO:           wordcloud: 1.8.2.2
2023-02-13 10:48:44,656:INFO:            textblob: Not installed
2023-02-13 10:48:44,656:INFO:               fugue: Not installed
2023-02-13 10:48:44,656:INFO:           streamlit: 1.16.0
2023-02-13 10:48:44,656:INFO:             prophet: Not installed
2023-02-13 10:48:44,656:INFO:None
2023-02-13 10:48:44,656:INFO:Set up data.
2023-02-13 10:48:44,660:INFO:Set up train/test split.
2023-02-13 10:48:44,663:INFO:Set up index.
2023-02-13 10:48:44,663:INFO:Set up folding strategy.
2023-02-13 10:48:44,665:INFO:Assigning column types.
2023-02-13 10:48:44,667:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 10:48:44,667:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,668:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,676:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,762:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,813:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,813:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:44,813:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:44,816:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,818:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,824:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,879:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,914:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,914:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:44,925:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:44,925:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 10:48:44,931:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,931:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:44,988:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,026:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,028:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:45,029:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:45,036:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,036:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,092:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,135:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,135:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:45,135:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:45,135:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 10:48:45,146:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,199:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,239:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,239:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:45,247:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:45,255:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,305:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,345:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,345:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:45,345:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:45,345:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 10:48:45,417:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,492:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,492:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:45,492:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:45,616:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,696:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,700:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:45,705:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:45,706:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 10:48:45,818:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,867:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:45,867:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:45,940:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 10:48:45,988:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:45,988:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:45,988:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 10:48:46,102:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:46,102:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:46,265:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:46,265:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:46,265:INFO:Preparing preprocessing pipeline...
2023-02-13 10:48:46,273:INFO:Set up column name cleaning.
2023-02-13 10:48:46,273:INFO:Set up simple imputation.
2023-02-13 10:48:46,291:INFO:Finished creating preprocessing pipeline.
2023-02-13 10:48:46,291:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 10:48:46,291:INFO:Creating final display dataframe.
2023-02-13 10:48:46,419:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              7364
2023-02-13 10:48:46,617:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:46,627:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:46,747:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 10:48:46,749:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 10:48:46,749:INFO:setup() successfully completed in 2.1s...............
2023-02-13 10:48:46,749:INFO:Initializing compare_models()
2023-02-13 10:48:46,749:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 10:48:46,749:INFO:Checking exceptions
2023-02-13 10:48:46,749:INFO:Preparing display monitor
2023-02-13 10:48:46,778:INFO:Initializing Linear Regression
2023-02-13 10:48:46,778:INFO:Total runtime is 0.0 minutes
2023-02-13 10:48:46,781:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:46,783:INFO:Initializing create_model()
2023-02-13 10:48:46,783:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:46,783:INFO:Checking exceptions
2023-02-13 10:48:46,783:INFO:Importing libraries
2023-02-13 10:48:46,783:INFO:Copying training dataset
2023-02-13 10:48:46,785:INFO:Defining folds
2023-02-13 10:48:46,785:INFO:Declaring metric variables
2023-02-13 10:48:46,789:INFO:Importing untrained model
2023-02-13 10:48:46,790:INFO:Linear Regression Imported successfully
2023-02-13 10:48:46,798:INFO:Starting cross validation
2023-02-13 10:48:46,801:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:47,002:INFO:Calculating mean and std
2023-02-13 10:48:47,002:INFO:Creating metrics dataframe
2023-02-13 10:48:47,003:INFO:Uploading results into container
2023-02-13 10:48:47,003:INFO:Uploading model into container now
2023-02-13 10:48:47,003:INFO:_master_model_container: 1
2023-02-13 10:48:47,003:INFO:_display_container: 2
2023-02-13 10:48:47,003:INFO:LinearRegression(n_jobs=-1)
2023-02-13 10:48:47,003:INFO:create_model() successfully completed......................................
2023-02-13 10:48:47,132:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:47,132:INFO:Creating metrics dataframe
2023-02-13 10:48:47,148:INFO:Initializing Lasso Regression
2023-02-13 10:48:47,149:INFO:Total runtime is 0.006194388866424561 minutes
2023-02-13 10:48:47,153:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:47,153:INFO:Initializing create_model()
2023-02-13 10:48:47,153:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:47,153:INFO:Checking exceptions
2023-02-13 10:48:47,153:INFO:Importing libraries
2023-02-13 10:48:47,153:INFO:Copying training dataset
2023-02-13 10:48:47,158:INFO:Defining folds
2023-02-13 10:48:47,159:INFO:Declaring metric variables
2023-02-13 10:48:47,163:INFO:Importing untrained model
2023-02-13 10:48:47,168:INFO:Lasso Regression Imported successfully
2023-02-13 10:48:47,179:INFO:Starting cross validation
2023-02-13 10:48:47,181:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:47,379:INFO:Calculating mean and std
2023-02-13 10:48:47,379:INFO:Creating metrics dataframe
2023-02-13 10:48:47,379:INFO:Uploading results into container
2023-02-13 10:48:47,386:INFO:Uploading model into container now
2023-02-13 10:48:47,386:INFO:_master_model_container: 2
2023-02-13 10:48:47,386:INFO:_display_container: 2
2023-02-13 10:48:47,386:INFO:Lasso(random_state=123)
2023-02-13 10:48:47,386:INFO:create_model() successfully completed......................................
2023-02-13 10:48:47,493:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:47,493:INFO:Creating metrics dataframe
2023-02-13 10:48:47,503:INFO:Initializing Ridge Regression
2023-02-13 10:48:47,503:INFO:Total runtime is 0.012082350254058839 minutes
2023-02-13 10:48:47,509:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:47,509:INFO:Initializing create_model()
2023-02-13 10:48:47,515:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:47,515:INFO:Checking exceptions
2023-02-13 10:48:47,515:INFO:Importing libraries
2023-02-13 10:48:47,515:INFO:Copying training dataset
2023-02-13 10:48:47,517:INFO:Defining folds
2023-02-13 10:48:47,517:INFO:Declaring metric variables
2023-02-13 10:48:47,520:INFO:Importing untrained model
2023-02-13 10:48:47,522:INFO:Ridge Regression Imported successfully
2023-02-13 10:48:47,533:INFO:Starting cross validation
2023-02-13 10:48:47,534:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:47,725:INFO:Calculating mean and std
2023-02-13 10:48:47,725:INFO:Creating metrics dataframe
2023-02-13 10:48:47,731:INFO:Uploading results into container
2023-02-13 10:48:47,731:INFO:Uploading model into container now
2023-02-13 10:48:47,731:INFO:_master_model_container: 3
2023-02-13 10:48:47,731:INFO:_display_container: 2
2023-02-13 10:48:47,731:INFO:Ridge(random_state=123)
2023-02-13 10:48:47,731:INFO:create_model() successfully completed......................................
2023-02-13 10:48:47,822:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:47,822:INFO:Creating metrics dataframe
2023-02-13 10:48:47,829:INFO:Initializing Elastic Net
2023-02-13 10:48:47,829:INFO:Total runtime is 0.017517169316609703 minutes
2023-02-13 10:48:47,838:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:47,838:INFO:Initializing create_model()
2023-02-13 10:48:47,838:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:47,840:INFO:Checking exceptions
2023-02-13 10:48:47,840:INFO:Importing libraries
2023-02-13 10:48:47,840:INFO:Copying training dataset
2023-02-13 10:48:47,841:INFO:Defining folds
2023-02-13 10:48:47,841:INFO:Declaring metric variables
2023-02-13 10:48:47,845:INFO:Importing untrained model
2023-02-13 10:48:47,851:INFO:Elastic Net Imported successfully
2023-02-13 10:48:47,857:INFO:Starting cross validation
2023-02-13 10:48:47,858:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:48,018:INFO:Calculating mean and std
2023-02-13 10:48:48,018:INFO:Creating metrics dataframe
2023-02-13 10:48:48,018:INFO:Uploading results into container
2023-02-13 10:48:48,025:INFO:Uploading model into container now
2023-02-13 10:48:48,025:INFO:_master_model_container: 4
2023-02-13 10:48:48,025:INFO:_display_container: 2
2023-02-13 10:48:48,025:INFO:ElasticNet(random_state=123)
2023-02-13 10:48:48,025:INFO:create_model() successfully completed......................................
2023-02-13 10:48:48,167:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:48,167:INFO:Creating metrics dataframe
2023-02-13 10:48:48,183:INFO:Initializing Least Angle Regression
2023-02-13 10:48:48,183:INFO:Total runtime is 0.023422495524088545 minutes
2023-02-13 10:48:48,190:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:48,190:INFO:Initializing create_model()
2023-02-13 10:48:48,190:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:48,190:INFO:Checking exceptions
2023-02-13 10:48:48,190:INFO:Importing libraries
2023-02-13 10:48:48,190:INFO:Copying training dataset
2023-02-13 10:48:48,192:INFO:Defining folds
2023-02-13 10:48:48,192:INFO:Declaring metric variables
2023-02-13 10:48:48,203:INFO:Importing untrained model
2023-02-13 10:48:48,210:INFO:Least Angle Regression Imported successfully
2023-02-13 10:48:48,216:INFO:Starting cross validation
2023-02-13 10:48:48,221:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:48,296:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,306:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,333:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,348:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,355:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,364:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,377:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,386:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,394:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,404:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,428:INFO:Calculating mean and std
2023-02-13 10:48:48,428:INFO:Creating metrics dataframe
2023-02-13 10:48:48,428:INFO:Uploading results into container
2023-02-13 10:48:48,428:INFO:Uploading model into container now
2023-02-13 10:48:48,428:INFO:_master_model_container: 5
2023-02-13 10:48:48,428:INFO:_display_container: 2
2023-02-13 10:48:48,428:INFO:Lars(random_state=123)
2023-02-13 10:48:48,428:INFO:create_model() successfully completed......................................
2023-02-13 10:48:48,525:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:48,525:INFO:Creating metrics dataframe
2023-02-13 10:48:48,533:INFO:Initializing Lasso Least Angle Regression
2023-02-13 10:48:48,533:INFO:Total runtime is 0.029256240526835127 minutes
2023-02-13 10:48:48,533:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:48,533:INFO:Initializing create_model()
2023-02-13 10:48:48,533:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:48,533:INFO:Checking exceptions
2023-02-13 10:48:48,533:INFO:Importing libraries
2023-02-13 10:48:48,533:INFO:Copying training dataset
2023-02-13 10:48:48,541:INFO:Defining folds
2023-02-13 10:48:48,541:INFO:Declaring metric variables
2023-02-13 10:48:48,541:INFO:Importing untrained model
2023-02-13 10:48:48,549:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 10:48:48,557:INFO:Starting cross validation
2023-02-13 10:48:48,557:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:48,605:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:48,615:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:48,623:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:48,642:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:48,649:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:48,663:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:48,671:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:48,686:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:48,700:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:48,708:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 10:48:48,726:INFO:Calculating mean and std
2023-02-13 10:48:48,726:INFO:Creating metrics dataframe
2023-02-13 10:48:48,730:INFO:Uploading results into container
2023-02-13 10:48:48,730:INFO:Uploading model into container now
2023-02-13 10:48:48,730:INFO:_master_model_container: 6
2023-02-13 10:48:48,730:INFO:_display_container: 2
2023-02-13 10:48:48,730:INFO:LassoLars(random_state=123)
2023-02-13 10:48:48,730:INFO:create_model() successfully completed......................................
2023-02-13 10:48:48,834:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:48,834:INFO:Creating metrics dataframe
2023-02-13 10:48:48,842:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 10:48:48,842:INFO:Total runtime is 0.034406681855519615 minutes
2023-02-13 10:48:48,850:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:48,850:INFO:Initializing create_model()
2023-02-13 10:48:48,850:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:48,850:INFO:Checking exceptions
2023-02-13 10:48:48,850:INFO:Importing libraries
2023-02-13 10:48:48,850:INFO:Copying training dataset
2023-02-13 10:48:48,850:INFO:Defining folds
2023-02-13 10:48:48,850:INFO:Declaring metric variables
2023-02-13 10:48:48,858:INFO:Importing untrained model
2023-02-13 10:48:48,858:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 10:48:48,866:INFO:Starting cross validation
2023-02-13 10:48:48,866:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:48,914:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,926:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,932:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,950:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,958:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,976:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,987:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:48,998:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:49,008:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:49,011:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 10:48:49,036:INFO:Calculating mean and std
2023-02-13 10:48:49,036:INFO:Creating metrics dataframe
2023-02-13 10:48:49,036:INFO:Uploading results into container
2023-02-13 10:48:49,041:INFO:Uploading model into container now
2023-02-13 10:48:49,041:INFO:_master_model_container: 7
2023-02-13 10:48:49,041:INFO:_display_container: 2
2023-02-13 10:48:49,041:INFO:OrthogonalMatchingPursuit()
2023-02-13 10:48:49,041:INFO:create_model() successfully completed......................................
2023-02-13 10:48:49,133:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:49,133:INFO:Creating metrics dataframe
2023-02-13 10:48:49,149:INFO:Initializing Bayesian Ridge
2023-02-13 10:48:49,149:INFO:Total runtime is 0.03952711820602417 minutes
2023-02-13 10:48:49,149:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:49,149:INFO:Initializing create_model()
2023-02-13 10:48:49,149:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:49,149:INFO:Checking exceptions
2023-02-13 10:48:49,149:INFO:Importing libraries
2023-02-13 10:48:49,149:INFO:Copying training dataset
2023-02-13 10:48:49,149:INFO:Defining folds
2023-02-13 10:48:49,149:INFO:Declaring metric variables
2023-02-13 10:48:49,157:INFO:Importing untrained model
2023-02-13 10:48:49,157:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:48:49,165:INFO:Starting cross validation
2023-02-13 10:48:49,165:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:49,370:INFO:Calculating mean and std
2023-02-13 10:48:49,370:INFO:Creating metrics dataframe
2023-02-13 10:48:49,370:INFO:Uploading results into container
2023-02-13 10:48:49,370:INFO:Uploading model into container now
2023-02-13 10:48:49,370:INFO:_master_model_container: 8
2023-02-13 10:48:49,370:INFO:_display_container: 2
2023-02-13 10:48:49,370:INFO:BayesianRidge()
2023-02-13 10:48:49,370:INFO:create_model() successfully completed......................................
2023-02-13 10:48:49,476:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:49,476:INFO:Creating metrics dataframe
2023-02-13 10:48:49,484:INFO:Initializing Passive Aggressive Regressor
2023-02-13 10:48:49,484:INFO:Total runtime is 0.04510328769683838 minutes
2023-02-13 10:48:49,492:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:49,492:INFO:Initializing create_model()
2023-02-13 10:48:49,492:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:49,492:INFO:Checking exceptions
2023-02-13 10:48:49,492:INFO:Importing libraries
2023-02-13 10:48:49,492:INFO:Copying training dataset
2023-02-13 10:48:49,492:INFO:Defining folds
2023-02-13 10:48:49,492:INFO:Declaring metric variables
2023-02-13 10:48:49,500:INFO:Importing untrained model
2023-02-13 10:48:49,500:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 10:48:49,508:INFO:Starting cross validation
2023-02-13 10:48:49,508:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:49,664:INFO:Calculating mean and std
2023-02-13 10:48:49,664:INFO:Creating metrics dataframe
2023-02-13 10:48:49,664:INFO:Uploading results into container
2023-02-13 10:48:49,664:INFO:Uploading model into container now
2023-02-13 10:48:49,664:INFO:_master_model_container: 9
2023-02-13 10:48:49,664:INFO:_display_container: 2
2023-02-13 10:48:49,672:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-13 10:48:49,672:INFO:create_model() successfully completed......................................
2023-02-13 10:48:49,775:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:49,775:INFO:Creating metrics dataframe
2023-02-13 10:48:49,780:INFO:Initializing Huber Regressor
2023-02-13 10:48:49,780:INFO:Total runtime is 0.05003175338109334 minutes
2023-02-13 10:48:49,786:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:49,786:INFO:Initializing create_model()
2023-02-13 10:48:49,786:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:49,786:INFO:Checking exceptions
2023-02-13 10:48:49,786:INFO:Importing libraries
2023-02-13 10:48:49,786:INFO:Copying training dataset
2023-02-13 10:48:49,790:INFO:Defining folds
2023-02-13 10:48:49,791:INFO:Declaring metric variables
2023-02-13 10:48:49,794:INFO:Importing untrained model
2023-02-13 10:48:49,796:INFO:Huber Regressor Imported successfully
2023-02-13 10:48:49,804:INFO:Starting cross validation
2023-02-13 10:48:49,806:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:49,877:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:49,885:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:49,898:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:49,929:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:49,939:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:49,944:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:49,958:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:49,974:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 10:48:49,984:INFO:Calculating mean and std
2023-02-13 10:48:49,984:INFO:Creating metrics dataframe
2023-02-13 10:48:49,994:INFO:Uploading results into container
2023-02-13 10:48:49,994:INFO:Uploading model into container now
2023-02-13 10:48:49,994:INFO:_master_model_container: 10
2023-02-13 10:48:49,995:INFO:_display_container: 2
2023-02-13 10:48:49,995:INFO:HuberRegressor()
2023-02-13 10:48:49,995:INFO:create_model() successfully completed......................................
2023-02-13 10:48:50,089:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:50,089:INFO:Creating metrics dataframe
2023-02-13 10:48:50,097:INFO:Initializing K Neighbors Regressor
2023-02-13 10:48:50,097:INFO:Total runtime is 0.05532815456390381 minutes
2023-02-13 10:48:50,097:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:50,097:INFO:Initializing create_model()
2023-02-13 10:48:50,097:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:50,097:INFO:Checking exceptions
2023-02-13 10:48:50,097:INFO:Importing libraries
2023-02-13 10:48:50,097:INFO:Copying training dataset
2023-02-13 10:48:50,106:INFO:Defining folds
2023-02-13 10:48:50,106:INFO:Declaring metric variables
2023-02-13 10:48:50,106:INFO:Importing untrained model
2023-02-13 10:48:50,114:INFO:K Neighbors Regressor Imported successfully
2023-02-13 10:48:50,122:INFO:Starting cross validation
2023-02-13 10:48:50,123:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:50,287:INFO:Calculating mean and std
2023-02-13 10:48:50,287:INFO:Creating metrics dataframe
2023-02-13 10:48:50,287:INFO:Uploading results into container
2023-02-13 10:48:50,287:INFO:Uploading model into container now
2023-02-13 10:48:50,293:INFO:_master_model_container: 11
2023-02-13 10:48:50,293:INFO:_display_container: 2
2023-02-13 10:48:50,293:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 10:48:50,293:INFO:create_model() successfully completed......................................
2023-02-13 10:48:50,407:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:50,407:INFO:Creating metrics dataframe
2023-02-13 10:48:50,416:INFO:Initializing Decision Tree Regressor
2023-02-13 10:48:50,416:INFO:Total runtime is 0.060638495286305744 minutes
2023-02-13 10:48:50,416:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:50,416:INFO:Initializing create_model()
2023-02-13 10:48:50,416:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:50,416:INFO:Checking exceptions
2023-02-13 10:48:50,416:INFO:Importing libraries
2023-02-13 10:48:50,416:INFO:Copying training dataset
2023-02-13 10:48:50,424:INFO:Defining folds
2023-02-13 10:48:50,424:INFO:Declaring metric variables
2023-02-13 10:48:50,429:INFO:Importing untrained model
2023-02-13 10:48:50,435:INFO:Decision Tree Regressor Imported successfully
2023-02-13 10:48:50,442:INFO:Starting cross validation
2023-02-13 10:48:50,442:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:50,597:INFO:Calculating mean and std
2023-02-13 10:48:50,597:INFO:Creating metrics dataframe
2023-02-13 10:48:50,607:INFO:Uploading results into container
2023-02-13 10:48:50,607:INFO:Uploading model into container now
2023-02-13 10:48:50,607:INFO:_master_model_container: 12
2023-02-13 10:48:50,607:INFO:_display_container: 2
2023-02-13 10:48:50,607:INFO:DecisionTreeRegressor(random_state=123)
2023-02-13 10:48:50,607:INFO:create_model() successfully completed......................................
2023-02-13 10:48:50,742:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:50,742:INFO:Creating metrics dataframe
2023-02-13 10:48:50,759:INFO:Initializing Random Forest Regressor
2023-02-13 10:48:50,759:INFO:Total runtime is 0.0663487712542216 minutes
2023-02-13 10:48:50,762:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:50,762:INFO:Initializing create_model()
2023-02-13 10:48:50,762:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:50,762:INFO:Checking exceptions
2023-02-13 10:48:50,762:INFO:Importing libraries
2023-02-13 10:48:50,762:INFO:Copying training dataset
2023-02-13 10:48:50,762:INFO:Defining folds
2023-02-13 10:48:50,762:INFO:Declaring metric variables
2023-02-13 10:48:50,767:INFO:Importing untrained model
2023-02-13 10:48:50,767:INFO:Random Forest Regressor Imported successfully
2023-02-13 10:48:50,779:INFO:Starting cross validation
2023-02-13 10:48:50,779:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:51,387:INFO:Calculating mean and std
2023-02-13 10:48:51,387:INFO:Creating metrics dataframe
2023-02-13 10:48:51,392:INFO:Uploading results into container
2023-02-13 10:48:51,392:INFO:Uploading model into container now
2023-02-13 10:48:51,392:INFO:_master_model_container: 13
2023-02-13 10:48:51,392:INFO:_display_container: 2
2023-02-13 10:48:51,392:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-13 10:48:51,392:INFO:create_model() successfully completed......................................
2023-02-13 10:48:51,498:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:51,507:INFO:Creating metrics dataframe
2023-02-13 10:48:51,515:INFO:Initializing Extra Trees Regressor
2023-02-13 10:48:51,515:INFO:Total runtime is 0.07895906766255698 minutes
2023-02-13 10:48:51,515:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:51,515:INFO:Initializing create_model()
2023-02-13 10:48:51,515:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:51,515:INFO:Checking exceptions
2023-02-13 10:48:51,515:INFO:Importing libraries
2023-02-13 10:48:51,515:INFO:Copying training dataset
2023-02-13 10:48:51,525:INFO:Defining folds
2023-02-13 10:48:51,525:INFO:Declaring metric variables
2023-02-13 10:48:51,527:INFO:Importing untrained model
2023-02-13 10:48:51,532:INFO:Extra Trees Regressor Imported successfully
2023-02-13 10:48:51,540:INFO:Starting cross validation
2023-02-13 10:48:51,540:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:52,089:INFO:Calculating mean and std
2023-02-13 10:48:52,090:INFO:Creating metrics dataframe
2023-02-13 10:48:52,093:INFO:Uploading results into container
2023-02-13 10:48:52,093:INFO:Uploading model into container now
2023-02-13 10:48:52,093:INFO:_master_model_container: 14
2023-02-13 10:48:52,093:INFO:_display_container: 2
2023-02-13 10:48:52,093:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-13 10:48:52,093:INFO:create_model() successfully completed......................................
2023-02-13 10:48:52,198:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:52,198:INFO:Creating metrics dataframe
2023-02-13 10:48:52,214:INFO:Initializing AdaBoost Regressor
2023-02-13 10:48:52,214:INFO:Total runtime is 0.0906069318453471 minutes
2023-02-13 10:48:52,225:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:52,225:INFO:Initializing create_model()
2023-02-13 10:48:52,225:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:52,225:INFO:Checking exceptions
2023-02-13 10:48:52,225:INFO:Importing libraries
2023-02-13 10:48:52,225:INFO:Copying training dataset
2023-02-13 10:48:52,225:INFO:Defining folds
2023-02-13 10:48:52,225:INFO:Declaring metric variables
2023-02-13 10:48:52,230:INFO:Importing untrained model
2023-02-13 10:48:52,238:INFO:AdaBoost Regressor Imported successfully
2023-02-13 10:48:52,247:INFO:Starting cross validation
2023-02-13 10:48:52,247:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:52,612:INFO:Calculating mean and std
2023-02-13 10:48:52,612:INFO:Creating metrics dataframe
2023-02-13 10:48:52,620:INFO:Uploading results into container
2023-02-13 10:48:52,620:INFO:Uploading model into container now
2023-02-13 10:48:52,620:INFO:_master_model_container: 15
2023-02-13 10:48:52,620:INFO:_display_container: 2
2023-02-13 10:48:52,620:INFO:AdaBoostRegressor(random_state=123)
2023-02-13 10:48:52,626:INFO:create_model() successfully completed......................................
2023-02-13 10:48:52,742:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:52,742:INFO:Creating metrics dataframe
2023-02-13 10:48:52,750:INFO:Initializing Gradient Boosting Regressor
2023-02-13 10:48:52,750:INFO:Total runtime is 0.0995455861091614 minutes
2023-02-13 10:48:52,759:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:52,759:INFO:Initializing create_model()
2023-02-13 10:48:52,759:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:52,759:INFO:Checking exceptions
2023-02-13 10:48:52,759:INFO:Importing libraries
2023-02-13 10:48:52,759:INFO:Copying training dataset
2023-02-13 10:48:52,762:INFO:Defining folds
2023-02-13 10:48:52,762:INFO:Declaring metric variables
2023-02-13 10:48:52,765:INFO:Importing untrained model
2023-02-13 10:48:52,767:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 10:48:52,776:INFO:Starting cross validation
2023-02-13 10:48:52,776:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:53,066:INFO:Calculating mean and std
2023-02-13 10:48:53,066:INFO:Creating metrics dataframe
2023-02-13 10:48:53,066:INFO:Uploading results into container
2023-02-13 10:48:53,074:INFO:Uploading model into container now
2023-02-13 10:48:53,074:INFO:_master_model_container: 16
2023-02-13 10:48:53,074:INFO:_display_container: 2
2023-02-13 10:48:53,074:INFO:GradientBoostingRegressor(random_state=123)
2023-02-13 10:48:53,074:INFO:create_model() successfully completed......................................
2023-02-13 10:48:53,196:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:53,196:INFO:Creating metrics dataframe
2023-02-13 10:48:53,220:INFO:Initializing Extreme Gradient Boosting
2023-02-13 10:48:53,220:INFO:Total runtime is 0.10737921794255575 minutes
2023-02-13 10:48:53,228:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:53,228:INFO:Initializing create_model()
2023-02-13 10:48:53,228:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:53,228:INFO:Checking exceptions
2023-02-13 10:48:53,228:INFO:Importing libraries
2023-02-13 10:48:53,228:INFO:Copying training dataset
2023-02-13 10:48:53,228:INFO:Defining folds
2023-02-13 10:48:53,228:INFO:Declaring metric variables
2023-02-13 10:48:53,236:INFO:Importing untrained model
2023-02-13 10:48:53,244:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 10:48:53,260:INFO:Starting cross validation
2023-02-13 10:48:53,260:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:53,511:INFO:Calculating mean and std
2023-02-13 10:48:53,511:INFO:Creating metrics dataframe
2023-02-13 10:48:53,511:INFO:Uploading results into container
2023-02-13 10:48:53,511:INFO:Uploading model into container now
2023-02-13 10:48:53,511:INFO:_master_model_container: 17
2023-02-13 10:48:53,511:INFO:_display_container: 2
2023-02-13 10:48:53,511:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-13 10:48:53,511:INFO:create_model() successfully completed......................................
2023-02-13 10:48:53,611:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:53,615:INFO:Creating metrics dataframe
2023-02-13 10:48:53,623:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 10:48:53,623:INFO:Total runtime is 0.11409452358881633 minutes
2023-02-13 10:48:53,623:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:53,623:INFO:Initializing create_model()
2023-02-13 10:48:53,623:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:53,623:INFO:Checking exceptions
2023-02-13 10:48:53,623:INFO:Importing libraries
2023-02-13 10:48:53,623:INFO:Copying training dataset
2023-02-13 10:48:53,631:INFO:Defining folds
2023-02-13 10:48:53,631:INFO:Declaring metric variables
2023-02-13 10:48:53,639:INFO:Importing untrained model
2023-02-13 10:48:53,639:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 10:48:53,647:INFO:Starting cross validation
2023-02-13 10:48:53,647:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:53,817:INFO:Calculating mean and std
2023-02-13 10:48:53,820:INFO:Creating metrics dataframe
2023-02-13 10:48:53,821:INFO:Uploading results into container
2023-02-13 10:48:53,821:INFO:Uploading model into container now
2023-02-13 10:48:53,821:INFO:_master_model_container: 18
2023-02-13 10:48:53,821:INFO:_display_container: 2
2023-02-13 10:48:53,821:INFO:LGBMRegressor(random_state=123)
2023-02-13 10:48:53,821:INFO:create_model() successfully completed......................................
2023-02-13 10:48:53,915:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:53,915:INFO:Creating metrics dataframe
2023-02-13 10:48:53,932:INFO:Initializing Dummy Regressor
2023-02-13 10:48:53,932:INFO:Total runtime is 0.11923623085021974 minutes
2023-02-13 10:48:53,932:INFO:SubProcess create_model() called ==================================
2023-02-13 10:48:53,932:INFO:Initializing create_model()
2023-02-13 10:48:53,932:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A986E3070>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:53,932:INFO:Checking exceptions
2023-02-13 10:48:53,932:INFO:Importing libraries
2023-02-13 10:48:53,932:INFO:Copying training dataset
2023-02-13 10:48:53,940:INFO:Defining folds
2023-02-13 10:48:53,940:INFO:Declaring metric variables
2023-02-13 10:48:53,940:INFO:Importing untrained model
2023-02-13 10:48:53,948:INFO:Dummy Regressor Imported successfully
2023-02-13 10:48:53,956:INFO:Starting cross validation
2023-02-13 10:48:53,956:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 10:48:54,101:INFO:Calculating mean and std
2023-02-13 10:48:54,109:INFO:Creating metrics dataframe
2023-02-13 10:48:54,112:INFO:Uploading results into container
2023-02-13 10:48:54,112:INFO:Uploading model into container now
2023-02-13 10:48:54,112:INFO:_master_model_container: 19
2023-02-13 10:48:54,112:INFO:_display_container: 2
2023-02-13 10:48:54,112:INFO:DummyRegressor()
2023-02-13 10:48:54,112:INFO:create_model() successfully completed......................................
2023-02-13 10:48:54,206:INFO:SubProcess create_model() end ==================================
2023-02-13 10:48:54,206:INFO:Creating metrics dataframe
2023-02-13 10:48:54,230:INFO:Initializing create_model()
2023-02-13 10:48:54,230:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93F559A0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 10:48:54,230:INFO:Checking exceptions
2023-02-13 10:48:54,230:INFO:Importing libraries
2023-02-13 10:48:54,230:INFO:Copying training dataset
2023-02-13 10:48:54,230:INFO:Defining folds
2023-02-13 10:48:54,230:INFO:Declaring metric variables
2023-02-13 10:48:54,230:INFO:Importing untrained model
2023-02-13 10:48:54,230:INFO:Declaring custom model
2023-02-13 10:48:54,230:INFO:Bayesian Ridge Imported successfully
2023-02-13 10:48:54,230:INFO:Cross validation set to False
2023-02-13 10:48:54,238:INFO:Fitting Model
2023-02-13 10:48:54,254:INFO:BayesianRidge()
2023-02-13 10:48:54,254:INFO:create_model() successfully completed......................................
2023-02-13 10:48:54,391:INFO:_master_model_container: 19
2023-02-13 10:48:54,391:INFO:_display_container: 2
2023-02-13 10:48:54,391:INFO:BayesianRidge()
2023-02-13 10:48:54,391:INFO:compare_models() successfully completed......................................
2023-02-13 11:11:22,608:INFO:PyCaret RegressionExperiment
2023-02-13 11:11:22,608:INFO:Logging name: reg-default-name
2023-02-13 11:11:22,609:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 11:11:22,609:INFO:version 3.0.0.rc8
2023-02-13 11:11:22,609:INFO:Initializing setup()
2023-02-13 11:11:22,609:INFO:self.USI: 9ded
2023-02-13 11:11:22,609:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 11:11:22,609:INFO:Checking environment
2023-02-13 11:11:22,609:INFO:python_version: 3.9.13
2023-02-13 11:11:22,609:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 11:11:22,609:INFO:machine: AMD64
2023-02-13 11:11:22,609:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 11:11:22,614:INFO:Memory: svmem(total=16805040128, available=6623625216, percent=60.6, used=10181414912, free=6623625216)
2023-02-13 11:11:22,614:INFO:Physical Core: 4
2023-02-13 11:11:22,614:INFO:Logical Core: 8
2023-02-13 11:11:22,614:INFO:Checking libraries
2023-02-13 11:11:22,614:INFO:System:
2023-02-13 11:11:22,614:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 11:11:22,614:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 11:11:22,614:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 11:11:22,614:INFO:PyCaret required dependencies:
2023-02-13 11:11:22,614:INFO:                 pip: 23.0
2023-02-13 11:11:22,614:INFO:          setuptools: 58.1.0
2023-02-13 11:11:22,614:INFO:             pycaret: 3.0.0rc8
2023-02-13 11:11:22,614:INFO:             IPython: 8.7.0
2023-02-13 11:11:22,614:INFO:          ipywidgets: 8.0.4
2023-02-13 11:11:22,614:INFO:                tqdm: 4.64.1
2023-02-13 11:11:22,614:INFO:               numpy: 1.22.1
2023-02-13 11:11:22,614:INFO:              pandas: 1.5.2
2023-02-13 11:11:22,614:INFO:              jinja2: 3.1.2
2023-02-13 11:11:22,614:INFO:               scipy: 1.5.4
2023-02-13 11:11:22,614:INFO:              joblib: 1.2.0
2023-02-13 11:11:22,614:INFO:             sklearn: 1.1.3
2023-02-13 11:11:22,614:INFO:                pyod: 1.0.7
2023-02-13 11:11:22,614:INFO:            imblearn: 0.10.1
2023-02-13 11:11:22,616:INFO:   category_encoders: 2.6.0
2023-02-13 11:11:22,616:INFO:            lightgbm: 3.3.4
2023-02-13 11:11:22,616:INFO:               numba: 0.56.4
2023-02-13 11:11:22,616:INFO:            requests: 2.28.1
2023-02-13 11:11:22,616:INFO:          matplotlib: 3.6.2
2023-02-13 11:11:22,616:INFO:          scikitplot: 0.3.7
2023-02-13 11:11:22,616:INFO:         yellowbrick: 1.5
2023-02-13 11:11:22,616:INFO:              plotly: 5.11.0
2023-02-13 11:11:22,616:INFO:             kaleido: 0.2.1
2023-02-13 11:11:22,616:INFO:         statsmodels: 0.13.5
2023-02-13 11:11:22,616:INFO:              sktime: 0.15.1
2023-02-13 11:11:22,616:INFO:               tbats: 1.1.2
2023-02-13 11:11:22,616:INFO:            pmdarima: 2.0.2
2023-02-13 11:11:22,616:INFO:              psutil: 5.9.4
2023-02-13 11:11:22,616:INFO:PyCaret optional dependencies:
2023-02-13 11:11:22,616:INFO:                shap: 0.41.0
2023-02-13 11:11:22,616:INFO:           interpret: 0.3.0
2023-02-13 11:11:22,616:INFO:                umap: Not installed
2023-02-13 11:11:22,616:INFO:    pandas_profiling: 3.6.2
2023-02-13 11:11:22,616:INFO:  explainerdashboard: Not installed
2023-02-13 11:11:22,616:INFO:             autoviz: Not installed
2023-02-13 11:11:22,616:INFO:           fairlearn: Not installed
2023-02-13 11:11:22,616:INFO:             xgboost: 1.7.3
2023-02-13 11:11:22,616:INFO:            catboost: Not installed
2023-02-13 11:11:22,616:INFO:              kmodes: Not installed
2023-02-13 11:11:22,616:INFO:             mlxtend: Not installed
2023-02-13 11:11:22,616:INFO:       statsforecast: Not installed
2023-02-13 11:11:22,616:INFO:        tune_sklearn: Not installed
2023-02-13 11:11:22,616:INFO:                 ray: Not installed
2023-02-13 11:11:22,616:INFO:            hyperopt: Not installed
2023-02-13 11:11:22,616:INFO:              optuna: Not installed
2023-02-13 11:11:22,616:INFO:               skopt: Not installed
2023-02-13 11:11:22,616:INFO:              mlflow: Not installed
2023-02-13 11:11:22,616:INFO:              gradio: Not installed
2023-02-13 11:11:22,616:INFO:             fastapi: Not installed
2023-02-13 11:11:22,616:INFO:             uvicorn: Not installed
2023-02-13 11:11:22,616:INFO:              m2cgen: Not installed
2023-02-13 11:11:22,616:INFO:           evidently: Not installed
2023-02-13 11:11:22,616:INFO:                nltk: 3.8
2023-02-13 11:11:22,618:INFO:            pyLDAvis: Not installed
2023-02-13 11:11:22,618:INFO:              gensim: Not installed
2023-02-13 11:11:22,618:INFO:               spacy: Not installed
2023-02-13 11:11:22,618:INFO:           wordcloud: 1.8.2.2
2023-02-13 11:11:22,618:INFO:            textblob: Not installed
2023-02-13 11:11:22,618:INFO:               fugue: Not installed
2023-02-13 11:11:22,618:INFO:           streamlit: 1.16.0
2023-02-13 11:11:22,618:INFO:             prophet: Not installed
2023-02-13 11:11:22,618:INFO:None
2023-02-13 11:11:22,618:INFO:Set up data.
2023-02-13 11:11:22,624:INFO:Set up train/test split.
2023-02-13 11:11:22,628:INFO:Set up index.
2023-02-13 11:11:22,628:INFO:Set up folding strategy.
2023-02-13 11:11:22,629:INFO:Assigning column types.
2023-02-13 11:11:22,633:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 11:11:22,634:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,634:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,643:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,690:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,723:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,723:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:22,731:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:22,731:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,738:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,738:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,779:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,829:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,829:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:22,832:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:22,832:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 11:11:22,840:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,846:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,896:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,940:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,940:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:22,946:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:22,952:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:11:22,963:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,026:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,068:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,068:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:23,068:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:23,068:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 11:11:23,079:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,133:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,178:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,180:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:23,180:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:23,183:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,233:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,267:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,278:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:23,279:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:23,279:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 11:11:23,337:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,384:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,384:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:23,389:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:23,449:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,505:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,505:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:23,505:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:23,505:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 11:11:23,564:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,603:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:23,611:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:23,699:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:11:23,754:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:23,756:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:23,756:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 11:11:23,868:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:23,868:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:23,975:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:23,978:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:23,978:INFO:Preparing preprocessing pipeline...
2023-02-13 11:11:23,978:INFO:Set up column name cleaning.
2023-02-13 11:11:23,978:INFO:Set up simple imputation.
2023-02-13 11:11:24,034:INFO:Finished creating preprocessing pipeline.
2023-02-13 11:11:24,034:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 11:11:24,034:INFO:Creating final display dataframe.
2023-02-13 11:11:24,268:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              9ded
2023-02-13 11:11:24,390:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:24,394:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:24,482:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:11:24,482:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:11:24,482:INFO:setup() successfully completed in 1.87s...............
2023-02-13 11:11:24,482:INFO:Initializing compare_models()
2023-02-13 11:11:24,482:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 11:11:24,482:INFO:Checking exceptions
2023-02-13 11:11:24,482:INFO:Preparing display monitor
2023-02-13 11:11:24,514:INFO:Initializing Linear Regression
2023-02-13 11:11:24,514:INFO:Total runtime is 0.0 minutes
2023-02-13 11:11:24,518:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:24,518:INFO:Initializing create_model()
2023-02-13 11:11:24,518:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:24,518:INFO:Checking exceptions
2023-02-13 11:11:24,518:INFO:Importing libraries
2023-02-13 11:11:24,518:INFO:Copying training dataset
2023-02-13 11:11:24,520:INFO:Defining folds
2023-02-13 11:11:24,520:INFO:Declaring metric variables
2023-02-13 11:11:24,522:INFO:Importing untrained model
2023-02-13 11:11:24,526:INFO:Linear Regression Imported successfully
2023-02-13 11:11:24,535:INFO:Starting cross validation
2023-02-13 11:11:24,536:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:28,977:INFO:Calculating mean and std
2023-02-13 11:11:28,985:INFO:Creating metrics dataframe
2023-02-13 11:11:28,989:INFO:Uploading results into container
2023-02-13 11:11:28,989:INFO:Uploading model into container now
2023-02-13 11:11:28,989:INFO:_master_model_container: 1
2023-02-13 11:11:28,991:INFO:_display_container: 2
2023-02-13 11:11:28,991:INFO:LinearRegression(n_jobs=-1)
2023-02-13 11:11:28,991:INFO:create_model() successfully completed......................................
2023-02-13 11:11:29,100:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:29,100:INFO:Creating metrics dataframe
2023-02-13 11:11:29,108:INFO:Initializing Lasso Regression
2023-02-13 11:11:29,108:INFO:Total runtime is 0.0765630563100179 minutes
2023-02-13 11:11:29,108:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:29,108:INFO:Initializing create_model()
2023-02-13 11:11:29,108:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:29,108:INFO:Checking exceptions
2023-02-13 11:11:29,108:INFO:Importing libraries
2023-02-13 11:11:29,108:INFO:Copying training dataset
2023-02-13 11:11:29,116:INFO:Defining folds
2023-02-13 11:11:29,116:INFO:Declaring metric variables
2023-02-13 11:11:29,116:INFO:Importing untrained model
2023-02-13 11:11:29,126:INFO:Lasso Regression Imported successfully
2023-02-13 11:11:29,132:INFO:Starting cross validation
2023-02-13 11:11:29,132:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:29,290:INFO:Calculating mean and std
2023-02-13 11:11:29,296:INFO:Creating metrics dataframe
2023-02-13 11:11:29,296:INFO:Uploading results into container
2023-02-13 11:11:29,296:INFO:Uploading model into container now
2023-02-13 11:11:29,296:INFO:_master_model_container: 2
2023-02-13 11:11:29,296:INFO:_display_container: 2
2023-02-13 11:11:29,296:INFO:Lasso(random_state=1)
2023-02-13 11:11:29,296:INFO:create_model() successfully completed......................................
2023-02-13 11:11:29,443:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:29,443:INFO:Creating metrics dataframe
2023-02-13 11:11:29,467:INFO:Initializing Ridge Regression
2023-02-13 11:11:29,467:INFO:Total runtime is 0.08254150946935018 minutes
2023-02-13 11:11:29,475:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:29,475:INFO:Initializing create_model()
2023-02-13 11:11:29,475:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:29,475:INFO:Checking exceptions
2023-02-13 11:11:29,475:INFO:Importing libraries
2023-02-13 11:11:29,475:INFO:Copying training dataset
2023-02-13 11:11:29,483:INFO:Defining folds
2023-02-13 11:11:29,483:INFO:Declaring metric variables
2023-02-13 11:11:29,491:INFO:Importing untrained model
2023-02-13 11:11:29,499:INFO:Ridge Regression Imported successfully
2023-02-13 11:11:29,523:INFO:Starting cross validation
2023-02-13 11:11:29,523:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:29,729:INFO:Calculating mean and std
2023-02-13 11:11:29,729:INFO:Creating metrics dataframe
2023-02-13 11:11:29,738:INFO:Uploading results into container
2023-02-13 11:11:29,739:INFO:Uploading model into container now
2023-02-13 11:11:29,739:INFO:_master_model_container: 3
2023-02-13 11:11:29,739:INFO:_display_container: 2
2023-02-13 11:11:29,739:INFO:Ridge(random_state=1)
2023-02-13 11:11:29,740:INFO:create_model() successfully completed......................................
2023-02-13 11:11:29,840:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:29,840:INFO:Creating metrics dataframe
2023-02-13 11:11:29,844:INFO:Initializing Elastic Net
2023-02-13 11:11:29,844:INFO:Total runtime is 0.0888348420461019 minutes
2023-02-13 11:11:29,844:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:29,844:INFO:Initializing create_model()
2023-02-13 11:11:29,844:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:29,844:INFO:Checking exceptions
2023-02-13 11:11:29,844:INFO:Importing libraries
2023-02-13 11:11:29,844:INFO:Copying training dataset
2023-02-13 11:11:29,854:INFO:Defining folds
2023-02-13 11:11:29,854:INFO:Declaring metric variables
2023-02-13 11:11:29,856:INFO:Importing untrained model
2023-02-13 11:11:29,861:INFO:Elastic Net Imported successfully
2023-02-13 11:11:29,861:INFO:Starting cross validation
2023-02-13 11:11:29,861:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:30,021:INFO:Calculating mean and std
2023-02-13 11:11:30,021:INFO:Creating metrics dataframe
2023-02-13 11:11:30,026:INFO:Uploading results into container
2023-02-13 11:11:30,026:INFO:Uploading model into container now
2023-02-13 11:11:30,026:INFO:_master_model_container: 4
2023-02-13 11:11:30,026:INFO:_display_container: 2
2023-02-13 11:11:30,026:INFO:ElasticNet(random_state=1)
2023-02-13 11:11:30,029:INFO:create_model() successfully completed......................................
2023-02-13 11:11:30,124:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:30,124:INFO:Creating metrics dataframe
2023-02-13 11:11:30,132:INFO:Initializing Least Angle Regression
2023-02-13 11:11:30,132:INFO:Total runtime is 0.09363869031270346 minutes
2023-02-13 11:11:30,141:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:30,141:INFO:Initializing create_model()
2023-02-13 11:11:30,141:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:30,141:INFO:Checking exceptions
2023-02-13 11:11:30,141:INFO:Importing libraries
2023-02-13 11:11:30,141:INFO:Copying training dataset
2023-02-13 11:11:30,141:INFO:Defining folds
2023-02-13 11:11:30,141:INFO:Declaring metric variables
2023-02-13 11:11:30,141:INFO:Importing untrained model
2023-02-13 11:11:30,149:INFO:Least Angle Regression Imported successfully
2023-02-13 11:11:30,157:INFO:Starting cross validation
2023-02-13 11:11:30,157:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:30,197:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,205:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,222:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,230:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,248:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,260:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,273:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,279:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,288:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,297:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,312:INFO:Calculating mean and std
2023-02-13 11:11:30,317:INFO:Creating metrics dataframe
2023-02-13 11:11:30,317:INFO:Uploading results into container
2023-02-13 11:11:30,317:INFO:Uploading model into container now
2023-02-13 11:11:30,317:INFO:_master_model_container: 5
2023-02-13 11:11:30,317:INFO:_display_container: 2
2023-02-13 11:11:30,321:INFO:Lars(random_state=1)
2023-02-13 11:11:30,321:INFO:create_model() successfully completed......................................
2023-02-13 11:11:30,411:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:30,411:INFO:Creating metrics dataframe
2023-02-13 11:11:30,428:INFO:Initializing Lasso Least Angle Regression
2023-02-13 11:11:30,428:INFO:Total runtime is 0.09856232404708863 minutes
2023-02-13 11:11:30,434:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:30,434:INFO:Initializing create_model()
2023-02-13 11:11:30,434:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:30,434:INFO:Checking exceptions
2023-02-13 11:11:30,434:INFO:Importing libraries
2023-02-13 11:11:30,434:INFO:Copying training dataset
2023-02-13 11:11:30,438:INFO:Defining folds
2023-02-13 11:11:30,438:INFO:Declaring metric variables
2023-02-13 11:11:30,443:INFO:Importing untrained model
2023-02-13 11:11:30,445:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 11:11:30,450:INFO:Starting cross validation
2023-02-13 11:11:30,450:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:30,494:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:11:30,510:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:11:30,513:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:11:30,528:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:11:30,535:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:11:30,543:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:11:30,556:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:11:30,571:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:11:30,577:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:11:30,587:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:11:30,601:INFO:Calculating mean and std
2023-02-13 11:11:30,601:INFO:Creating metrics dataframe
2023-02-13 11:11:30,609:INFO:Uploading results into container
2023-02-13 11:11:30,610:INFO:Uploading model into container now
2023-02-13 11:11:30,610:INFO:_master_model_container: 6
2023-02-13 11:11:30,610:INFO:_display_container: 2
2023-02-13 11:11:30,610:INFO:LassoLars(random_state=1)
2023-02-13 11:11:30,610:INFO:create_model() successfully completed......................................
2023-02-13 11:11:30,709:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:30,709:INFO:Creating metrics dataframe
2023-02-13 11:11:30,717:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 11:11:30,717:INFO:Total runtime is 0.10338038603464764 minutes
2023-02-13 11:11:30,723:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:30,723:INFO:Initializing create_model()
2023-02-13 11:11:30,723:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:30,723:INFO:Checking exceptions
2023-02-13 11:11:30,723:INFO:Importing libraries
2023-02-13 11:11:30,723:INFO:Copying training dataset
2023-02-13 11:11:30,726:INFO:Defining folds
2023-02-13 11:11:30,726:INFO:Declaring metric variables
2023-02-13 11:11:30,730:INFO:Importing untrained model
2023-02-13 11:11:30,734:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 11:11:30,739:INFO:Starting cross validation
2023-02-13 11:11:30,740:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:30,774:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,782:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,801:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,810:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,823:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,831:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,840:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,853:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,865:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,872:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:11:30,890:INFO:Calculating mean and std
2023-02-13 11:11:30,890:INFO:Creating metrics dataframe
2023-02-13 11:11:30,895:INFO:Uploading results into container
2023-02-13 11:11:30,895:INFO:Uploading model into container now
2023-02-13 11:11:30,895:INFO:_master_model_container: 7
2023-02-13 11:11:30,895:INFO:_display_container: 2
2023-02-13 11:11:30,897:INFO:OrthogonalMatchingPursuit()
2023-02-13 11:11:30,897:INFO:create_model() successfully completed......................................
2023-02-13 11:11:30,993:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:30,993:INFO:Creating metrics dataframe
2023-02-13 11:11:31,006:INFO:Initializing Bayesian Ridge
2023-02-13 11:11:31,006:INFO:Total runtime is 0.10819243987401328 minutes
2023-02-13 11:11:31,010:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:31,010:INFO:Initializing create_model()
2023-02-13 11:11:31,010:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:31,010:INFO:Checking exceptions
2023-02-13 11:11:31,010:INFO:Importing libraries
2023-02-13 11:11:31,010:INFO:Copying training dataset
2023-02-13 11:11:31,013:INFO:Defining folds
2023-02-13 11:11:31,013:INFO:Declaring metric variables
2023-02-13 11:11:31,015:INFO:Importing untrained model
2023-02-13 11:11:31,020:INFO:Bayesian Ridge Imported successfully
2023-02-13 11:11:31,027:INFO:Starting cross validation
2023-02-13 11:11:31,027:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:31,174:INFO:Calculating mean and std
2023-02-13 11:11:31,174:INFO:Creating metrics dataframe
2023-02-13 11:11:31,174:INFO:Uploading results into container
2023-02-13 11:11:31,174:INFO:Uploading model into container now
2023-02-13 11:11:31,174:INFO:_master_model_container: 8
2023-02-13 11:11:31,174:INFO:_display_container: 2
2023-02-13 11:11:31,174:INFO:BayesianRidge()
2023-02-13 11:11:31,174:INFO:create_model() successfully completed......................................
2023-02-13 11:11:31,272:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:31,272:INFO:Creating metrics dataframe
2023-02-13 11:11:31,283:INFO:Initializing Passive Aggressive Regressor
2023-02-13 11:11:31,283:INFO:Total runtime is 0.11281819343566896 minutes
2023-02-13 11:11:31,291:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:31,291:INFO:Initializing create_model()
2023-02-13 11:11:31,291:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:31,291:INFO:Checking exceptions
2023-02-13 11:11:31,291:INFO:Importing libraries
2023-02-13 11:11:31,291:INFO:Copying training dataset
2023-02-13 11:11:31,293:INFO:Defining folds
2023-02-13 11:11:31,293:INFO:Declaring metric variables
2023-02-13 11:11:31,298:INFO:Importing untrained model
2023-02-13 11:11:31,304:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 11:11:31,310:INFO:Starting cross validation
2023-02-13 11:11:31,311:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:31,460:INFO:Calculating mean and std
2023-02-13 11:11:31,460:INFO:Creating metrics dataframe
2023-02-13 11:11:31,467:INFO:Uploading results into container
2023-02-13 11:11:31,467:INFO:Uploading model into container now
2023-02-13 11:11:31,467:INFO:_master_model_container: 9
2023-02-13 11:11:31,467:INFO:_display_container: 2
2023-02-13 11:11:31,467:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 11:11:31,467:INFO:create_model() successfully completed......................................
2023-02-13 11:11:31,564:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:31,572:INFO:Creating metrics dataframe
2023-02-13 11:11:31,580:INFO:Initializing Huber Regressor
2023-02-13 11:11:31,580:INFO:Total runtime is 0.11777035792668662 minutes
2023-02-13 11:11:31,580:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:31,580:INFO:Initializing create_model()
2023-02-13 11:11:31,580:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:31,580:INFO:Checking exceptions
2023-02-13 11:11:31,580:INFO:Importing libraries
2023-02-13 11:11:31,580:INFO:Copying training dataset
2023-02-13 11:11:31,588:INFO:Defining folds
2023-02-13 11:11:31,588:INFO:Declaring metric variables
2023-02-13 11:11:31,588:INFO:Importing untrained model
2023-02-13 11:11:31,588:INFO:Huber Regressor Imported successfully
2023-02-13 11:11:31,596:INFO:Starting cross validation
2023-02-13 11:11:31,596:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:31,661:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:11:31,690:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:11:31,700:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:11:31,700:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:11:31,711:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:11:31,728:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:11:31,744:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:11:31,752:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:11:31,758:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:11:31,770:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:11:31,785:INFO:Calculating mean and std
2023-02-13 11:11:31,786:INFO:Creating metrics dataframe
2023-02-13 11:11:31,788:INFO:Uploading results into container
2023-02-13 11:11:31,788:INFO:Uploading model into container now
2023-02-13 11:11:31,788:INFO:_master_model_container: 10
2023-02-13 11:11:31,788:INFO:_display_container: 2
2023-02-13 11:11:31,788:INFO:HuberRegressor()
2023-02-13 11:11:31,788:INFO:create_model() successfully completed......................................
2023-02-13 11:11:31,888:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:31,888:INFO:Creating metrics dataframe
2023-02-13 11:11:31,892:INFO:Initializing K Neighbors Regressor
2023-02-13 11:11:31,892:INFO:Total runtime is 0.12296854654947918 minutes
2023-02-13 11:11:31,900:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:31,908:INFO:Initializing create_model()
2023-02-13 11:11:31,908:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:31,908:INFO:Checking exceptions
2023-02-13 11:11:31,908:INFO:Importing libraries
2023-02-13 11:11:31,908:INFO:Copying training dataset
2023-02-13 11:11:31,908:INFO:Defining folds
2023-02-13 11:11:31,908:INFO:Declaring metric variables
2023-02-13 11:11:31,918:INFO:Importing untrained model
2023-02-13 11:11:31,918:INFO:K Neighbors Regressor Imported successfully
2023-02-13 11:11:31,924:INFO:Starting cross validation
2023-02-13 11:11:31,924:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:32,087:INFO:Calculating mean and std
2023-02-13 11:11:32,088:INFO:Creating metrics dataframe
2023-02-13 11:11:32,088:INFO:Uploading results into container
2023-02-13 11:11:32,088:INFO:Uploading model into container now
2023-02-13 11:11:32,088:INFO:_master_model_container: 11
2023-02-13 11:11:32,088:INFO:_display_container: 2
2023-02-13 11:11:32,088:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 11:11:32,088:INFO:create_model() successfully completed......................................
2023-02-13 11:11:32,186:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:32,186:INFO:Creating metrics dataframe
2023-02-13 11:11:32,201:INFO:Initializing Decision Tree Regressor
2023-02-13 11:11:32,201:INFO:Total runtime is 0.12811673482259117 minutes
2023-02-13 11:11:32,204:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:32,204:INFO:Initializing create_model()
2023-02-13 11:11:32,204:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:32,204:INFO:Checking exceptions
2023-02-13 11:11:32,204:INFO:Importing libraries
2023-02-13 11:11:32,204:INFO:Copying training dataset
2023-02-13 11:11:32,204:INFO:Defining folds
2023-02-13 11:11:32,204:INFO:Declaring metric variables
2023-02-13 11:11:32,209:INFO:Importing untrained model
2023-02-13 11:11:32,209:INFO:Decision Tree Regressor Imported successfully
2023-02-13 11:11:32,218:INFO:Starting cross validation
2023-02-13 11:11:32,218:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:32,376:INFO:Calculating mean and std
2023-02-13 11:11:32,376:INFO:Creating metrics dataframe
2023-02-13 11:11:32,376:INFO:Uploading results into container
2023-02-13 11:11:32,376:INFO:Uploading model into container now
2023-02-13 11:11:32,376:INFO:_master_model_container: 12
2023-02-13 11:11:32,376:INFO:_display_container: 2
2023-02-13 11:11:32,376:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 11:11:32,376:INFO:create_model() successfully completed......................................
2023-02-13 11:11:32,496:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:32,496:INFO:Creating metrics dataframe
2023-02-13 11:11:32,505:INFO:Initializing Random Forest Regressor
2023-02-13 11:11:32,505:INFO:Total runtime is 0.1331753492355347 minutes
2023-02-13 11:11:32,513:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:32,513:INFO:Initializing create_model()
2023-02-13 11:11:32,513:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:32,513:INFO:Checking exceptions
2023-02-13 11:11:32,513:INFO:Importing libraries
2023-02-13 11:11:32,513:INFO:Copying training dataset
2023-02-13 11:11:32,513:INFO:Defining folds
2023-02-13 11:11:32,513:INFO:Declaring metric variables
2023-02-13 11:11:32,513:INFO:Importing untrained model
2023-02-13 11:11:32,521:INFO:Random Forest Regressor Imported successfully
2023-02-13 11:11:32,529:INFO:Starting cross validation
2023-02-13 11:11:32,529:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:33,033:INFO:Calculating mean and std
2023-02-13 11:11:33,035:INFO:Creating metrics dataframe
2023-02-13 11:11:33,036:INFO:Uploading results into container
2023-02-13 11:11:33,036:INFO:Uploading model into container now
2023-02-13 11:11:33,036:INFO:_master_model_container: 13
2023-02-13 11:11:33,040:INFO:_display_container: 2
2023-02-13 11:11:33,040:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 11:11:33,040:INFO:create_model() successfully completed......................................
2023-02-13 11:11:33,133:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:33,133:INFO:Creating metrics dataframe
2023-02-13 11:11:33,142:INFO:Initializing Extra Trees Regressor
2023-02-13 11:11:33,142:INFO:Total runtime is 0.1438041170438131 minutes
2023-02-13 11:11:33,150:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:33,150:INFO:Initializing create_model()
2023-02-13 11:11:33,150:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:33,150:INFO:Checking exceptions
2023-02-13 11:11:33,150:INFO:Importing libraries
2023-02-13 11:11:33,151:INFO:Copying training dataset
2023-02-13 11:11:33,153:INFO:Defining folds
2023-02-13 11:11:33,153:INFO:Declaring metric variables
2023-02-13 11:11:33,158:INFO:Importing untrained model
2023-02-13 11:11:33,158:INFO:Extra Trees Regressor Imported successfully
2023-02-13 11:11:33,168:INFO:Starting cross validation
2023-02-13 11:11:33,169:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:33,581:INFO:Calculating mean and std
2023-02-13 11:11:33,581:INFO:Creating metrics dataframe
2023-02-13 11:11:33,585:INFO:Uploading results into container
2023-02-13 11:11:33,585:INFO:Uploading model into container now
2023-02-13 11:11:33,585:INFO:_master_model_container: 14
2023-02-13 11:11:33,585:INFO:_display_container: 2
2023-02-13 11:11:33,585:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 11:11:33,585:INFO:create_model() successfully completed......................................
2023-02-13 11:11:33,684:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:33,684:INFO:Creating metrics dataframe
2023-02-13 11:11:33,692:INFO:Initializing AdaBoost Regressor
2023-02-13 11:11:33,692:INFO:Total runtime is 0.1529567122459412 minutes
2023-02-13 11:11:33,692:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:33,692:INFO:Initializing create_model()
2023-02-13 11:11:33,692:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:33,692:INFO:Checking exceptions
2023-02-13 11:11:33,692:INFO:Importing libraries
2023-02-13 11:11:33,692:INFO:Copying training dataset
2023-02-13 11:11:33,701:INFO:Defining folds
2023-02-13 11:11:33,701:INFO:Declaring metric variables
2023-02-13 11:11:33,703:INFO:Importing untrained model
2023-02-13 11:11:33,708:INFO:AdaBoost Regressor Imported successfully
2023-02-13 11:11:33,708:INFO:Starting cross validation
2023-02-13 11:11:33,708:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:33,961:INFO:Calculating mean and std
2023-02-13 11:11:33,961:INFO:Creating metrics dataframe
2023-02-13 11:11:33,961:INFO:Uploading results into container
2023-02-13 11:11:33,961:INFO:Uploading model into container now
2023-02-13 11:11:33,961:INFO:_master_model_container: 15
2023-02-13 11:11:33,961:INFO:_display_container: 2
2023-02-13 11:11:33,961:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 11:11:33,961:INFO:create_model() successfully completed......................................
2023-02-13 11:11:34,058:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:34,058:INFO:Creating metrics dataframe
2023-02-13 11:11:34,082:INFO:Initializing Gradient Boosting Regressor
2023-02-13 11:11:34,082:INFO:Total runtime is 0.15946830113728847 minutes
2023-02-13 11:11:34,082:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:34,090:INFO:Initializing create_model()
2023-02-13 11:11:34,090:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:34,090:INFO:Checking exceptions
2023-02-13 11:11:34,090:INFO:Importing libraries
2023-02-13 11:11:34,090:INFO:Copying training dataset
2023-02-13 11:11:34,090:INFO:Defining folds
2023-02-13 11:11:34,090:INFO:Declaring metric variables
2023-02-13 11:11:34,090:INFO:Importing untrained model
2023-02-13 11:11:34,098:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 11:11:34,106:INFO:Starting cross validation
2023-02-13 11:11:34,106:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:34,308:INFO:Calculating mean and std
2023-02-13 11:11:34,308:INFO:Creating metrics dataframe
2023-02-13 11:11:34,308:INFO:Uploading results into container
2023-02-13 11:11:34,308:INFO:Uploading model into container now
2023-02-13 11:11:34,308:INFO:_master_model_container: 16
2023-02-13 11:11:34,308:INFO:_display_container: 2
2023-02-13 11:11:34,308:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 11:11:34,308:INFO:create_model() successfully completed......................................
2023-02-13 11:11:34,413:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:34,413:INFO:Creating metrics dataframe
2023-02-13 11:11:34,421:INFO:Initializing Extreme Gradient Boosting
2023-02-13 11:11:34,421:INFO:Total runtime is 0.16512194474538172 minutes
2023-02-13 11:11:34,429:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:34,429:INFO:Initializing create_model()
2023-02-13 11:11:34,429:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:34,429:INFO:Checking exceptions
2023-02-13 11:11:34,429:INFO:Importing libraries
2023-02-13 11:11:34,429:INFO:Copying training dataset
2023-02-13 11:11:34,429:INFO:Defining folds
2023-02-13 11:11:34,429:INFO:Declaring metric variables
2023-02-13 11:11:34,438:INFO:Importing untrained model
2023-02-13 11:11:34,444:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 11:11:34,446:INFO:Starting cross validation
2023-02-13 11:11:34,446:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:34,681:INFO:Calculating mean and std
2023-02-13 11:11:34,681:INFO:Creating metrics dataframe
2023-02-13 11:11:34,689:INFO:Uploading results into container
2023-02-13 11:11:34,689:INFO:Uploading model into container now
2023-02-13 11:11:34,689:INFO:_master_model_container: 17
2023-02-13 11:11:34,689:INFO:_display_container: 2
2023-02-13 11:11:34,689:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 11:11:34,689:INFO:create_model() successfully completed......................................
2023-02-13 11:11:34,803:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:34,803:INFO:Creating metrics dataframe
2023-02-13 11:11:34,819:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 11:11:34,819:INFO:Total runtime is 0.17174845139185593 minutes
2023-02-13 11:11:34,819:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:34,819:INFO:Initializing create_model()
2023-02-13 11:11:34,819:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:34,819:INFO:Checking exceptions
2023-02-13 11:11:34,819:INFO:Importing libraries
2023-02-13 11:11:34,819:INFO:Copying training dataset
2023-02-13 11:11:34,827:INFO:Defining folds
2023-02-13 11:11:34,827:INFO:Declaring metric variables
2023-02-13 11:11:34,835:INFO:Importing untrained model
2023-02-13 11:11:34,835:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 11:11:34,844:INFO:Starting cross validation
2023-02-13 11:11:34,844:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:35,087:INFO:Calculating mean and std
2023-02-13 11:11:35,087:INFO:Creating metrics dataframe
2023-02-13 11:11:35,087:INFO:Uploading results into container
2023-02-13 11:11:35,087:INFO:Uploading model into container now
2023-02-13 11:11:35,087:INFO:_master_model_container: 18
2023-02-13 11:11:35,087:INFO:_display_container: 2
2023-02-13 11:11:35,087:INFO:LGBMRegressor(random_state=1)
2023-02-13 11:11:35,094:INFO:create_model() successfully completed......................................
2023-02-13 11:11:35,191:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:35,191:INFO:Creating metrics dataframe
2023-02-13 11:11:35,199:INFO:Initializing Dummy Regressor
2023-02-13 11:11:35,199:INFO:Total runtime is 0.17808718681335456 minutes
2023-02-13 11:11:35,199:INFO:SubProcess create_model() called ==================================
2023-02-13 11:11:35,199:INFO:Initializing create_model()
2023-02-13 11:11:35,207:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A93F55A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:35,207:INFO:Checking exceptions
2023-02-13 11:11:35,207:INFO:Importing libraries
2023-02-13 11:11:35,207:INFO:Copying training dataset
2023-02-13 11:11:35,207:INFO:Defining folds
2023-02-13 11:11:35,207:INFO:Declaring metric variables
2023-02-13 11:11:35,207:INFO:Importing untrained model
2023-02-13 11:11:35,215:INFO:Dummy Regressor Imported successfully
2023-02-13 11:11:35,223:INFO:Starting cross validation
2023-02-13 11:11:35,223:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:11:35,370:INFO:Calculating mean and std
2023-02-13 11:11:35,370:INFO:Creating metrics dataframe
2023-02-13 11:11:35,370:INFO:Uploading results into container
2023-02-13 11:11:35,370:INFO:Uploading model into container now
2023-02-13 11:11:35,370:INFO:_master_model_container: 19
2023-02-13 11:11:35,370:INFO:_display_container: 2
2023-02-13 11:11:35,378:INFO:DummyRegressor()
2023-02-13 11:11:35,378:INFO:create_model() successfully completed......................................
2023-02-13 11:11:35,483:INFO:SubProcess create_model() end ==================================
2023-02-13 11:11:35,483:INFO:Creating metrics dataframe
2023-02-13 11:11:35,511:INFO:Initializing create_model()
2023-02-13 11:11:35,511:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93394370>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:11:35,511:INFO:Checking exceptions
2023-02-13 11:11:35,511:INFO:Importing libraries
2023-02-13 11:11:35,511:INFO:Copying training dataset
2023-02-13 11:11:35,515:INFO:Defining folds
2023-02-13 11:11:35,515:INFO:Declaring metric variables
2023-02-13 11:11:35,515:INFO:Importing untrained model
2023-02-13 11:11:35,515:INFO:Declaring custom model
2023-02-13 11:11:35,515:INFO:Bayesian Ridge Imported successfully
2023-02-13 11:11:35,515:INFO:Cross validation set to False
2023-02-13 11:11:35,515:INFO:Fitting Model
2023-02-13 11:11:35,546:INFO:BayesianRidge()
2023-02-13 11:11:35,546:INFO:create_model() successfully completed......................................
2023-02-13 11:11:35,668:INFO:_master_model_container: 19
2023-02-13 11:11:35,676:INFO:_display_container: 2
2023-02-13 11:11:35,676:INFO:BayesianRidge()
2023-02-13 11:11:35,676:INFO:compare_models() successfully completed......................................
2023-02-13 11:15:16,338:INFO:PyCaret RegressionExperiment
2023-02-13 11:15:16,338:INFO:Logging name: reg-default-name
2023-02-13 11:15:16,338:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 11:15:16,338:INFO:version 3.0.0.rc8
2023-02-13 11:15:16,338:INFO:Initializing setup()
2023-02-13 11:15:16,338:INFO:self.USI: e9c4
2023-02-13 11:15:16,338:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 11:15:16,338:INFO:Checking environment
2023-02-13 11:15:16,338:INFO:python_version: 3.9.13
2023-02-13 11:15:16,338:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 11:15:16,338:INFO:machine: AMD64
2023-02-13 11:15:16,338:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 11:15:16,345:INFO:Memory: svmem(total=16805040128, available=5789237248, percent=65.6, used=11015802880, free=5789237248)
2023-02-13 11:15:16,345:INFO:Physical Core: 4
2023-02-13 11:15:16,345:INFO:Logical Core: 8
2023-02-13 11:15:16,345:INFO:Checking libraries
2023-02-13 11:15:16,345:INFO:System:
2023-02-13 11:15:16,345:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 11:15:16,345:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 11:15:16,345:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 11:15:16,345:INFO:PyCaret required dependencies:
2023-02-13 11:15:16,345:INFO:                 pip: 23.0
2023-02-13 11:15:16,345:INFO:          setuptools: 58.1.0
2023-02-13 11:15:16,345:INFO:             pycaret: 3.0.0rc8
2023-02-13 11:15:16,345:INFO:             IPython: 8.7.0
2023-02-13 11:15:16,345:INFO:          ipywidgets: 8.0.4
2023-02-13 11:15:16,345:INFO:                tqdm: 4.64.1
2023-02-13 11:15:16,345:INFO:               numpy: 1.22.1
2023-02-13 11:15:16,345:INFO:              pandas: 1.5.2
2023-02-13 11:15:16,345:INFO:              jinja2: 3.1.2
2023-02-13 11:15:16,345:INFO:               scipy: 1.5.4
2023-02-13 11:15:16,345:INFO:              joblib: 1.2.0
2023-02-13 11:15:16,345:INFO:             sklearn: 1.1.3
2023-02-13 11:15:16,345:INFO:                pyod: 1.0.7
2023-02-13 11:15:16,345:INFO:            imblearn: 0.10.1
2023-02-13 11:15:16,345:INFO:   category_encoders: 2.6.0
2023-02-13 11:15:16,345:INFO:            lightgbm: 3.3.4
2023-02-13 11:15:16,345:INFO:               numba: 0.56.4
2023-02-13 11:15:16,345:INFO:            requests: 2.28.1
2023-02-13 11:15:16,345:INFO:          matplotlib: 3.6.2
2023-02-13 11:15:16,345:INFO:          scikitplot: 0.3.7
2023-02-13 11:15:16,345:INFO:         yellowbrick: 1.5
2023-02-13 11:15:16,345:INFO:              plotly: 5.11.0
2023-02-13 11:15:16,345:INFO:             kaleido: 0.2.1
2023-02-13 11:15:16,345:INFO:         statsmodels: 0.13.5
2023-02-13 11:15:16,348:INFO:              sktime: 0.15.1
2023-02-13 11:15:16,348:INFO:               tbats: 1.1.2
2023-02-13 11:15:16,348:INFO:            pmdarima: 2.0.2
2023-02-13 11:15:16,348:INFO:              psutil: 5.9.4
2023-02-13 11:15:16,348:INFO:PyCaret optional dependencies:
2023-02-13 11:15:16,348:INFO:                shap: 0.41.0
2023-02-13 11:15:16,348:INFO:           interpret: 0.3.0
2023-02-13 11:15:16,348:INFO:                umap: Not installed
2023-02-13 11:15:16,348:INFO:    pandas_profiling: 3.6.2
2023-02-13 11:15:16,348:INFO:  explainerdashboard: Not installed
2023-02-13 11:15:16,348:INFO:             autoviz: Not installed
2023-02-13 11:15:16,348:INFO:           fairlearn: Not installed
2023-02-13 11:15:16,348:INFO:             xgboost: 1.7.3
2023-02-13 11:15:16,348:INFO:            catboost: Not installed
2023-02-13 11:15:16,348:INFO:              kmodes: Not installed
2023-02-13 11:15:16,348:INFO:             mlxtend: Not installed
2023-02-13 11:15:16,348:INFO:       statsforecast: Not installed
2023-02-13 11:15:16,348:INFO:        tune_sklearn: Not installed
2023-02-13 11:15:16,348:INFO:                 ray: Not installed
2023-02-13 11:15:16,348:INFO:            hyperopt: Not installed
2023-02-13 11:15:16,348:INFO:              optuna: Not installed
2023-02-13 11:15:16,348:INFO:               skopt: Not installed
2023-02-13 11:15:16,348:INFO:              mlflow: Not installed
2023-02-13 11:15:16,348:INFO:              gradio: Not installed
2023-02-13 11:15:16,348:INFO:             fastapi: Not installed
2023-02-13 11:15:16,348:INFO:             uvicorn: Not installed
2023-02-13 11:15:16,348:INFO:              m2cgen: Not installed
2023-02-13 11:15:16,348:INFO:           evidently: Not installed
2023-02-13 11:15:16,348:INFO:                nltk: 3.8
2023-02-13 11:15:16,348:INFO:            pyLDAvis: Not installed
2023-02-13 11:15:16,348:INFO:              gensim: Not installed
2023-02-13 11:15:16,348:INFO:               spacy: Not installed
2023-02-13 11:15:16,348:INFO:           wordcloud: 1.8.2.2
2023-02-13 11:15:16,348:INFO:            textblob: Not installed
2023-02-13 11:15:16,348:INFO:               fugue: Not installed
2023-02-13 11:15:16,348:INFO:           streamlit: 1.16.0
2023-02-13 11:15:16,348:INFO:             prophet: Not installed
2023-02-13 11:15:16,348:INFO:None
2023-02-13 11:15:16,348:INFO:Set up data.
2023-02-13 11:15:16,355:INFO:Set up train/test split.
2023-02-13 11:15:16,356:INFO:Set up index.
2023-02-13 11:15:16,356:INFO:Set up folding strategy.
2023-02-13 11:15:16,356:INFO:Assigning column types.
2023-02-13 11:15:16,362:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 11:15:16,362:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,364:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,370:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,412:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,451:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,451:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:16,451:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:16,451:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,451:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,461:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,510:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,566:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,566:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:16,566:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:16,566:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 11:15:16,582:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,594:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,661:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,713:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,713:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:16,721:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:16,730:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,745:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,861:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,933:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:15:16,933:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:16,935:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:16,935:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 11:15:16,950:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,059:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,116:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,116:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:17,116:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:17,127:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,174:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,210:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,210:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:17,217:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:17,217:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 11:15:17,266:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,305:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,305:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:17,305:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:17,378:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,412:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,412:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:17,412:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:17,412:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 11:15:17,469:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,501:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:17,509:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:17,582:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:15:17,648:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:17,648:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:17,648:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 11:15:17,895:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:17,895:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:18,132:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:18,132:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:18,132:INFO:Preparing preprocessing pipeline...
2023-02-13 11:15:18,140:INFO:Set up column name cleaning.
2023-02-13 11:15:18,140:INFO:Set up simple imputation.
2023-02-13 11:15:18,160:INFO:Finished creating preprocessing pipeline.
2023-02-13 11:15:18,165:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 11:15:18,165:INFO:Creating final display dataframe.
2023-02-13 11:15:18,419:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              e9c4
2023-02-13 11:15:18,681:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:18,690:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:18,865:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:15:18,865:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:15:18,872:INFO:setup() successfully completed in 2.53s...............
2023-02-13 11:15:18,872:INFO:Initializing compare_models()
2023-02-13 11:15:18,872:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 11:15:18,872:INFO:Checking exceptions
2023-02-13 11:15:18,876:INFO:Preparing display monitor
2023-02-13 11:15:18,933:INFO:Initializing Linear Regression
2023-02-13 11:15:18,933:INFO:Total runtime is 6.676117579142252e-05 minutes
2023-02-13 11:15:18,939:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:18,940:INFO:Initializing create_model()
2023-02-13 11:15:18,940:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:18,940:INFO:Checking exceptions
2023-02-13 11:15:18,940:INFO:Importing libraries
2023-02-13 11:15:18,940:INFO:Copying training dataset
2023-02-13 11:15:18,942:INFO:Defining folds
2023-02-13 11:15:18,942:INFO:Declaring metric variables
2023-02-13 11:15:18,946:INFO:Importing untrained model
2023-02-13 11:15:18,954:INFO:Linear Regression Imported successfully
2023-02-13 11:15:18,966:INFO:Starting cross validation
2023-02-13 11:15:18,968:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:19,129:INFO:Calculating mean and std
2023-02-13 11:15:19,129:INFO:Creating metrics dataframe
2023-02-13 11:15:19,134:INFO:Uploading results into container
2023-02-13 11:15:19,134:INFO:Uploading model into container now
2023-02-13 11:15:19,134:INFO:_master_model_container: 1
2023-02-13 11:15:19,134:INFO:_display_container: 2
2023-02-13 11:15:19,134:INFO:LinearRegression(n_jobs=-1)
2023-02-13 11:15:19,134:INFO:create_model() successfully completed......................................
2023-02-13 11:15:19,282:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:19,282:INFO:Creating metrics dataframe
2023-02-13 11:15:19,290:INFO:Initializing Lasso Regression
2023-02-13 11:15:19,290:INFO:Total runtime is 0.0060047745704650875 minutes
2023-02-13 11:15:19,294:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:19,294:INFO:Initializing create_model()
2023-02-13 11:15:19,294:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:19,295:INFO:Checking exceptions
2023-02-13 11:15:19,295:INFO:Importing libraries
2023-02-13 11:15:19,295:INFO:Copying training dataset
2023-02-13 11:15:19,297:INFO:Defining folds
2023-02-13 11:15:19,297:INFO:Declaring metric variables
2023-02-13 11:15:19,297:INFO:Importing untrained model
2023-02-13 11:15:19,308:INFO:Lasso Regression Imported successfully
2023-02-13 11:15:19,313:INFO:Starting cross validation
2023-02-13 11:15:19,313:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:19,481:INFO:Calculating mean and std
2023-02-13 11:15:19,481:INFO:Creating metrics dataframe
2023-02-13 11:15:19,482:INFO:Uploading results into container
2023-02-13 11:15:19,482:INFO:Uploading model into container now
2023-02-13 11:15:19,482:INFO:_master_model_container: 2
2023-02-13 11:15:19,482:INFO:_display_container: 2
2023-02-13 11:15:19,482:INFO:Lasso(random_state=1)
2023-02-13 11:15:19,482:INFO:create_model() successfully completed......................................
2023-02-13 11:15:19,581:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:19,581:INFO:Creating metrics dataframe
2023-02-13 11:15:19,592:INFO:Initializing Ridge Regression
2023-02-13 11:15:19,592:INFO:Total runtime is 0.01104363997777303 minutes
2023-02-13 11:15:19,593:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:19,596:INFO:Initializing create_model()
2023-02-13 11:15:19,596:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:19,596:INFO:Checking exceptions
2023-02-13 11:15:19,596:INFO:Importing libraries
2023-02-13 11:15:19,596:INFO:Copying training dataset
2023-02-13 11:15:19,600:INFO:Defining folds
2023-02-13 11:15:19,600:INFO:Declaring metric variables
2023-02-13 11:15:19,600:INFO:Importing untrained model
2023-02-13 11:15:19,605:INFO:Ridge Regression Imported successfully
2023-02-13 11:15:19,607:INFO:Starting cross validation
2023-02-13 11:15:19,607:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:19,753:INFO:Calculating mean and std
2023-02-13 11:15:19,753:INFO:Creating metrics dataframe
2023-02-13 11:15:19,758:INFO:Uploading results into container
2023-02-13 11:15:19,758:INFO:Uploading model into container now
2023-02-13 11:15:19,758:INFO:_master_model_container: 3
2023-02-13 11:15:19,758:INFO:_display_container: 2
2023-02-13 11:15:19,758:INFO:Ridge(random_state=1)
2023-02-13 11:15:19,758:INFO:create_model() successfully completed......................................
2023-02-13 11:15:19,925:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:19,925:INFO:Creating metrics dataframe
2023-02-13 11:15:19,953:INFO:Initializing Elastic Net
2023-02-13 11:15:19,953:INFO:Total runtime is 0.017054514090220133 minutes
2023-02-13 11:15:19,960:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:19,960:INFO:Initializing create_model()
2023-02-13 11:15:19,960:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:19,960:INFO:Checking exceptions
2023-02-13 11:15:19,960:INFO:Importing libraries
2023-02-13 11:15:19,960:INFO:Copying training dataset
2023-02-13 11:15:19,971:INFO:Defining folds
2023-02-13 11:15:19,972:INFO:Declaring metric variables
2023-02-13 11:15:19,983:INFO:Importing untrained model
2023-02-13 11:15:19,992:INFO:Elastic Net Imported successfully
2023-02-13 11:15:20,010:INFO:Starting cross validation
2023-02-13 11:15:20,013:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:20,317:INFO:Calculating mean and std
2023-02-13 11:15:20,317:INFO:Creating metrics dataframe
2023-02-13 11:15:20,325:INFO:Uploading results into container
2023-02-13 11:15:20,328:INFO:Uploading model into container now
2023-02-13 11:15:20,329:INFO:_master_model_container: 4
2023-02-13 11:15:20,329:INFO:_display_container: 2
2023-02-13 11:15:20,330:INFO:ElasticNet(random_state=1)
2023-02-13 11:15:20,330:INFO:create_model() successfully completed......................................
2023-02-13 11:15:20,504:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:20,504:INFO:Creating metrics dataframe
2023-02-13 11:15:20,526:INFO:Initializing Least Angle Regression
2023-02-13 11:15:20,526:INFO:Total runtime is 0.026609575748443602 minutes
2023-02-13 11:15:20,534:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:20,535:INFO:Initializing create_model()
2023-02-13 11:15:20,535:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:20,536:INFO:Checking exceptions
2023-02-13 11:15:20,536:INFO:Importing libraries
2023-02-13 11:15:20,536:INFO:Copying training dataset
2023-02-13 11:15:20,541:INFO:Defining folds
2023-02-13 11:15:20,541:INFO:Declaring metric variables
2023-02-13 11:15:20,550:INFO:Importing untrained model
2023-02-13 11:15:20,556:INFO:Least Angle Regression Imported successfully
2023-02-13 11:15:20,571:INFO:Starting cross validation
2023-02-13 11:15:20,573:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:20,659:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:20,678:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:20,692:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:20,728:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:20,739:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:20,771:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:20,786:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:20,811:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:20,833:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:20,850:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:20,891:INFO:Calculating mean and std
2023-02-13 11:15:20,892:INFO:Creating metrics dataframe
2023-02-13 11:15:20,898:INFO:Uploading results into container
2023-02-13 11:15:20,898:INFO:Uploading model into container now
2023-02-13 11:15:20,898:INFO:_master_model_container: 5
2023-02-13 11:15:20,898:INFO:_display_container: 2
2023-02-13 11:15:20,898:INFO:Lars(random_state=1)
2023-02-13 11:15:20,898:INFO:create_model() successfully completed......................................
2023-02-13 11:15:21,074:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:21,074:INFO:Creating metrics dataframe
2023-02-13 11:15:21,088:INFO:Initializing Lasso Least Angle Regression
2023-02-13 11:15:21,088:INFO:Total runtime is 0.03597333828608195 minutes
2023-02-13 11:15:21,100:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:21,100:INFO:Initializing create_model()
2023-02-13 11:15:21,100:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:21,100:INFO:Checking exceptions
2023-02-13 11:15:21,100:INFO:Importing libraries
2023-02-13 11:15:21,100:INFO:Copying training dataset
2023-02-13 11:15:21,108:INFO:Defining folds
2023-02-13 11:15:21,108:INFO:Declaring metric variables
2023-02-13 11:15:21,116:INFO:Importing untrained model
2023-02-13 11:15:21,126:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 11:15:21,137:INFO:Starting cross validation
2023-02-13 11:15:21,137:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:21,222:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:15:21,241:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:15:21,258:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:15:21,290:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:15:21,305:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:15:21,330:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:15:21,343:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:15:21,369:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:15:21,385:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:15:21,397:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:15:21,424:INFO:Calculating mean and std
2023-02-13 11:15:21,439:INFO:Creating metrics dataframe
2023-02-13 11:15:21,441:INFO:Uploading results into container
2023-02-13 11:15:21,448:INFO:Uploading model into container now
2023-02-13 11:15:21,448:INFO:_master_model_container: 6
2023-02-13 11:15:21,448:INFO:_display_container: 2
2023-02-13 11:15:21,448:INFO:LassoLars(random_state=1)
2023-02-13 11:15:21,448:INFO:create_model() successfully completed......................................
2023-02-13 11:15:21,633:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:21,633:INFO:Creating metrics dataframe
2023-02-13 11:15:21,657:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 11:15:21,657:INFO:Total runtime is 0.04545646905899048 minutes
2023-02-13 11:15:21,666:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:21,666:INFO:Initializing create_model()
2023-02-13 11:15:21,666:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:21,666:INFO:Checking exceptions
2023-02-13 11:15:21,666:INFO:Importing libraries
2023-02-13 11:15:21,666:INFO:Copying training dataset
2023-02-13 11:15:21,675:INFO:Defining folds
2023-02-13 11:15:21,675:INFO:Declaring metric variables
2023-02-13 11:15:21,686:INFO:Importing untrained model
2023-02-13 11:15:21,694:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 11:15:21,710:INFO:Starting cross validation
2023-02-13 11:15:21,710:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:21,789:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:21,805:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:21,835:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:21,853:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:21,870:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:21,900:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:21,923:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:21,948:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:21,964:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:21,985:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:15:22,013:INFO:Calculating mean and std
2023-02-13 11:15:22,013:INFO:Creating metrics dataframe
2023-02-13 11:15:22,027:INFO:Uploading results into container
2023-02-13 11:15:22,027:INFO:Uploading model into container now
2023-02-13 11:15:22,027:INFO:_master_model_container: 7
2023-02-13 11:15:22,027:INFO:_display_container: 2
2023-02-13 11:15:22,027:INFO:OrthogonalMatchingPursuit()
2023-02-13 11:15:22,027:INFO:create_model() successfully completed......................................
2023-02-13 11:15:22,207:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:22,207:INFO:Creating metrics dataframe
2023-02-13 11:15:22,236:INFO:Initializing Bayesian Ridge
2023-02-13 11:15:22,236:INFO:Total runtime is 0.05511616865793864 minutes
2023-02-13 11:15:22,245:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:22,246:INFO:Initializing create_model()
2023-02-13 11:15:22,246:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:22,246:INFO:Checking exceptions
2023-02-13 11:15:22,246:INFO:Importing libraries
2023-02-13 11:15:22,246:INFO:Copying training dataset
2023-02-13 11:15:22,252:INFO:Defining folds
2023-02-13 11:15:22,254:INFO:Declaring metric variables
2023-02-13 11:15:22,264:INFO:Importing untrained model
2023-02-13 11:15:22,273:INFO:Bayesian Ridge Imported successfully
2023-02-13 11:15:22,293:INFO:Starting cross validation
2023-02-13 11:15:22,295:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:22,617:INFO:Calculating mean and std
2023-02-13 11:15:22,622:INFO:Creating metrics dataframe
2023-02-13 11:15:22,622:INFO:Uploading results into container
2023-02-13 11:15:22,622:INFO:Uploading model into container now
2023-02-13 11:15:22,632:INFO:_master_model_container: 8
2023-02-13 11:15:22,632:INFO:_display_container: 2
2023-02-13 11:15:22,632:INFO:BayesianRidge()
2023-02-13 11:15:22,632:INFO:create_model() successfully completed......................................
2023-02-13 11:15:22,825:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:22,839:INFO:Creating metrics dataframe
2023-02-13 11:15:22,857:INFO:Initializing Passive Aggressive Regressor
2023-02-13 11:15:22,857:INFO:Total runtime is 0.06545504728953044 minutes
2023-02-13 11:15:22,871:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:22,872:INFO:Initializing create_model()
2023-02-13 11:15:22,872:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:22,872:INFO:Checking exceptions
2023-02-13 11:15:22,872:INFO:Importing libraries
2023-02-13 11:15:22,874:INFO:Copying training dataset
2023-02-13 11:15:22,878:INFO:Defining folds
2023-02-13 11:15:22,878:INFO:Declaring metric variables
2023-02-13 11:15:22,887:INFO:Importing untrained model
2023-02-13 11:15:22,893:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 11:15:22,912:INFO:Starting cross validation
2023-02-13 11:15:22,912:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:23,205:INFO:Calculating mean and std
2023-02-13 11:15:23,205:INFO:Creating metrics dataframe
2023-02-13 11:15:23,220:INFO:Uploading results into container
2023-02-13 11:15:23,221:INFO:Uploading model into container now
2023-02-13 11:15:23,223:INFO:_master_model_container: 9
2023-02-13 11:15:23,223:INFO:_display_container: 2
2023-02-13 11:15:23,224:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 11:15:23,224:INFO:create_model() successfully completed......................................
2023-02-13 11:15:23,421:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:23,421:INFO:Creating metrics dataframe
2023-02-13 11:15:23,449:INFO:Initializing Huber Regressor
2023-02-13 11:15:23,449:INFO:Total runtime is 0.07533016602198284 minutes
2023-02-13 11:15:23,457:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:23,457:INFO:Initializing create_model()
2023-02-13 11:15:23,457:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:23,457:INFO:Checking exceptions
2023-02-13 11:15:23,457:INFO:Importing libraries
2023-02-13 11:15:23,457:INFO:Copying training dataset
2023-02-13 11:15:23,466:INFO:Defining folds
2023-02-13 11:15:23,470:INFO:Declaring metric variables
2023-02-13 11:15:23,479:INFO:Importing untrained model
2023-02-13 11:15:23,489:INFO:Huber Regressor Imported successfully
2023-02-13 11:15:23,505:INFO:Starting cross validation
2023-02-13 11:15:23,539:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:23,695:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:15:23,727:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:15:23,755:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:15:23,774:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:15:23,806:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:15:23,821:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:15:23,837:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:15:23,854:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:15:23,870:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:15:23,886:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:15:23,903:INFO:Calculating mean and std
2023-02-13 11:15:23,903:INFO:Creating metrics dataframe
2023-02-13 11:15:23,921:INFO:Uploading results into container
2023-02-13 11:15:23,921:INFO:Uploading model into container now
2023-02-13 11:15:23,921:INFO:_master_model_container: 10
2023-02-13 11:15:23,921:INFO:_display_container: 2
2023-02-13 11:15:23,921:INFO:HuberRegressor()
2023-02-13 11:15:23,921:INFO:create_model() successfully completed......................................
2023-02-13 11:15:24,108:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:24,108:INFO:Creating metrics dataframe
2023-02-13 11:15:24,124:INFO:Initializing K Neighbors Regressor
2023-02-13 11:15:24,124:INFO:Total runtime is 0.08657453060150147 minutes
2023-02-13 11:15:24,142:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:24,142:INFO:Initializing create_model()
2023-02-13 11:15:24,142:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:24,142:INFO:Checking exceptions
2023-02-13 11:15:24,142:INFO:Importing libraries
2023-02-13 11:15:24,142:INFO:Copying training dataset
2023-02-13 11:15:24,155:INFO:Defining folds
2023-02-13 11:15:24,155:INFO:Declaring metric variables
2023-02-13 11:15:24,165:INFO:Importing untrained model
2023-02-13 11:15:24,175:INFO:K Neighbors Regressor Imported successfully
2023-02-13 11:15:24,193:INFO:Starting cross validation
2023-02-13 11:15:24,193:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:24,516:INFO:Calculating mean and std
2023-02-13 11:15:24,521:INFO:Creating metrics dataframe
2023-02-13 11:15:24,527:INFO:Uploading results into container
2023-02-13 11:15:24,527:INFO:Uploading model into container now
2023-02-13 11:15:24,527:INFO:_master_model_container: 11
2023-02-13 11:15:24,527:INFO:_display_container: 2
2023-02-13 11:15:24,535:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 11:15:24,535:INFO:create_model() successfully completed......................................
2023-02-13 11:15:24,711:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:24,711:INFO:Creating metrics dataframe
2023-02-13 11:15:24,750:INFO:Initializing Decision Tree Regressor
2023-02-13 11:15:24,750:INFO:Total runtime is 0.09700879653294882 minutes
2023-02-13 11:15:24,759:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:24,761:INFO:Initializing create_model()
2023-02-13 11:15:24,761:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:24,761:INFO:Checking exceptions
2023-02-13 11:15:24,761:INFO:Importing libraries
2023-02-13 11:15:24,763:INFO:Copying training dataset
2023-02-13 11:15:24,770:INFO:Defining folds
2023-02-13 11:15:24,771:INFO:Declaring metric variables
2023-02-13 11:15:24,781:INFO:Importing untrained model
2023-02-13 11:15:24,793:INFO:Decision Tree Regressor Imported successfully
2023-02-13 11:15:24,814:INFO:Starting cross validation
2023-02-13 11:15:24,818:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:25,160:INFO:Calculating mean and std
2023-02-13 11:15:25,160:INFO:Creating metrics dataframe
2023-02-13 11:15:25,160:INFO:Uploading results into container
2023-02-13 11:15:25,171:INFO:Uploading model into container now
2023-02-13 11:15:25,171:INFO:_master_model_container: 12
2023-02-13 11:15:25,171:INFO:_display_container: 2
2023-02-13 11:15:25,171:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 11:15:25,171:INFO:create_model() successfully completed......................................
2023-02-13 11:15:25,314:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:25,314:INFO:Creating metrics dataframe
2023-02-13 11:15:25,342:INFO:Initializing Random Forest Regressor
2023-02-13 11:15:25,342:INFO:Total runtime is 0.10688160657882691 minutes
2023-02-13 11:15:25,349:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:25,349:INFO:Initializing create_model()
2023-02-13 11:15:25,349:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:25,351:INFO:Checking exceptions
2023-02-13 11:15:25,351:INFO:Importing libraries
2023-02-13 11:15:25,351:INFO:Copying training dataset
2023-02-13 11:15:25,353:INFO:Defining folds
2023-02-13 11:15:25,353:INFO:Declaring metric variables
2023-02-13 11:15:25,369:INFO:Importing untrained model
2023-02-13 11:15:25,377:INFO:Random Forest Regressor Imported successfully
2023-02-13 11:15:25,389:INFO:Starting cross validation
2023-02-13 11:15:25,391:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:26,336:INFO:Calculating mean and std
2023-02-13 11:15:26,339:INFO:Creating metrics dataframe
2023-02-13 11:15:26,344:INFO:Uploading results into container
2023-02-13 11:15:26,344:INFO:Uploading model into container now
2023-02-13 11:15:26,344:INFO:_master_model_container: 13
2023-02-13 11:15:26,344:INFO:_display_container: 2
2023-02-13 11:15:26,344:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 11:15:26,344:INFO:create_model() successfully completed......................................
2023-02-13 11:15:26,576:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:26,576:INFO:Creating metrics dataframe
2023-02-13 11:15:26,607:INFO:Initializing Extra Trees Regressor
2023-02-13 11:15:26,607:INFO:Total runtime is 0.1279688835144043 minutes
2023-02-13 11:15:26,617:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:26,617:INFO:Initializing create_model()
2023-02-13 11:15:26,617:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:26,617:INFO:Checking exceptions
2023-02-13 11:15:26,619:INFO:Importing libraries
2023-02-13 11:15:26,619:INFO:Copying training dataset
2023-02-13 11:15:26,622:INFO:Defining folds
2023-02-13 11:15:26,622:INFO:Declaring metric variables
2023-02-13 11:15:26,628:INFO:Importing untrained model
2023-02-13 11:15:26,635:INFO:Extra Trees Regressor Imported successfully
2023-02-13 11:15:26,650:INFO:Starting cross validation
2023-02-13 11:15:26,654:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:27,402:INFO:Calculating mean and std
2023-02-13 11:15:27,402:INFO:Creating metrics dataframe
2023-02-13 11:15:27,425:INFO:Uploading results into container
2023-02-13 11:15:27,426:INFO:Uploading model into container now
2023-02-13 11:15:27,426:INFO:_master_model_container: 14
2023-02-13 11:15:27,426:INFO:_display_container: 2
2023-02-13 11:15:27,426:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 11:15:27,426:INFO:create_model() successfully completed......................................
2023-02-13 11:15:27,600:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:27,600:INFO:Creating metrics dataframe
2023-02-13 11:15:27,632:INFO:Initializing AdaBoost Regressor
2023-02-13 11:15:27,632:INFO:Total runtime is 0.14504150152206421 minutes
2023-02-13 11:15:27,635:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:27,635:INFO:Initializing create_model()
2023-02-13 11:15:27,635:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:27,635:INFO:Checking exceptions
2023-02-13 11:15:27,640:INFO:Importing libraries
2023-02-13 11:15:27,640:INFO:Copying training dataset
2023-02-13 11:15:27,643:INFO:Defining folds
2023-02-13 11:15:27,644:INFO:Declaring metric variables
2023-02-13 11:15:27,653:INFO:Importing untrained model
2023-02-13 11:15:27,662:INFO:AdaBoost Regressor Imported successfully
2023-02-13 11:15:27,673:INFO:Starting cross validation
2023-02-13 11:15:27,678:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:28,239:INFO:Calculating mean and std
2023-02-13 11:15:28,239:INFO:Creating metrics dataframe
2023-02-13 11:15:28,239:INFO:Uploading results into container
2023-02-13 11:15:28,239:INFO:Uploading model into container now
2023-02-13 11:15:28,239:INFO:_master_model_container: 15
2023-02-13 11:15:28,239:INFO:_display_container: 2
2023-02-13 11:15:28,239:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 11:15:28,239:INFO:create_model() successfully completed......................................
2023-02-13 11:15:28,474:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:28,474:INFO:Creating metrics dataframe
2023-02-13 11:15:28,506:INFO:Initializing Gradient Boosting Regressor
2023-02-13 11:15:28,506:INFO:Total runtime is 0.15961065689722698 minutes
2023-02-13 11:15:28,506:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:28,506:INFO:Initializing create_model()
2023-02-13 11:15:28,506:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:28,506:INFO:Checking exceptions
2023-02-13 11:15:28,506:INFO:Importing libraries
2023-02-13 11:15:28,506:INFO:Copying training dataset
2023-02-13 11:15:28,506:INFO:Defining folds
2023-02-13 11:15:28,506:INFO:Declaring metric variables
2023-02-13 11:15:28,522:INFO:Importing untrained model
2023-02-13 11:15:28,522:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 11:15:28,537:INFO:Starting cross validation
2023-02-13 11:15:28,537:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:28,962:INFO:Calculating mean and std
2023-02-13 11:15:28,962:INFO:Creating metrics dataframe
2023-02-13 11:15:28,967:INFO:Uploading results into container
2023-02-13 11:15:28,967:INFO:Uploading model into container now
2023-02-13 11:15:28,969:INFO:_master_model_container: 16
2023-02-13 11:15:28,969:INFO:_display_container: 2
2023-02-13 11:15:28,969:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 11:15:28,969:INFO:create_model() successfully completed......................................
2023-02-13 11:15:29,135:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:29,135:INFO:Creating metrics dataframe
2023-02-13 11:15:29,153:INFO:Initializing Extreme Gradient Boosting
2023-02-13 11:15:29,167:INFO:Total runtime is 0.1703942894935608 minutes
2023-02-13 11:15:29,167:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:29,167:INFO:Initializing create_model()
2023-02-13 11:15:29,167:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:29,167:INFO:Checking exceptions
2023-02-13 11:15:29,167:INFO:Importing libraries
2023-02-13 11:15:29,167:INFO:Copying training dataset
2023-02-13 11:15:29,183:INFO:Defining folds
2023-02-13 11:15:29,183:INFO:Declaring metric variables
2023-02-13 11:15:29,194:INFO:Importing untrained model
2023-02-13 11:15:29,200:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 11:15:29,220:INFO:Starting cross validation
2023-02-13 11:15:29,222:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:29,607:INFO:Calculating mean and std
2023-02-13 11:15:29,613:INFO:Creating metrics dataframe
2023-02-13 11:15:29,616:INFO:Uploading results into container
2023-02-13 11:15:29,616:INFO:Uploading model into container now
2023-02-13 11:15:29,616:INFO:_master_model_container: 17
2023-02-13 11:15:29,616:INFO:_display_container: 2
2023-02-13 11:15:29,616:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 11:15:29,616:INFO:create_model() successfully completed......................................
2023-02-13 11:15:29,792:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:29,792:INFO:Creating metrics dataframe
2023-02-13 11:15:29,819:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 11:15:29,819:INFO:Total runtime is 0.18148990472157797 minutes
2023-02-13 11:15:29,831:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:29,831:INFO:Initializing create_model()
2023-02-13 11:15:29,831:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:29,831:INFO:Checking exceptions
2023-02-13 11:15:29,832:INFO:Importing libraries
2023-02-13 11:15:29,832:INFO:Copying training dataset
2023-02-13 11:15:29,837:INFO:Defining folds
2023-02-13 11:15:29,837:INFO:Declaring metric variables
2023-02-13 11:15:29,847:INFO:Importing untrained model
2023-02-13 11:15:29,858:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 11:15:29,866:INFO:Starting cross validation
2023-02-13 11:15:29,866:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:30,191:INFO:Calculating mean and std
2023-02-13 11:15:30,194:INFO:Creating metrics dataframe
2023-02-13 11:15:30,201:INFO:Uploading results into container
2023-02-13 11:15:30,203:INFO:Uploading model into container now
2023-02-13 11:15:30,203:INFO:_master_model_container: 18
2023-02-13 11:15:30,203:INFO:_display_container: 2
2023-02-13 11:15:30,205:INFO:LGBMRegressor(random_state=1)
2023-02-13 11:15:30,205:INFO:create_model() successfully completed......................................
2023-02-13 11:15:30,379:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:30,379:INFO:Creating metrics dataframe
2023-02-13 11:15:30,417:INFO:Initializing Dummy Regressor
2023-02-13 11:15:30,417:INFO:Total runtime is 0.19146497249603273 minutes
2023-02-13 11:15:30,426:INFO:SubProcess create_model() called ==================================
2023-02-13 11:15:30,426:INFO:Initializing create_model()
2023-02-13 11:15:30,426:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A98684C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:30,426:INFO:Checking exceptions
2023-02-13 11:15:30,426:INFO:Importing libraries
2023-02-13 11:15:30,426:INFO:Copying training dataset
2023-02-13 11:15:30,438:INFO:Defining folds
2023-02-13 11:15:30,438:INFO:Declaring metric variables
2023-02-13 11:15:30,444:INFO:Importing untrained model
2023-02-13 11:15:30,454:INFO:Dummy Regressor Imported successfully
2023-02-13 11:15:30,471:INFO:Starting cross validation
2023-02-13 11:15:30,473:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:15:30,755:INFO:Calculating mean and std
2023-02-13 11:15:30,755:INFO:Creating metrics dataframe
2023-02-13 11:15:30,755:INFO:Uploading results into container
2023-02-13 11:15:30,755:INFO:Uploading model into container now
2023-02-13 11:15:30,755:INFO:_master_model_container: 19
2023-02-13 11:15:30,755:INFO:_display_container: 2
2023-02-13 11:15:30,755:INFO:DummyRegressor()
2023-02-13 11:15:30,755:INFO:create_model() successfully completed......................................
2023-02-13 11:15:30,972:INFO:SubProcess create_model() end ==================================
2023-02-13 11:15:30,972:INFO:Creating metrics dataframe
2023-02-13 11:15:31,032:INFO:Initializing create_model()
2023-02-13 11:15:31,032:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A98AA8280>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:15:31,032:INFO:Checking exceptions
2023-02-13 11:15:31,037:INFO:Importing libraries
2023-02-13 11:15:31,037:INFO:Copying training dataset
2023-02-13 11:15:31,044:INFO:Defining folds
2023-02-13 11:15:31,044:INFO:Declaring metric variables
2023-02-13 11:15:31,044:INFO:Importing untrained model
2023-02-13 11:15:31,044:INFO:Declaring custom model
2023-02-13 11:15:31,044:INFO:Bayesian Ridge Imported successfully
2023-02-13 11:15:31,047:INFO:Cross validation set to False
2023-02-13 11:15:31,047:INFO:Fitting Model
2023-02-13 11:15:31,081:INFO:BayesianRidge()
2023-02-13 11:15:31,081:INFO:create_model() successfully completed......................................
2023-02-13 11:15:31,339:INFO:_master_model_container: 19
2023-02-13 11:15:31,339:INFO:_display_container: 2
2023-02-13 11:15:31,339:INFO:BayesianRidge()
2023-02-13 11:15:31,339:INFO:compare_models() successfully completed......................................
2023-02-13 11:29:06,914:INFO:PyCaret RegressionExperiment
2023-02-13 11:29:06,914:INFO:Logging name: reg-default-name
2023-02-13 11:29:06,914:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 11:29:06,914:INFO:version 3.0.0.rc8
2023-02-13 11:29:06,914:INFO:Initializing setup()
2023-02-13 11:29:06,914:INFO:self.USI: 6a2c
2023-02-13 11:29:06,914:INFO:self._variable_keys: {'exp_name_log', 'seed', 'y_test', 'X', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_param', 'X_train', 'exp_id', 'log_plots_param', 'transform_target_param', 'USI', 'memory', 'idx', 'fold_groups_param', 'fold_generator', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'data', 'X_test', 'target_param', 'html_param', 'fold_shuffle_param', '_ml_usecase'}
2023-02-13 11:29:06,914:INFO:Checking environment
2023-02-13 11:29:06,914:INFO:python_version: 3.9.13
2023-02-13 11:29:06,914:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 11:29:06,914:INFO:machine: AMD64
2023-02-13 11:29:06,914:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 11:29:06,914:INFO:Memory: svmem(total=16805040128, available=7126867968, percent=57.6, used=9678172160, free=7126867968)
2023-02-13 11:29:06,914:INFO:Physical Core: 4
2023-02-13 11:29:06,914:INFO:Logical Core: 8
2023-02-13 11:29:06,914:INFO:Checking libraries
2023-02-13 11:29:06,914:INFO:System:
2023-02-13 11:29:06,914:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 11:29:06,914:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 11:29:06,914:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 11:29:06,914:INFO:PyCaret required dependencies:
2023-02-13 11:29:06,914:INFO:                 pip: 23.0
2023-02-13 11:29:06,914:INFO:          setuptools: 58.1.0
2023-02-13 11:29:06,914:INFO:             pycaret: 3.0.0rc8
2023-02-13 11:29:06,914:INFO:             IPython: 8.7.0
2023-02-13 11:29:06,914:INFO:          ipywidgets: 8.0.4
2023-02-13 11:29:06,914:INFO:                tqdm: 4.64.1
2023-02-13 11:29:06,914:INFO:               numpy: 1.22.1
2023-02-13 11:29:06,914:INFO:              pandas: 1.5.2
2023-02-13 11:29:06,914:INFO:              jinja2: 3.1.2
2023-02-13 11:29:06,914:INFO:               scipy: 1.5.4
2023-02-13 11:29:06,914:INFO:              joblib: 1.2.0
2023-02-13 11:29:06,914:INFO:             sklearn: 1.1.3
2023-02-13 11:29:06,914:INFO:                pyod: 1.0.7
2023-02-13 11:29:06,914:INFO:            imblearn: 0.10.1
2023-02-13 11:29:06,914:INFO:   category_encoders: 2.6.0
2023-02-13 11:29:06,914:INFO:            lightgbm: 3.3.4
2023-02-13 11:29:06,914:INFO:               numba: 0.56.4
2023-02-13 11:29:06,914:INFO:            requests: 2.28.1
2023-02-13 11:29:06,914:INFO:          matplotlib: 3.6.2
2023-02-13 11:29:06,914:INFO:          scikitplot: 0.3.7
2023-02-13 11:29:06,914:INFO:         yellowbrick: 1.5
2023-02-13 11:29:06,914:INFO:              plotly: 5.11.0
2023-02-13 11:29:06,914:INFO:             kaleido: 0.2.1
2023-02-13 11:29:06,914:INFO:         statsmodels: 0.13.5
2023-02-13 11:29:06,914:INFO:              sktime: 0.15.1
2023-02-13 11:29:06,914:INFO:               tbats: 1.1.2
2023-02-13 11:29:06,914:INFO:            pmdarima: 2.0.2
2023-02-13 11:29:06,914:INFO:              psutil: 5.9.4
2023-02-13 11:29:06,914:INFO:PyCaret optional dependencies:
2023-02-13 11:29:06,914:INFO:                shap: 0.41.0
2023-02-13 11:29:06,914:INFO:           interpret: 0.3.0
2023-02-13 11:29:06,914:INFO:                umap: Not installed
2023-02-13 11:29:06,914:INFO:    pandas_profiling: 3.6.2
2023-02-13 11:29:06,914:INFO:  explainerdashboard: Not installed
2023-02-13 11:29:06,914:INFO:             autoviz: Not installed
2023-02-13 11:29:06,914:INFO:           fairlearn: Not installed
2023-02-13 11:29:06,914:INFO:             xgboost: 1.7.3
2023-02-13 11:29:06,914:INFO:            catboost: Not installed
2023-02-13 11:29:06,914:INFO:              kmodes: Not installed
2023-02-13 11:29:06,914:INFO:             mlxtend: Not installed
2023-02-13 11:29:06,914:INFO:       statsforecast: Not installed
2023-02-13 11:29:06,914:INFO:        tune_sklearn: Not installed
2023-02-13 11:29:06,914:INFO:                 ray: Not installed
2023-02-13 11:29:06,914:INFO:            hyperopt: Not installed
2023-02-13 11:29:06,914:INFO:              optuna: Not installed
2023-02-13 11:29:06,914:INFO:               skopt: Not installed
2023-02-13 11:29:06,914:INFO:              mlflow: Not installed
2023-02-13 11:29:06,914:INFO:              gradio: Not installed
2023-02-13 11:29:06,914:INFO:             fastapi: Not installed
2023-02-13 11:29:06,914:INFO:             uvicorn: Not installed
2023-02-13 11:29:06,914:INFO:              m2cgen: Not installed
2023-02-13 11:29:06,914:INFO:           evidently: Not installed
2023-02-13 11:29:06,914:INFO:                nltk: 3.8
2023-02-13 11:29:06,914:INFO:            pyLDAvis: Not installed
2023-02-13 11:29:06,914:INFO:              gensim: Not installed
2023-02-13 11:29:06,914:INFO:               spacy: Not installed
2023-02-13 11:29:06,914:INFO:           wordcloud: 1.8.2.2
2023-02-13 11:29:06,914:INFO:            textblob: Not installed
2023-02-13 11:29:06,914:INFO:               fugue: Not installed
2023-02-13 11:29:06,914:INFO:           streamlit: 1.16.0
2023-02-13 11:29:06,914:INFO:             prophet: Not installed
2023-02-13 11:29:06,914:INFO:None
2023-02-13 11:29:06,914:INFO:Set up data.
2023-02-13 11:29:06,924:INFO:Set up train/test split.
2023-02-13 11:29:06,932:INFO:Set up index.
2023-02-13 11:29:06,932:INFO:Set up folding strategy.
2023-02-13 11:29:06,932:INFO:Assigning column types.
2023-02-13 11:29:06,932:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 11:29:06,932:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 11:29:06,942:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:29:06,947:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:29:06,987:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,032:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,032:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:07,035:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:07,035:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,036:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,036:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,094:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,209:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,209:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:07,212:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:07,215:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 11:29:07,215:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,228:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,315:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,409:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,409:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:07,415:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:07,424:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,429:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,528:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,603:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,603:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:07,608:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:07,608:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 11:29:07,628:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,727:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,806:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,807:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:07,814:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:07,829:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 11:29:07,955:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:29:08,080:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:29:08,080:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:08,082:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:08,082:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 11:29:08,139:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:29:08,177:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:29:08,177:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:08,177:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:08,245:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:29:08,285:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 11:29:08,287:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:08,287:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:08,287:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 11:29:08,345:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:29:08,385:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:08,387:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:08,446:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 11:29:08,485:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:08,485:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:08,485:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 11:29:08,588:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:08,593:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:08,723:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:08,730:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:08,733:INFO:Preparing preprocessing pipeline...
2023-02-13 11:29:08,734:INFO:Set up column name cleaning.
2023-02-13 11:29:08,734:INFO:Set up simple imputation.
2023-02-13 11:29:08,757:INFO:Finished creating preprocessing pipeline.
2023-02-13 11:29:08,763:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 11:29:08,763:INFO:Creating final display dataframe.
2023-02-13 11:29:08,958:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              6a2c
2023-02-13 11:29:09,248:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:09,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:09,429:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 11:29:09,436:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 11:29:09,436:INFO:setup() successfully completed in 2.52s...............
2023-02-13 11:29:09,436:INFO:Initializing compare_models()
2023-02-13 11:29:09,436:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 11:29:09,436:INFO:Checking exceptions
2023-02-13 11:29:09,436:INFO:Preparing display monitor
2023-02-13 11:29:09,474:INFO:Initializing Linear Regression
2023-02-13 11:29:09,474:INFO:Total runtime is 0.0 minutes
2023-02-13 11:29:09,477:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:09,481:INFO:Initializing create_model()
2023-02-13 11:29:09,481:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:09,481:INFO:Checking exceptions
2023-02-13 11:29:09,481:INFO:Importing libraries
2023-02-13 11:29:09,481:INFO:Copying training dataset
2023-02-13 11:29:09,483:INFO:Defining folds
2023-02-13 11:29:09,483:INFO:Declaring metric variables
2023-02-13 11:29:09,490:INFO:Importing untrained model
2023-02-13 11:29:09,494:INFO:Linear Regression Imported successfully
2023-02-13 11:29:09,507:INFO:Starting cross validation
2023-02-13 11:29:09,507:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:13,973:INFO:Calculating mean and std
2023-02-13 11:29:13,974:INFO:Creating metrics dataframe
2023-02-13 11:29:13,976:INFO:Uploading results into container
2023-02-13 11:29:13,976:INFO:Uploading model into container now
2023-02-13 11:29:13,976:INFO:_master_model_container: 1
2023-02-13 11:29:13,976:INFO:_display_container: 2
2023-02-13 11:29:13,976:INFO:LinearRegression(n_jobs=-1)
2023-02-13 11:29:13,976:INFO:create_model() successfully completed......................................
2023-02-13 11:29:14,107:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:14,107:INFO:Creating metrics dataframe
2023-02-13 11:29:14,117:INFO:Initializing Lasso Regression
2023-02-13 11:29:14,117:INFO:Total runtime is 0.07737954457600911 minutes
2023-02-13 11:29:14,118:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:14,121:INFO:Initializing create_model()
2023-02-13 11:29:14,121:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:14,121:INFO:Checking exceptions
2023-02-13 11:29:14,121:INFO:Importing libraries
2023-02-13 11:29:14,121:INFO:Copying training dataset
2023-02-13 11:29:14,124:INFO:Defining folds
2023-02-13 11:29:14,124:INFO:Declaring metric variables
2023-02-13 11:29:14,126:INFO:Importing untrained model
2023-02-13 11:29:14,132:INFO:Lasso Regression Imported successfully
2023-02-13 11:29:14,139:INFO:Starting cross validation
2023-02-13 11:29:14,140:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:14,298:INFO:Calculating mean and std
2023-02-13 11:29:14,301:INFO:Creating metrics dataframe
2023-02-13 11:29:14,302:INFO:Uploading results into container
2023-02-13 11:29:14,302:INFO:Uploading model into container now
2023-02-13 11:29:14,306:INFO:_master_model_container: 2
2023-02-13 11:29:14,306:INFO:_display_container: 2
2023-02-13 11:29:14,306:INFO:Lasso(random_state=1)
2023-02-13 11:29:14,306:INFO:create_model() successfully completed......................................
2023-02-13 11:29:14,407:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:14,407:INFO:Creating metrics dataframe
2023-02-13 11:29:14,420:INFO:Initializing Ridge Regression
2023-02-13 11:29:14,420:INFO:Total runtime is 0.0824353814125061 minutes
2023-02-13 11:29:14,424:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:14,424:INFO:Initializing create_model()
2023-02-13 11:29:14,424:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:14,424:INFO:Checking exceptions
2023-02-13 11:29:14,424:INFO:Importing libraries
2023-02-13 11:29:14,424:INFO:Copying training dataset
2023-02-13 11:29:14,427:INFO:Defining folds
2023-02-13 11:29:14,427:INFO:Declaring metric variables
2023-02-13 11:29:14,431:INFO:Importing untrained model
2023-02-13 11:29:14,433:INFO:Ridge Regression Imported successfully
2023-02-13 11:29:14,444:INFO:Starting cross validation
2023-02-13 11:29:14,444:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:14,597:INFO:Calculating mean and std
2023-02-13 11:29:14,601:INFO:Creating metrics dataframe
2023-02-13 11:29:14,604:INFO:Uploading results into container
2023-02-13 11:29:14,604:INFO:Uploading model into container now
2023-02-13 11:29:14,607:INFO:_master_model_container: 3
2023-02-13 11:29:14,607:INFO:_display_container: 2
2023-02-13 11:29:14,607:INFO:Ridge(random_state=1)
2023-02-13 11:29:14,607:INFO:create_model() successfully completed......................................
2023-02-13 11:29:14,713:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:14,713:INFO:Creating metrics dataframe
2023-02-13 11:29:14,723:INFO:Initializing Elastic Net
2023-02-13 11:29:14,723:INFO:Total runtime is 0.08747890392939249 minutes
2023-02-13 11:29:14,725:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:14,725:INFO:Initializing create_model()
2023-02-13 11:29:14,725:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:14,727:INFO:Checking exceptions
2023-02-13 11:29:14,727:INFO:Importing libraries
2023-02-13 11:29:14,727:INFO:Copying training dataset
2023-02-13 11:29:14,728:INFO:Defining folds
2023-02-13 11:29:14,728:INFO:Declaring metric variables
2023-02-13 11:29:14,733:INFO:Importing untrained model
2023-02-13 11:29:14,734:INFO:Elastic Net Imported successfully
2023-02-13 11:29:14,743:INFO:Starting cross validation
2023-02-13 11:29:14,745:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:14,895:INFO:Calculating mean and std
2023-02-13 11:29:14,895:INFO:Creating metrics dataframe
2023-02-13 11:29:14,895:INFO:Uploading results into container
2023-02-13 11:29:14,902:INFO:Uploading model into container now
2023-02-13 11:29:14,903:INFO:_master_model_container: 4
2023-02-13 11:29:14,903:INFO:_display_container: 2
2023-02-13 11:29:14,903:INFO:ElasticNet(random_state=1)
2023-02-13 11:29:14,903:INFO:create_model() successfully completed......................................
2023-02-13 11:29:15,011:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:15,011:INFO:Creating metrics dataframe
2023-02-13 11:29:15,020:INFO:Initializing Least Angle Regression
2023-02-13 11:29:15,020:INFO:Total runtime is 0.09243057171503702 minutes
2023-02-13 11:29:15,023:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:15,023:INFO:Initializing create_model()
2023-02-13 11:29:15,023:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:15,023:INFO:Checking exceptions
2023-02-13 11:29:15,023:INFO:Importing libraries
2023-02-13 11:29:15,023:INFO:Copying training dataset
2023-02-13 11:29:15,028:INFO:Defining folds
2023-02-13 11:29:15,028:INFO:Declaring metric variables
2023-02-13 11:29:15,033:INFO:Importing untrained model
2023-02-13 11:29:15,036:INFO:Least Angle Regression Imported successfully
2023-02-13 11:29:15,045:INFO:Starting cross validation
2023-02-13 11:29:15,045:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:15,088:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,094:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,107:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,123:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,133:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,147:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,155:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,166:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,169:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,178:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,194:INFO:Calculating mean and std
2023-02-13 11:29:15,194:INFO:Creating metrics dataframe
2023-02-13 11:29:15,194:INFO:Uploading results into container
2023-02-13 11:29:15,194:INFO:Uploading model into container now
2023-02-13 11:29:15,202:INFO:_master_model_container: 5
2023-02-13 11:29:15,202:INFO:_display_container: 2
2023-02-13 11:29:15,202:INFO:Lars(random_state=1)
2023-02-13 11:29:15,202:INFO:create_model() successfully completed......................................
2023-02-13 11:29:15,303:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:15,303:INFO:Creating metrics dataframe
2023-02-13 11:29:15,313:INFO:Initializing Lasso Least Angle Regression
2023-02-13 11:29:15,313:INFO:Total runtime is 0.09731403986612955 minutes
2023-02-13 11:29:15,313:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:15,313:INFO:Initializing create_model()
2023-02-13 11:29:15,313:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:15,313:INFO:Checking exceptions
2023-02-13 11:29:15,313:INFO:Importing libraries
2023-02-13 11:29:15,313:INFO:Copying training dataset
2023-02-13 11:29:15,319:INFO:Defining folds
2023-02-13 11:29:15,319:INFO:Declaring metric variables
2023-02-13 11:29:15,323:INFO:Importing untrained model
2023-02-13 11:29:15,327:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 11:29:15,336:INFO:Starting cross validation
2023-02-13 11:29:15,336:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:15,378:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:29:15,394:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:29:15,394:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:29:15,411:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:29:15,422:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:29:15,435:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:29:15,444:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:29:15,453:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:29:15,463:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:29:15,474:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 11:29:15,488:INFO:Calculating mean and std
2023-02-13 11:29:15,488:INFO:Creating metrics dataframe
2023-02-13 11:29:15,493:INFO:Uploading results into container
2023-02-13 11:29:15,493:INFO:Uploading model into container now
2023-02-13 11:29:15,494:INFO:_master_model_container: 6
2023-02-13 11:29:15,494:INFO:_display_container: 2
2023-02-13 11:29:15,494:INFO:LassoLars(random_state=1)
2023-02-13 11:29:15,494:INFO:create_model() successfully completed......................................
2023-02-13 11:29:15,595:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:15,595:INFO:Creating metrics dataframe
2023-02-13 11:29:15,608:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 11:29:15,608:INFO:Total runtime is 0.10223614772160847 minutes
2023-02-13 11:29:15,613:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:15,613:INFO:Initializing create_model()
2023-02-13 11:29:15,613:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:15,613:INFO:Checking exceptions
2023-02-13 11:29:15,613:INFO:Importing libraries
2023-02-13 11:29:15,613:INFO:Copying training dataset
2023-02-13 11:29:15,618:INFO:Defining folds
2023-02-13 11:29:15,618:INFO:Declaring metric variables
2023-02-13 11:29:15,623:INFO:Importing untrained model
2023-02-13 11:29:15,623:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 11:29:15,632:INFO:Starting cross validation
2023-02-13 11:29:15,632:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:15,673:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,688:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,705:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,727:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,737:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,753:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,768:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,787:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,795:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,810:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 11:29:15,833:INFO:Calculating mean and std
2023-02-13 11:29:15,834:INFO:Creating metrics dataframe
2023-02-13 11:29:15,839:INFO:Uploading results into container
2023-02-13 11:29:15,839:INFO:Uploading model into container now
2023-02-13 11:29:15,839:INFO:_master_model_container: 7
2023-02-13 11:29:15,839:INFO:_display_container: 2
2023-02-13 11:29:15,839:INFO:OrthogonalMatchingPursuit()
2023-02-13 11:29:15,842:INFO:create_model() successfully completed......................................
2023-02-13 11:29:15,976:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:15,976:INFO:Creating metrics dataframe
2023-02-13 11:29:16,003:INFO:Initializing Bayesian Ridge
2023-02-13 11:29:16,003:INFO:Total runtime is 0.10881401300430296 minutes
2023-02-13 11:29:16,010:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:16,010:INFO:Initializing create_model()
2023-02-13 11:29:16,010:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:16,010:INFO:Checking exceptions
2023-02-13 11:29:16,010:INFO:Importing libraries
2023-02-13 11:29:16,010:INFO:Copying training dataset
2023-02-13 11:29:16,013:INFO:Defining folds
2023-02-13 11:29:16,013:INFO:Declaring metric variables
2023-02-13 11:29:16,018:INFO:Importing untrained model
2023-02-13 11:29:16,026:INFO:Bayesian Ridge Imported successfully
2023-02-13 11:29:16,035:INFO:Starting cross validation
2023-02-13 11:29:16,035:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:16,193:INFO:Calculating mean and std
2023-02-13 11:29:16,193:INFO:Creating metrics dataframe
2023-02-13 11:29:16,201:INFO:Uploading results into container
2023-02-13 11:29:16,201:INFO:Uploading model into container now
2023-02-13 11:29:16,201:INFO:_master_model_container: 8
2023-02-13 11:29:16,201:INFO:_display_container: 2
2023-02-13 11:29:16,203:INFO:BayesianRidge()
2023-02-13 11:29:16,203:INFO:create_model() successfully completed......................................
2023-02-13 11:29:16,323:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:16,326:INFO:Creating metrics dataframe
2023-02-13 11:29:16,358:INFO:Initializing Passive Aggressive Regressor
2023-02-13 11:29:16,359:INFO:Total runtime is 0.11474707523981728 minutes
2023-02-13 11:29:16,363:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:16,363:INFO:Initializing create_model()
2023-02-13 11:29:16,363:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:16,363:INFO:Checking exceptions
2023-02-13 11:29:16,363:INFO:Importing libraries
2023-02-13 11:29:16,363:INFO:Copying training dataset
2023-02-13 11:29:16,367:INFO:Defining folds
2023-02-13 11:29:16,367:INFO:Declaring metric variables
2023-02-13 11:29:16,375:INFO:Importing untrained model
2023-02-13 11:29:16,382:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 11:29:16,390:INFO:Starting cross validation
2023-02-13 11:29:16,390:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:16,542:INFO:Calculating mean and std
2023-02-13 11:29:16,542:INFO:Creating metrics dataframe
2023-02-13 11:29:16,549:INFO:Uploading results into container
2023-02-13 11:29:16,552:INFO:Uploading model into container now
2023-02-13 11:29:16,552:INFO:_master_model_container: 9
2023-02-13 11:29:16,552:INFO:_display_container: 2
2023-02-13 11:29:16,552:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 11:29:16,552:INFO:create_model() successfully completed......................................
2023-02-13 11:29:16,687:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:16,687:INFO:Creating metrics dataframe
2023-02-13 11:29:16,695:INFO:Initializing Huber Regressor
2023-02-13 11:29:16,695:INFO:Total runtime is 0.12034777402877805 minutes
2023-02-13 11:29:16,704:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:16,704:INFO:Initializing create_model()
2023-02-13 11:29:16,704:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:16,704:INFO:Checking exceptions
2023-02-13 11:29:16,704:INFO:Importing libraries
2023-02-13 11:29:16,704:INFO:Copying training dataset
2023-02-13 11:29:16,709:INFO:Defining folds
2023-02-13 11:29:16,709:INFO:Declaring metric variables
2023-02-13 11:29:16,712:INFO:Importing untrained model
2023-02-13 11:29:16,719:INFO:Huber Regressor Imported successfully
2023-02-13 11:29:16,726:INFO:Starting cross validation
2023-02-13 11:29:16,726:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:16,808:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:29:16,823:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:29:16,840:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:29:16,852:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:29:16,857:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:29:16,874:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:29:16,889:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:29:16,898:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:29:16,898:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:29:16,914:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 11:29:16,923:INFO:Calculating mean and std
2023-02-13 11:29:16,930:INFO:Creating metrics dataframe
2023-02-13 11:29:16,932:INFO:Uploading results into container
2023-02-13 11:29:16,932:INFO:Uploading model into container now
2023-02-13 11:29:16,932:INFO:_master_model_container: 10
2023-02-13 11:29:16,932:INFO:_display_container: 2
2023-02-13 11:29:16,932:INFO:HuberRegressor()
2023-02-13 11:29:16,932:INFO:create_model() successfully completed......................................
2023-02-13 11:29:17,045:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:17,045:INFO:Creating metrics dataframe
2023-02-13 11:29:17,055:INFO:Initializing K Neighbors Regressor
2023-02-13 11:29:17,055:INFO:Total runtime is 0.1263520280520121 minutes
2023-02-13 11:29:17,060:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:17,060:INFO:Initializing create_model()
2023-02-13 11:29:17,061:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:17,061:INFO:Checking exceptions
2023-02-13 11:29:17,061:INFO:Importing libraries
2023-02-13 11:29:17,061:INFO:Copying training dataset
2023-02-13 11:29:17,064:INFO:Defining folds
2023-02-13 11:29:17,064:INFO:Declaring metric variables
2023-02-13 11:29:17,069:INFO:Importing untrained model
2023-02-13 11:29:17,078:INFO:K Neighbors Regressor Imported successfully
2023-02-13 11:29:17,086:INFO:Starting cross validation
2023-02-13 11:29:17,086:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:17,270:INFO:Calculating mean and std
2023-02-13 11:29:17,270:INFO:Creating metrics dataframe
2023-02-13 11:29:17,274:INFO:Uploading results into container
2023-02-13 11:29:17,275:INFO:Uploading model into container now
2023-02-13 11:29:17,275:INFO:_master_model_container: 11
2023-02-13 11:29:17,275:INFO:_display_container: 2
2023-02-13 11:29:17,275:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 11:29:17,276:INFO:create_model() successfully completed......................................
2023-02-13 11:29:17,397:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:17,397:INFO:Creating metrics dataframe
2023-02-13 11:29:17,410:INFO:Initializing Decision Tree Regressor
2023-02-13 11:29:17,412:INFO:Total runtime is 0.132309353351593 minutes
2023-02-13 11:29:17,415:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:17,417:INFO:Initializing create_model()
2023-02-13 11:29:17,417:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:17,417:INFO:Checking exceptions
2023-02-13 11:29:17,417:INFO:Importing libraries
2023-02-13 11:29:17,417:INFO:Copying training dataset
2023-02-13 11:29:17,423:INFO:Defining folds
2023-02-13 11:29:17,423:INFO:Declaring metric variables
2023-02-13 11:29:17,427:INFO:Importing untrained model
2023-02-13 11:29:17,430:INFO:Decision Tree Regressor Imported successfully
2023-02-13 11:29:17,440:INFO:Starting cross validation
2023-02-13 11:29:17,442:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:17,617:INFO:Calculating mean and std
2023-02-13 11:29:17,621:INFO:Creating metrics dataframe
2023-02-13 11:29:17,623:INFO:Uploading results into container
2023-02-13 11:29:17,625:INFO:Uploading model into container now
2023-02-13 11:29:17,625:INFO:_master_model_container: 12
2023-02-13 11:29:17,625:INFO:_display_container: 2
2023-02-13 11:29:17,625:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 11:29:17,625:INFO:create_model() successfully completed......................................
2023-02-13 11:29:17,752:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:17,752:INFO:Creating metrics dataframe
2023-02-13 11:29:17,768:INFO:Initializing Random Forest Regressor
2023-02-13 11:29:17,768:INFO:Total runtime is 0.13822930256525673 minutes
2023-02-13 11:29:17,773:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:17,773:INFO:Initializing create_model()
2023-02-13 11:29:17,773:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:17,773:INFO:Checking exceptions
2023-02-13 11:29:17,773:INFO:Importing libraries
2023-02-13 11:29:17,773:INFO:Copying training dataset
2023-02-13 11:29:17,777:INFO:Defining folds
2023-02-13 11:29:17,777:INFO:Declaring metric variables
2023-02-13 11:29:17,777:INFO:Importing untrained model
2023-02-13 11:29:17,785:INFO:Random Forest Regressor Imported successfully
2023-02-13 11:29:17,793:INFO:Starting cross validation
2023-02-13 11:29:17,793:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:18,386:INFO:Calculating mean and std
2023-02-13 11:29:18,388:INFO:Creating metrics dataframe
2023-02-13 11:29:18,390:INFO:Uploading results into container
2023-02-13 11:29:18,391:INFO:Uploading model into container now
2023-02-13 11:29:18,392:INFO:_master_model_container: 13
2023-02-13 11:29:18,392:INFO:_display_container: 2
2023-02-13 11:29:18,392:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 11:29:18,392:INFO:create_model() successfully completed......................................
2023-02-13 11:29:18,502:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:18,502:INFO:Creating metrics dataframe
2023-02-13 11:29:18,514:INFO:Initializing Extra Trees Regressor
2023-02-13 11:29:18,514:INFO:Total runtime is 0.1506725708643595 minutes
2023-02-13 11:29:18,519:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:18,519:INFO:Initializing create_model()
2023-02-13 11:29:18,519:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:18,519:INFO:Checking exceptions
2023-02-13 11:29:18,519:INFO:Importing libraries
2023-02-13 11:29:18,519:INFO:Copying training dataset
2023-02-13 11:29:18,523:INFO:Defining folds
2023-02-13 11:29:18,523:INFO:Declaring metric variables
2023-02-13 11:29:18,527:INFO:Importing untrained model
2023-02-13 11:29:18,528:INFO:Extra Trees Regressor Imported successfully
2023-02-13 11:29:18,533:INFO:Starting cross validation
2023-02-13 11:29:18,537:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:18,994:INFO:Calculating mean and std
2023-02-13 11:29:18,994:INFO:Creating metrics dataframe
2023-02-13 11:29:18,994:INFO:Uploading results into container
2023-02-13 11:29:19,000:INFO:Uploading model into container now
2023-02-13 11:29:19,000:INFO:_master_model_container: 14
2023-02-13 11:29:19,000:INFO:_display_container: 2
2023-02-13 11:29:19,000:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 11:29:19,000:INFO:create_model() successfully completed......................................
2023-02-13 11:29:19,109:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:19,109:INFO:Creating metrics dataframe
2023-02-13 11:29:19,117:INFO:Initializing AdaBoost Regressor
2023-02-13 11:29:19,117:INFO:Total runtime is 0.1607250372568766 minutes
2023-02-13 11:29:19,122:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:19,122:INFO:Initializing create_model()
2023-02-13 11:29:19,122:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:19,122:INFO:Checking exceptions
2023-02-13 11:29:19,122:INFO:Importing libraries
2023-02-13 11:29:19,122:INFO:Copying training dataset
2023-02-13 11:29:19,127:INFO:Defining folds
2023-02-13 11:29:19,127:INFO:Declaring metric variables
2023-02-13 11:29:19,134:INFO:Importing untrained model
2023-02-13 11:29:19,136:INFO:AdaBoost Regressor Imported successfully
2023-02-13 11:29:19,143:INFO:Starting cross validation
2023-02-13 11:29:19,146:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:19,458:INFO:Calculating mean and std
2023-02-13 11:29:19,458:INFO:Creating metrics dataframe
2023-02-13 11:29:19,462:INFO:Uploading results into container
2023-02-13 11:29:19,462:INFO:Uploading model into container now
2023-02-13 11:29:19,462:INFO:_master_model_container: 15
2023-02-13 11:29:19,462:INFO:_display_container: 2
2023-02-13 11:29:19,462:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 11:29:19,462:INFO:create_model() successfully completed......................................
2023-02-13 11:29:19,578:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:19,578:INFO:Creating metrics dataframe
2023-02-13 11:29:19,591:INFO:Initializing Gradient Boosting Regressor
2023-02-13 11:29:19,591:INFO:Total runtime is 0.16862363815307613 minutes
2023-02-13 11:29:19,596:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:19,596:INFO:Initializing create_model()
2023-02-13 11:29:19,597:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:19,597:INFO:Checking exceptions
2023-02-13 11:29:19,597:INFO:Importing libraries
2023-02-13 11:29:19,597:INFO:Copying training dataset
2023-02-13 11:29:19,600:INFO:Defining folds
2023-02-13 11:29:19,600:INFO:Declaring metric variables
2023-02-13 11:29:19,603:INFO:Importing untrained model
2023-02-13 11:29:19,606:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 11:29:19,614:INFO:Starting cross validation
2023-02-13 11:29:19,616:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:19,852:INFO:Calculating mean and std
2023-02-13 11:29:19,852:INFO:Creating metrics dataframe
2023-02-13 11:29:19,857:INFO:Uploading results into container
2023-02-13 11:29:19,857:INFO:Uploading model into container now
2023-02-13 11:29:19,857:INFO:_master_model_container: 16
2023-02-13 11:29:19,857:INFO:_display_container: 2
2023-02-13 11:29:19,857:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 11:29:19,857:INFO:create_model() successfully completed......................................
2023-02-13 11:29:19,963:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:19,963:INFO:Creating metrics dataframe
2023-02-13 11:29:19,975:INFO:Initializing Extreme Gradient Boosting
2023-02-13 11:29:19,977:INFO:Total runtime is 0.17504914601643876 minutes
2023-02-13 11:29:19,981:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:19,981:INFO:Initializing create_model()
2023-02-13 11:29:19,981:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:19,981:INFO:Checking exceptions
2023-02-13 11:29:19,981:INFO:Importing libraries
2023-02-13 11:29:19,981:INFO:Copying training dataset
2023-02-13 11:29:19,985:INFO:Defining folds
2023-02-13 11:29:19,985:INFO:Declaring metric variables
2023-02-13 11:29:19,989:INFO:Importing untrained model
2023-02-13 11:29:19,993:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 11:29:19,999:INFO:Starting cross validation
2023-02-13 11:29:19,999:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:20,294:INFO:Calculating mean and std
2023-02-13 11:29:20,295:INFO:Creating metrics dataframe
2023-02-13 11:29:20,300:INFO:Uploading results into container
2023-02-13 11:29:20,300:INFO:Uploading model into container now
2023-02-13 11:29:20,300:INFO:_master_model_container: 17
2023-02-13 11:29:20,300:INFO:_display_container: 2
2023-02-13 11:29:20,300:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 11:29:20,300:INFO:create_model() successfully completed......................................
2023-02-13 11:29:20,439:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:20,439:INFO:Creating metrics dataframe
2023-02-13 11:29:20,455:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 11:29:20,455:INFO:Total runtime is 0.18302369912465408 minutes
2023-02-13 11:29:20,456:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:20,456:INFO:Initializing create_model()
2023-02-13 11:29:20,456:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:20,456:INFO:Checking exceptions
2023-02-13 11:29:20,456:INFO:Importing libraries
2023-02-13 11:29:20,456:INFO:Copying training dataset
2023-02-13 11:29:20,463:INFO:Defining folds
2023-02-13 11:29:20,463:INFO:Declaring metric variables
2023-02-13 11:29:20,463:INFO:Importing untrained model
2023-02-13 11:29:20,472:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 11:29:20,476:INFO:Starting cross validation
2023-02-13 11:29:20,480:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:20,732:INFO:Calculating mean and std
2023-02-13 11:29:20,732:INFO:Creating metrics dataframe
2023-02-13 11:29:20,737:INFO:Uploading results into container
2023-02-13 11:29:20,737:INFO:Uploading model into container now
2023-02-13 11:29:20,737:INFO:_master_model_container: 18
2023-02-13 11:29:20,737:INFO:_display_container: 2
2023-02-13 11:29:20,737:INFO:LGBMRegressor(random_state=1)
2023-02-13 11:29:20,737:INFO:create_model() successfully completed......................................
2023-02-13 11:29:20,863:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:20,863:INFO:Creating metrics dataframe
2023-02-13 11:29:20,881:INFO:Initializing Dummy Regressor
2023-02-13 11:29:20,881:INFO:Total runtime is 0.19011224508285518 minutes
2023-02-13 11:29:20,884:INFO:SubProcess create_model() called ==================================
2023-02-13 11:29:20,885:INFO:Initializing create_model()
2023-02-13 11:29:20,885:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019A9923F190>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:20,885:INFO:Checking exceptions
2023-02-13 11:29:20,885:INFO:Importing libraries
2023-02-13 11:29:20,885:INFO:Copying training dataset
2023-02-13 11:29:20,888:INFO:Defining folds
2023-02-13 11:29:20,888:INFO:Declaring metric variables
2023-02-13 11:29:20,888:INFO:Importing untrained model
2023-02-13 11:29:20,895:INFO:Dummy Regressor Imported successfully
2023-02-13 11:29:20,903:INFO:Starting cross validation
2023-02-13 11:29:20,904:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 11:29:21,066:INFO:Calculating mean and std
2023-02-13 11:29:21,066:INFO:Creating metrics dataframe
2023-02-13 11:29:21,073:INFO:Uploading results into container
2023-02-13 11:29:21,074:INFO:Uploading model into container now
2023-02-13 11:29:21,074:INFO:_master_model_container: 19
2023-02-13 11:29:21,074:INFO:_display_container: 2
2023-02-13 11:29:21,074:INFO:DummyRegressor()
2023-02-13 11:29:21,074:INFO:create_model() successfully completed......................................
2023-02-13 11:29:21,184:INFO:SubProcess create_model() end ==================================
2023-02-13 11:29:21,184:INFO:Creating metrics dataframe
2023-02-13 11:29:21,207:INFO:Initializing create_model()
2023-02-13 11:29:21,208:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019A93BFDB80>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 11:29:21,208:INFO:Checking exceptions
2023-02-13 11:29:21,209:INFO:Importing libraries
2023-02-13 11:29:21,209:INFO:Copying training dataset
2023-02-13 11:29:21,211:INFO:Defining folds
2023-02-13 11:29:21,211:INFO:Declaring metric variables
2023-02-13 11:29:21,212:INFO:Importing untrained model
2023-02-13 11:29:21,212:INFO:Declaring custom model
2023-02-13 11:29:21,212:INFO:Bayesian Ridge Imported successfully
2023-02-13 11:29:21,214:INFO:Cross validation set to False
2023-02-13 11:29:21,214:INFO:Fitting Model
2023-02-13 11:29:21,235:INFO:BayesianRidge()
2023-02-13 11:29:21,235:INFO:create_model() successfully completed......................................
2023-02-13 11:29:21,390:INFO:_master_model_container: 19
2023-02-13 11:29:21,390:INFO:_display_container: 2
2023-02-13 11:29:21,390:INFO:BayesianRidge()
2023-02-13 11:29:21,390:INFO:compare_models() successfully completed......................................
2023-02-13 11:46:12,454:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 11:46:12,454:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 11:46:12,454:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 11:46:12,454:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 11:46:12,892:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-13 12:45:10,566:INFO:PyCaret RegressionExperiment
2023-02-13 12:45:10,566:INFO:Logging name: reg-default-name
2023-02-13 12:45:10,566:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 12:45:10,566:INFO:version 3.0.0.rc8
2023-02-13 12:45:10,566:INFO:Initializing setup()
2023-02-13 12:45:10,566:INFO:self.USI: 948d
2023-02-13 12:45:10,566:INFO:self._variable_keys: {'pipeline', 'transform_target_param', 'exp_name_log', '_ml_usecase', 'seed', 'gpu_n_jobs_param', 'log_plots_param', 'fold_generator', 'exp_id', 'USI', 'data', '_available_plots', 'gpu_param', 'n_jobs_param', 'X_test', 'html_param', 'target_param', 'y', 'y_train', 'fold_groups_param', 'y_test', 'idx', 'logging_param', 'fold_shuffle_param', 'X_train', 'X', 'memory'}
2023-02-13 12:45:10,566:INFO:Checking environment
2023-02-13 12:45:10,566:INFO:python_version: 3.9.13
2023-02-13 12:45:10,566:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 12:45:10,566:INFO:machine: AMD64
2023-02-13 12:45:10,566:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 12:45:10,577:INFO:Memory: svmem(total=16805040128, available=7271485440, percent=56.7, used=9533554688, free=7271485440)
2023-02-13 12:45:10,577:INFO:Physical Core: 4
2023-02-13 12:45:10,577:INFO:Logical Core: 8
2023-02-13 12:45:10,577:INFO:Checking libraries
2023-02-13 12:45:10,577:INFO:System:
2023-02-13 12:45:10,577:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 12:45:10,577:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 12:45:10,577:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 12:45:10,577:INFO:PyCaret required dependencies:
2023-02-13 12:45:10,577:INFO:                 pip: 23.0
2023-02-13 12:45:10,577:INFO:          setuptools: 58.1.0
2023-02-13 12:45:10,577:INFO:             pycaret: 3.0.0rc8
2023-02-13 12:45:10,577:INFO:             IPython: 8.7.0
2023-02-13 12:45:10,579:INFO:          ipywidgets: 8.0.4
2023-02-13 12:45:10,579:INFO:                tqdm: 4.64.1
2023-02-13 12:45:10,579:INFO:               numpy: 1.22.1
2023-02-13 12:45:10,579:INFO:              pandas: 1.5.2
2023-02-13 12:45:10,579:INFO:              jinja2: 3.1.2
2023-02-13 12:45:10,579:INFO:               scipy: 1.5.4
2023-02-13 12:45:10,579:INFO:              joblib: 1.2.0
2023-02-13 12:45:10,579:INFO:             sklearn: 1.1.3
2023-02-13 12:45:10,579:INFO:                pyod: 1.0.7
2023-02-13 12:45:10,579:INFO:            imblearn: 0.10.1
2023-02-13 12:45:10,579:INFO:   category_encoders: 2.6.0
2023-02-13 12:45:10,579:INFO:            lightgbm: 3.3.4
2023-02-13 12:45:10,579:INFO:               numba: 0.56.4
2023-02-13 12:45:10,579:INFO:            requests: 2.28.1
2023-02-13 12:45:10,579:INFO:          matplotlib: 3.6.2
2023-02-13 12:45:10,579:INFO:          scikitplot: 0.3.7
2023-02-13 12:45:10,579:INFO:         yellowbrick: 1.5
2023-02-13 12:45:10,579:INFO:              plotly: 5.11.0
2023-02-13 12:45:10,579:INFO:             kaleido: 0.2.1
2023-02-13 12:45:10,579:INFO:         statsmodels: 0.13.5
2023-02-13 12:45:10,579:INFO:              sktime: 0.15.1
2023-02-13 12:45:10,579:INFO:               tbats: 1.1.2
2023-02-13 12:45:10,579:INFO:            pmdarima: 2.0.2
2023-02-13 12:45:10,579:INFO:              psutil: 5.9.4
2023-02-13 12:45:10,579:INFO:PyCaret optional dependencies:
2023-02-13 12:45:10,591:INFO:                shap: 0.41.0
2023-02-13 12:45:10,591:INFO:           interpret: 0.3.0
2023-02-13 12:45:10,591:INFO:                umap: Not installed
2023-02-13 12:45:10,591:INFO:    pandas_profiling: 3.6.2
2023-02-13 12:45:10,591:INFO:  explainerdashboard: Not installed
2023-02-13 12:45:10,591:INFO:             autoviz: Not installed
2023-02-13 12:45:10,591:INFO:           fairlearn: Not installed
2023-02-13 12:45:10,591:INFO:             xgboost: 1.7.3
2023-02-13 12:45:10,591:INFO:            catboost: Not installed
2023-02-13 12:45:10,598:INFO:              kmodes: Not installed
2023-02-13 12:45:10,598:INFO:             mlxtend: Not installed
2023-02-13 12:45:10,598:INFO:       statsforecast: Not installed
2023-02-13 12:45:10,598:INFO:        tune_sklearn: Not installed
2023-02-13 12:45:10,598:INFO:                 ray: Not installed
2023-02-13 12:45:10,598:INFO:            hyperopt: Not installed
2023-02-13 12:45:10,598:INFO:              optuna: Not installed
2023-02-13 12:45:10,598:INFO:               skopt: Not installed
2023-02-13 12:45:10,598:INFO:              mlflow: Not installed
2023-02-13 12:45:10,598:INFO:              gradio: Not installed
2023-02-13 12:45:10,598:INFO:             fastapi: Not installed
2023-02-13 12:45:10,598:INFO:             uvicorn: Not installed
2023-02-13 12:45:10,599:INFO:              m2cgen: Not installed
2023-02-13 12:45:10,599:INFO:           evidently: Not installed
2023-02-13 12:45:10,599:INFO:                nltk: 3.8
2023-02-13 12:45:10,599:INFO:            pyLDAvis: Not installed
2023-02-13 12:45:10,599:INFO:              gensim: Not installed
2023-02-13 12:45:10,599:INFO:               spacy: Not installed
2023-02-13 12:45:10,599:INFO:           wordcloud: 1.8.2.2
2023-02-13 12:45:10,599:INFO:            textblob: Not installed
2023-02-13 12:45:10,599:INFO:               fugue: Not installed
2023-02-13 12:45:10,599:INFO:           streamlit: 1.16.0
2023-02-13 12:45:10,599:INFO:             prophet: Not installed
2023-02-13 12:45:10,599:INFO:None
2023-02-13 12:45:10,599:INFO:Set up data.
2023-02-13 12:45:10,604:INFO:Set up train/test split.
2023-02-13 12:45:10,607:INFO:Set up index.
2023-02-13 12:45:10,607:INFO:Set up folding strategy.
2023-02-13 12:45:10,607:INFO:Assigning column types.
2023-02-13 12:45:10,612:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 12:45:10,612:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,616:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,619:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,683:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,738:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,738:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:10,803:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:10,803:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,803:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,803:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,868:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,900:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,900:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:10,909:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:10,909:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 12:45:10,909:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,916:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 12:45:10,972:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,012:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,012:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:11,020:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:11,030:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,037:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,093:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,133:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,133:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:11,133:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:11,133:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 12:45:11,150:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,207:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,248:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,248:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:11,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:11,258:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,305:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,354:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,354:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:11,354:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:11,354:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 12:45:11,419:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,452:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,452:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:11,461:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:11,517:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,614:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,614:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:11,614:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:11,622:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 12:45:11,734:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,767:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:11,775:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:11,840:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 12:45:11,880:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:11,880:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:11,880:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 12:45:11,997:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:12,000:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:12,150:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:12,150:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:12,158:INFO:Preparing preprocessing pipeline...
2023-02-13 12:45:12,163:INFO:Set up column name cleaning.
2023-02-13 12:45:12,163:INFO:Set up simple imputation.
2023-02-13 12:45:12,191:INFO:Finished creating preprocessing pipeline.
2023-02-13 12:45:12,199:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 12:45:12,199:INFO:Creating final display dataframe.
2023-02-13 12:45:12,457:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              948d
2023-02-13 12:45:12,643:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:12,643:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:12,748:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 12:45:12,748:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 12:45:12,748:INFO:setup() successfully completed in 2.18s...............
2023-02-13 12:45:12,748:INFO:Initializing compare_models()
2023-02-13 12:45:12,748:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 12:45:12,748:INFO:Checking exceptions
2023-02-13 12:45:12,756:INFO:Preparing display monitor
2023-02-13 12:45:12,782:INFO:Initializing Linear Regression
2023-02-13 12:45:12,782:INFO:Total runtime is 0.0 minutes
2023-02-13 12:45:12,782:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:12,782:INFO:Initializing create_model()
2023-02-13 12:45:12,782:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:12,782:INFO:Checking exceptions
2023-02-13 12:45:12,782:INFO:Importing libraries
2023-02-13 12:45:12,782:INFO:Copying training dataset
2023-02-13 12:45:12,788:INFO:Defining folds
2023-02-13 12:45:12,788:INFO:Declaring metric variables
2023-02-13 12:45:12,788:INFO:Importing untrained model
2023-02-13 12:45:12,796:INFO:Linear Regression Imported successfully
2023-02-13 12:45:12,805:INFO:Starting cross validation
2023-02-13 12:45:12,805:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:17,381:INFO:Calculating mean and std
2023-02-13 12:45:17,389:INFO:Creating metrics dataframe
2023-02-13 12:45:17,394:INFO:Uploading results into container
2023-02-13 12:45:17,397:INFO:Uploading model into container now
2023-02-13 12:45:17,397:INFO:_master_model_container: 1
2023-02-13 12:45:17,397:INFO:_display_container: 2
2023-02-13 12:45:17,397:INFO:LinearRegression(n_jobs=-1)
2023-02-13 12:45:17,399:INFO:create_model() successfully completed......................................
2023-02-13 12:45:17,533:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:17,533:INFO:Creating metrics dataframe
2023-02-13 12:45:17,540:INFO:Initializing Lasso Regression
2023-02-13 12:45:17,540:INFO:Total runtime is 0.07930174668629965 minutes
2023-02-13 12:45:17,545:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:17,545:INFO:Initializing create_model()
2023-02-13 12:45:17,545:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:17,545:INFO:Checking exceptions
2023-02-13 12:45:17,545:INFO:Importing libraries
2023-02-13 12:45:17,545:INFO:Copying training dataset
2023-02-13 12:45:17,545:INFO:Defining folds
2023-02-13 12:45:17,545:INFO:Declaring metric variables
2023-02-13 12:45:17,553:INFO:Importing untrained model
2023-02-13 12:45:17,556:INFO:Lasso Regression Imported successfully
2023-02-13 12:45:17,562:INFO:Starting cross validation
2023-02-13 12:45:17,562:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:17,725:INFO:Calculating mean and std
2023-02-13 12:45:17,725:INFO:Creating metrics dataframe
2023-02-13 12:45:17,725:INFO:Uploading results into container
2023-02-13 12:45:17,725:INFO:Uploading model into container now
2023-02-13 12:45:17,725:INFO:_master_model_container: 2
2023-02-13 12:45:17,725:INFO:_display_container: 2
2023-02-13 12:45:17,725:INFO:Lasso(random_state=1)
2023-02-13 12:45:17,725:INFO:create_model() successfully completed......................................
2023-02-13 12:45:17,858:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:17,858:INFO:Creating metrics dataframe
2023-02-13 12:45:17,875:INFO:Initializing Ridge Regression
2023-02-13 12:45:17,875:INFO:Total runtime is 0.08488423426946005 minutes
2023-02-13 12:45:17,875:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:17,875:INFO:Initializing create_model()
2023-02-13 12:45:17,875:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:17,875:INFO:Checking exceptions
2023-02-13 12:45:17,875:INFO:Importing libraries
2023-02-13 12:45:17,875:INFO:Copying training dataset
2023-02-13 12:45:17,879:INFO:Defining folds
2023-02-13 12:45:17,879:INFO:Declaring metric variables
2023-02-13 12:45:17,887:INFO:Importing untrained model
2023-02-13 12:45:17,890:INFO:Ridge Regression Imported successfully
2023-02-13 12:45:17,896:INFO:Starting cross validation
2023-02-13 12:45:17,896:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:18,056:INFO:Calculating mean and std
2023-02-13 12:45:18,057:INFO:Creating metrics dataframe
2023-02-13 12:45:18,058:INFO:Uploading results into container
2023-02-13 12:45:18,058:INFO:Uploading model into container now
2023-02-13 12:45:18,058:INFO:_master_model_container: 3
2023-02-13 12:45:18,058:INFO:_display_container: 2
2023-02-13 12:45:18,058:INFO:Ridge(random_state=1)
2023-02-13 12:45:18,062:INFO:create_model() successfully completed......................................
2023-02-13 12:45:18,159:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:18,159:INFO:Creating metrics dataframe
2023-02-13 12:45:18,167:INFO:Initializing Elastic Net
2023-02-13 12:45:18,167:INFO:Total runtime is 0.0897494435310364 minutes
2023-02-13 12:45:18,175:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:18,175:INFO:Initializing create_model()
2023-02-13 12:45:18,175:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:18,175:INFO:Checking exceptions
2023-02-13 12:45:18,175:INFO:Importing libraries
2023-02-13 12:45:18,175:INFO:Copying training dataset
2023-02-13 12:45:18,175:INFO:Defining folds
2023-02-13 12:45:18,175:INFO:Declaring metric variables
2023-02-13 12:45:18,182:INFO:Importing untrained model
2023-02-13 12:45:18,182:INFO:Elastic Net Imported successfully
2023-02-13 12:45:18,191:INFO:Starting cross validation
2023-02-13 12:45:18,199:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:18,357:INFO:Calculating mean and std
2023-02-13 12:45:18,357:INFO:Creating metrics dataframe
2023-02-13 12:45:18,357:INFO:Uploading results into container
2023-02-13 12:45:18,363:INFO:Uploading model into container now
2023-02-13 12:45:18,363:INFO:_master_model_container: 4
2023-02-13 12:45:18,363:INFO:_display_container: 2
2023-02-13 12:45:18,363:INFO:ElasticNet(random_state=1)
2023-02-13 12:45:18,363:INFO:create_model() successfully completed......................................
2023-02-13 12:45:18,454:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:18,455:INFO:Creating metrics dataframe
2023-02-13 12:45:18,464:INFO:Initializing Least Angle Regression
2023-02-13 12:45:18,464:INFO:Total runtime is 0.09471290508906048 minutes
2023-02-13 12:45:18,468:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:18,468:INFO:Initializing create_model()
2023-02-13 12:45:18,468:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:18,468:INFO:Checking exceptions
2023-02-13 12:45:18,468:INFO:Importing libraries
2023-02-13 12:45:18,468:INFO:Copying training dataset
2023-02-13 12:45:18,472:INFO:Defining folds
2023-02-13 12:45:18,472:INFO:Declaring metric variables
2023-02-13 12:45:18,477:INFO:Importing untrained model
2023-02-13 12:45:18,480:INFO:Least Angle Regression Imported successfully
2023-02-13 12:45:18,481:INFO:Starting cross validation
2023-02-13 12:45:18,489:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:18,587:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:18,610:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:18,627:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:18,644:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:18,659:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:18,673:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:18,684:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:18,691:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:18,702:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:18,708:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:18,725:INFO:Calculating mean and std
2023-02-13 12:45:18,725:INFO:Creating metrics dataframe
2023-02-13 12:45:18,733:INFO:Uploading results into container
2023-02-13 12:45:18,733:INFO:Uploading model into container now
2023-02-13 12:45:18,735:INFO:_master_model_container: 5
2023-02-13 12:45:18,735:INFO:_display_container: 2
2023-02-13 12:45:18,735:INFO:Lars(random_state=1)
2023-02-13 12:45:18,735:INFO:create_model() successfully completed......................................
2023-02-13 12:45:18,817:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:18,817:INFO:Creating metrics dataframe
2023-02-13 12:45:18,824:INFO:Initializing Lasso Least Angle Regression
2023-02-13 12:45:18,824:INFO:Total runtime is 0.10070637861887616 minutes
2023-02-13 12:45:18,832:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:18,832:INFO:Initializing create_model()
2023-02-13 12:45:18,832:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:18,832:INFO:Checking exceptions
2023-02-13 12:45:18,832:INFO:Importing libraries
2023-02-13 12:45:18,832:INFO:Copying training dataset
2023-02-13 12:45:18,837:INFO:Defining folds
2023-02-13 12:45:18,837:INFO:Declaring metric variables
2023-02-13 12:45:18,840:INFO:Importing untrained model
2023-02-13 12:45:18,858:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 12:45:18,874:INFO:Starting cross validation
2023-02-13 12:45:18,876:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:18,962:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 12:45:18,978:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 12:45:19,005:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 12:45:19,021:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 12:45:19,045:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 12:45:19,070:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 12:45:19,088:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 12:45:19,104:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 12:45:19,116:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 12:45:19,129:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 12:45:19,144:INFO:Calculating mean and std
2023-02-13 12:45:19,152:INFO:Creating metrics dataframe
2023-02-13 12:45:19,155:INFO:Uploading results into container
2023-02-13 12:45:19,155:INFO:Uploading model into container now
2023-02-13 12:45:19,155:INFO:_master_model_container: 6
2023-02-13 12:45:19,155:INFO:_display_container: 2
2023-02-13 12:45:19,161:INFO:LassoLars(random_state=1)
2023-02-13 12:45:19,161:INFO:create_model() successfully completed......................................
2023-02-13 12:45:19,257:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:19,257:INFO:Creating metrics dataframe
2023-02-13 12:45:19,260:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 12:45:19,260:INFO:Total runtime is 0.10796784162521364 minutes
2023-02-13 12:45:19,270:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:19,270:INFO:Initializing create_model()
2023-02-13 12:45:19,270:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:19,270:INFO:Checking exceptions
2023-02-13 12:45:19,270:INFO:Importing libraries
2023-02-13 12:45:19,270:INFO:Copying training dataset
2023-02-13 12:45:19,275:INFO:Defining folds
2023-02-13 12:45:19,275:INFO:Declaring metric variables
2023-02-13 12:45:19,278:INFO:Importing untrained model
2023-02-13 12:45:19,282:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 12:45:19,288:INFO:Starting cross validation
2023-02-13 12:45:19,288:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:19,327:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:19,337:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:19,351:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:19,359:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:19,367:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:19,383:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:19,391:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:19,404:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:19,415:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:19,423:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 12:45:19,440:INFO:Calculating mean and std
2023-02-13 12:45:19,442:INFO:Creating metrics dataframe
2023-02-13 12:45:19,444:INFO:Uploading results into container
2023-02-13 12:45:19,444:INFO:Uploading model into container now
2023-02-13 12:45:19,444:INFO:_master_model_container: 7
2023-02-13 12:45:19,446:INFO:_display_container: 2
2023-02-13 12:45:19,446:INFO:OrthogonalMatchingPursuit()
2023-02-13 12:45:19,446:INFO:create_model() successfully completed......................................
2023-02-13 12:45:19,538:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:19,538:INFO:Creating metrics dataframe
2023-02-13 12:45:19,562:INFO:Initializing Bayesian Ridge
2023-02-13 12:45:19,562:INFO:Total runtime is 0.11300197045008344 minutes
2023-02-13 12:45:19,570:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:19,573:INFO:Initializing create_model()
2023-02-13 12:45:19,573:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:19,573:INFO:Checking exceptions
2023-02-13 12:45:19,573:INFO:Importing libraries
2023-02-13 12:45:19,573:INFO:Copying training dataset
2023-02-13 12:45:19,580:INFO:Defining folds
2023-02-13 12:45:19,582:INFO:Declaring metric variables
2023-02-13 12:45:19,590:INFO:Importing untrained model
2023-02-13 12:45:19,600:INFO:Bayesian Ridge Imported successfully
2023-02-13 12:45:19,613:INFO:Starting cross validation
2023-02-13 12:45:19,620:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:19,827:INFO:Calculating mean and std
2023-02-13 12:45:19,827:INFO:Creating metrics dataframe
2023-02-13 12:45:19,833:INFO:Uploading results into container
2023-02-13 12:45:19,834:INFO:Uploading model into container now
2023-02-13 12:45:19,834:INFO:_master_model_container: 8
2023-02-13 12:45:19,834:INFO:_display_container: 2
2023-02-13 12:45:19,834:INFO:BayesianRidge()
2023-02-13 12:45:19,835:INFO:create_model() successfully completed......................................
2023-02-13 12:45:19,940:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:19,940:INFO:Creating metrics dataframe
2023-02-13 12:45:19,965:INFO:Initializing Passive Aggressive Regressor
2023-02-13 12:45:19,965:INFO:Total runtime is 0.1197260657946269 minutes
2023-02-13 12:45:19,973:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:19,973:INFO:Initializing create_model()
2023-02-13 12:45:19,973:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:19,973:INFO:Checking exceptions
2023-02-13 12:45:19,973:INFO:Importing libraries
2023-02-13 12:45:19,973:INFO:Copying training dataset
2023-02-13 12:45:19,973:INFO:Defining folds
2023-02-13 12:45:19,973:INFO:Declaring metric variables
2023-02-13 12:45:19,981:INFO:Importing untrained model
2023-02-13 12:45:19,998:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 12:45:20,006:INFO:Starting cross validation
2023-02-13 12:45:20,014:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:20,180:INFO:Calculating mean and std
2023-02-13 12:45:20,180:INFO:Creating metrics dataframe
2023-02-13 12:45:20,186:INFO:Uploading results into container
2023-02-13 12:45:20,186:INFO:Uploading model into container now
2023-02-13 12:45:20,186:INFO:_master_model_container: 9
2023-02-13 12:45:20,186:INFO:_display_container: 2
2023-02-13 12:45:20,190:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 12:45:20,190:INFO:create_model() successfully completed......................................
2023-02-13 12:45:20,277:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:20,277:INFO:Creating metrics dataframe
2023-02-13 12:45:20,284:INFO:Initializing Huber Regressor
2023-02-13 12:45:20,284:INFO:Total runtime is 0.12504134575525921 minutes
2023-02-13 12:45:20,294:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:20,294:INFO:Initializing create_model()
2023-02-13 12:45:20,294:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:20,294:INFO:Checking exceptions
2023-02-13 12:45:20,294:INFO:Importing libraries
2023-02-13 12:45:20,294:INFO:Copying training dataset
2023-02-13 12:45:20,294:INFO:Defining folds
2023-02-13 12:45:20,294:INFO:Declaring metric variables
2023-02-13 12:45:20,300:INFO:Importing untrained model
2023-02-13 12:45:20,306:INFO:Huber Regressor Imported successfully
2023-02-13 12:45:20,312:INFO:Starting cross validation
2023-02-13 12:45:20,314:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:20,382:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 12:45:20,400:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 12:45:20,407:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 12:45:20,425:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 12:45:20,435:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 12:45:20,451:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 12:45:20,465:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 12:45:20,474:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 12:45:20,483:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 12:45:20,495:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 12:45:20,511:INFO:Calculating mean and std
2023-02-13 12:45:20,514:INFO:Creating metrics dataframe
2023-02-13 12:45:20,515:INFO:Uploading results into container
2023-02-13 12:45:20,515:INFO:Uploading model into container now
2023-02-13 12:45:20,515:INFO:_master_model_container: 10
2023-02-13 12:45:20,515:INFO:_display_container: 2
2023-02-13 12:45:20,515:INFO:HuberRegressor()
2023-02-13 12:45:20,515:INFO:create_model() successfully completed......................................
2023-02-13 12:45:20,607:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:20,607:INFO:Creating metrics dataframe
2023-02-13 12:45:20,612:INFO:Initializing K Neighbors Regressor
2023-02-13 12:45:20,612:INFO:Total runtime is 0.13051525354385377 minutes
2023-02-13 12:45:20,620:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:20,620:INFO:Initializing create_model()
2023-02-13 12:45:20,620:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:20,620:INFO:Checking exceptions
2023-02-13 12:45:20,620:INFO:Importing libraries
2023-02-13 12:45:20,620:INFO:Copying training dataset
2023-02-13 12:45:20,620:INFO:Defining folds
2023-02-13 12:45:20,625:INFO:Declaring metric variables
2023-02-13 12:45:20,628:INFO:Importing untrained model
2023-02-13 12:45:20,630:INFO:K Neighbors Regressor Imported successfully
2023-02-13 12:45:20,638:INFO:Starting cross validation
2023-02-13 12:45:20,638:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:20,811:INFO:Calculating mean and std
2023-02-13 12:45:20,811:INFO:Creating metrics dataframe
2023-02-13 12:45:20,815:INFO:Uploading results into container
2023-02-13 12:45:20,815:INFO:Uploading model into container now
2023-02-13 12:45:20,815:INFO:_master_model_container: 11
2023-02-13 12:45:20,815:INFO:_display_container: 2
2023-02-13 12:45:20,817:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 12:45:20,817:INFO:create_model() successfully completed......................................
2023-02-13 12:45:20,903:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:20,903:INFO:Creating metrics dataframe
2023-02-13 12:45:20,907:INFO:Initializing Decision Tree Regressor
2023-02-13 12:45:20,907:INFO:Total runtime is 0.13543105125427246 minutes
2023-02-13 12:45:20,916:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:20,916:INFO:Initializing create_model()
2023-02-13 12:45:20,916:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:20,916:INFO:Checking exceptions
2023-02-13 12:45:20,916:INFO:Importing libraries
2023-02-13 12:45:20,916:INFO:Copying training dataset
2023-02-13 12:45:20,920:INFO:Defining folds
2023-02-13 12:45:20,921:INFO:Declaring metric variables
2023-02-13 12:45:20,924:INFO:Importing untrained model
2023-02-13 12:45:20,925:INFO:Decision Tree Regressor Imported successfully
2023-02-13 12:45:20,934:INFO:Starting cross validation
2023-02-13 12:45:20,936:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:21,090:INFO:Calculating mean and std
2023-02-13 12:45:21,091:INFO:Creating metrics dataframe
2023-02-13 12:45:21,093:INFO:Uploading results into container
2023-02-13 12:45:21,093:INFO:Uploading model into container now
2023-02-13 12:45:21,096:INFO:_master_model_container: 12
2023-02-13 12:45:21,096:INFO:_display_container: 2
2023-02-13 12:45:21,096:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 12:45:21,096:INFO:create_model() successfully completed......................................
2023-02-13 12:45:21,179:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:21,179:INFO:Creating metrics dataframe
2023-02-13 12:45:21,195:INFO:Initializing Random Forest Regressor
2023-02-13 12:45:21,195:INFO:Total runtime is 0.1402319351832072 minutes
2023-02-13 12:45:21,195:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:21,195:INFO:Initializing create_model()
2023-02-13 12:45:21,195:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:21,195:INFO:Checking exceptions
2023-02-13 12:45:21,195:INFO:Importing libraries
2023-02-13 12:45:21,195:INFO:Copying training dataset
2023-02-13 12:45:21,205:INFO:Defining folds
2023-02-13 12:45:21,205:INFO:Declaring metric variables
2023-02-13 12:45:21,207:INFO:Importing untrained model
2023-02-13 12:45:21,211:INFO:Random Forest Regressor Imported successfully
2023-02-13 12:45:21,215:INFO:Starting cross validation
2023-02-13 12:45:21,219:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:21,755:INFO:Calculating mean and std
2023-02-13 12:45:21,756:INFO:Creating metrics dataframe
2023-02-13 12:45:21,759:INFO:Uploading results into container
2023-02-13 12:45:21,759:INFO:Uploading model into container now
2023-02-13 12:45:21,759:INFO:_master_model_container: 13
2023-02-13 12:45:21,759:INFO:_display_container: 2
2023-02-13 12:45:21,759:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 12:45:21,759:INFO:create_model() successfully completed......................................
2023-02-13 12:45:21,851:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:21,851:INFO:Creating metrics dataframe
2023-02-13 12:45:21,865:INFO:Initializing Extra Trees Regressor
2023-02-13 12:45:21,865:INFO:Total runtime is 0.15138507684071859 minutes
2023-02-13 12:45:21,868:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:21,868:INFO:Initializing create_model()
2023-02-13 12:45:21,868:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:21,868:INFO:Checking exceptions
2023-02-13 12:45:21,868:INFO:Importing libraries
2023-02-13 12:45:21,868:INFO:Copying training dataset
2023-02-13 12:45:21,874:INFO:Defining folds
2023-02-13 12:45:21,874:INFO:Declaring metric variables
2023-02-13 12:45:21,877:INFO:Importing untrained model
2023-02-13 12:45:21,881:INFO:Extra Trees Regressor Imported successfully
2023-02-13 12:45:21,888:INFO:Starting cross validation
2023-02-13 12:45:21,889:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:22,329:INFO:Calculating mean and std
2023-02-13 12:45:22,331:INFO:Creating metrics dataframe
2023-02-13 12:45:22,333:INFO:Uploading results into container
2023-02-13 12:45:22,335:INFO:Uploading model into container now
2023-02-13 12:45:22,335:INFO:_master_model_container: 14
2023-02-13 12:45:22,335:INFO:_display_container: 2
2023-02-13 12:45:22,335:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 12:45:22,335:INFO:create_model() successfully completed......................................
2023-02-13 12:45:22,427:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:22,427:INFO:Creating metrics dataframe
2023-02-13 12:45:22,444:INFO:Initializing AdaBoost Regressor
2023-02-13 12:45:22,445:INFO:Total runtime is 0.16106030146280925 minutes
2023-02-13 12:45:22,448:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:22,448:INFO:Initializing create_model()
2023-02-13 12:45:22,448:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:22,448:INFO:Checking exceptions
2023-02-13 12:45:22,448:INFO:Importing libraries
2023-02-13 12:45:22,448:INFO:Copying training dataset
2023-02-13 12:45:22,452:INFO:Defining folds
2023-02-13 12:45:22,452:INFO:Declaring metric variables
2023-02-13 12:45:22,455:INFO:Importing untrained model
2023-02-13 12:45:22,459:INFO:AdaBoost Regressor Imported successfully
2023-02-13 12:45:22,465:INFO:Starting cross validation
2023-02-13 12:45:22,467:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:22,720:INFO:Calculating mean and std
2023-02-13 12:45:22,728:INFO:Creating metrics dataframe
2023-02-13 12:45:22,730:INFO:Uploading results into container
2023-02-13 12:45:22,730:INFO:Uploading model into container now
2023-02-13 12:45:22,732:INFO:_master_model_container: 15
2023-02-13 12:45:22,732:INFO:_display_container: 2
2023-02-13 12:45:22,732:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 12:45:22,732:INFO:create_model() successfully completed......................................
2023-02-13 12:45:22,819:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:22,819:INFO:Creating metrics dataframe
2023-02-13 12:45:22,834:INFO:Initializing Gradient Boosting Regressor
2023-02-13 12:45:22,834:INFO:Total runtime is 0.16754097143809002 minutes
2023-02-13 12:45:22,842:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:22,842:INFO:Initializing create_model()
2023-02-13 12:45:22,842:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:22,842:INFO:Checking exceptions
2023-02-13 12:45:22,842:INFO:Importing libraries
2023-02-13 12:45:22,842:INFO:Copying training dataset
2023-02-13 12:45:22,845:INFO:Defining folds
2023-02-13 12:45:22,845:INFO:Declaring metric variables
2023-02-13 12:45:22,851:INFO:Importing untrained model
2023-02-13 12:45:22,851:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 12:45:22,861:INFO:Starting cross validation
2023-02-13 12:45:22,861:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:23,072:INFO:Calculating mean and std
2023-02-13 12:45:23,072:INFO:Creating metrics dataframe
2023-02-13 12:45:23,072:INFO:Uploading results into container
2023-02-13 12:45:23,072:INFO:Uploading model into container now
2023-02-13 12:45:23,072:INFO:_master_model_container: 16
2023-02-13 12:45:23,072:INFO:_display_container: 2
2023-02-13 12:45:23,072:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 12:45:23,072:INFO:create_model() successfully completed......................................
2023-02-13 12:45:23,162:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:23,162:INFO:Creating metrics dataframe
2023-02-13 12:45:23,176:INFO:Initializing Extreme Gradient Boosting
2023-02-13 12:45:23,176:INFO:Total runtime is 0.1732463041941325 minutes
2023-02-13 12:45:23,180:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:23,180:INFO:Initializing create_model()
2023-02-13 12:45:23,181:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:23,181:INFO:Checking exceptions
2023-02-13 12:45:23,181:INFO:Importing libraries
2023-02-13 12:45:23,181:INFO:Copying training dataset
2023-02-13 12:45:23,186:INFO:Defining folds
2023-02-13 12:45:23,186:INFO:Declaring metric variables
2023-02-13 12:45:23,188:INFO:Importing untrained model
2023-02-13 12:45:23,194:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 12:45:23,201:INFO:Starting cross validation
2023-02-13 12:45:23,203:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:23,470:INFO:Calculating mean and std
2023-02-13 12:45:23,470:INFO:Creating metrics dataframe
2023-02-13 12:45:23,478:INFO:Uploading results into container
2023-02-13 12:45:23,478:INFO:Uploading model into container now
2023-02-13 12:45:23,478:INFO:_master_model_container: 17
2023-02-13 12:45:23,478:INFO:_display_container: 2
2023-02-13 12:45:23,481:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 12:45:23,481:INFO:create_model() successfully completed......................................
2023-02-13 12:45:23,567:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:23,567:INFO:Creating metrics dataframe
2023-02-13 12:45:23,575:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 12:45:23,575:INFO:Total runtime is 0.17989198366800946 minutes
2023-02-13 12:45:23,583:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:23,588:INFO:Initializing create_model()
2023-02-13 12:45:23,588:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:23,588:INFO:Checking exceptions
2023-02-13 12:45:23,588:INFO:Importing libraries
2023-02-13 12:45:23,588:INFO:Copying training dataset
2023-02-13 12:45:23,591:INFO:Defining folds
2023-02-13 12:45:23,591:INFO:Declaring metric variables
2023-02-13 12:45:23,592:INFO:Importing untrained model
2023-02-13 12:45:23,595:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 12:45:23,605:INFO:Starting cross validation
2023-02-13 12:45:23,607:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:23,850:INFO:Calculating mean and std
2023-02-13 12:45:23,850:INFO:Creating metrics dataframe
2023-02-13 12:45:23,853:INFO:Uploading results into container
2023-02-13 12:45:23,853:INFO:Uploading model into container now
2023-02-13 12:45:23,853:INFO:_master_model_container: 18
2023-02-13 12:45:23,853:INFO:_display_container: 2
2023-02-13 12:45:23,853:INFO:LGBMRegressor(random_state=1)
2023-02-13 12:45:23,853:INFO:create_model() successfully completed......................................
2023-02-13 12:45:23,944:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:23,944:INFO:Creating metrics dataframe
2023-02-13 12:45:23,960:INFO:Initializing Dummy Regressor
2023-02-13 12:45:23,960:INFO:Total runtime is 0.18629902203877768 minutes
2023-02-13 12:45:23,960:INFO:SubProcess create_model() called ==================================
2023-02-13 12:45:23,960:INFO:Initializing create_model()
2023-02-13 12:45:23,960:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C0947CE20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:23,960:INFO:Checking exceptions
2023-02-13 12:45:23,960:INFO:Importing libraries
2023-02-13 12:45:23,960:INFO:Copying training dataset
2023-02-13 12:45:23,967:INFO:Defining folds
2023-02-13 12:45:23,967:INFO:Declaring metric variables
2023-02-13 12:45:23,971:INFO:Importing untrained model
2023-02-13 12:45:23,975:INFO:Dummy Regressor Imported successfully
2023-02-13 12:45:23,979:INFO:Starting cross validation
2023-02-13 12:45:23,982:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 12:45:24,134:INFO:Calculating mean and std
2023-02-13 12:45:24,134:INFO:Creating metrics dataframe
2023-02-13 12:45:24,138:INFO:Uploading results into container
2023-02-13 12:45:24,138:INFO:Uploading model into container now
2023-02-13 12:45:24,138:INFO:_master_model_container: 19
2023-02-13 12:45:24,138:INFO:_display_container: 2
2023-02-13 12:45:24,138:INFO:DummyRegressor()
2023-02-13 12:45:24,138:INFO:create_model() successfully completed......................................
2023-02-13 12:45:24,233:INFO:SubProcess create_model() end ==================================
2023-02-13 12:45:24,233:INFO:Creating metrics dataframe
2023-02-13 12:45:24,256:INFO:Initializing create_model()
2023-02-13 12:45:24,256:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C086E1790>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 12:45:24,256:INFO:Checking exceptions
2023-02-13 12:45:24,259:INFO:Importing libraries
2023-02-13 12:45:24,259:INFO:Copying training dataset
2023-02-13 12:45:24,262:INFO:Defining folds
2023-02-13 12:45:24,262:INFO:Declaring metric variables
2023-02-13 12:45:24,262:INFO:Importing untrained model
2023-02-13 12:45:24,262:INFO:Declaring custom model
2023-02-13 12:45:24,262:INFO:Bayesian Ridge Imported successfully
2023-02-13 12:45:24,262:INFO:Cross validation set to False
2023-02-13 12:45:24,262:INFO:Fitting Model
2023-02-13 12:45:24,276:INFO:BayesianRidge()
2023-02-13 12:45:24,284:INFO:create_model() successfully completed......................................
2023-02-13 12:45:24,408:INFO:_master_model_container: 19
2023-02-13 12:45:24,414:INFO:_display_container: 2
2023-02-13 12:45:24,414:INFO:BayesianRidge()
2023-02-13 12:45:24,414:INFO:compare_models() successfully completed......................................
2023-02-13 13:25:55,685:INFO:PyCaret RegressionExperiment
2023-02-13 13:25:55,685:INFO:Logging name: reg-default-name
2023-02-13 13:25:55,686:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 13:25:55,686:INFO:version 3.0.0.rc8
2023-02-13 13:25:55,686:INFO:Initializing setup()
2023-02-13 13:25:55,686:INFO:self.USI: 29b0
2023-02-13 13:25:55,686:INFO:self._variable_keys: {'pipeline', 'transform_target_param', 'exp_name_log', '_ml_usecase', 'seed', 'gpu_n_jobs_param', 'log_plots_param', 'fold_generator', 'exp_id', 'USI', 'data', '_available_plots', 'gpu_param', 'n_jobs_param', 'X_test', 'html_param', 'target_param', 'y', 'y_train', 'fold_groups_param', 'y_test', 'idx', 'logging_param', 'fold_shuffle_param', 'X_train', 'X', 'memory'}
2023-02-13 13:25:55,686:INFO:Checking environment
2023-02-13 13:25:55,686:INFO:python_version: 3.9.13
2023-02-13 13:25:55,686:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 13:25:55,686:INFO:machine: AMD64
2023-02-13 13:25:55,686:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 13:25:55,691:INFO:Memory: svmem(total=16805040128, available=6729830400, percent=60.0, used=10075209728, free=6729830400)
2023-02-13 13:25:55,691:INFO:Physical Core: 4
2023-02-13 13:25:55,691:INFO:Logical Core: 8
2023-02-13 13:25:55,691:INFO:Checking libraries
2023-02-13 13:25:55,691:INFO:System:
2023-02-13 13:25:55,691:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 13:25:55,691:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 13:25:55,691:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 13:25:55,691:INFO:PyCaret required dependencies:
2023-02-13 13:25:55,691:INFO:                 pip: 23.0
2023-02-13 13:25:55,691:INFO:          setuptools: 58.1.0
2023-02-13 13:25:55,692:INFO:             pycaret: 3.0.0rc8
2023-02-13 13:25:55,692:INFO:             IPython: 8.7.0
2023-02-13 13:25:55,692:INFO:          ipywidgets: 8.0.4
2023-02-13 13:25:55,692:INFO:                tqdm: 4.64.1
2023-02-13 13:25:55,692:INFO:               numpy: 1.22.1
2023-02-13 13:25:55,692:INFO:              pandas: 1.5.2
2023-02-13 13:25:55,692:INFO:              jinja2: 3.1.2
2023-02-13 13:25:55,692:INFO:               scipy: 1.5.4
2023-02-13 13:25:55,692:INFO:              joblib: 1.2.0
2023-02-13 13:25:55,692:INFO:             sklearn: 1.1.3
2023-02-13 13:25:55,692:INFO:                pyod: 1.0.7
2023-02-13 13:25:55,692:INFO:            imblearn: 0.10.1
2023-02-13 13:25:55,692:INFO:   category_encoders: 2.6.0
2023-02-13 13:25:55,692:INFO:            lightgbm: 3.3.4
2023-02-13 13:25:55,693:INFO:               numba: 0.56.4
2023-02-13 13:25:55,693:INFO:            requests: 2.28.1
2023-02-13 13:25:55,693:INFO:          matplotlib: 3.6.2
2023-02-13 13:25:55,693:INFO:          scikitplot: 0.3.7
2023-02-13 13:25:55,693:INFO:         yellowbrick: 1.5
2023-02-13 13:25:55,693:INFO:              plotly: 5.11.0
2023-02-13 13:25:55,693:INFO:             kaleido: 0.2.1
2023-02-13 13:25:55,693:INFO:         statsmodels: 0.13.5
2023-02-13 13:25:55,693:INFO:              sktime: 0.15.1
2023-02-13 13:25:55,693:INFO:               tbats: 1.1.2
2023-02-13 13:25:55,693:INFO:            pmdarima: 2.0.2
2023-02-13 13:25:55,693:INFO:              psutil: 5.9.4
2023-02-13 13:25:55,693:INFO:PyCaret optional dependencies:
2023-02-13 13:25:55,693:INFO:                shap: 0.41.0
2023-02-13 13:25:55,694:INFO:           interpret: 0.3.0
2023-02-13 13:25:55,694:INFO:                umap: Not installed
2023-02-13 13:25:55,694:INFO:    pandas_profiling: 3.6.2
2023-02-13 13:25:55,694:INFO:  explainerdashboard: Not installed
2023-02-13 13:25:55,694:INFO:             autoviz: Not installed
2023-02-13 13:25:55,694:INFO:           fairlearn: Not installed
2023-02-13 13:25:55,694:INFO:             xgboost: 1.7.3
2023-02-13 13:25:55,694:INFO:            catboost: Not installed
2023-02-13 13:25:55,694:INFO:              kmodes: Not installed
2023-02-13 13:25:55,694:INFO:             mlxtend: Not installed
2023-02-13 13:25:55,694:INFO:       statsforecast: Not installed
2023-02-13 13:25:55,694:INFO:        tune_sklearn: Not installed
2023-02-13 13:25:55,694:INFO:                 ray: Not installed
2023-02-13 13:25:55,694:INFO:            hyperopt: Not installed
2023-02-13 13:25:55,694:INFO:              optuna: Not installed
2023-02-13 13:25:55,694:INFO:               skopt: Not installed
2023-02-13 13:25:55,694:INFO:              mlflow: Not installed
2023-02-13 13:25:55,694:INFO:              gradio: Not installed
2023-02-13 13:25:55,694:INFO:             fastapi: Not installed
2023-02-13 13:25:55,694:INFO:             uvicorn: Not installed
2023-02-13 13:25:55,694:INFO:              m2cgen: Not installed
2023-02-13 13:25:55,694:INFO:           evidently: Not installed
2023-02-13 13:25:55,694:INFO:                nltk: 3.8
2023-02-13 13:25:55,694:INFO:            pyLDAvis: Not installed
2023-02-13 13:25:55,695:INFO:              gensim: Not installed
2023-02-13 13:25:55,695:INFO:               spacy: Not installed
2023-02-13 13:25:55,695:INFO:           wordcloud: 1.8.2.2
2023-02-13 13:25:55,695:INFO:            textblob: Not installed
2023-02-13 13:25:55,695:INFO:               fugue: Not installed
2023-02-13 13:25:55,695:INFO:           streamlit: 1.16.0
2023-02-13 13:25:55,695:INFO:             prophet: Not installed
2023-02-13 13:25:55,695:INFO:None
2023-02-13 13:25:55,695:INFO:Set up data.
2023-02-13 13:25:55,702:INFO:Set up train/test split.
2023-02-13 13:25:55,704:INFO:Set up index.
2023-02-13 13:25:55,704:INFO:Set up folding strategy.
2023-02-13 13:25:55,704:INFO:Assigning column types.
2023-02-13 13:25:55,707:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 13:25:55,707:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 13:25:55,714:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 13:25:55,720:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 13:25:55,784:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 13:25:55,830:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 13:25:55,831:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:55,834:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:55,834:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 13:25:55,838:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 13:25:55,844:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 13:25:55,910:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 13:25:55,973:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 13:25:55,974:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:55,979:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:55,980:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 13:25:55,985:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 13:25:55,990:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,047:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,093:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,094:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:56,097:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:56,102:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,106:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,217:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,338:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,342:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:56,348:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:56,349:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 13:25:56,370:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,503:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,567:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,568:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:56,571:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:56,588:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,684:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,755:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,755:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:56,759:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:56,760:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 13:25:56,850:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,920:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 13:25:56,921:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:56,927:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:57,031:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 13:25:57,093:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 13:25:57,094:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:57,097:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:57,097:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 13:25:57,183:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 13:25:57,231:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:57,233:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:57,302:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 13:25:57,347:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:57,349:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:57,349:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 13:25:57,459:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:57,461:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:57,570:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:57,573:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:57,574:INFO:Preparing preprocessing pipeline...
2023-02-13 13:25:57,575:INFO:Set up column name cleaning.
2023-02-13 13:25:57,575:INFO:Set up simple imputation.
2023-02-13 13:25:57,593:INFO:Finished creating preprocessing pipeline.
2023-02-13 13:25:57,597:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 13:25:57,597:INFO:Creating final display dataframe.
2023-02-13 13:25:57,850:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              29b0
2023-02-13 13:25:58,183:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:58,187:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:58,308:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 13:25:58,311:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 13:25:58,311:INFO:setup() successfully completed in 2.63s...............
2023-02-13 13:25:58,311:INFO:Initializing compare_models()
2023-02-13 13:25:58,311:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 13:25:58,311:INFO:Checking exceptions
2023-02-13 13:25:58,313:INFO:Preparing display monitor
2023-02-13 13:25:58,337:INFO:Initializing Linear Regression
2023-02-13 13:25:58,337:INFO:Total runtime is 1.677274703979492e-05 minutes
2023-02-13 13:25:58,341:INFO:SubProcess create_model() called ==================================
2023-02-13 13:25:58,342:INFO:Initializing create_model()
2023-02-13 13:25:58,342:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:25:58,342:INFO:Checking exceptions
2023-02-13 13:25:58,342:INFO:Importing libraries
2023-02-13 13:25:58,343:INFO:Copying training dataset
2023-02-13 13:25:58,346:INFO:Defining folds
2023-02-13 13:25:58,346:INFO:Declaring metric variables
2023-02-13 13:25:58,350:INFO:Importing untrained model
2023-02-13 13:25:58,353:INFO:Linear Regression Imported successfully
2023-02-13 13:25:58,361:INFO:Starting cross validation
2023-02-13 13:25:58,361:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:02,797:INFO:Calculating mean and std
2023-02-13 13:26:02,799:INFO:Creating metrics dataframe
2023-02-13 13:26:02,802:INFO:Uploading results into container
2023-02-13 13:26:02,804:INFO:Uploading model into container now
2023-02-13 13:26:02,805:INFO:_master_model_container: 1
2023-02-13 13:26:02,805:INFO:_display_container: 2
2023-02-13 13:26:02,805:INFO:LinearRegression(n_jobs=-1)
2023-02-13 13:26:02,805:INFO:create_model() successfully completed......................................
2023-02-13 13:26:02,935:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:02,935:INFO:Creating metrics dataframe
2023-02-13 13:26:02,943:INFO:Initializing Lasso Regression
2023-02-13 13:26:02,944:INFO:Total runtime is 0.07680794397989908 minutes
2023-02-13 13:26:02,947:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:02,947:INFO:Initializing create_model()
2023-02-13 13:26:02,948:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:02,948:INFO:Checking exceptions
2023-02-13 13:26:02,948:INFO:Importing libraries
2023-02-13 13:26:02,948:INFO:Copying training dataset
2023-02-13 13:26:02,951:INFO:Defining folds
2023-02-13 13:26:02,951:INFO:Declaring metric variables
2023-02-13 13:26:02,958:INFO:Importing untrained model
2023-02-13 13:26:02,962:INFO:Lasso Regression Imported successfully
2023-02-13 13:26:02,969:INFO:Starting cross validation
2023-02-13 13:26:02,970:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:03,127:INFO:Calculating mean and std
2023-02-13 13:26:03,128:INFO:Creating metrics dataframe
2023-02-13 13:26:03,131:INFO:Uploading results into container
2023-02-13 13:26:03,132:INFO:Uploading model into container now
2023-02-13 13:26:03,132:INFO:_master_model_container: 2
2023-02-13 13:26:03,132:INFO:_display_container: 2
2023-02-13 13:26:03,132:INFO:Lasso(random_state=1)
2023-02-13 13:26:03,132:INFO:create_model() successfully completed......................................
2023-02-13 13:26:03,231:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:03,232:INFO:Creating metrics dataframe
2023-02-13 13:26:03,245:INFO:Initializing Ridge Regression
2023-02-13 13:26:03,245:INFO:Total runtime is 0.0818251331647237 minutes
2023-02-13 13:26:03,248:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:03,248:INFO:Initializing create_model()
2023-02-13 13:26:03,248:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:03,248:INFO:Checking exceptions
2023-02-13 13:26:03,249:INFO:Importing libraries
2023-02-13 13:26:03,249:INFO:Copying training dataset
2023-02-13 13:26:03,254:INFO:Defining folds
2023-02-13 13:26:03,254:INFO:Declaring metric variables
2023-02-13 13:26:03,257:INFO:Importing untrained model
2023-02-13 13:26:03,262:INFO:Ridge Regression Imported successfully
2023-02-13 13:26:03,271:INFO:Starting cross validation
2023-02-13 13:26:03,273:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:03,495:INFO:Calculating mean and std
2023-02-13 13:26:03,496:INFO:Creating metrics dataframe
2023-02-13 13:26:03,499:INFO:Uploading results into container
2023-02-13 13:26:03,500:INFO:Uploading model into container now
2023-02-13 13:26:03,500:INFO:_master_model_container: 3
2023-02-13 13:26:03,500:INFO:_display_container: 2
2023-02-13 13:26:03,502:INFO:Ridge(random_state=1)
2023-02-13 13:26:03,502:INFO:create_model() successfully completed......................................
2023-02-13 13:26:03,624:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:03,624:INFO:Creating metrics dataframe
2023-02-13 13:26:03,633:INFO:Initializing Elastic Net
2023-02-13 13:26:03,633:INFO:Total runtime is 0.08828023274739583 minutes
2023-02-13 13:26:03,638:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:03,638:INFO:Initializing create_model()
2023-02-13 13:26:03,638:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:03,639:INFO:Checking exceptions
2023-02-13 13:26:03,639:INFO:Importing libraries
2023-02-13 13:26:03,639:INFO:Copying training dataset
2023-02-13 13:26:03,642:INFO:Defining folds
2023-02-13 13:26:03,642:INFO:Declaring metric variables
2023-02-13 13:26:03,646:INFO:Importing untrained model
2023-02-13 13:26:03,652:INFO:Elastic Net Imported successfully
2023-02-13 13:26:03,660:INFO:Starting cross validation
2023-02-13 13:26:03,660:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:03,837:INFO:Calculating mean and std
2023-02-13 13:26:03,838:INFO:Creating metrics dataframe
2023-02-13 13:26:03,841:INFO:Uploading results into container
2023-02-13 13:26:03,841:INFO:Uploading model into container now
2023-02-13 13:26:03,842:INFO:_master_model_container: 4
2023-02-13 13:26:03,842:INFO:_display_container: 2
2023-02-13 13:26:03,842:INFO:ElasticNet(random_state=1)
2023-02-13 13:26:03,843:INFO:create_model() successfully completed......................................
2023-02-13 13:26:03,954:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:03,954:INFO:Creating metrics dataframe
2023-02-13 13:26:03,963:INFO:Initializing Least Angle Regression
2023-02-13 13:26:03,963:INFO:Total runtime is 0.09379162788391113 minutes
2023-02-13 13:26:03,968:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:03,968:INFO:Initializing create_model()
2023-02-13 13:26:03,969:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:03,969:INFO:Checking exceptions
2023-02-13 13:26:03,969:INFO:Importing libraries
2023-02-13 13:26:03,969:INFO:Copying training dataset
2023-02-13 13:26:03,973:INFO:Defining folds
2023-02-13 13:26:03,974:INFO:Declaring metric variables
2023-02-13 13:26:03,977:INFO:Importing untrained model
2023-02-13 13:26:03,980:INFO:Least Angle Regression Imported successfully
2023-02-13 13:26:03,988:INFO:Starting cross validation
2023-02-13 13:26:03,989:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:04,037:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,049:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,059:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,070:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,081:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,096:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,108:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,121:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,128:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,140:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,155:INFO:Calculating mean and std
2023-02-13 13:26:04,156:INFO:Creating metrics dataframe
2023-02-13 13:26:04,160:INFO:Uploading results into container
2023-02-13 13:26:04,161:INFO:Uploading model into container now
2023-02-13 13:26:04,162:INFO:_master_model_container: 5
2023-02-13 13:26:04,162:INFO:_display_container: 2
2023-02-13 13:26:04,162:INFO:Lars(random_state=1)
2023-02-13 13:26:04,162:INFO:create_model() successfully completed......................................
2023-02-13 13:26:04,268:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:04,268:INFO:Creating metrics dataframe
2023-02-13 13:26:04,277:INFO:Initializing Lasso Least Angle Regression
2023-02-13 13:26:04,277:INFO:Total runtime is 0.09901983340581258 minutes
2023-02-13 13:26:04,279:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:04,281:INFO:Initializing create_model()
2023-02-13 13:26:04,281:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:04,281:INFO:Checking exceptions
2023-02-13 13:26:04,281:INFO:Importing libraries
2023-02-13 13:26:04,281:INFO:Copying training dataset
2023-02-13 13:26:04,286:INFO:Defining folds
2023-02-13 13:26:04,286:INFO:Declaring metric variables
2023-02-13 13:26:04,289:INFO:Importing untrained model
2023-02-13 13:26:04,294:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 13:26:04,300:INFO:Starting cross validation
2023-02-13 13:26:04,302:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:04,348:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 13:26:04,355:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 13:26:04,370:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 13:26:04,378:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 13:26:04,390:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 13:26:04,405:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 13:26:04,410:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 13:26:04,425:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 13:26:04,438:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 13:26:04,449:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 13:26:04,466:INFO:Calculating mean and std
2023-02-13 13:26:04,467:INFO:Creating metrics dataframe
2023-02-13 13:26:04,471:INFO:Uploading results into container
2023-02-13 13:26:04,471:INFO:Uploading model into container now
2023-02-13 13:26:04,472:INFO:_master_model_container: 6
2023-02-13 13:26:04,472:INFO:_display_container: 2
2023-02-13 13:26:04,472:INFO:LassoLars(random_state=1)
2023-02-13 13:26:04,472:INFO:create_model() successfully completed......................................
2023-02-13 13:26:04,583:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:04,583:INFO:Creating metrics dataframe
2023-02-13 13:26:04,595:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 13:26:04,595:INFO:Total runtime is 0.10432457129160563 minutes
2023-02-13 13:26:04,600:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:04,600:INFO:Initializing create_model()
2023-02-13 13:26:04,601:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:04,601:INFO:Checking exceptions
2023-02-13 13:26:04,601:INFO:Importing libraries
2023-02-13 13:26:04,601:INFO:Copying training dataset
2023-02-13 13:26:04,605:INFO:Defining folds
2023-02-13 13:26:04,605:INFO:Declaring metric variables
2023-02-13 13:26:04,608:INFO:Importing untrained model
2023-02-13 13:26:04,613:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 13:26:04,621:INFO:Starting cross validation
2023-02-13 13:26:04,623:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:04,666:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,676:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,684:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,698:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,714:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,720:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,731:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,742:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,754:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,763:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 13:26:04,780:INFO:Calculating mean and std
2023-02-13 13:26:04,781:INFO:Creating metrics dataframe
2023-02-13 13:26:04,785:INFO:Uploading results into container
2023-02-13 13:26:04,785:INFO:Uploading model into container now
2023-02-13 13:26:04,786:INFO:_master_model_container: 7
2023-02-13 13:26:04,786:INFO:_display_container: 2
2023-02-13 13:26:04,787:INFO:OrthogonalMatchingPursuit()
2023-02-13 13:26:04,787:INFO:create_model() successfully completed......................................
2023-02-13 13:26:04,900:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:04,900:INFO:Creating metrics dataframe
2023-02-13 13:26:04,911:INFO:Initializing Bayesian Ridge
2023-02-13 13:26:04,911:INFO:Total runtime is 0.10958704153696697 minutes
2023-02-13 13:26:04,914:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:04,914:INFO:Initializing create_model()
2023-02-13 13:26:04,914:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:04,914:INFO:Checking exceptions
2023-02-13 13:26:04,915:INFO:Importing libraries
2023-02-13 13:26:04,915:INFO:Copying training dataset
2023-02-13 13:26:04,919:INFO:Defining folds
2023-02-13 13:26:04,919:INFO:Declaring metric variables
2023-02-13 13:26:04,923:INFO:Importing untrained model
2023-02-13 13:26:04,927:INFO:Bayesian Ridge Imported successfully
2023-02-13 13:26:04,933:INFO:Starting cross validation
2023-02-13 13:26:04,934:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:05,110:INFO:Calculating mean and std
2023-02-13 13:26:05,111:INFO:Creating metrics dataframe
2023-02-13 13:26:05,115:INFO:Uploading results into container
2023-02-13 13:26:05,116:INFO:Uploading model into container now
2023-02-13 13:26:05,116:INFO:_master_model_container: 8
2023-02-13 13:26:05,117:INFO:_display_container: 2
2023-02-13 13:26:05,118:INFO:BayesianRidge()
2023-02-13 13:26:05,118:INFO:create_model() successfully completed......................................
2023-02-13 13:26:05,236:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:05,236:INFO:Creating metrics dataframe
2023-02-13 13:26:05,251:INFO:Initializing Passive Aggressive Regressor
2023-02-13 13:26:05,251:INFO:Total runtime is 0.11524757146835328 minutes
2023-02-13 13:26:05,256:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:05,257:INFO:Initializing create_model()
2023-02-13 13:26:05,257:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:05,257:INFO:Checking exceptions
2023-02-13 13:26:05,257:INFO:Importing libraries
2023-02-13 13:26:05,257:INFO:Copying training dataset
2023-02-13 13:26:05,261:INFO:Defining folds
2023-02-13 13:26:05,261:INFO:Declaring metric variables
2023-02-13 13:26:05,264:INFO:Importing untrained model
2023-02-13 13:26:05,269:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 13:26:05,276:INFO:Starting cross validation
2023-02-13 13:26:05,277:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:05,447:INFO:Calculating mean and std
2023-02-13 13:26:05,448:INFO:Creating metrics dataframe
2023-02-13 13:26:05,454:INFO:Uploading results into container
2023-02-13 13:26:05,454:INFO:Uploading model into container now
2023-02-13 13:26:05,455:INFO:_master_model_container: 9
2023-02-13 13:26:05,455:INFO:_display_container: 2
2023-02-13 13:26:05,456:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 13:26:05,456:INFO:create_model() successfully completed......................................
2023-02-13 13:26:05,561:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:05,561:INFO:Creating metrics dataframe
2023-02-13 13:26:05,572:INFO:Initializing Huber Regressor
2023-02-13 13:26:05,572:INFO:Total runtime is 0.12059495449066163 minutes
2023-02-13 13:26:05,576:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:05,576:INFO:Initializing create_model()
2023-02-13 13:26:05,576:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:05,576:INFO:Checking exceptions
2023-02-13 13:26:05,576:INFO:Importing libraries
2023-02-13 13:26:05,576:INFO:Copying training dataset
2023-02-13 13:26:05,579:INFO:Defining folds
2023-02-13 13:26:05,579:INFO:Declaring metric variables
2023-02-13 13:26:05,585:INFO:Importing untrained model
2023-02-13 13:26:05,589:INFO:Huber Regressor Imported successfully
2023-02-13 13:26:05,597:INFO:Starting cross validation
2023-02-13 13:26:05,602:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:05,729:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 13:26:05,737:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 13:26:05,758:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 13:26:05,778:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 13:26:05,789:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 13:26:05,800:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 13:26:05,823:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 13:26:05,834:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 13:26:05,840:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 13:26:05,846:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 13:26:05,862:INFO:Calculating mean and std
2023-02-13 13:26:05,863:INFO:Creating metrics dataframe
2023-02-13 13:26:05,866:INFO:Uploading results into container
2023-02-13 13:26:05,867:INFO:Uploading model into container now
2023-02-13 13:26:05,869:INFO:_master_model_container: 10
2023-02-13 13:26:05,869:INFO:_display_container: 2
2023-02-13 13:26:05,869:INFO:HuberRegressor()
2023-02-13 13:26:05,869:INFO:create_model() successfully completed......................................
2023-02-13 13:26:05,976:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:05,976:INFO:Creating metrics dataframe
2023-02-13 13:26:05,991:INFO:Initializing K Neighbors Regressor
2023-02-13 13:26:05,991:INFO:Total runtime is 0.1275896708170573 minutes
2023-02-13 13:26:05,995:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:05,995:INFO:Initializing create_model()
2023-02-13 13:26:05,995:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:05,995:INFO:Checking exceptions
2023-02-13 13:26:05,996:INFO:Importing libraries
2023-02-13 13:26:05,996:INFO:Copying training dataset
2023-02-13 13:26:05,998:INFO:Defining folds
2023-02-13 13:26:05,999:INFO:Declaring metric variables
2023-02-13 13:26:06,003:INFO:Importing untrained model
2023-02-13 13:26:06,008:INFO:K Neighbors Regressor Imported successfully
2023-02-13 13:26:06,014:INFO:Starting cross validation
2023-02-13 13:26:06,015:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:06,189:INFO:Calculating mean and std
2023-02-13 13:26:06,190:INFO:Creating metrics dataframe
2023-02-13 13:26:06,193:INFO:Uploading results into container
2023-02-13 13:26:06,193:INFO:Uploading model into container now
2023-02-13 13:26:06,194:INFO:_master_model_container: 11
2023-02-13 13:26:06,194:INFO:_display_container: 2
2023-02-13 13:26:06,194:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 13:26:06,195:INFO:create_model() successfully completed......................................
2023-02-13 13:26:06,305:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:06,305:INFO:Creating metrics dataframe
2023-02-13 13:26:06,316:INFO:Initializing Decision Tree Regressor
2023-02-13 13:26:06,316:INFO:Total runtime is 0.13300586541493734 minutes
2023-02-13 13:26:06,322:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:06,322:INFO:Initializing create_model()
2023-02-13 13:26:06,322:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:06,323:INFO:Checking exceptions
2023-02-13 13:26:06,323:INFO:Importing libraries
2023-02-13 13:26:06,323:INFO:Copying training dataset
2023-02-13 13:26:06,326:INFO:Defining folds
2023-02-13 13:26:06,326:INFO:Declaring metric variables
2023-02-13 13:26:06,332:INFO:Importing untrained model
2023-02-13 13:26:06,339:INFO:Decision Tree Regressor Imported successfully
2023-02-13 13:26:06,345:INFO:Starting cross validation
2023-02-13 13:26:06,346:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:06,523:INFO:Calculating mean and std
2023-02-13 13:26:06,524:INFO:Creating metrics dataframe
2023-02-13 13:26:06,529:INFO:Uploading results into container
2023-02-13 13:26:06,530:INFO:Uploading model into container now
2023-02-13 13:26:06,530:INFO:_master_model_container: 12
2023-02-13 13:26:06,530:INFO:_display_container: 2
2023-02-13 13:26:06,531:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 13:26:06,531:INFO:create_model() successfully completed......................................
2023-02-13 13:26:06,672:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:06,672:INFO:Creating metrics dataframe
2023-02-13 13:26:06,689:INFO:Initializing Random Forest Regressor
2023-02-13 13:26:06,689:INFO:Total runtime is 0.13922273715337116 minutes
2023-02-13 13:26:06,694:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:06,694:INFO:Initializing create_model()
2023-02-13 13:26:06,695:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:06,695:INFO:Checking exceptions
2023-02-13 13:26:06,695:INFO:Importing libraries
2023-02-13 13:26:06,695:INFO:Copying training dataset
2023-02-13 13:26:06,700:INFO:Defining folds
2023-02-13 13:26:06,700:INFO:Declaring metric variables
2023-02-13 13:26:06,704:INFO:Importing untrained model
2023-02-13 13:26:06,708:INFO:Random Forest Regressor Imported successfully
2023-02-13 13:26:06,717:INFO:Starting cross validation
2023-02-13 13:26:06,718:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:07,249:INFO:Calculating mean and std
2023-02-13 13:26:07,252:INFO:Creating metrics dataframe
2023-02-13 13:26:07,254:INFO:Uploading results into container
2023-02-13 13:26:07,255:INFO:Uploading model into container now
2023-02-13 13:26:07,255:INFO:_master_model_container: 13
2023-02-13 13:26:07,255:INFO:_display_container: 2
2023-02-13 13:26:07,256:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 13:26:07,256:INFO:create_model() successfully completed......................................
2023-02-13 13:26:07,351:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:07,351:INFO:Creating metrics dataframe
2023-02-13 13:26:07,361:INFO:Initializing Extra Trees Regressor
2023-02-13 13:26:07,361:INFO:Total runtime is 0.15042719841003416 minutes
2023-02-13 13:26:07,368:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:07,368:INFO:Initializing create_model()
2023-02-13 13:26:07,369:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:07,369:INFO:Checking exceptions
2023-02-13 13:26:07,369:INFO:Importing libraries
2023-02-13 13:26:07,369:INFO:Copying training dataset
2023-02-13 13:26:07,372:INFO:Defining folds
2023-02-13 13:26:07,372:INFO:Declaring metric variables
2023-02-13 13:26:07,376:INFO:Importing untrained model
2023-02-13 13:26:07,382:INFO:Extra Trees Regressor Imported successfully
2023-02-13 13:26:07,390:INFO:Starting cross validation
2023-02-13 13:26:07,391:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:07,836:INFO:Calculating mean and std
2023-02-13 13:26:07,837:INFO:Creating metrics dataframe
2023-02-13 13:26:07,839:INFO:Uploading results into container
2023-02-13 13:26:07,840:INFO:Uploading model into container now
2023-02-13 13:26:07,840:INFO:_master_model_container: 14
2023-02-13 13:26:07,841:INFO:_display_container: 2
2023-02-13 13:26:07,841:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 13:26:07,841:INFO:create_model() successfully completed......................................
2023-02-13 13:26:07,943:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:07,943:INFO:Creating metrics dataframe
2023-02-13 13:26:07,956:INFO:Initializing AdaBoost Regressor
2023-02-13 13:26:07,956:INFO:Total runtime is 0.16033111015955606 minutes
2023-02-13 13:26:07,960:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:07,960:INFO:Initializing create_model()
2023-02-13 13:26:07,960:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:07,960:INFO:Checking exceptions
2023-02-13 13:26:07,960:INFO:Importing libraries
2023-02-13 13:26:07,960:INFO:Copying training dataset
2023-02-13 13:26:07,963:INFO:Defining folds
2023-02-13 13:26:07,964:INFO:Declaring metric variables
2023-02-13 13:26:07,968:INFO:Importing untrained model
2023-02-13 13:26:07,971:INFO:AdaBoost Regressor Imported successfully
2023-02-13 13:26:07,978:INFO:Starting cross validation
2023-02-13 13:26:07,978:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:08,267:INFO:Calculating mean and std
2023-02-13 13:26:08,268:INFO:Creating metrics dataframe
2023-02-13 13:26:08,271:INFO:Uploading results into container
2023-02-13 13:26:08,271:INFO:Uploading model into container now
2023-02-13 13:26:08,272:INFO:_master_model_container: 15
2023-02-13 13:26:08,272:INFO:_display_container: 2
2023-02-13 13:26:08,272:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 13:26:08,272:INFO:create_model() successfully completed......................................
2023-02-13 13:26:08,388:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:08,389:INFO:Creating metrics dataframe
2023-02-13 13:26:08,452:INFO:Initializing Gradient Boosting Regressor
2023-02-13 13:26:08,452:INFO:Total runtime is 0.16860708793004353 minutes
2023-02-13 13:26:08,458:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:08,458:INFO:Initializing create_model()
2023-02-13 13:26:08,459:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:08,459:INFO:Checking exceptions
2023-02-13 13:26:08,459:INFO:Importing libraries
2023-02-13 13:26:08,459:INFO:Copying training dataset
2023-02-13 13:26:08,463:INFO:Defining folds
2023-02-13 13:26:08,464:INFO:Declaring metric variables
2023-02-13 13:26:08,469:INFO:Importing untrained model
2023-02-13 13:26:08,474:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 13:26:08,488:INFO:Starting cross validation
2023-02-13 13:26:08,489:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:08,752:INFO:Calculating mean and std
2023-02-13 13:26:08,753:INFO:Creating metrics dataframe
2023-02-13 13:26:08,756:INFO:Uploading results into container
2023-02-13 13:26:08,758:INFO:Uploading model into container now
2023-02-13 13:26:08,758:INFO:_master_model_container: 16
2023-02-13 13:26:08,758:INFO:_display_container: 2
2023-02-13 13:26:08,759:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 13:26:08,759:INFO:create_model() successfully completed......................................
2023-02-13 13:26:08,867:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:08,868:INFO:Creating metrics dataframe
2023-02-13 13:26:08,878:INFO:Initializing Extreme Gradient Boosting
2023-02-13 13:26:08,878:INFO:Total runtime is 0.17570906082789103 minutes
2023-02-13 13:26:08,884:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:08,884:INFO:Initializing create_model()
2023-02-13 13:26:08,884:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:08,885:INFO:Checking exceptions
2023-02-13 13:26:08,885:INFO:Importing libraries
2023-02-13 13:26:08,885:INFO:Copying training dataset
2023-02-13 13:26:08,891:INFO:Defining folds
2023-02-13 13:26:08,891:INFO:Declaring metric variables
2023-02-13 13:26:08,895:INFO:Importing untrained model
2023-02-13 13:26:08,901:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 13:26:08,908:INFO:Starting cross validation
2023-02-13 13:26:08,909:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:09,204:INFO:Calculating mean and std
2023-02-13 13:26:09,205:INFO:Creating metrics dataframe
2023-02-13 13:26:09,207:INFO:Uploading results into container
2023-02-13 13:26:09,208:INFO:Uploading model into container now
2023-02-13 13:26:09,208:INFO:_master_model_container: 17
2023-02-13 13:26:09,208:INFO:_display_container: 2
2023-02-13 13:26:09,209:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 13:26:09,209:INFO:create_model() successfully completed......................................
2023-02-13 13:26:09,337:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:09,338:INFO:Creating metrics dataframe
2023-02-13 13:26:09,351:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 13:26:09,351:INFO:Total runtime is 0.1835798223813375 minutes
2023-02-13 13:26:09,354:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:09,355:INFO:Initializing create_model()
2023-02-13 13:26:09,355:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:09,355:INFO:Checking exceptions
2023-02-13 13:26:09,355:INFO:Importing libraries
2023-02-13 13:26:09,355:INFO:Copying training dataset
2023-02-13 13:26:09,358:INFO:Defining folds
2023-02-13 13:26:09,359:INFO:Declaring metric variables
2023-02-13 13:26:09,362:INFO:Importing untrained model
2023-02-13 13:26:09,367:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 13:26:09,375:INFO:Starting cross validation
2023-02-13 13:26:09,376:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:09,605:INFO:Calculating mean and std
2023-02-13 13:26:09,606:INFO:Creating metrics dataframe
2023-02-13 13:26:09,610:INFO:Uploading results into container
2023-02-13 13:26:09,610:INFO:Uploading model into container now
2023-02-13 13:26:09,611:INFO:_master_model_container: 18
2023-02-13 13:26:09,611:INFO:_display_container: 2
2023-02-13 13:26:09,611:INFO:LGBMRegressor(random_state=1)
2023-02-13 13:26:09,611:INFO:create_model() successfully completed......................................
2023-02-13 13:26:09,713:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:09,713:INFO:Creating metrics dataframe
2023-02-13 13:26:09,733:INFO:Initializing Dummy Regressor
2023-02-13 13:26:09,734:INFO:Total runtime is 0.1899662494659424 minutes
2023-02-13 13:26:09,737:INFO:SubProcess create_model() called ==================================
2023-02-13 13:26:09,738:INFO:Initializing create_model()
2023-02-13 13:26:09,738:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017C09339C70>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:09,738:INFO:Checking exceptions
2023-02-13 13:26:09,738:INFO:Importing libraries
2023-02-13 13:26:09,738:INFO:Copying training dataset
2023-02-13 13:26:09,741:INFO:Defining folds
2023-02-13 13:26:09,741:INFO:Declaring metric variables
2023-02-13 13:26:09,744:INFO:Importing untrained model
2023-02-13 13:26:09,750:INFO:Dummy Regressor Imported successfully
2023-02-13 13:26:09,758:INFO:Starting cross validation
2023-02-13 13:26:09,760:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 13:26:09,926:INFO:Calculating mean and std
2023-02-13 13:26:09,928:INFO:Creating metrics dataframe
2023-02-13 13:26:09,932:INFO:Uploading results into container
2023-02-13 13:26:09,933:INFO:Uploading model into container now
2023-02-13 13:26:09,933:INFO:_master_model_container: 19
2023-02-13 13:26:09,933:INFO:_display_container: 2
2023-02-13 13:26:09,934:INFO:DummyRegressor()
2023-02-13 13:26:09,934:INFO:create_model() successfully completed......................................
2023-02-13 13:26:10,047:INFO:SubProcess create_model() end ==================================
2023-02-13 13:26:10,047:INFO:Creating metrics dataframe
2023-02-13 13:26:10,072:INFO:Initializing create_model()
2023-02-13 13:26:10,072:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C0D5F6970>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 13:26:10,073:INFO:Checking exceptions
2023-02-13 13:26:10,074:INFO:Importing libraries
2023-02-13 13:26:10,074:INFO:Copying training dataset
2023-02-13 13:26:10,076:INFO:Defining folds
2023-02-13 13:26:10,076:INFO:Declaring metric variables
2023-02-13 13:26:10,076:INFO:Importing untrained model
2023-02-13 13:26:10,076:INFO:Declaring custom model
2023-02-13 13:26:10,077:INFO:Bayesian Ridge Imported successfully
2023-02-13 13:26:10,077:INFO:Cross validation set to False
2023-02-13 13:26:10,077:INFO:Fitting Model
2023-02-13 13:26:10,096:INFO:BayesianRidge()
2023-02-13 13:26:10,097:INFO:create_model() successfully completed......................................
2023-02-13 13:26:10,237:INFO:_master_model_container: 19
2023-02-13 13:26:10,237:INFO:_display_container: 2
2023-02-13 13:26:10,238:INFO:BayesianRidge()
2023-02-13 13:26:10,238:INFO:compare_models() successfully completed......................................
2023-02-13 14:55:20,327:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 14:55:20,327:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 14:55:20,327:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 14:55:20,327:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 14:55:21,176:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-13 14:55:30,011:INFO:PyCaret RegressionExperiment
2023-02-13 14:55:30,011:INFO:Logging name: reg-default-name
2023-02-13 14:55:30,012:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 14:55:30,012:INFO:version 3.0.0.rc8
2023-02-13 14:55:30,012:INFO:Initializing setup()
2023-02-13 14:55:30,012:INFO:self.USI: fb93
2023-02-13 14:55:30,012:INFO:self._variable_keys: {'exp_id', 'gpu_param', 'exp_name_log', 'fold_shuffle_param', 'transform_target_param', '_ml_usecase', 'html_param', 'pipeline', 'idx', 'X_test', 'X', 'X_train', 'n_jobs_param', 'fold_groups_param', 'USI', 'y_test', 'y', 'seed', 'memory', 'fold_generator', 'data', 'log_plots_param', '_available_plots', 'logging_param', 'gpu_n_jobs_param', 'y_train', 'target_param'}
2023-02-13 14:55:30,012:INFO:Checking environment
2023-02-13 14:55:30,012:INFO:python_version: 3.9.13
2023-02-13 14:55:30,012:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 14:55:30,012:INFO:machine: AMD64
2023-02-13 14:55:30,012:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 14:55:30,019:INFO:Memory: svmem(total=16805040128, available=6440214528, percent=61.7, used=10364825600, free=6440214528)
2023-02-13 14:55:30,019:INFO:Physical Core: 4
2023-02-13 14:55:30,019:INFO:Logical Core: 8
2023-02-13 14:55:30,019:INFO:Checking libraries
2023-02-13 14:55:30,019:INFO:System:
2023-02-13 14:55:30,019:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 14:55:30,019:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 14:55:30,019:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 14:55:30,019:INFO:PyCaret required dependencies:
2023-02-13 14:55:30,019:INFO:                 pip: 23.0
2023-02-13 14:55:30,019:INFO:          setuptools: 58.1.0
2023-02-13 14:55:30,019:INFO:             pycaret: 3.0.0rc8
2023-02-13 14:55:30,019:INFO:             IPython: 8.7.0
2023-02-13 14:55:30,019:INFO:          ipywidgets: 8.0.4
2023-02-13 14:55:30,019:INFO:                tqdm: 4.64.1
2023-02-13 14:55:30,019:INFO:               numpy: 1.22.1
2023-02-13 14:55:30,019:INFO:              pandas: 1.5.2
2023-02-13 14:55:30,019:INFO:              jinja2: 3.1.2
2023-02-13 14:55:30,019:INFO:               scipy: 1.5.4
2023-02-13 14:55:30,019:INFO:              joblib: 1.2.0
2023-02-13 14:55:30,019:INFO:             sklearn: 1.1.3
2023-02-13 14:55:30,019:INFO:                pyod: 1.0.7
2023-02-13 14:55:30,019:INFO:            imblearn: 0.10.1
2023-02-13 14:55:30,019:INFO:   category_encoders: 2.6.0
2023-02-13 14:55:30,019:INFO:            lightgbm: 3.3.4
2023-02-13 14:55:30,019:INFO:               numba: 0.56.4
2023-02-13 14:55:30,019:INFO:            requests: 2.28.1
2023-02-13 14:55:30,019:INFO:          matplotlib: 3.6.2
2023-02-13 14:55:30,019:INFO:          scikitplot: 0.3.7
2023-02-13 14:55:30,019:INFO:         yellowbrick: 1.5
2023-02-13 14:55:30,019:INFO:              plotly: 5.11.0
2023-02-13 14:55:30,019:INFO:             kaleido: 0.2.1
2023-02-13 14:55:30,019:INFO:         statsmodels: 0.13.5
2023-02-13 14:55:30,019:INFO:              sktime: 0.15.1
2023-02-13 14:55:30,019:INFO:               tbats: 1.1.2
2023-02-13 14:55:30,019:INFO:            pmdarima: 2.0.2
2023-02-13 14:55:30,019:INFO:              psutil: 5.9.4
2023-02-13 14:55:30,019:INFO:PyCaret optional dependencies:
2023-02-13 14:55:30,043:INFO:                shap: 0.41.0
2023-02-13 14:55:30,043:INFO:           interpret: 0.3.0
2023-02-13 14:55:30,043:INFO:                umap: Not installed
2023-02-13 14:55:30,043:INFO:    pandas_profiling: 3.6.2
2023-02-13 14:55:30,043:INFO:  explainerdashboard: Not installed
2023-02-13 14:55:30,043:INFO:             autoviz: Not installed
2023-02-13 14:55:30,043:INFO:           fairlearn: Not installed
2023-02-13 14:55:30,043:INFO:             xgboost: 1.7.3
2023-02-13 14:55:30,043:INFO:            catboost: Not installed
2023-02-13 14:55:30,043:INFO:              kmodes: Not installed
2023-02-13 14:55:30,043:INFO:             mlxtend: Not installed
2023-02-13 14:55:30,043:INFO:       statsforecast: Not installed
2023-02-13 14:55:30,043:INFO:        tune_sklearn: Not installed
2023-02-13 14:55:30,043:INFO:                 ray: Not installed
2023-02-13 14:55:30,043:INFO:            hyperopt: Not installed
2023-02-13 14:55:30,043:INFO:              optuna: Not installed
2023-02-13 14:55:30,043:INFO:               skopt: Not installed
2023-02-13 14:55:30,043:INFO:              mlflow: Not installed
2023-02-13 14:55:30,043:INFO:              gradio: Not installed
2023-02-13 14:55:30,043:INFO:             fastapi: Not installed
2023-02-13 14:55:30,043:INFO:             uvicorn: Not installed
2023-02-13 14:55:30,043:INFO:              m2cgen: Not installed
2023-02-13 14:55:30,043:INFO:           evidently: Not installed
2023-02-13 14:55:30,043:INFO:                nltk: 3.8
2023-02-13 14:55:30,043:INFO:            pyLDAvis: Not installed
2023-02-13 14:55:30,043:INFO:              gensim: Not installed
2023-02-13 14:55:30,043:INFO:               spacy: Not installed
2023-02-13 14:55:30,043:INFO:           wordcloud: 1.8.2.2
2023-02-13 14:55:30,043:INFO:            textblob: Not installed
2023-02-13 14:55:30,043:INFO:               fugue: Not installed
2023-02-13 14:55:30,043:INFO:           streamlit: 1.16.0
2023-02-13 14:55:30,043:INFO:             prophet: Not installed
2023-02-13 14:55:30,043:INFO:None
2023-02-13 14:55:30,043:INFO:Set up data.
2023-02-13 14:55:30,043:INFO:Set up train/test split.
2023-02-13 14:55:30,051:INFO:Set up index.
2023-02-13 14:55:30,051:INFO:Set up folding strategy.
2023-02-13 14:55:30,051:INFO:Assigning column types.
2023-02-13 14:55:30,054:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 14:55:30,054:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,059:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,069:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,128:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,182:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,182:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:30,270:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:30,278:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,294:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,302:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,449:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,546:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,554:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:30,554:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:30,562:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 14:55:30,570:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,578:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,713:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,814:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,814:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:30,822:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:30,838:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,846:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:55:30,983:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:55:31,043:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:55:31,043:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:31,048:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:31,048:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 14:55:31,059:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:55:31,181:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:55:31,264:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:55:31,264:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:31,264:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:31,288:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:55:31,433:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:55:31,531:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:55:31,539:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:31,547:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:31,547:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 14:55:31,700:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:55:31,816:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:55:31,816:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:31,823:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:31,979:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:55:32,091:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:55:32,091:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:32,099:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:32,099:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 14:55:32,264:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:55:32,377:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:32,377:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:32,558:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:55:32,673:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:32,675:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:32,675:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 14:55:32,906:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:32,919:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:33,174:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:33,182:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:33,182:INFO:Preparing preprocessing pipeline...
2023-02-13 14:55:33,182:INFO:Set up column name cleaning.
2023-02-13 14:55:33,182:INFO:Set up simple imputation.
2023-02-13 14:55:33,222:INFO:Finished creating preprocessing pipeline.
2023-02-13 14:55:33,230:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 14:55:33,230:INFO:Creating final display dataframe.
2023-02-13 14:55:33,477:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              fb93
2023-02-13 14:55:33,770:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:33,778:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:34,040:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:55:34,045:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:55:34,045:INFO:setup() successfully completed in 4.04s...............
2023-02-13 14:55:34,045:INFO:Initializing compare_models()
2023-02-13 14:55:34,045:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 14:55:34,045:INFO:Checking exceptions
2023-02-13 14:55:34,053:INFO:Preparing display monitor
2023-02-13 14:55:34,102:INFO:Initializing Linear Regression
2023-02-13 14:55:34,110:INFO:Total runtime is 0.0001333157221476237 minutes
2023-02-13 14:55:34,110:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:34,110:INFO:Initializing create_model()
2023-02-13 14:55:34,110:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:34,118:INFO:Checking exceptions
2023-02-13 14:55:34,118:INFO:Importing libraries
2023-02-13 14:55:34,118:INFO:Copying training dataset
2023-02-13 14:55:34,122:INFO:Defining folds
2023-02-13 14:55:34,122:INFO:Declaring metric variables
2023-02-13 14:55:34,127:INFO:Importing untrained model
2023-02-13 14:55:34,139:INFO:Linear Regression Imported successfully
2023-02-13 14:55:34,153:INFO:Starting cross validation
2023-02-13 14:55:34,164:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:39,213:INFO:Calculating mean and std
2023-02-13 14:55:39,213:INFO:Creating metrics dataframe
2023-02-13 14:55:39,221:INFO:Uploading results into container
2023-02-13 14:55:39,222:INFO:Uploading model into container now
2023-02-13 14:55:39,222:INFO:_master_model_container: 1
2023-02-13 14:55:39,222:INFO:_display_container: 2
2023-02-13 14:55:39,224:INFO:LinearRegression(n_jobs=-1)
2023-02-13 14:55:39,224:INFO:create_model() successfully completed......................................
2023-02-13 14:55:39,318:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:39,319:INFO:Creating metrics dataframe
2023-02-13 14:55:39,328:INFO:Initializing Lasso Regression
2023-02-13 14:55:39,328:INFO:Total runtime is 0.08709530035654704 minutes
2023-02-13 14:55:39,335:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:39,336:INFO:Initializing create_model()
2023-02-13 14:55:39,336:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:39,336:INFO:Checking exceptions
2023-02-13 14:55:39,336:INFO:Importing libraries
2023-02-13 14:55:39,337:INFO:Copying training dataset
2023-02-13 14:55:39,337:INFO:Defining folds
2023-02-13 14:55:39,337:INFO:Declaring metric variables
2023-02-13 14:55:39,343:INFO:Importing untrained model
2023-02-13 14:55:39,343:INFO:Lasso Regression Imported successfully
2023-02-13 14:55:39,359:INFO:Starting cross validation
2023-02-13 14:55:39,359:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:39,602:INFO:Calculating mean and std
2023-02-13 14:55:39,604:INFO:Creating metrics dataframe
2023-02-13 14:55:39,604:INFO:Uploading results into container
2023-02-13 14:55:39,604:INFO:Uploading model into container now
2023-02-13 14:55:39,612:INFO:_master_model_container: 2
2023-02-13 14:55:39,612:INFO:_display_container: 2
2023-02-13 14:55:39,612:INFO:Lasso(random_state=1)
2023-02-13 14:55:39,612:INFO:create_model() successfully completed......................................
2023-02-13 14:55:39,774:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:39,774:INFO:Creating metrics dataframe
2023-02-13 14:55:39,790:INFO:Initializing Ridge Regression
2023-02-13 14:55:39,790:INFO:Total runtime is 0.09480280081431071 minutes
2023-02-13 14:55:39,802:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:39,807:INFO:Initializing create_model()
2023-02-13 14:55:39,807:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:39,807:INFO:Checking exceptions
2023-02-13 14:55:39,807:INFO:Importing libraries
2023-02-13 14:55:39,807:INFO:Copying training dataset
2023-02-13 14:55:39,807:INFO:Defining folds
2023-02-13 14:55:39,807:INFO:Declaring metric variables
2023-02-13 14:55:39,824:INFO:Importing untrained model
2023-02-13 14:55:39,833:INFO:Ridge Regression Imported successfully
2023-02-13 14:55:39,850:INFO:Starting cross validation
2023-02-13 14:55:39,852:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:40,120:INFO:Calculating mean and std
2023-02-13 14:55:40,128:INFO:Creating metrics dataframe
2023-02-13 14:55:40,136:INFO:Uploading results into container
2023-02-13 14:55:40,136:INFO:Uploading model into container now
2023-02-13 14:55:40,136:INFO:_master_model_container: 3
2023-02-13 14:55:40,136:INFO:_display_container: 2
2023-02-13 14:55:40,136:INFO:Ridge(random_state=1)
2023-02-13 14:55:40,141:INFO:create_model() successfully completed......................................
2023-02-13 14:55:40,300:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:40,300:INFO:Creating metrics dataframe
2023-02-13 14:55:40,323:INFO:Initializing Elastic Net
2023-02-13 14:55:40,323:INFO:Total runtime is 0.10368290344874063 minutes
2023-02-13 14:55:40,333:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:40,335:INFO:Initializing create_model()
2023-02-13 14:55:40,335:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:40,335:INFO:Checking exceptions
2023-02-13 14:55:40,335:INFO:Importing libraries
2023-02-13 14:55:40,335:INFO:Copying training dataset
2023-02-13 14:55:40,340:INFO:Defining folds
2023-02-13 14:55:40,340:INFO:Declaring metric variables
2023-02-13 14:55:40,350:INFO:Importing untrained model
2023-02-13 14:55:40,356:INFO:Elastic Net Imported successfully
2023-02-13 14:55:40,389:INFO:Starting cross validation
2023-02-13 14:55:40,389:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:40,568:INFO:Calculating mean and std
2023-02-13 14:55:40,568:INFO:Creating metrics dataframe
2023-02-13 14:55:40,576:INFO:Uploading results into container
2023-02-13 14:55:40,576:INFO:Uploading model into container now
2023-02-13 14:55:40,576:INFO:_master_model_container: 4
2023-02-13 14:55:40,576:INFO:_display_container: 2
2023-02-13 14:55:40,576:INFO:ElasticNet(random_state=1)
2023-02-13 14:55:40,576:INFO:create_model() successfully completed......................................
2023-02-13 14:55:40,673:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:40,673:INFO:Creating metrics dataframe
2023-02-13 14:55:40,689:INFO:Initializing Least Angle Regression
2023-02-13 14:55:40,697:INFO:Total runtime is 0.1099073568979899 minutes
2023-02-13 14:55:40,697:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:40,705:INFO:Initializing create_model()
2023-02-13 14:55:40,705:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:40,705:INFO:Checking exceptions
2023-02-13 14:55:40,705:INFO:Importing libraries
2023-02-13 14:55:40,705:INFO:Copying training dataset
2023-02-13 14:55:40,705:INFO:Defining folds
2023-02-13 14:55:40,705:INFO:Declaring metric variables
2023-02-13 14:55:40,713:INFO:Importing untrained model
2023-02-13 14:55:40,721:INFO:Least Angle Regression Imported successfully
2023-02-13 14:55:40,737:INFO:Starting cross validation
2023-02-13 14:55:40,737:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:40,825:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:40,851:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:40,866:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:40,899:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:40,918:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:40,931:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:40,955:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:40,973:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:40,989:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:40,999:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:41,030:INFO:Calculating mean and std
2023-02-13 14:55:41,032:INFO:Creating metrics dataframe
2023-02-13 14:55:41,032:INFO:Uploading results into container
2023-02-13 14:55:41,038:INFO:Uploading model into container now
2023-02-13 14:55:41,038:INFO:_master_model_container: 5
2023-02-13 14:55:41,038:INFO:_display_container: 2
2023-02-13 14:55:41,038:INFO:Lars(random_state=1)
2023-02-13 14:55:41,038:INFO:create_model() successfully completed......................................
2023-02-13 14:55:41,147:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:41,147:INFO:Creating metrics dataframe
2023-02-13 14:55:41,160:INFO:Initializing Lasso Least Angle Regression
2023-02-13 14:55:41,160:INFO:Total runtime is 0.11763130823771158 minutes
2023-02-13 14:55:41,168:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:41,168:INFO:Initializing create_model()
2023-02-13 14:55:41,168:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:41,168:INFO:Checking exceptions
2023-02-13 14:55:41,168:INFO:Importing libraries
2023-02-13 14:55:41,168:INFO:Copying training dataset
2023-02-13 14:55:41,176:INFO:Defining folds
2023-02-13 14:55:41,176:INFO:Declaring metric variables
2023-02-13 14:55:41,192:INFO:Importing untrained model
2023-02-13 14:55:41,200:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 14:55:41,216:INFO:Starting cross validation
2023-02-13 14:55:41,216:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:41,304:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:55:41,320:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:55:41,336:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:55:41,352:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:55:41,368:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:55:41,392:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:55:41,400:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:55:41,417:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:55:41,432:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:55:41,441:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:55:41,458:INFO:Calculating mean and std
2023-02-13 14:55:41,458:INFO:Creating metrics dataframe
2023-02-13 14:55:41,466:INFO:Uploading results into container
2023-02-13 14:55:41,466:INFO:Uploading model into container now
2023-02-13 14:55:41,467:INFO:_master_model_container: 6
2023-02-13 14:55:41,467:INFO:_display_container: 2
2023-02-13 14:55:41,467:INFO:LassoLars(random_state=1)
2023-02-13 14:55:41,467:INFO:create_model() successfully completed......................................
2023-02-13 14:55:41,611:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:41,611:INFO:Creating metrics dataframe
2023-02-13 14:55:41,643:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 14:55:41,643:INFO:Total runtime is 0.1256806492805481 minutes
2023-02-13 14:55:41,651:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:41,651:INFO:Initializing create_model()
2023-02-13 14:55:41,651:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:41,651:INFO:Checking exceptions
2023-02-13 14:55:41,651:INFO:Importing libraries
2023-02-13 14:55:41,651:INFO:Copying training dataset
2023-02-13 14:55:41,659:INFO:Defining folds
2023-02-13 14:55:41,659:INFO:Declaring metric variables
2023-02-13 14:55:41,675:INFO:Importing untrained model
2023-02-13 14:55:41,683:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 14:55:41,699:INFO:Starting cross validation
2023-02-13 14:55:41,699:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:41,772:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:41,796:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:41,812:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:41,838:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:41,853:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:41,870:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:41,885:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:41,904:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:41,927:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:41,935:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:55:41,959:INFO:Calculating mean and std
2023-02-13 14:55:41,959:INFO:Creating metrics dataframe
2023-02-13 14:55:41,967:INFO:Uploading results into container
2023-02-13 14:55:41,967:INFO:Uploading model into container now
2023-02-13 14:55:41,967:INFO:_master_model_container: 7
2023-02-13 14:55:41,967:INFO:_display_container: 2
2023-02-13 14:55:41,967:INFO:OrthogonalMatchingPursuit()
2023-02-13 14:55:41,967:INFO:create_model() successfully completed......................................
2023-02-13 14:55:42,104:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:42,104:INFO:Creating metrics dataframe
2023-02-13 14:55:42,113:INFO:Initializing Bayesian Ridge
2023-02-13 14:55:42,113:INFO:Total runtime is 0.13351467847824097 minutes
2023-02-13 14:55:42,120:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:42,120:INFO:Initializing create_model()
2023-02-13 14:55:42,123:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:42,123:INFO:Checking exceptions
2023-02-13 14:55:42,123:INFO:Importing libraries
2023-02-13 14:55:42,123:INFO:Copying training dataset
2023-02-13 14:55:42,123:INFO:Defining folds
2023-02-13 14:55:42,123:INFO:Declaring metric variables
2023-02-13 14:55:42,129:INFO:Importing untrained model
2023-02-13 14:55:42,134:INFO:Bayesian Ridge Imported successfully
2023-02-13 14:55:42,143:INFO:Starting cross validation
2023-02-13 14:55:42,143:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:42,300:INFO:Calculating mean and std
2023-02-13 14:55:42,300:INFO:Creating metrics dataframe
2023-02-13 14:55:42,300:INFO:Uploading results into container
2023-02-13 14:55:42,300:INFO:Uploading model into container now
2023-02-13 14:55:42,300:INFO:_master_model_container: 8
2023-02-13 14:55:42,300:INFO:_display_container: 2
2023-02-13 14:55:42,300:INFO:BayesianRidge()
2023-02-13 14:55:42,300:INFO:create_model() successfully completed......................................
2023-02-13 14:55:42,412:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:42,412:INFO:Creating metrics dataframe
2023-02-13 14:55:42,436:INFO:Initializing Passive Aggressive Regressor
2023-02-13 14:55:42,436:INFO:Total runtime is 0.13890016476313274 minutes
2023-02-13 14:55:42,452:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:42,452:INFO:Initializing create_model()
2023-02-13 14:55:42,452:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:42,452:INFO:Checking exceptions
2023-02-13 14:55:42,452:INFO:Importing libraries
2023-02-13 14:55:42,452:INFO:Copying training dataset
2023-02-13 14:55:42,460:INFO:Defining folds
2023-02-13 14:55:42,460:INFO:Declaring metric variables
2023-02-13 14:55:42,468:INFO:Importing untrained model
2023-02-13 14:55:42,476:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 14:55:42,492:INFO:Starting cross validation
2023-02-13 14:55:42,492:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:42,784:INFO:Calculating mean and std
2023-02-13 14:55:42,784:INFO:Creating metrics dataframe
2023-02-13 14:55:42,792:INFO:Uploading results into container
2023-02-13 14:55:42,792:INFO:Uploading model into container now
2023-02-13 14:55:42,797:INFO:_master_model_container: 9
2023-02-13 14:55:42,797:INFO:_display_container: 2
2023-02-13 14:55:42,797:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 14:55:42,798:INFO:create_model() successfully completed......................................
2023-02-13 14:55:42,906:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:42,906:INFO:Creating metrics dataframe
2023-02-13 14:55:42,913:INFO:Initializing Huber Regressor
2023-02-13 14:55:42,913:INFO:Total runtime is 0.14684837261835734 minutes
2023-02-13 14:55:42,921:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:42,921:INFO:Initializing create_model()
2023-02-13 14:55:42,921:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:42,921:INFO:Checking exceptions
2023-02-13 14:55:42,921:INFO:Importing libraries
2023-02-13 14:55:42,921:INFO:Copying training dataset
2023-02-13 14:55:42,921:INFO:Defining folds
2023-02-13 14:55:42,921:INFO:Declaring metric variables
2023-02-13 14:55:42,931:INFO:Importing untrained model
2023-02-13 14:55:42,938:INFO:Huber Regressor Imported successfully
2023-02-13 14:55:42,949:INFO:Starting cross validation
2023-02-13 14:55:42,949:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:43,028:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:55:43,051:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:55:43,054:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:55:43,076:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:55:43,084:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:55:43,100:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:55:43,108:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:55:43,116:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:55:43,123:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:55:43,135:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:55:43,149:INFO:Calculating mean and std
2023-02-13 14:55:43,149:INFO:Creating metrics dataframe
2023-02-13 14:55:43,149:INFO:Uploading results into container
2023-02-13 14:55:43,149:INFO:Uploading model into container now
2023-02-13 14:55:43,149:INFO:_master_model_container: 10
2023-02-13 14:55:43,149:INFO:_display_container: 2
2023-02-13 14:55:43,149:INFO:HuberRegressor()
2023-02-13 14:55:43,149:INFO:create_model() successfully completed......................................
2023-02-13 14:55:43,254:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:43,254:INFO:Creating metrics dataframe
2023-02-13 14:55:43,286:INFO:Initializing K Neighbors Regressor
2023-02-13 14:55:43,286:INFO:Total runtime is 0.15306358337402343 minutes
2023-02-13 14:55:43,294:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:43,294:INFO:Initializing create_model()
2023-02-13 14:55:43,294:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:43,294:INFO:Checking exceptions
2023-02-13 14:55:43,294:INFO:Importing libraries
2023-02-13 14:55:43,294:INFO:Copying training dataset
2023-02-13 14:55:43,302:INFO:Defining folds
2023-02-13 14:55:43,302:INFO:Declaring metric variables
2023-02-13 14:55:43,310:INFO:Importing untrained model
2023-02-13 14:55:43,318:INFO:K Neighbors Regressor Imported successfully
2023-02-13 14:55:43,326:INFO:Starting cross validation
2023-02-13 14:55:43,334:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:43,616:INFO:Calculating mean and std
2023-02-13 14:55:43,616:INFO:Creating metrics dataframe
2023-02-13 14:55:43,616:INFO:Uploading results into container
2023-02-13 14:55:43,616:INFO:Uploading model into container now
2023-02-13 14:55:43,616:INFO:_master_model_container: 11
2023-02-13 14:55:43,616:INFO:_display_container: 2
2023-02-13 14:55:43,616:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 14:55:43,616:INFO:create_model() successfully completed......................................
2023-02-13 14:55:43,713:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:43,713:INFO:Creating metrics dataframe
2023-02-13 14:55:43,721:INFO:Initializing Decision Tree Regressor
2023-02-13 14:55:43,721:INFO:Total runtime is 0.16030777692794798 minutes
2023-02-13 14:55:43,729:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:43,729:INFO:Initializing create_model()
2023-02-13 14:55:43,729:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:43,729:INFO:Checking exceptions
2023-02-13 14:55:43,729:INFO:Importing libraries
2023-02-13 14:55:43,729:INFO:Copying training dataset
2023-02-13 14:55:43,732:INFO:Defining folds
2023-02-13 14:55:43,732:INFO:Declaring metric variables
2023-02-13 14:55:43,737:INFO:Importing untrained model
2023-02-13 14:55:43,739:INFO:Decision Tree Regressor Imported successfully
2023-02-13 14:55:43,747:INFO:Starting cross validation
2023-02-13 14:55:43,747:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:43,995:INFO:Calculating mean and std
2023-02-13 14:55:43,995:INFO:Creating metrics dataframe
2023-02-13 14:55:44,007:INFO:Uploading results into container
2023-02-13 14:55:44,007:INFO:Uploading model into container now
2023-02-13 14:55:44,007:INFO:_master_model_container: 12
2023-02-13 14:55:44,007:INFO:_display_container: 2
2023-02-13 14:55:44,007:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 14:55:44,007:INFO:create_model() successfully completed......................................
2023-02-13 14:55:44,109:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:44,109:INFO:Creating metrics dataframe
2023-02-13 14:55:44,142:INFO:Initializing Random Forest Regressor
2023-02-13 14:55:44,142:INFO:Total runtime is 0.16731988191604613 minutes
2023-02-13 14:55:44,150:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:44,150:INFO:Initializing create_model()
2023-02-13 14:55:44,150:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:44,150:INFO:Checking exceptions
2023-02-13 14:55:44,150:INFO:Importing libraries
2023-02-13 14:55:44,150:INFO:Copying training dataset
2023-02-13 14:55:44,158:INFO:Defining folds
2023-02-13 14:55:44,158:INFO:Declaring metric variables
2023-02-13 14:55:44,174:INFO:Importing untrained model
2023-02-13 14:55:44,182:INFO:Random Forest Regressor Imported successfully
2023-02-13 14:55:44,198:INFO:Starting cross validation
2023-02-13 14:55:44,206:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:44,802:INFO:Calculating mean and std
2023-02-13 14:55:44,810:INFO:Creating metrics dataframe
2023-02-13 14:55:44,810:INFO:Uploading results into container
2023-02-13 14:55:44,810:INFO:Uploading model into container now
2023-02-13 14:55:44,810:INFO:_master_model_container: 13
2023-02-13 14:55:44,810:INFO:_display_container: 2
2023-02-13 14:55:44,818:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 14:55:44,818:INFO:create_model() successfully completed......................................
2023-02-13 14:55:44,907:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:44,907:INFO:Creating metrics dataframe
2023-02-13 14:55:44,939:INFO:Initializing Extra Trees Regressor
2023-02-13 14:55:44,939:INFO:Total runtime is 0.18060476382573445 minutes
2023-02-13 14:55:44,947:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:44,947:INFO:Initializing create_model()
2023-02-13 14:55:44,947:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:44,947:INFO:Checking exceptions
2023-02-13 14:55:44,947:INFO:Importing libraries
2023-02-13 14:55:44,947:INFO:Copying training dataset
2023-02-13 14:55:44,955:INFO:Defining folds
2023-02-13 14:55:44,955:INFO:Declaring metric variables
2023-02-13 14:55:44,971:INFO:Importing untrained model
2023-02-13 14:55:44,979:INFO:Extra Trees Regressor Imported successfully
2023-02-13 14:55:44,995:INFO:Starting cross validation
2023-02-13 14:55:45,003:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:45,502:INFO:Calculating mean and std
2023-02-13 14:55:45,502:INFO:Creating metrics dataframe
2023-02-13 14:55:45,506:INFO:Uploading results into container
2023-02-13 14:55:45,506:INFO:Uploading model into container now
2023-02-13 14:55:45,506:INFO:_master_model_container: 14
2023-02-13 14:55:45,506:INFO:_display_container: 2
2023-02-13 14:55:45,506:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 14:55:45,506:INFO:create_model() successfully completed......................................
2023-02-13 14:55:45,619:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:45,619:INFO:Creating metrics dataframe
2023-02-13 14:55:45,652:INFO:Initializing AdaBoost Regressor
2023-02-13 14:55:45,660:INFO:Total runtime is 0.19262165625890096 minutes
2023-02-13 14:55:45,668:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:45,668:INFO:Initializing create_model()
2023-02-13 14:55:45,668:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:45,668:INFO:Checking exceptions
2023-02-13 14:55:45,668:INFO:Importing libraries
2023-02-13 14:55:45,668:INFO:Copying training dataset
2023-02-13 14:55:45,684:INFO:Defining folds
2023-02-13 14:55:45,685:INFO:Declaring metric variables
2023-02-13 14:55:45,693:INFO:Importing untrained model
2023-02-13 14:55:45,704:INFO:AdaBoost Regressor Imported successfully
2023-02-13 14:55:45,714:INFO:Starting cross validation
2023-02-13 14:55:45,717:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:46,002:INFO:Calculating mean and std
2023-02-13 14:55:46,002:INFO:Creating metrics dataframe
2023-02-13 14:55:46,011:INFO:Uploading results into container
2023-02-13 14:55:46,011:INFO:Uploading model into container now
2023-02-13 14:55:46,011:INFO:_master_model_container: 15
2023-02-13 14:55:46,011:INFO:_display_container: 2
2023-02-13 14:55:46,011:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 14:55:46,011:INFO:create_model() successfully completed......................................
2023-02-13 14:55:46,091:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:46,091:INFO:Creating metrics dataframe
2023-02-13 14:55:46,107:INFO:Initializing Gradient Boosting Regressor
2023-02-13 14:55:46,107:INFO:Total runtime is 0.20007917086283367 minutes
2023-02-13 14:55:46,115:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:46,115:INFO:Initializing create_model()
2023-02-13 14:55:46,115:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:46,115:INFO:Checking exceptions
2023-02-13 14:55:46,115:INFO:Importing libraries
2023-02-13 14:55:46,115:INFO:Copying training dataset
2023-02-13 14:55:46,123:INFO:Defining folds
2023-02-13 14:55:46,123:INFO:Declaring metric variables
2023-02-13 14:55:46,131:INFO:Importing untrained model
2023-02-13 14:55:46,131:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 14:55:46,147:INFO:Starting cross validation
2023-02-13 14:55:46,147:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:46,454:INFO:Calculating mean and std
2023-02-13 14:55:46,454:INFO:Creating metrics dataframe
2023-02-13 14:55:46,454:INFO:Uploading results into container
2023-02-13 14:55:46,454:INFO:Uploading model into container now
2023-02-13 14:55:46,454:INFO:_master_model_container: 16
2023-02-13 14:55:46,454:INFO:_display_container: 2
2023-02-13 14:55:46,462:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 14:55:46,462:INFO:create_model() successfully completed......................................
2023-02-13 14:55:46,551:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:46,551:INFO:Creating metrics dataframe
2023-02-13 14:55:46,583:INFO:Initializing Extreme Gradient Boosting
2023-02-13 14:55:46,583:INFO:Total runtime is 0.20801906983057658 minutes
2023-02-13 14:55:46,599:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:46,599:INFO:Initializing create_model()
2023-02-13 14:55:46,599:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:46,599:INFO:Checking exceptions
2023-02-13 14:55:46,599:INFO:Importing libraries
2023-02-13 14:55:46,599:INFO:Copying training dataset
2023-02-13 14:55:46,607:INFO:Defining folds
2023-02-13 14:55:46,607:INFO:Declaring metric variables
2023-02-13 14:55:46,615:INFO:Importing untrained model
2023-02-13 14:55:46,623:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 14:55:46,642:INFO:Starting cross validation
2023-02-13 14:55:46,644:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:46,969:INFO:Calculating mean and std
2023-02-13 14:55:46,969:INFO:Creating metrics dataframe
2023-02-13 14:55:46,978:INFO:Uploading results into container
2023-02-13 14:55:46,978:INFO:Uploading model into container now
2023-02-13 14:55:46,978:INFO:_master_model_container: 17
2023-02-13 14:55:46,978:INFO:_display_container: 2
2023-02-13 14:55:46,980:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 14:55:46,980:INFO:create_model() successfully completed......................................
2023-02-13 14:55:47,083:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:47,083:INFO:Creating metrics dataframe
2023-02-13 14:55:47,107:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 14:55:47,107:INFO:Total runtime is 0.21674161752065024 minutes
2023-02-13 14:55:47,115:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:47,115:INFO:Initializing create_model()
2023-02-13 14:55:47,115:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:47,115:INFO:Checking exceptions
2023-02-13 14:55:47,115:INFO:Importing libraries
2023-02-13 14:55:47,115:INFO:Copying training dataset
2023-02-13 14:55:47,123:INFO:Defining folds
2023-02-13 14:55:47,123:INFO:Declaring metric variables
2023-02-13 14:55:47,139:INFO:Importing untrained model
2023-02-13 14:55:47,147:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 14:55:47,179:INFO:Starting cross validation
2023-02-13 14:55:47,179:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:47,448:INFO:Calculating mean and std
2023-02-13 14:55:47,456:INFO:Creating metrics dataframe
2023-02-13 14:55:47,459:INFO:Uploading results into container
2023-02-13 14:55:47,459:INFO:Uploading model into container now
2023-02-13 14:55:47,459:INFO:_master_model_container: 18
2023-02-13 14:55:47,459:INFO:_display_container: 2
2023-02-13 14:55:47,459:INFO:LGBMRegressor(random_state=1)
2023-02-13 14:55:47,459:INFO:create_model() successfully completed......................................
2023-02-13 14:55:47,577:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:47,577:INFO:Creating metrics dataframe
2023-02-13 14:55:47,610:INFO:Initializing Dummy Regressor
2023-02-13 14:55:47,610:INFO:Total runtime is 0.22513055801391604 minutes
2023-02-13 14:55:47,618:INFO:SubProcess create_model() called ==================================
2023-02-13 14:55:47,618:INFO:Initializing create_model()
2023-02-13 14:55:47,618:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6595D2280>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:47,618:INFO:Checking exceptions
2023-02-13 14:55:47,618:INFO:Importing libraries
2023-02-13 14:55:47,618:INFO:Copying training dataset
2023-02-13 14:55:47,628:INFO:Defining folds
2023-02-13 14:55:47,635:INFO:Declaring metric variables
2023-02-13 14:55:47,647:INFO:Importing untrained model
2023-02-13 14:55:47,654:INFO:Dummy Regressor Imported successfully
2023-02-13 14:55:47,669:INFO:Starting cross validation
2023-02-13 14:55:47,669:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:55:47,964:INFO:Calculating mean and std
2023-02-13 14:55:47,964:INFO:Creating metrics dataframe
2023-02-13 14:55:47,979:INFO:Uploading results into container
2023-02-13 14:55:47,981:INFO:Uploading model into container now
2023-02-13 14:55:47,981:INFO:_master_model_container: 19
2023-02-13 14:55:47,981:INFO:_display_container: 2
2023-02-13 14:55:47,981:INFO:DummyRegressor()
2023-02-13 14:55:47,981:INFO:create_model() successfully completed......................................
2023-02-13 14:55:48,141:INFO:SubProcess create_model() end ==================================
2023-02-13 14:55:48,141:INFO:Creating metrics dataframe
2023-02-13 14:55:48,183:INFO:Initializing create_model()
2023-02-13 14:55:48,183:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65C639F10>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:55:48,183:INFO:Checking exceptions
2023-02-13 14:55:48,186:INFO:Importing libraries
2023-02-13 14:55:48,186:INFO:Copying training dataset
2023-02-13 14:55:48,197:INFO:Defining folds
2023-02-13 14:55:48,197:INFO:Declaring metric variables
2023-02-13 14:55:48,197:INFO:Importing untrained model
2023-02-13 14:55:48,197:INFO:Declaring custom model
2023-02-13 14:55:48,197:INFO:Bayesian Ridge Imported successfully
2023-02-13 14:55:48,200:INFO:Cross validation set to False
2023-02-13 14:55:48,200:INFO:Fitting Model
2023-02-13 14:55:48,236:INFO:BayesianRidge()
2023-02-13 14:55:48,236:INFO:create_model() successfully completed......................................
2023-02-13 14:55:48,488:INFO:_master_model_container: 19
2023-02-13 14:55:48,488:INFO:_display_container: 2
2023-02-13 14:55:48,490:INFO:BayesianRidge()
2023-02-13 14:55:48,490:INFO:compare_models() successfully completed......................................
2023-02-13 14:56:05,704:INFO:PyCaret RegressionExperiment
2023-02-13 14:56:05,704:INFO:Logging name: reg-default-name
2023-02-13 14:56:05,705:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 14:56:05,705:INFO:version 3.0.0.rc8
2023-02-13 14:56:05,705:INFO:Initializing setup()
2023-02-13 14:56:05,705:INFO:self.USI: ec89
2023-02-13 14:56:05,705:INFO:self._variable_keys: {'exp_id', 'gpu_param', 'exp_name_log', 'fold_shuffle_param', 'transform_target_param', '_ml_usecase', 'html_param', 'pipeline', 'idx', 'X_test', 'X', 'X_train', 'n_jobs_param', 'fold_groups_param', 'USI', 'y_test', 'y', 'seed', 'memory', 'fold_generator', 'data', 'log_plots_param', '_available_plots', 'logging_param', 'gpu_n_jobs_param', 'y_train', 'target_param'}
2023-02-13 14:56:05,705:INFO:Checking environment
2023-02-13 14:56:05,705:INFO:python_version: 3.9.13
2023-02-13 14:56:05,705:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 14:56:05,705:INFO:machine: AMD64
2023-02-13 14:56:05,705:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 14:56:05,712:INFO:Memory: svmem(total=16805040128, available=5780717568, percent=65.6, used=11024322560, free=5780717568)
2023-02-13 14:56:05,714:INFO:Physical Core: 4
2023-02-13 14:56:05,714:INFO:Logical Core: 8
2023-02-13 14:56:05,714:INFO:Checking libraries
2023-02-13 14:56:05,714:INFO:System:
2023-02-13 14:56:05,714:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 14:56:05,714:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 14:56:05,714:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 14:56:05,714:INFO:PyCaret required dependencies:
2023-02-13 14:56:05,714:INFO:                 pip: 23.0
2023-02-13 14:56:05,714:INFO:          setuptools: 58.1.0
2023-02-13 14:56:05,714:INFO:             pycaret: 3.0.0rc8
2023-02-13 14:56:05,714:INFO:             IPython: 8.7.0
2023-02-13 14:56:05,714:INFO:          ipywidgets: 8.0.4
2023-02-13 14:56:05,714:INFO:                tqdm: 4.64.1
2023-02-13 14:56:05,716:INFO:               numpy: 1.22.1
2023-02-13 14:56:05,716:INFO:              pandas: 1.5.2
2023-02-13 14:56:05,716:INFO:              jinja2: 3.1.2
2023-02-13 14:56:05,716:INFO:               scipy: 1.5.4
2023-02-13 14:56:05,716:INFO:              joblib: 1.2.0
2023-02-13 14:56:05,716:INFO:             sklearn: 1.1.3
2023-02-13 14:56:05,716:INFO:                pyod: 1.0.7
2023-02-13 14:56:05,717:INFO:            imblearn: 0.10.1
2023-02-13 14:56:05,717:INFO:   category_encoders: 2.6.0
2023-02-13 14:56:05,717:INFO:            lightgbm: 3.3.4
2023-02-13 14:56:05,717:INFO:               numba: 0.56.4
2023-02-13 14:56:05,717:INFO:            requests: 2.28.1
2023-02-13 14:56:05,717:INFO:          matplotlib: 3.6.2
2023-02-13 14:56:05,717:INFO:          scikitplot: 0.3.7
2023-02-13 14:56:05,717:INFO:         yellowbrick: 1.5
2023-02-13 14:56:05,717:INFO:              plotly: 5.11.0
2023-02-13 14:56:05,717:INFO:             kaleido: 0.2.1
2023-02-13 14:56:05,717:INFO:         statsmodels: 0.13.5
2023-02-13 14:56:05,717:INFO:              sktime: 0.15.1
2023-02-13 14:56:05,717:INFO:               tbats: 1.1.2
2023-02-13 14:56:05,717:INFO:            pmdarima: 2.0.2
2023-02-13 14:56:05,717:INFO:              psutil: 5.9.4
2023-02-13 14:56:05,717:INFO:PyCaret optional dependencies:
2023-02-13 14:56:05,717:INFO:                shap: 0.41.0
2023-02-13 14:56:05,717:INFO:           interpret: 0.3.0
2023-02-13 14:56:05,717:INFO:                umap: Not installed
2023-02-13 14:56:05,717:INFO:    pandas_profiling: 3.6.2
2023-02-13 14:56:05,717:INFO:  explainerdashboard: Not installed
2023-02-13 14:56:05,717:INFO:             autoviz: Not installed
2023-02-13 14:56:05,717:INFO:           fairlearn: Not installed
2023-02-13 14:56:05,717:INFO:             xgboost: 1.7.3
2023-02-13 14:56:05,717:INFO:            catboost: Not installed
2023-02-13 14:56:05,717:INFO:              kmodes: Not installed
2023-02-13 14:56:05,717:INFO:             mlxtend: Not installed
2023-02-13 14:56:05,717:INFO:       statsforecast: Not installed
2023-02-13 14:56:05,717:INFO:        tune_sklearn: Not installed
2023-02-13 14:56:05,717:INFO:                 ray: Not installed
2023-02-13 14:56:05,717:INFO:            hyperopt: Not installed
2023-02-13 14:56:05,717:INFO:              optuna: Not installed
2023-02-13 14:56:05,717:INFO:               skopt: Not installed
2023-02-13 14:56:05,717:INFO:              mlflow: Not installed
2023-02-13 14:56:05,717:INFO:              gradio: Not installed
2023-02-13 14:56:05,717:INFO:             fastapi: Not installed
2023-02-13 14:56:05,717:INFO:             uvicorn: Not installed
2023-02-13 14:56:05,717:INFO:              m2cgen: Not installed
2023-02-13 14:56:05,717:INFO:           evidently: Not installed
2023-02-13 14:56:05,717:INFO:                nltk: 3.8
2023-02-13 14:56:05,717:INFO:            pyLDAvis: Not installed
2023-02-13 14:56:05,717:INFO:              gensim: Not installed
2023-02-13 14:56:05,721:INFO:               spacy: Not installed
2023-02-13 14:56:05,721:INFO:           wordcloud: 1.8.2.2
2023-02-13 14:56:05,721:INFO:            textblob: Not installed
2023-02-13 14:56:05,721:INFO:               fugue: Not installed
2023-02-13 14:56:05,721:INFO:           streamlit: 1.16.0
2023-02-13 14:56:05,721:INFO:             prophet: Not installed
2023-02-13 14:56:05,721:INFO:None
2023-02-13 14:56:05,721:INFO:Set up data.
2023-02-13 14:56:05,729:INFO:Set up train/test split.
2023-02-13 14:56:05,729:INFO:Set up index.
2023-02-13 14:56:05,729:INFO:Set up folding strategy.
2023-02-13 14:56:05,729:INFO:Assigning column types.
2023-02-13 14:56:05,743:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 14:56:05,745:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 14:56:05,753:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:56:05,769:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:05,909:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,024:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,027:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:06,031:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:06,031:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,044:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,057:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,196:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,295:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,295:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:06,310:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:06,310:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 14:56:06,319:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,327:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,459:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,541:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,541:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:06,549:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:06,557:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,565:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,693:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,795:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,795:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:06,803:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:06,803:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 14:56:06,811:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,878:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,928:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:06,928:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:06,928:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:06,951:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:07,128:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:07,237:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:07,239:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:07,246:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:07,246:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 14:56:07,409:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:07,546:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:07,548:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:07,549:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:07,702:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:07,848:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:07,850:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:07,850:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:07,850:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 14:56:07,995:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:08,094:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:08,094:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:08,265:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:08,412:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:08,414:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:08,414:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 14:56:08,708:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:08,716:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:09,035:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:09,043:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:09,043:INFO:Preparing preprocessing pipeline...
2023-02-13 14:56:09,043:INFO:Set up column name cleaning.
2023-02-13 14:56:09,043:INFO:Set up simple imputation.
2023-02-13 14:56:09,076:INFO:Finished creating preprocessing pipeline.
2023-02-13 14:56:09,084:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 14:56:09,084:INFO:Creating final display dataframe.
2023-02-13 14:56:09,423:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              ec89
2023-02-13 14:56:09,691:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:09,696:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:09,977:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:09,982:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:09,982:INFO:setup() successfully completed in 4.28s...............
2023-02-13 14:56:09,982:INFO:Initializing compare_models()
2023-02-13 14:56:09,982:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 14:56:09,982:INFO:Checking exceptions
2023-02-13 14:56:09,989:INFO:Preparing display monitor
2023-02-13 14:56:10,055:INFO:Initializing Linear Regression
2023-02-13 14:56:10,055:INFO:Total runtime is 0.0 minutes
2023-02-13 14:56:10,061:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:10,061:INFO:Initializing create_model()
2023-02-13 14:56:10,061:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:10,061:INFO:Checking exceptions
2023-02-13 14:56:10,061:INFO:Importing libraries
2023-02-13 14:56:10,061:INFO:Copying training dataset
2023-02-13 14:56:10,074:INFO:Defining folds
2023-02-13 14:56:10,075:INFO:Declaring metric variables
2023-02-13 14:56:10,082:INFO:Importing untrained model
2023-02-13 14:56:10,094:INFO:Linear Regression Imported successfully
2023-02-13 14:56:10,112:INFO:Starting cross validation
2023-02-13 14:56:10,112:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:10,421:INFO:Calculating mean and std
2023-02-13 14:56:10,422:INFO:Creating metrics dataframe
2023-02-13 14:56:10,422:INFO:Uploading results into container
2023-02-13 14:56:10,429:INFO:Uploading model into container now
2023-02-13 14:56:10,429:INFO:_master_model_container: 1
2023-02-13 14:56:10,429:INFO:_display_container: 2
2023-02-13 14:56:10,429:INFO:LinearRegression(n_jobs=-1)
2023-02-13 14:56:10,429:INFO:create_model() successfully completed......................................
2023-02-13 14:56:10,605:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:10,607:INFO:Creating metrics dataframe
2023-02-13 14:56:10,627:INFO:Initializing Lasso Regression
2023-02-13 14:56:10,627:INFO:Total runtime is 0.009532773494720459 minutes
2023-02-13 14:56:10,636:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:10,636:INFO:Initializing create_model()
2023-02-13 14:56:10,637:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:10,637:INFO:Checking exceptions
2023-02-13 14:56:10,637:INFO:Importing libraries
2023-02-13 14:56:10,639:INFO:Copying training dataset
2023-02-13 14:56:10,645:INFO:Defining folds
2023-02-13 14:56:10,646:INFO:Declaring metric variables
2023-02-13 14:56:10,653:INFO:Importing untrained model
2023-02-13 14:56:10,660:INFO:Lasso Regression Imported successfully
2023-02-13 14:56:10,677:INFO:Starting cross validation
2023-02-13 14:56:10,677:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:10,953:INFO:Calculating mean and std
2023-02-13 14:56:10,954:INFO:Creating metrics dataframe
2023-02-13 14:56:10,954:INFO:Uploading results into container
2023-02-13 14:56:10,954:INFO:Uploading model into container now
2023-02-13 14:56:10,954:INFO:_master_model_container: 2
2023-02-13 14:56:10,954:INFO:_display_container: 2
2023-02-13 14:56:10,954:INFO:Lasso(random_state=1)
2023-02-13 14:56:10,954:INFO:create_model() successfully completed......................................
2023-02-13 14:56:11,086:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:11,092:INFO:Creating metrics dataframe
2023-02-13 14:56:11,109:INFO:Initializing Ridge Regression
2023-02-13 14:56:11,109:INFO:Total runtime is 0.017559858163197835 minutes
2023-02-13 14:56:11,125:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:11,127:INFO:Initializing create_model()
2023-02-13 14:56:11,127:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:11,127:INFO:Checking exceptions
2023-02-13 14:56:11,127:INFO:Importing libraries
2023-02-13 14:56:11,127:INFO:Copying training dataset
2023-02-13 14:56:11,135:INFO:Defining folds
2023-02-13 14:56:11,135:INFO:Declaring metric variables
2023-02-13 14:56:11,142:INFO:Importing untrained model
2023-02-13 14:56:11,154:INFO:Ridge Regression Imported successfully
2023-02-13 14:56:11,167:INFO:Starting cross validation
2023-02-13 14:56:11,173:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:11,448:INFO:Calculating mean and std
2023-02-13 14:56:11,454:INFO:Creating metrics dataframe
2023-02-13 14:56:11,458:INFO:Uploading results into container
2023-02-13 14:56:11,458:INFO:Uploading model into container now
2023-02-13 14:56:11,460:INFO:_master_model_container: 3
2023-02-13 14:56:11,460:INFO:_display_container: 2
2023-02-13 14:56:11,460:INFO:Ridge(random_state=1)
2023-02-13 14:56:11,460:INFO:create_model() successfully completed......................................
2023-02-13 14:56:11,593:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:11,593:INFO:Creating metrics dataframe
2023-02-13 14:56:11,617:INFO:Initializing Elastic Net
2023-02-13 14:56:11,617:INFO:Total runtime is 0.02602064609527588 minutes
2023-02-13 14:56:11,625:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:11,625:INFO:Initializing create_model()
2023-02-13 14:56:11,625:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:11,625:INFO:Checking exceptions
2023-02-13 14:56:11,625:INFO:Importing libraries
2023-02-13 14:56:11,625:INFO:Copying training dataset
2023-02-13 14:56:11,633:INFO:Defining folds
2023-02-13 14:56:11,633:INFO:Declaring metric variables
2023-02-13 14:56:11,643:INFO:Importing untrained model
2023-02-13 14:56:11,649:INFO:Elastic Net Imported successfully
2023-02-13 14:56:11,673:INFO:Starting cross validation
2023-02-13 14:56:11,673:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:11,958:INFO:Calculating mean and std
2023-02-13 14:56:11,965:INFO:Creating metrics dataframe
2023-02-13 14:56:11,970:INFO:Uploading results into container
2023-02-13 14:56:11,970:INFO:Uploading model into container now
2023-02-13 14:56:11,970:INFO:_master_model_container: 4
2023-02-13 14:56:11,975:INFO:_display_container: 2
2023-02-13 14:56:11,975:INFO:ElasticNet(random_state=1)
2023-02-13 14:56:11,975:INFO:create_model() successfully completed......................................
2023-02-13 14:56:12,129:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:12,129:INFO:Creating metrics dataframe
2023-02-13 14:56:12,153:INFO:Initializing Least Angle Regression
2023-02-13 14:56:12,153:INFO:Total runtime is 0.034967501958211265 minutes
2023-02-13 14:56:12,153:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:12,153:INFO:Initializing create_model()
2023-02-13 14:56:12,153:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:12,153:INFO:Checking exceptions
2023-02-13 14:56:12,153:INFO:Importing libraries
2023-02-13 14:56:12,153:INFO:Copying training dataset
2023-02-13 14:56:12,161:INFO:Defining folds
2023-02-13 14:56:12,161:INFO:Declaring metric variables
2023-02-13 14:56:12,169:INFO:Importing untrained model
2023-02-13 14:56:12,169:INFO:Least Angle Regression Imported successfully
2023-02-13 14:56:12,194:INFO:Starting cross validation
2023-02-13 14:56:12,194:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:12,299:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:12,323:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:12,340:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:12,356:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:12,381:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:12,402:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:12,423:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:12,439:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:12,452:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:12,464:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:12,489:INFO:Calculating mean and std
2023-02-13 14:56:12,489:INFO:Creating metrics dataframe
2023-02-13 14:56:12,489:INFO:Uploading results into container
2023-02-13 14:56:12,489:INFO:Uploading model into container now
2023-02-13 14:56:12,497:INFO:_master_model_container: 5
2023-02-13 14:56:12,497:INFO:_display_container: 2
2023-02-13 14:56:12,497:INFO:Lars(random_state=1)
2023-02-13 14:56:12,497:INFO:create_model() successfully completed......................................
2023-02-13 14:56:12,594:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:12,594:INFO:Creating metrics dataframe
2023-02-13 14:56:12,620:INFO:Initializing Lasso Least Angle Regression
2023-02-13 14:56:12,627:INFO:Total runtime is 0.042860201994578045 minutes
2023-02-13 14:56:12,627:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:12,627:INFO:Initializing create_model()
2023-02-13 14:56:12,627:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:12,627:INFO:Checking exceptions
2023-02-13 14:56:12,627:INFO:Importing libraries
2023-02-13 14:56:12,627:INFO:Copying training dataset
2023-02-13 14:56:12,638:INFO:Defining folds
2023-02-13 14:56:12,638:INFO:Declaring metric variables
2023-02-13 14:56:12,647:INFO:Importing untrained model
2023-02-13 14:56:12,652:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 14:56:12,662:INFO:Starting cross validation
2023-02-13 14:56:12,668:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:12,738:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:12,758:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:12,780:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:12,803:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:12,824:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:12,843:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:12,865:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:12,881:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:12,905:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:12,921:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:12,953:INFO:Calculating mean and std
2023-02-13 14:56:12,954:INFO:Creating metrics dataframe
2023-02-13 14:56:12,962:INFO:Uploading results into container
2023-02-13 14:56:12,962:INFO:Uploading model into container now
2023-02-13 14:56:12,964:INFO:_master_model_container: 6
2023-02-13 14:56:12,964:INFO:_display_container: 2
2023-02-13 14:56:12,964:INFO:LassoLars(random_state=1)
2023-02-13 14:56:12,964:INFO:create_model() successfully completed......................................
2023-02-13 14:56:13,110:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:13,110:INFO:Creating metrics dataframe
2023-02-13 14:56:13,142:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 14:56:13,142:INFO:Total runtime is 0.05143863757451375 minutes
2023-02-13 14:56:13,150:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:13,150:INFO:Initializing create_model()
2023-02-13 14:56:13,150:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:13,150:INFO:Checking exceptions
2023-02-13 14:56:13,150:INFO:Importing libraries
2023-02-13 14:56:13,150:INFO:Copying training dataset
2023-02-13 14:56:13,164:INFO:Defining folds
2023-02-13 14:56:13,164:INFO:Declaring metric variables
2023-02-13 14:56:13,173:INFO:Importing untrained model
2023-02-13 14:56:13,181:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 14:56:13,196:INFO:Starting cross validation
2023-02-13 14:56:13,198:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:13,309:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:13,312:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:13,328:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:13,343:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:13,352:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:13,363:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:13,376:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:13,387:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:13,396:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:13,409:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:13,427:INFO:Calculating mean and std
2023-02-13 14:56:13,427:INFO:Creating metrics dataframe
2023-02-13 14:56:13,427:INFO:Uploading results into container
2023-02-13 14:56:13,427:INFO:Uploading model into container now
2023-02-13 14:56:13,427:INFO:_master_model_container: 7
2023-02-13 14:56:13,427:INFO:_display_container: 2
2023-02-13 14:56:13,427:INFO:OrthogonalMatchingPursuit()
2023-02-13 14:56:13,427:INFO:create_model() successfully completed......................................
2023-02-13 14:56:13,525:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:13,533:INFO:Creating metrics dataframe
2023-02-13 14:56:13,541:INFO:Initializing Bayesian Ridge
2023-02-13 14:56:13,541:INFO:Total runtime is 0.05810209512710571 minutes
2023-02-13 14:56:13,549:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:13,549:INFO:Initializing create_model()
2023-02-13 14:56:13,549:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:13,549:INFO:Checking exceptions
2023-02-13 14:56:13,549:INFO:Importing libraries
2023-02-13 14:56:13,549:INFO:Copying training dataset
2023-02-13 14:56:13,558:INFO:Defining folds
2023-02-13 14:56:13,558:INFO:Declaring metric variables
2023-02-13 14:56:13,558:INFO:Importing untrained model
2023-02-13 14:56:13,569:INFO:Bayesian Ridge Imported successfully
2023-02-13 14:56:13,574:INFO:Starting cross validation
2023-02-13 14:56:13,582:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:13,794:INFO:Calculating mean and std
2023-02-13 14:56:13,795:INFO:Creating metrics dataframe
2023-02-13 14:56:13,795:INFO:Uploading results into container
2023-02-13 14:56:13,795:INFO:Uploading model into container now
2023-02-13 14:56:13,801:INFO:_master_model_container: 8
2023-02-13 14:56:13,801:INFO:_display_container: 2
2023-02-13 14:56:13,802:INFO:BayesianRidge()
2023-02-13 14:56:13,802:INFO:create_model() successfully completed......................................
2023-02-13 14:56:13,919:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:13,919:INFO:Creating metrics dataframe
2023-02-13 14:56:13,942:INFO:Initializing Passive Aggressive Regressor
2023-02-13 14:56:13,942:INFO:Total runtime is 0.06476906935373941 minutes
2023-02-13 14:56:13,958:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:13,958:INFO:Initializing create_model()
2023-02-13 14:56:13,958:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:13,958:INFO:Checking exceptions
2023-02-13 14:56:13,958:INFO:Importing libraries
2023-02-13 14:56:13,958:INFO:Copying training dataset
2023-02-13 14:56:13,971:INFO:Defining folds
2023-02-13 14:56:13,971:INFO:Declaring metric variables
2023-02-13 14:56:13,981:INFO:Importing untrained model
2023-02-13 14:56:13,990:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 14:56:14,009:INFO:Starting cross validation
2023-02-13 14:56:14,010:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:14,295:INFO:Calculating mean and std
2023-02-13 14:56:14,302:INFO:Creating metrics dataframe
2023-02-13 14:56:14,308:INFO:Uploading results into container
2023-02-13 14:56:14,309:INFO:Uploading model into container now
2023-02-13 14:56:14,309:INFO:_master_model_container: 9
2023-02-13 14:56:14,309:INFO:_display_container: 2
2023-02-13 14:56:14,309:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 14:56:14,309:INFO:create_model() successfully completed......................................
2023-02-13 14:56:14,436:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:14,436:INFO:Creating metrics dataframe
2023-02-13 14:56:14,457:INFO:Initializing Huber Regressor
2023-02-13 14:56:14,457:INFO:Total runtime is 0.0733687957127889 minutes
2023-02-13 14:56:14,469:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:14,474:INFO:Initializing create_model()
2023-02-13 14:56:14,474:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:14,474:INFO:Checking exceptions
2023-02-13 14:56:14,474:INFO:Importing libraries
2023-02-13 14:56:14,474:INFO:Copying training dataset
2023-02-13 14:56:14,474:INFO:Defining folds
2023-02-13 14:56:14,482:INFO:Declaring metric variables
2023-02-13 14:56:14,493:INFO:Importing untrained model
2023-02-13 14:56:14,500:INFO:Huber Regressor Imported successfully
2023-02-13 14:56:14,517:INFO:Starting cross validation
2023-02-13 14:56:14,520:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:14,671:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:14,696:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:14,708:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:14,720:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:14,736:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:14,753:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:14,769:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:14,782:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:14,793:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:14,795:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:14,810:INFO:Calculating mean and std
2023-02-13 14:56:14,818:INFO:Creating metrics dataframe
2023-02-13 14:56:14,822:INFO:Uploading results into container
2023-02-13 14:56:14,822:INFO:Uploading model into container now
2023-02-13 14:56:14,823:INFO:_master_model_container: 10
2023-02-13 14:56:14,823:INFO:_display_container: 2
2023-02-13 14:56:14,823:INFO:HuberRegressor()
2023-02-13 14:56:14,823:INFO:create_model() successfully completed......................................
2023-02-13 14:56:14,924:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:14,924:INFO:Creating metrics dataframe
2023-02-13 14:56:14,940:INFO:Initializing K Neighbors Regressor
2023-02-13 14:56:14,947:INFO:Total runtime is 0.08141247431437174 minutes
2023-02-13 14:56:14,950:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:14,950:INFO:Initializing create_model()
2023-02-13 14:56:14,950:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:14,950:INFO:Checking exceptions
2023-02-13 14:56:14,950:INFO:Importing libraries
2023-02-13 14:56:14,954:INFO:Copying training dataset
2023-02-13 14:56:14,957:INFO:Defining folds
2023-02-13 14:56:14,957:INFO:Declaring metric variables
2023-02-13 14:56:14,957:INFO:Importing untrained model
2023-02-13 14:56:14,971:INFO:K Neighbors Regressor Imported successfully
2023-02-13 14:56:14,981:INFO:Starting cross validation
2023-02-13 14:56:14,985:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:15,284:INFO:Calculating mean and std
2023-02-13 14:56:15,285:INFO:Creating metrics dataframe
2023-02-13 14:56:15,288:INFO:Uploading results into container
2023-02-13 14:56:15,288:INFO:Uploading model into container now
2023-02-13 14:56:15,288:INFO:_master_model_container: 11
2023-02-13 14:56:15,288:INFO:_display_container: 2
2023-02-13 14:56:15,293:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 14:56:15,293:INFO:create_model() successfully completed......................................
2023-02-13 14:56:15,391:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:15,391:INFO:Creating metrics dataframe
2023-02-13 14:56:15,418:INFO:Initializing Decision Tree Regressor
2023-02-13 14:56:15,418:INFO:Total runtime is 0.08937951723734537 minutes
2023-02-13 14:56:15,430:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:15,430:INFO:Initializing create_model()
2023-02-13 14:56:15,430:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:15,432:INFO:Checking exceptions
2023-02-13 14:56:15,432:INFO:Importing libraries
2023-02-13 14:56:15,432:INFO:Copying training dataset
2023-02-13 14:56:15,441:INFO:Defining folds
2023-02-13 14:56:15,442:INFO:Declaring metric variables
2023-02-13 14:56:15,449:INFO:Importing untrained model
2023-02-13 14:56:15,461:INFO:Decision Tree Regressor Imported successfully
2023-02-13 14:56:15,475:INFO:Starting cross validation
2023-02-13 14:56:15,480:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:15,737:INFO:Calculating mean and std
2023-02-13 14:56:15,744:INFO:Creating metrics dataframe
2023-02-13 14:56:15,748:INFO:Uploading results into container
2023-02-13 14:56:15,749:INFO:Uploading model into container now
2023-02-13 14:56:15,749:INFO:_master_model_container: 12
2023-02-13 14:56:15,749:INFO:_display_container: 2
2023-02-13 14:56:15,751:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 14:56:15,751:INFO:create_model() successfully completed......................................
2023-02-13 14:56:15,919:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:15,921:INFO:Creating metrics dataframe
2023-02-13 14:56:15,961:INFO:Initializing Random Forest Regressor
2023-02-13 14:56:15,962:INFO:Total runtime is 0.09845137596130371 minutes
2023-02-13 14:56:15,967:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:15,967:INFO:Initializing create_model()
2023-02-13 14:56:15,967:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:15,967:INFO:Checking exceptions
2023-02-13 14:56:15,967:INFO:Importing libraries
2023-02-13 14:56:15,967:INFO:Copying training dataset
2023-02-13 14:56:15,975:INFO:Defining folds
2023-02-13 14:56:15,975:INFO:Declaring metric variables
2023-02-13 14:56:15,995:INFO:Importing untrained model
2023-02-13 14:56:16,004:INFO:Random Forest Regressor Imported successfully
2023-02-13 14:56:16,024:INFO:Starting cross validation
2023-02-13 14:56:16,024:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:16,641:INFO:Calculating mean and std
2023-02-13 14:56:16,643:INFO:Creating metrics dataframe
2023-02-13 14:56:16,643:INFO:Uploading results into container
2023-02-13 14:56:16,643:INFO:Uploading model into container now
2023-02-13 14:56:16,643:INFO:_master_model_container: 13
2023-02-13 14:56:16,643:INFO:_display_container: 2
2023-02-13 14:56:16,648:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 14:56:16,648:INFO:create_model() successfully completed......................................
2023-02-13 14:56:16,766:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:16,766:INFO:Creating metrics dataframe
2023-02-13 14:56:16,791:INFO:Initializing Extra Trees Regressor
2023-02-13 14:56:16,796:INFO:Total runtime is 0.11234809160232544 minutes
2023-02-13 14:56:16,804:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:16,804:INFO:Initializing create_model()
2023-02-13 14:56:16,804:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:16,804:INFO:Checking exceptions
2023-02-13 14:56:16,804:INFO:Importing libraries
2023-02-13 14:56:16,804:INFO:Copying training dataset
2023-02-13 14:56:16,814:INFO:Defining folds
2023-02-13 14:56:16,814:INFO:Declaring metric variables
2023-02-13 14:56:16,822:INFO:Importing untrained model
2023-02-13 14:56:16,832:INFO:Extra Trees Regressor Imported successfully
2023-02-13 14:56:16,848:INFO:Starting cross validation
2023-02-13 14:56:16,848:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:17,360:INFO:Calculating mean and std
2023-02-13 14:56:17,360:INFO:Creating metrics dataframe
2023-02-13 14:56:17,360:INFO:Uploading results into container
2023-02-13 14:56:17,365:INFO:Uploading model into container now
2023-02-13 14:56:17,365:INFO:_master_model_container: 14
2023-02-13 14:56:17,365:INFO:_display_container: 2
2023-02-13 14:56:17,365:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 14:56:17,365:INFO:create_model() successfully completed......................................
2023-02-13 14:56:17,456:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:17,464:INFO:Creating metrics dataframe
2023-02-13 14:56:17,472:INFO:Initializing AdaBoost Regressor
2023-02-13 14:56:17,472:INFO:Total runtime is 0.12360906998316447 minutes
2023-02-13 14:56:17,472:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:17,472:INFO:Initializing create_model()
2023-02-13 14:56:17,472:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:17,472:INFO:Checking exceptions
2023-02-13 14:56:17,472:INFO:Importing libraries
2023-02-13 14:56:17,472:INFO:Copying training dataset
2023-02-13 14:56:17,480:INFO:Defining folds
2023-02-13 14:56:17,480:INFO:Declaring metric variables
2023-02-13 14:56:17,484:INFO:Importing untrained model
2023-02-13 14:56:17,488:INFO:AdaBoost Regressor Imported successfully
2023-02-13 14:56:17,490:INFO:Starting cross validation
2023-02-13 14:56:17,495:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:17,869:INFO:Calculating mean and std
2023-02-13 14:56:17,877:INFO:Creating metrics dataframe
2023-02-13 14:56:17,881:INFO:Uploading results into container
2023-02-13 14:56:17,883:INFO:Uploading model into container now
2023-02-13 14:56:17,883:INFO:_master_model_container: 15
2023-02-13 14:56:17,883:INFO:_display_container: 2
2023-02-13 14:56:17,883:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 14:56:17,883:INFO:create_model() successfully completed......................................
2023-02-13 14:56:18,016:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:18,016:INFO:Creating metrics dataframe
2023-02-13 14:56:18,042:INFO:Initializing Gradient Boosting Regressor
2023-02-13 14:56:18,043:INFO:Total runtime is 0.1331028898557027 minutes
2023-02-13 14:56:18,053:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:18,054:INFO:Initializing create_model()
2023-02-13 14:56:18,054:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:18,054:INFO:Checking exceptions
2023-02-13 14:56:18,054:INFO:Importing libraries
2023-02-13 14:56:18,054:INFO:Copying training dataset
2023-02-13 14:56:18,061:INFO:Defining folds
2023-02-13 14:56:18,061:INFO:Declaring metric variables
2023-02-13 14:56:18,073:INFO:Importing untrained model
2023-02-13 14:56:18,082:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 14:56:18,105:INFO:Starting cross validation
2023-02-13 14:56:18,107:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:18,433:INFO:Calculating mean and std
2023-02-13 14:56:18,439:INFO:Creating metrics dataframe
2023-02-13 14:56:18,441:INFO:Uploading results into container
2023-02-13 14:56:18,441:INFO:Uploading model into container now
2023-02-13 14:56:18,441:INFO:_master_model_container: 16
2023-02-13 14:56:18,441:INFO:_display_container: 2
2023-02-13 14:56:18,441:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 14:56:18,441:INFO:create_model() successfully completed......................................
2023-02-13 14:56:18,563:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:18,563:INFO:Creating metrics dataframe
2023-02-13 14:56:18,595:INFO:Initializing Extreme Gradient Boosting
2023-02-13 14:56:18,595:INFO:Total runtime is 0.14232930342356362 minutes
2023-02-13 14:56:18,607:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:18,608:INFO:Initializing create_model()
2023-02-13 14:56:18,609:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:18,609:INFO:Checking exceptions
2023-02-13 14:56:18,609:INFO:Importing libraries
2023-02-13 14:56:18,609:INFO:Copying training dataset
2023-02-13 14:56:18,620:INFO:Defining folds
2023-02-13 14:56:18,620:INFO:Declaring metric variables
2023-02-13 14:56:18,628:INFO:Importing untrained model
2023-02-13 14:56:18,638:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 14:56:18,660:INFO:Starting cross validation
2023-02-13 14:56:18,663:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:18,971:INFO:Calculating mean and std
2023-02-13 14:56:18,977:INFO:Creating metrics dataframe
2023-02-13 14:56:18,979:INFO:Uploading results into container
2023-02-13 14:56:18,979:INFO:Uploading model into container now
2023-02-13 14:56:18,979:INFO:_master_model_container: 17
2023-02-13 14:56:18,979:INFO:_display_container: 2
2023-02-13 14:56:18,979:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 14:56:18,979:INFO:create_model() successfully completed......................................
2023-02-13 14:56:19,092:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:19,093:INFO:Creating metrics dataframe
2023-02-13 14:56:19,119:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 14:56:19,119:INFO:Total runtime is 0.1510563294092814 minutes
2023-02-13 14:56:19,129:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:19,129:INFO:Initializing create_model()
2023-02-13 14:56:19,129:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:19,129:INFO:Checking exceptions
2023-02-13 14:56:19,129:INFO:Importing libraries
2023-02-13 14:56:19,129:INFO:Copying training dataset
2023-02-13 14:56:19,135:INFO:Defining folds
2023-02-13 14:56:19,135:INFO:Declaring metric variables
2023-02-13 14:56:19,147:INFO:Importing untrained model
2023-02-13 14:56:19,153:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 14:56:19,171:INFO:Starting cross validation
2023-02-13 14:56:19,176:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:19,443:INFO:Calculating mean and std
2023-02-13 14:56:19,448:INFO:Creating metrics dataframe
2023-02-13 14:56:19,448:INFO:Uploading results into container
2023-02-13 14:56:19,448:INFO:Uploading model into container now
2023-02-13 14:56:19,448:INFO:_master_model_container: 18
2023-02-13 14:56:19,448:INFO:_display_container: 2
2023-02-13 14:56:19,453:INFO:LGBMRegressor(random_state=1)
2023-02-13 14:56:19,453:INFO:create_model() successfully completed......................................
2023-02-13 14:56:19,550:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:19,550:INFO:Creating metrics dataframe
2023-02-13 14:56:19,568:INFO:Initializing Dummy Regressor
2023-02-13 14:56:19,568:INFO:Total runtime is 0.15854391256968178 minutes
2023-02-13 14:56:19,571:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:19,571:INFO:Initializing create_model()
2023-02-13 14:56:19,574:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D734B20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:19,574:INFO:Checking exceptions
2023-02-13 14:56:19,574:INFO:Importing libraries
2023-02-13 14:56:19,574:INFO:Copying training dataset
2023-02-13 14:56:19,579:INFO:Defining folds
2023-02-13 14:56:19,579:INFO:Declaring metric variables
2023-02-13 14:56:19,585:INFO:Importing untrained model
2023-02-13 14:56:19,589:INFO:Dummy Regressor Imported successfully
2023-02-13 14:56:19,604:INFO:Starting cross validation
2023-02-13 14:56:19,605:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:19,865:INFO:Calculating mean and std
2023-02-13 14:56:19,871:INFO:Creating metrics dataframe
2023-02-13 14:56:19,881:INFO:Uploading results into container
2023-02-13 14:56:19,881:INFO:Uploading model into container now
2023-02-13 14:56:19,881:INFO:_master_model_container: 19
2023-02-13 14:56:19,884:INFO:_display_container: 2
2023-02-13 14:56:19,884:INFO:DummyRegressor()
2023-02-13 14:56:19,884:INFO:create_model() successfully completed......................................
2023-02-13 14:56:20,047:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:20,052:INFO:Creating metrics dataframe
2023-02-13 14:56:20,103:INFO:Initializing create_model()
2023-02-13 14:56:20,110:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65CB9D4F0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:20,110:INFO:Checking exceptions
2023-02-13 14:56:20,112:INFO:Importing libraries
2023-02-13 14:56:20,112:INFO:Copying training dataset
2023-02-13 14:56:20,118:INFO:Defining folds
2023-02-13 14:56:20,118:INFO:Declaring metric variables
2023-02-13 14:56:20,118:INFO:Importing untrained model
2023-02-13 14:56:20,118:INFO:Declaring custom model
2023-02-13 14:56:20,118:INFO:Bayesian Ridge Imported successfully
2023-02-13 14:56:20,118:INFO:Cross validation set to False
2023-02-13 14:56:20,118:INFO:Fitting Model
2023-02-13 14:56:20,166:INFO:BayesianRidge()
2023-02-13 14:56:20,166:INFO:create_model() successfully completed......................................
2023-02-13 14:56:31,077:INFO:PyCaret RegressionExperiment
2023-02-13 14:56:31,077:INFO:Logging name: reg-default-name
2023-02-13 14:56:31,077:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 14:56:31,077:INFO:version 3.0.0.rc8
2023-02-13 14:56:31,077:INFO:Initializing setup()
2023-02-13 14:56:31,077:INFO:self.USI: 214a
2023-02-13 14:56:31,077:INFO:self._variable_keys: {'exp_id', 'gpu_param', 'exp_name_log', 'fold_shuffle_param', 'transform_target_param', '_ml_usecase', 'html_param', 'pipeline', 'idx', 'X_test', 'X', 'X_train', 'n_jobs_param', 'fold_groups_param', 'USI', 'y_test', 'y', 'seed', 'memory', 'fold_generator', 'data', 'log_plots_param', '_available_plots', 'logging_param', 'gpu_n_jobs_param', 'y_train', 'target_param'}
2023-02-13 14:56:31,077:INFO:Checking environment
2023-02-13 14:56:31,077:INFO:python_version: 3.9.13
2023-02-13 14:56:31,077:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 14:56:31,077:INFO:machine: AMD64
2023-02-13 14:56:31,083:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 14:56:31,091:INFO:Memory: svmem(total=16805040128, available=5836943360, percent=65.3, used=10968096768, free=5836943360)
2023-02-13 14:56:31,091:INFO:Physical Core: 4
2023-02-13 14:56:31,091:INFO:Logical Core: 8
2023-02-13 14:56:31,091:INFO:Checking libraries
2023-02-13 14:56:31,091:INFO:System:
2023-02-13 14:56:31,091:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 14:56:31,091:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 14:56:31,091:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 14:56:31,093:INFO:PyCaret required dependencies:
2023-02-13 14:56:31,093:INFO:                 pip: 23.0
2023-02-13 14:56:31,093:INFO:          setuptools: 58.1.0
2023-02-13 14:56:31,093:INFO:             pycaret: 3.0.0rc8
2023-02-13 14:56:31,093:INFO:             IPython: 8.7.0
2023-02-13 14:56:31,093:INFO:          ipywidgets: 8.0.4
2023-02-13 14:56:31,093:INFO:                tqdm: 4.64.1
2023-02-13 14:56:31,093:INFO:               numpy: 1.22.1
2023-02-13 14:56:31,093:INFO:              pandas: 1.5.2
2023-02-13 14:56:31,093:INFO:              jinja2: 3.1.2
2023-02-13 14:56:31,093:INFO:               scipy: 1.5.4
2023-02-13 14:56:31,093:INFO:              joblib: 1.2.0
2023-02-13 14:56:31,093:INFO:             sklearn: 1.1.3
2023-02-13 14:56:31,093:INFO:                pyod: 1.0.7
2023-02-13 14:56:31,093:INFO:            imblearn: 0.10.1
2023-02-13 14:56:31,093:INFO:   category_encoders: 2.6.0
2023-02-13 14:56:31,093:INFO:            lightgbm: 3.3.4
2023-02-13 14:56:31,093:INFO:               numba: 0.56.4
2023-02-13 14:56:31,093:INFO:            requests: 2.28.1
2023-02-13 14:56:31,093:INFO:          matplotlib: 3.6.2
2023-02-13 14:56:31,093:INFO:          scikitplot: 0.3.7
2023-02-13 14:56:31,093:INFO:         yellowbrick: 1.5
2023-02-13 14:56:31,093:INFO:              plotly: 5.11.0
2023-02-13 14:56:31,093:INFO:             kaleido: 0.2.1
2023-02-13 14:56:31,093:INFO:         statsmodels: 0.13.5
2023-02-13 14:56:31,093:INFO:              sktime: 0.15.1
2023-02-13 14:56:31,093:INFO:               tbats: 1.1.2
2023-02-13 14:56:31,093:INFO:            pmdarima: 2.0.2
2023-02-13 14:56:31,093:INFO:              psutil: 5.9.4
2023-02-13 14:56:31,093:INFO:PyCaret optional dependencies:
2023-02-13 14:56:31,093:INFO:                shap: 0.41.0
2023-02-13 14:56:31,093:INFO:           interpret: 0.3.0
2023-02-13 14:56:31,093:INFO:                umap: Not installed
2023-02-13 14:56:31,093:INFO:    pandas_profiling: 3.6.2
2023-02-13 14:56:31,093:INFO:  explainerdashboard: Not installed
2023-02-13 14:56:31,093:INFO:             autoviz: Not installed
2023-02-13 14:56:31,093:INFO:           fairlearn: Not installed
2023-02-13 14:56:31,093:INFO:             xgboost: 1.7.3
2023-02-13 14:56:31,093:INFO:            catboost: Not installed
2023-02-13 14:56:31,093:INFO:              kmodes: Not installed
2023-02-13 14:56:31,093:INFO:             mlxtend: Not installed
2023-02-13 14:56:31,093:INFO:       statsforecast: Not installed
2023-02-13 14:56:31,093:INFO:        tune_sklearn: Not installed
2023-02-13 14:56:31,093:INFO:                 ray: Not installed
2023-02-13 14:56:31,093:INFO:            hyperopt: Not installed
2023-02-13 14:56:31,093:INFO:              optuna: Not installed
2023-02-13 14:56:31,093:INFO:               skopt: Not installed
2023-02-13 14:56:31,093:INFO:              mlflow: Not installed
2023-02-13 14:56:31,093:INFO:              gradio: Not installed
2023-02-13 14:56:31,093:INFO:             fastapi: Not installed
2023-02-13 14:56:31,093:INFO:             uvicorn: Not installed
2023-02-13 14:56:31,093:INFO:              m2cgen: Not installed
2023-02-13 14:56:31,093:INFO:           evidently: Not installed
2023-02-13 14:56:31,093:INFO:                nltk: 3.8
2023-02-13 14:56:31,099:INFO:            pyLDAvis: Not installed
2023-02-13 14:56:31,099:INFO:              gensim: Not installed
2023-02-13 14:56:31,099:INFO:               spacy: Not installed
2023-02-13 14:56:31,099:INFO:           wordcloud: 1.8.2.2
2023-02-13 14:56:31,099:INFO:            textblob: Not installed
2023-02-13 14:56:31,099:INFO:               fugue: Not installed
2023-02-13 14:56:31,099:INFO:           streamlit: 1.16.0
2023-02-13 14:56:31,099:INFO:             prophet: Not installed
2023-02-13 14:56:31,099:INFO:None
2023-02-13 14:56:31,099:INFO:Set up data.
2023-02-13 14:56:31,115:INFO:Set up train/test split.
2023-02-13 14:56:31,115:INFO:Set up index.
2023-02-13 14:56:31,123:INFO:Set up folding strategy.
2023-02-13 14:56:31,123:INFO:Assigning column types.
2023-02-13 14:56:31,123:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 14:56:31,123:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,131:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,139:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,236:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,318:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,318:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:31,325:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:31,325:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,340:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,352:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,512:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,637:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,639:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:31,639:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:31,647:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 14:56:31,655:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,674:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,842:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,982:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:31,983:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:31,991:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:32,013:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 14:56:32,024:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:32,208:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:32,306:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:32,312:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:32,314:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:32,314:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 14:56:32,338:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:32,462:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:32,568:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:32,568:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:32,576:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:32,592:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 14:56:32,766:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:32,913:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:32,914:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:32,923:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:32,926:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 14:56:33,113:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:33,227:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:33,227:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:33,230:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:33,446:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:33,575:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 14:56:33,575:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:33,585:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:33,585:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 14:56:33,755:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:33,888:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:33,900:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:34,018:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 14:56:34,125:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:34,132:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:34,132:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 14:56:34,423:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:34,434:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:34,637:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:34,644:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:34,644:INFO:Preparing preprocessing pipeline...
2023-02-13 14:56:34,644:INFO:Set up column name cleaning.
2023-02-13 14:56:34,644:INFO:Set up simple imputation.
2023-02-13 14:56:34,676:INFO:Finished creating preprocessing pipeline.
2023-02-13 14:56:34,684:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 14:56:34,684:INFO:Creating final display dataframe.
2023-02-13 14:56:34,964:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              214a
2023-02-13 14:56:35,222:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:35,238:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:35,551:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 14:56:35,566:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 14:56:35,567:INFO:setup() successfully completed in 4.49s...............
2023-02-13 14:56:35,567:INFO:Initializing compare_models()
2023-02-13 14:56:35,567:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 14:56:35,567:INFO:Checking exceptions
2023-02-13 14:56:35,567:INFO:Preparing display monitor
2023-02-13 14:56:35,595:INFO:Initializing Linear Regression
2023-02-13 14:56:35,595:INFO:Total runtime is 0.0 minutes
2023-02-13 14:56:35,598:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:35,601:INFO:Initializing create_model()
2023-02-13 14:56:35,601:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:35,601:INFO:Checking exceptions
2023-02-13 14:56:35,601:INFO:Importing libraries
2023-02-13 14:56:35,601:INFO:Copying training dataset
2023-02-13 14:56:35,602:INFO:Defining folds
2023-02-13 14:56:35,602:INFO:Declaring metric variables
2023-02-13 14:56:35,607:INFO:Importing untrained model
2023-02-13 14:56:35,609:INFO:Linear Regression Imported successfully
2023-02-13 14:56:35,616:INFO:Starting cross validation
2023-02-13 14:56:35,620:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:35,883:INFO:Calculating mean and std
2023-02-13 14:56:35,884:INFO:Creating metrics dataframe
2023-02-13 14:56:35,891:INFO:Uploading results into container
2023-02-13 14:56:35,891:INFO:Uploading model into container now
2023-02-13 14:56:35,891:INFO:_master_model_container: 1
2023-02-13 14:56:35,891:INFO:_display_container: 2
2023-02-13 14:56:35,891:INFO:LinearRegression(n_jobs=-1)
2023-02-13 14:56:35,891:INFO:create_model() successfully completed......................................
2023-02-13 14:56:36,104:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:36,104:INFO:Creating metrics dataframe
2023-02-13 14:56:36,131:INFO:Initializing Lasso Regression
2023-02-13 14:56:36,131:INFO:Total runtime is 0.008928585052490234 minutes
2023-02-13 14:56:36,137:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:36,144:INFO:Initializing create_model()
2023-02-13 14:56:36,144:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:36,144:INFO:Checking exceptions
2023-02-13 14:56:36,144:INFO:Importing libraries
2023-02-13 14:56:36,145:INFO:Copying training dataset
2023-02-13 14:56:36,153:INFO:Defining folds
2023-02-13 14:56:36,153:INFO:Declaring metric variables
2023-02-13 14:56:36,164:INFO:Importing untrained model
2023-02-13 14:56:36,170:INFO:Lasso Regression Imported successfully
2023-02-13 14:56:36,187:INFO:Starting cross validation
2023-02-13 14:56:36,191:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:36,432:INFO:Calculating mean and std
2023-02-13 14:56:36,432:INFO:Creating metrics dataframe
2023-02-13 14:56:36,432:INFO:Uploading results into container
2023-02-13 14:56:36,432:INFO:Uploading model into container now
2023-02-13 14:56:36,432:INFO:_master_model_container: 2
2023-02-13 14:56:36,432:INFO:_display_container: 2
2023-02-13 14:56:36,432:INFO:Lasso(random_state=1)
2023-02-13 14:56:36,432:INFO:create_model() successfully completed......................................
2023-02-13 14:56:36,596:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:36,596:INFO:Creating metrics dataframe
2023-02-13 14:56:36,624:INFO:Initializing Ridge Regression
2023-02-13 14:56:36,625:INFO:Total runtime is 0.01717156171798706 minutes
2023-02-13 14:56:36,631:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:36,636:INFO:Initializing create_model()
2023-02-13 14:56:36,636:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:36,636:INFO:Checking exceptions
2023-02-13 14:56:36,637:INFO:Importing libraries
2023-02-13 14:56:36,637:INFO:Copying training dataset
2023-02-13 14:56:36,645:INFO:Defining folds
2023-02-13 14:56:36,645:INFO:Declaring metric variables
2023-02-13 14:56:36,652:INFO:Importing untrained model
2023-02-13 14:56:36,661:INFO:Ridge Regression Imported successfully
2023-02-13 14:56:36,681:INFO:Starting cross validation
2023-02-13 14:56:36,681:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:36,963:INFO:Calculating mean and std
2023-02-13 14:56:36,963:INFO:Creating metrics dataframe
2023-02-13 14:56:36,973:INFO:Uploading results into container
2023-02-13 14:56:36,974:INFO:Uploading model into container now
2023-02-13 14:56:36,975:INFO:_master_model_container: 3
2023-02-13 14:56:36,975:INFO:_display_container: 2
2023-02-13 14:56:36,975:INFO:Ridge(random_state=1)
2023-02-13 14:56:36,975:INFO:create_model() successfully completed......................................
2023-02-13 14:56:37,137:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:37,137:INFO:Creating metrics dataframe
2023-02-13 14:56:37,169:INFO:Initializing Elastic Net
2023-02-13 14:56:37,169:INFO:Total runtime is 0.02623986005783081 minutes
2023-02-13 14:56:37,179:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:37,179:INFO:Initializing create_model()
2023-02-13 14:56:37,179:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:37,179:INFO:Checking exceptions
2023-02-13 14:56:37,179:INFO:Importing libraries
2023-02-13 14:56:37,179:INFO:Copying training dataset
2023-02-13 14:56:37,189:INFO:Defining folds
2023-02-13 14:56:37,189:INFO:Declaring metric variables
2023-02-13 14:56:37,197:INFO:Importing untrained model
2023-02-13 14:56:37,207:INFO:Elastic Net Imported successfully
2023-02-13 14:56:37,223:INFO:Starting cross validation
2023-02-13 14:56:37,226:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:37,514:INFO:Calculating mean and std
2023-02-13 14:56:37,514:INFO:Creating metrics dataframe
2023-02-13 14:56:37,521:INFO:Uploading results into container
2023-02-13 14:56:37,521:INFO:Uploading model into container now
2023-02-13 14:56:37,521:INFO:_master_model_container: 4
2023-02-13 14:56:37,521:INFO:_display_container: 2
2023-02-13 14:56:37,521:INFO:ElasticNet(random_state=1)
2023-02-13 14:56:37,525:INFO:create_model() successfully completed......................................
2023-02-13 14:56:37,734:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:37,735:INFO:Creating metrics dataframe
2023-02-13 14:56:37,762:INFO:Initializing Least Angle Regression
2023-02-13 14:56:37,762:INFO:Total runtime is 0.03612256447474162 minutes
2023-02-13 14:56:37,775:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:37,775:INFO:Initializing create_model()
2023-02-13 14:56:37,776:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:37,776:INFO:Checking exceptions
2023-02-13 14:56:37,776:INFO:Importing libraries
2023-02-13 14:56:37,776:INFO:Copying training dataset
2023-02-13 14:56:37,781:INFO:Defining folds
2023-02-13 14:56:37,781:INFO:Declaring metric variables
2023-02-13 14:56:37,785:INFO:Importing untrained model
2023-02-13 14:56:37,793:INFO:Least Angle Regression Imported successfully
2023-02-13 14:56:37,812:INFO:Starting cross validation
2023-02-13 14:56:37,812:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:37,899:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:37,924:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:37,940:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:37,973:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:37,985:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,000:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,019:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,030:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,047:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,055:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,080:INFO:Calculating mean and std
2023-02-13 14:56:38,080:INFO:Creating metrics dataframe
2023-02-13 14:56:38,085:INFO:Uploading results into container
2023-02-13 14:56:38,085:INFO:Uploading model into container now
2023-02-13 14:56:38,087:INFO:_master_model_container: 5
2023-02-13 14:56:38,087:INFO:_display_container: 2
2023-02-13 14:56:38,087:INFO:Lars(random_state=1)
2023-02-13 14:56:38,087:INFO:create_model() successfully completed......................................
2023-02-13 14:56:38,242:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:38,242:INFO:Creating metrics dataframe
2023-02-13 14:56:38,250:INFO:Initializing Lasso Least Angle Regression
2023-02-13 14:56:38,250:INFO:Total runtime is 0.044252320130666094 minutes
2023-02-13 14:56:38,258:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:38,258:INFO:Initializing create_model()
2023-02-13 14:56:38,258:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:38,258:INFO:Checking exceptions
2023-02-13 14:56:38,258:INFO:Importing libraries
2023-02-13 14:56:38,258:INFO:Copying training dataset
2023-02-13 14:56:38,263:INFO:Defining folds
2023-02-13 14:56:38,263:INFO:Declaring metric variables
2023-02-13 14:56:38,266:INFO:Importing untrained model
2023-02-13 14:56:38,267:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 14:56:38,273:INFO:Starting cross validation
2023-02-13 14:56:38,275:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:38,317:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:38,327:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:38,337:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:38,349:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:38,358:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:38,369:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:38,382:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:38,391:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:38,402:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:38,413:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 14:56:38,424:INFO:Calculating mean and std
2023-02-13 14:56:38,432:INFO:Creating metrics dataframe
2023-02-13 14:56:38,433:INFO:Uploading results into container
2023-02-13 14:56:38,433:INFO:Uploading model into container now
2023-02-13 14:56:38,433:INFO:_master_model_container: 6
2023-02-13 14:56:38,433:INFO:_display_container: 2
2023-02-13 14:56:38,437:INFO:LassoLars(random_state=1)
2023-02-13 14:56:38,437:INFO:create_model() successfully completed......................................
2023-02-13 14:56:38,605:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:38,605:INFO:Creating metrics dataframe
2023-02-13 14:56:38,636:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 14:56:38,637:INFO:Total runtime is 0.05070425669352213 minutes
2023-02-13 14:56:38,645:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:38,647:INFO:Initializing create_model()
2023-02-13 14:56:38,647:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:38,647:INFO:Checking exceptions
2023-02-13 14:56:38,647:INFO:Importing libraries
2023-02-13 14:56:38,647:INFO:Copying training dataset
2023-02-13 14:56:38,653:INFO:Defining folds
2023-02-13 14:56:38,653:INFO:Declaring metric variables
2023-02-13 14:56:38,661:INFO:Importing untrained model
2023-02-13 14:56:38,673:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 14:56:38,691:INFO:Starting cross validation
2023-02-13 14:56:38,694:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:38,768:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,784:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,800:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,824:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,836:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,849:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,863:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,876:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,887:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,898:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 14:56:38,919:INFO:Calculating mean and std
2023-02-13 14:56:38,921:INFO:Creating metrics dataframe
2023-02-13 14:56:38,923:INFO:Uploading results into container
2023-02-13 14:56:38,923:INFO:Uploading model into container now
2023-02-13 14:56:38,927:INFO:_master_model_container: 7
2023-02-13 14:56:38,927:INFO:_display_container: 2
2023-02-13 14:56:38,927:INFO:OrthogonalMatchingPursuit()
2023-02-13 14:56:38,927:INFO:create_model() successfully completed......................................
2023-02-13 14:56:39,054:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:39,054:INFO:Creating metrics dataframe
2023-02-13 14:56:39,063:INFO:Initializing Bayesian Ridge
2023-02-13 14:56:39,063:INFO:Total runtime is 0.05780670642852783 minutes
2023-02-13 14:56:39,070:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:39,070:INFO:Initializing create_model()
2023-02-13 14:56:39,070:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:39,070:INFO:Checking exceptions
2023-02-13 14:56:39,070:INFO:Importing libraries
2023-02-13 14:56:39,073:INFO:Copying training dataset
2023-02-13 14:56:39,073:INFO:Defining folds
2023-02-13 14:56:39,073:INFO:Declaring metric variables
2023-02-13 14:56:39,078:INFO:Importing untrained model
2023-02-13 14:56:39,081:INFO:Bayesian Ridge Imported successfully
2023-02-13 14:56:39,086:INFO:Starting cross validation
2023-02-13 14:56:39,088:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:39,245:INFO:Calculating mean and std
2023-02-13 14:56:39,245:INFO:Creating metrics dataframe
2023-02-13 14:56:39,250:INFO:Uploading results into container
2023-02-13 14:56:39,250:INFO:Uploading model into container now
2023-02-13 14:56:39,250:INFO:_master_model_container: 8
2023-02-13 14:56:39,250:INFO:_display_container: 2
2023-02-13 14:56:39,250:INFO:BayesianRidge()
2023-02-13 14:56:39,250:INFO:create_model() successfully completed......................................
2023-02-13 14:56:39,430:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:39,430:INFO:Creating metrics dataframe
2023-02-13 14:56:39,444:INFO:Initializing Passive Aggressive Regressor
2023-02-13 14:56:39,451:INFO:Total runtime is 0.06426159540812175 minutes
2023-02-13 14:56:39,457:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:39,457:INFO:Initializing create_model()
2023-02-13 14:56:39,457:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:39,457:INFO:Checking exceptions
2023-02-13 14:56:39,457:INFO:Importing libraries
2023-02-13 14:56:39,460:INFO:Copying training dataset
2023-02-13 14:56:39,463:INFO:Defining folds
2023-02-13 14:56:39,463:INFO:Declaring metric variables
2023-02-13 14:56:39,473:INFO:Importing untrained model
2023-02-13 14:56:39,482:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 14:56:39,498:INFO:Starting cross validation
2023-02-13 14:56:39,500:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:39,803:INFO:Calculating mean and std
2023-02-13 14:56:39,811:INFO:Creating metrics dataframe
2023-02-13 14:56:39,820:INFO:Uploading results into container
2023-02-13 14:56:39,821:INFO:Uploading model into container now
2023-02-13 14:56:39,821:INFO:_master_model_container: 9
2023-02-13 14:56:39,821:INFO:_display_container: 2
2023-02-13 14:56:39,821:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 14:56:39,821:INFO:create_model() successfully completed......................................
2023-02-13 14:56:40,017:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:40,017:INFO:Creating metrics dataframe
2023-02-13 14:56:40,044:INFO:Initializing Huber Regressor
2023-02-13 14:56:40,044:INFO:Total runtime is 0.07414897680282594 minutes
2023-02-13 14:56:40,054:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:40,054:INFO:Initializing create_model()
2023-02-13 14:56:40,054:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:40,054:INFO:Checking exceptions
2023-02-13 14:56:40,054:INFO:Importing libraries
2023-02-13 14:56:40,054:INFO:Copying training dataset
2023-02-13 14:56:40,062:INFO:Defining folds
2023-02-13 14:56:40,062:INFO:Declaring metric variables
2023-02-13 14:56:40,074:INFO:Importing untrained model
2023-02-13 14:56:40,083:INFO:Huber Regressor Imported successfully
2023-02-13 14:56:40,099:INFO:Starting cross validation
2023-02-13 14:56:40,101:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:40,241:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:40,263:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:40,271:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:40,295:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:40,303:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:40,324:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:40,337:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:40,337:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:40,353:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:40,362:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 14:56:40,377:INFO:Calculating mean and std
2023-02-13 14:56:40,377:INFO:Creating metrics dataframe
2023-02-13 14:56:40,377:INFO:Uploading results into container
2023-02-13 14:56:40,377:INFO:Uploading model into container now
2023-02-13 14:56:40,385:INFO:_master_model_container: 10
2023-02-13 14:56:40,385:INFO:_display_container: 2
2023-02-13 14:56:40,385:INFO:HuberRegressor()
2023-02-13 14:56:40,385:INFO:create_model() successfully completed......................................
2023-02-13 14:56:40,485:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:40,485:INFO:Creating metrics dataframe
2023-02-13 14:56:40,517:INFO:Initializing K Neighbors Regressor
2023-02-13 14:56:40,517:INFO:Total runtime is 0.08202708959579469 minutes
2023-02-13 14:56:40,522:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:40,525:INFO:Initializing create_model()
2023-02-13 14:56:40,525:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:40,525:INFO:Checking exceptions
2023-02-13 14:56:40,526:INFO:Importing libraries
2023-02-13 14:56:40,526:INFO:Copying training dataset
2023-02-13 14:56:40,533:INFO:Defining folds
2023-02-13 14:56:40,533:INFO:Declaring metric variables
2023-02-13 14:56:40,543:INFO:Importing untrained model
2023-02-13 14:56:40,553:INFO:K Neighbors Regressor Imported successfully
2023-02-13 14:56:40,566:INFO:Starting cross validation
2023-02-13 14:56:40,574:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:40,878:INFO:Calculating mean and std
2023-02-13 14:56:40,878:INFO:Creating metrics dataframe
2023-02-13 14:56:40,886:INFO:Uploading results into container
2023-02-13 14:56:40,886:INFO:Uploading model into container now
2023-02-13 14:56:40,886:INFO:_master_model_container: 11
2023-02-13 14:56:40,886:INFO:_display_container: 2
2023-02-13 14:56:40,886:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 14:56:40,886:INFO:create_model() successfully completed......................................
2023-02-13 14:56:41,034:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:41,034:INFO:Creating metrics dataframe
2023-02-13 14:56:41,053:INFO:Initializing Decision Tree Regressor
2023-02-13 14:56:41,053:INFO:Total runtime is 0.09096650282541913 minutes
2023-02-13 14:56:41,059:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:41,059:INFO:Initializing create_model()
2023-02-13 14:56:41,059:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:41,059:INFO:Checking exceptions
2023-02-13 14:56:41,059:INFO:Importing libraries
2023-02-13 14:56:41,059:INFO:Copying training dataset
2023-02-13 14:56:41,066:INFO:Defining folds
2023-02-13 14:56:41,066:INFO:Declaring metric variables
2023-02-13 14:56:41,068:INFO:Importing untrained model
2023-02-13 14:56:41,074:INFO:Decision Tree Regressor Imported successfully
2023-02-13 14:56:41,082:INFO:Starting cross validation
2023-02-13 14:56:41,082:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:41,288:INFO:Calculating mean and std
2023-02-13 14:56:41,288:INFO:Creating metrics dataframe
2023-02-13 14:56:41,288:INFO:Uploading results into container
2023-02-13 14:56:41,296:INFO:Uploading model into container now
2023-02-13 14:56:41,296:INFO:_master_model_container: 12
2023-02-13 14:56:41,296:INFO:_display_container: 2
2023-02-13 14:56:41,297:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 14:56:41,297:INFO:create_model() successfully completed......................................
2023-02-13 14:56:41,414:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:41,414:INFO:Creating metrics dataframe
2023-02-13 14:56:41,429:INFO:Initializing Random Forest Regressor
2023-02-13 14:56:41,429:INFO:Total runtime is 0.09722729523976646 minutes
2023-02-13 14:56:41,435:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:41,435:INFO:Initializing create_model()
2023-02-13 14:56:41,435:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:41,439:INFO:Checking exceptions
2023-02-13 14:56:41,439:INFO:Importing libraries
2023-02-13 14:56:41,439:INFO:Copying training dataset
2023-02-13 14:56:41,444:INFO:Defining folds
2023-02-13 14:56:41,444:INFO:Declaring metric variables
2023-02-13 14:56:41,448:INFO:Importing untrained model
2023-02-13 14:56:41,455:INFO:Random Forest Regressor Imported successfully
2023-02-13 14:56:41,465:INFO:Starting cross validation
2023-02-13 14:56:41,465:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:42,101:INFO:Calculating mean and std
2023-02-13 14:56:42,103:INFO:Creating metrics dataframe
2023-02-13 14:56:42,103:INFO:Uploading results into container
2023-02-13 14:56:42,103:INFO:Uploading model into container now
2023-02-13 14:56:42,103:INFO:_master_model_container: 13
2023-02-13 14:56:42,103:INFO:_display_container: 2
2023-02-13 14:56:42,109:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 14:56:42,109:INFO:create_model() successfully completed......................................
2023-02-13 14:56:42,248:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:42,248:INFO:Creating metrics dataframe
2023-02-13 14:56:42,277:INFO:Initializing Extra Trees Regressor
2023-02-13 14:56:42,277:INFO:Total runtime is 0.11136118173599245 minutes
2023-02-13 14:56:42,287:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:42,287:INFO:Initializing create_model()
2023-02-13 14:56:42,287:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:42,287:INFO:Checking exceptions
2023-02-13 14:56:42,287:INFO:Importing libraries
2023-02-13 14:56:42,287:INFO:Copying training dataset
2023-02-13 14:56:42,298:INFO:Defining folds
2023-02-13 14:56:42,298:INFO:Declaring metric variables
2023-02-13 14:56:42,309:INFO:Importing untrained model
2023-02-13 14:56:42,314:INFO:Extra Trees Regressor Imported successfully
2023-02-13 14:56:42,339:INFO:Starting cross validation
2023-02-13 14:56:42,342:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:42,945:INFO:Calculating mean and std
2023-02-13 14:56:42,947:INFO:Creating metrics dataframe
2023-02-13 14:56:42,951:INFO:Uploading results into container
2023-02-13 14:56:42,951:INFO:Uploading model into container now
2023-02-13 14:56:42,951:INFO:_master_model_container: 14
2023-02-13 14:56:42,951:INFO:_display_container: 2
2023-02-13 14:56:42,951:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 14:56:42,951:INFO:create_model() successfully completed......................................
2023-02-13 14:56:43,067:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:43,075:INFO:Creating metrics dataframe
2023-02-13 14:56:43,085:INFO:Initializing AdaBoost Regressor
2023-02-13 14:56:43,092:INFO:Total runtime is 0.12494967381159466 minutes
2023-02-13 14:56:43,100:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:43,100:INFO:Initializing create_model()
2023-02-13 14:56:43,100:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:43,100:INFO:Checking exceptions
2023-02-13 14:56:43,100:INFO:Importing libraries
2023-02-13 14:56:43,100:INFO:Copying training dataset
2023-02-13 14:56:43,108:INFO:Defining folds
2023-02-13 14:56:43,108:INFO:Declaring metric variables
2023-02-13 14:56:43,115:INFO:Importing untrained model
2023-02-13 14:56:43,124:INFO:AdaBoost Regressor Imported successfully
2023-02-13 14:56:43,139:INFO:Starting cross validation
2023-02-13 14:56:43,143:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:43,520:INFO:Calculating mean and std
2023-02-13 14:56:43,520:INFO:Creating metrics dataframe
2023-02-13 14:56:43,525:INFO:Uploading results into container
2023-02-13 14:56:43,525:INFO:Uploading model into container now
2023-02-13 14:56:43,525:INFO:_master_model_container: 15
2023-02-13 14:56:43,525:INFO:_display_container: 2
2023-02-13 14:56:43,525:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 14:56:43,525:INFO:create_model() successfully completed......................................
2023-02-13 14:56:43,678:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:43,678:INFO:Creating metrics dataframe
2023-02-13 14:56:43,700:INFO:Initializing Gradient Boosting Regressor
2023-02-13 14:56:43,700:INFO:Total runtime is 0.1350857178370158 minutes
2023-02-13 14:56:43,713:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:43,713:INFO:Initializing create_model()
2023-02-13 14:56:43,713:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:43,713:INFO:Checking exceptions
2023-02-13 14:56:43,713:INFO:Importing libraries
2023-02-13 14:56:43,713:INFO:Copying training dataset
2023-02-13 14:56:43,717:INFO:Defining folds
2023-02-13 14:56:43,717:INFO:Declaring metric variables
2023-02-13 14:56:43,732:INFO:Importing untrained model
2023-02-13 14:56:43,745:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 14:56:43,763:INFO:Starting cross validation
2023-02-13 14:56:43,766:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:44,110:INFO:Calculating mean and std
2023-02-13 14:56:44,118:INFO:Creating metrics dataframe
2023-02-13 14:56:44,120:INFO:Uploading results into container
2023-02-13 14:56:44,120:INFO:Uploading model into container now
2023-02-13 14:56:44,123:INFO:_master_model_container: 16
2023-02-13 14:56:44,123:INFO:_display_container: 2
2023-02-13 14:56:44,125:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 14:56:44,125:INFO:create_model() successfully completed......................................
2023-02-13 14:56:44,298:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:44,298:INFO:Creating metrics dataframe
2023-02-13 14:56:44,329:INFO:Initializing Extreme Gradient Boosting
2023-02-13 14:56:44,330:INFO:Total runtime is 0.14558417797088624 minutes
2023-02-13 14:56:44,335:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:44,337:INFO:Initializing create_model()
2023-02-13 14:56:44,337:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:44,337:INFO:Checking exceptions
2023-02-13 14:56:44,337:INFO:Importing libraries
2023-02-13 14:56:44,337:INFO:Copying training dataset
2023-02-13 14:56:44,339:INFO:Defining folds
2023-02-13 14:56:44,339:INFO:Declaring metric variables
2023-02-13 14:56:44,347:INFO:Importing untrained model
2023-02-13 14:56:44,357:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 14:56:44,373:INFO:Starting cross validation
2023-02-13 14:56:44,376:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:44,697:INFO:Calculating mean and std
2023-02-13 14:56:44,697:INFO:Creating metrics dataframe
2023-02-13 14:56:44,706:INFO:Uploading results into container
2023-02-13 14:56:44,707:INFO:Uploading model into container now
2023-02-13 14:56:44,709:INFO:_master_model_container: 17
2023-02-13 14:56:44,709:INFO:_display_container: 2
2023-02-13 14:56:44,709:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 14:56:44,709:INFO:create_model() successfully completed......................................
2023-02-13 14:56:44,873:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:44,873:INFO:Creating metrics dataframe
2023-02-13 14:56:44,902:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 14:56:44,902:INFO:Total runtime is 0.1551137963930766 minutes
2023-02-13 14:56:44,911:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:44,911:INFO:Initializing create_model()
2023-02-13 14:56:44,911:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:44,911:INFO:Checking exceptions
2023-02-13 14:56:44,911:INFO:Importing libraries
2023-02-13 14:56:44,911:INFO:Copying training dataset
2023-02-13 14:56:44,911:INFO:Defining folds
2023-02-13 14:56:44,911:INFO:Declaring metric variables
2023-02-13 14:56:44,928:INFO:Importing untrained model
2023-02-13 14:56:44,937:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 14:56:44,951:INFO:Starting cross validation
2023-02-13 14:56:44,958:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:45,247:INFO:Calculating mean and std
2023-02-13 14:56:45,247:INFO:Creating metrics dataframe
2023-02-13 14:56:45,259:INFO:Uploading results into container
2023-02-13 14:56:45,262:INFO:Uploading model into container now
2023-02-13 14:56:45,262:INFO:_master_model_container: 18
2023-02-13 14:56:45,262:INFO:_display_container: 2
2023-02-13 14:56:45,262:INFO:LGBMRegressor(random_state=1)
2023-02-13 14:56:45,262:INFO:create_model() successfully completed......................................
2023-02-13 14:56:45,422:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:45,423:INFO:Creating metrics dataframe
2023-02-13 14:56:45,445:INFO:Initializing Dummy Regressor
2023-02-13 14:56:45,445:INFO:Total runtime is 0.16416821082433067 minutes
2023-02-13 14:56:45,452:INFO:SubProcess create_model() called ==================================
2023-02-13 14:56:45,452:INFO:Initializing create_model()
2023-02-13 14:56:45,454:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6637FE0D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:45,454:INFO:Checking exceptions
2023-02-13 14:56:45,454:INFO:Importing libraries
2023-02-13 14:56:45,454:INFO:Copying training dataset
2023-02-13 14:56:45,461:INFO:Defining folds
2023-02-13 14:56:45,461:INFO:Declaring metric variables
2023-02-13 14:56:45,470:INFO:Importing untrained model
2023-02-13 14:56:45,477:INFO:Dummy Regressor Imported successfully
2023-02-13 14:56:45,489:INFO:Starting cross validation
2023-02-13 14:56:45,492:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 14:56:45,700:INFO:Calculating mean and std
2023-02-13 14:56:45,700:INFO:Creating metrics dataframe
2023-02-13 14:56:45,710:INFO:Uploading results into container
2023-02-13 14:56:45,710:INFO:Uploading model into container now
2023-02-13 14:56:45,710:INFO:_master_model_container: 19
2023-02-13 14:56:45,710:INFO:_display_container: 2
2023-02-13 14:56:45,710:INFO:DummyRegressor()
2023-02-13 14:56:45,710:INFO:create_model() successfully completed......................................
2023-02-13 14:56:45,898:INFO:SubProcess create_model() end ==================================
2023-02-13 14:56:45,898:INFO:Creating metrics dataframe
2023-02-13 14:56:45,954:INFO:Initializing create_model()
2023-02-13 14:56:45,954:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A662F7FC70>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 14:56:45,954:INFO:Checking exceptions
2023-02-13 14:56:45,961:INFO:Importing libraries
2023-02-13 14:56:45,961:INFO:Copying training dataset
2023-02-13 14:56:45,963:INFO:Defining folds
2023-02-13 14:56:45,963:INFO:Declaring metric variables
2023-02-13 14:56:45,963:INFO:Importing untrained model
2023-02-13 14:56:45,963:INFO:Declaring custom model
2023-02-13 14:56:45,969:INFO:Bayesian Ridge Imported successfully
2023-02-13 14:56:45,969:INFO:Cross validation set to False
2023-02-13 14:56:45,969:INFO:Fitting Model
2023-02-13 14:56:46,003:INFO:BayesianRidge()
2023-02-13 14:56:46,003:INFO:create_model() successfully completed......................................
2023-02-13 14:56:46,291:INFO:_master_model_container: 19
2023-02-13 14:56:46,291:INFO:_display_container: 2
2023-02-13 14:56:46,291:INFO:BayesianRidge()
2023-02-13 14:56:46,291:INFO:compare_models() successfully completed......................................
2023-02-13 15:00:05,000:INFO:PyCaret RegressionExperiment
2023-02-13 15:00:05,000:INFO:Logging name: reg-default-name
2023-02-13 15:00:05,000:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 15:00:05,001:INFO:version 3.0.0.rc8
2023-02-13 15:00:05,001:INFO:Initializing setup()
2023-02-13 15:00:05,001:INFO:self.USI: 6715
2023-02-13 15:00:05,001:INFO:self._variable_keys: {'exp_id', 'gpu_param', 'exp_name_log', 'fold_shuffle_param', 'transform_target_param', '_ml_usecase', 'html_param', 'pipeline', 'idx', 'X_test', 'X', 'X_train', 'n_jobs_param', 'fold_groups_param', 'USI', 'y_test', 'y', 'seed', 'memory', 'fold_generator', 'data', 'log_plots_param', '_available_plots', 'logging_param', 'gpu_n_jobs_param', 'y_train', 'target_param'}
2023-02-13 15:00:05,001:INFO:Checking environment
2023-02-13 15:00:05,001:INFO:python_version: 3.9.13
2023-02-13 15:00:05,001:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 15:00:05,001:INFO:machine: AMD64
2023-02-13 15:00:05,001:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 15:00:05,007:INFO:Memory: svmem(total=16805040128, available=5512617984, percent=67.2, used=11292422144, free=5512617984)
2023-02-13 15:00:05,007:INFO:Physical Core: 4
2023-02-13 15:00:05,007:INFO:Logical Core: 8
2023-02-13 15:00:05,007:INFO:Checking libraries
2023-02-13 15:00:05,007:INFO:System:
2023-02-13 15:00:05,007:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 15:00:05,007:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 15:00:05,007:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 15:00:05,007:INFO:PyCaret required dependencies:
2023-02-13 15:00:05,007:INFO:                 pip: 23.0
2023-02-13 15:00:05,007:INFO:          setuptools: 58.1.0
2023-02-13 15:00:05,008:INFO:             pycaret: 3.0.0rc8
2023-02-13 15:00:05,008:INFO:             IPython: 8.7.0
2023-02-13 15:00:05,008:INFO:          ipywidgets: 8.0.4
2023-02-13 15:00:05,008:INFO:                tqdm: 4.64.1
2023-02-13 15:00:05,008:INFO:               numpy: 1.22.1
2023-02-13 15:00:05,008:INFO:              pandas: 1.5.2
2023-02-13 15:00:05,008:INFO:              jinja2: 3.1.2
2023-02-13 15:00:05,008:INFO:               scipy: 1.5.4
2023-02-13 15:00:05,008:INFO:              joblib: 1.2.0
2023-02-13 15:00:05,008:INFO:             sklearn: 1.1.3
2023-02-13 15:00:05,008:INFO:                pyod: 1.0.7
2023-02-13 15:00:05,008:INFO:            imblearn: 0.10.1
2023-02-13 15:00:05,008:INFO:   category_encoders: 2.6.0
2023-02-13 15:00:05,008:INFO:            lightgbm: 3.3.4
2023-02-13 15:00:05,008:INFO:               numba: 0.56.4
2023-02-13 15:00:05,008:INFO:            requests: 2.28.1
2023-02-13 15:00:05,008:INFO:          matplotlib: 3.6.2
2023-02-13 15:00:05,008:INFO:          scikitplot: 0.3.7
2023-02-13 15:00:05,008:INFO:         yellowbrick: 1.5
2023-02-13 15:00:05,008:INFO:              plotly: 5.11.0
2023-02-13 15:00:05,008:INFO:             kaleido: 0.2.1
2023-02-13 15:00:05,008:INFO:         statsmodels: 0.13.5
2023-02-13 15:00:05,009:INFO:              sktime: 0.15.1
2023-02-13 15:00:05,009:INFO:               tbats: 1.1.2
2023-02-13 15:00:05,009:INFO:            pmdarima: 2.0.2
2023-02-13 15:00:05,009:INFO:              psutil: 5.9.4
2023-02-13 15:00:05,009:INFO:PyCaret optional dependencies:
2023-02-13 15:00:05,009:INFO:                shap: 0.41.0
2023-02-13 15:00:05,009:INFO:           interpret: 0.3.0
2023-02-13 15:00:05,009:INFO:                umap: Not installed
2023-02-13 15:00:05,009:INFO:    pandas_profiling: 3.6.2
2023-02-13 15:00:05,009:INFO:  explainerdashboard: Not installed
2023-02-13 15:00:05,009:INFO:             autoviz: Not installed
2023-02-13 15:00:05,009:INFO:           fairlearn: Not installed
2023-02-13 15:00:05,009:INFO:             xgboost: 1.7.3
2023-02-13 15:00:05,009:INFO:            catboost: Not installed
2023-02-13 15:00:05,009:INFO:              kmodes: Not installed
2023-02-13 15:00:05,009:INFO:             mlxtend: Not installed
2023-02-13 15:00:05,009:INFO:       statsforecast: Not installed
2023-02-13 15:00:05,009:INFO:        tune_sklearn: Not installed
2023-02-13 15:00:05,009:INFO:                 ray: Not installed
2023-02-13 15:00:05,009:INFO:            hyperopt: Not installed
2023-02-13 15:00:05,009:INFO:              optuna: Not installed
2023-02-13 15:00:05,009:INFO:               skopt: Not installed
2023-02-13 15:00:05,009:INFO:              mlflow: Not installed
2023-02-13 15:00:05,009:INFO:              gradio: Not installed
2023-02-13 15:00:05,009:INFO:             fastapi: Not installed
2023-02-13 15:00:05,009:INFO:             uvicorn: Not installed
2023-02-13 15:00:05,009:INFO:              m2cgen: Not installed
2023-02-13 15:00:05,009:INFO:           evidently: Not installed
2023-02-13 15:00:05,009:INFO:                nltk: 3.8
2023-02-13 15:00:05,009:INFO:            pyLDAvis: Not installed
2023-02-13 15:00:05,009:INFO:              gensim: Not installed
2023-02-13 15:00:05,009:INFO:               spacy: Not installed
2023-02-13 15:00:05,010:INFO:           wordcloud: 1.8.2.2
2023-02-13 15:00:05,010:INFO:            textblob: Not installed
2023-02-13 15:00:05,010:INFO:               fugue: Not installed
2023-02-13 15:00:05,010:INFO:           streamlit: 1.16.0
2023-02-13 15:00:05,010:INFO:             prophet: Not installed
2023-02-13 15:00:05,010:INFO:None
2023-02-13 15:00:05,010:INFO:Set up data.
2023-02-13 15:00:05,016:INFO:Set up train/test split.
2023-02-13 15:00:05,020:INFO:Set up index.
2023-02-13 15:00:05,020:INFO:Set up folding strategy.
2023-02-13 15:00:05,020:INFO:Assigning column types.
2023-02-13 15:00:05,022:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 15:00:05,023:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,027:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,032:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,095:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,144:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,145:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:05,147:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:05,148:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,152:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,155:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,212:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,254:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,254:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:05,256:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:05,256:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 15:00:05,260:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,264:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,322:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,359:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,360:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:05,362:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:05,367:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,373:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,428:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,471:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,472:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:05,475:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:05,475:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 15:00:05,482:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,541:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,581:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,582:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:05,585:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:05,593:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,652:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,699:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,699:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:05,705:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:05,705:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 15:00:05,765:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,811:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,812:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:05,814:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:05,871:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,911:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:00:05,912:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:05,914:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:05,914:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 15:00:05,970:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:00:06,010:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:06,018:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:06,081:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:00:06,123:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:06,124:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:06,125:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 15:00:06,224:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:06,226:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:06,330:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:06,333:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:06,334:INFO:Preparing preprocessing pipeline...
2023-02-13 15:00:06,335:INFO:Set up column name cleaning.
2023-02-13 15:00:06,336:INFO:Set up simple imputation.
2023-02-13 15:00:06,347:INFO:Finished creating preprocessing pipeline.
2023-02-13 15:00:06,351:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 15:00:06,351:INFO:Creating final display dataframe.
2023-02-13 15:00:06,469:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              6715
2023-02-13 15:00:06,618:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:06,620:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:06,716:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:00:06,719:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:00:06,719:INFO:setup() successfully completed in 1.72s...............
2023-02-13 15:00:06,720:INFO:Initializing compare_models()
2023-02-13 15:00:06,720:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 15:00:06,720:INFO:Checking exceptions
2023-02-13 15:00:06,721:INFO:Preparing display monitor
2023-02-13 15:00:06,747:INFO:Initializing Linear Regression
2023-02-13 15:00:06,747:INFO:Total runtime is 0.0 minutes
2023-02-13 15:00:06,751:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:06,752:INFO:Initializing create_model()
2023-02-13 15:00:06,752:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:06,752:INFO:Checking exceptions
2023-02-13 15:00:06,752:INFO:Importing libraries
2023-02-13 15:00:06,752:INFO:Copying training dataset
2023-02-13 15:00:06,754:INFO:Defining folds
2023-02-13 15:00:06,754:INFO:Declaring metric variables
2023-02-13 15:00:06,758:INFO:Importing untrained model
2023-02-13 15:00:06,762:INFO:Linear Regression Imported successfully
2023-02-13 15:00:06,770:INFO:Starting cross validation
2023-02-13 15:00:06,771:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:06,894:INFO:Calculating mean and std
2023-02-13 15:00:06,895:INFO:Creating metrics dataframe
2023-02-13 15:00:06,897:INFO:Uploading results into container
2023-02-13 15:00:06,897:INFO:Uploading model into container now
2023-02-13 15:00:06,898:INFO:_master_model_container: 1
2023-02-13 15:00:06,898:INFO:_display_container: 2
2023-02-13 15:00:06,898:INFO:LinearRegression(n_jobs=-1)
2023-02-13 15:00:06,898:INFO:create_model() successfully completed......................................
2023-02-13 15:00:07,011:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:07,011:INFO:Creating metrics dataframe
2023-02-13 15:00:07,017:INFO:Initializing Lasso Regression
2023-02-13 15:00:07,018:INFO:Total runtime is 0.004527739683787028 minutes
2023-02-13 15:00:07,021:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:07,021:INFO:Initializing create_model()
2023-02-13 15:00:07,021:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:07,022:INFO:Checking exceptions
2023-02-13 15:00:07,022:INFO:Importing libraries
2023-02-13 15:00:07,022:INFO:Copying training dataset
2023-02-13 15:00:07,023:INFO:Defining folds
2023-02-13 15:00:07,023:INFO:Declaring metric variables
2023-02-13 15:00:07,026:INFO:Importing untrained model
2023-02-13 15:00:07,030:INFO:Lasso Regression Imported successfully
2023-02-13 15:00:07,037:INFO:Starting cross validation
2023-02-13 15:00:07,038:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:07,164:INFO:Calculating mean and std
2023-02-13 15:00:07,164:INFO:Creating metrics dataframe
2023-02-13 15:00:07,168:INFO:Uploading results into container
2023-02-13 15:00:07,168:INFO:Uploading model into container now
2023-02-13 15:00:07,168:INFO:_master_model_container: 2
2023-02-13 15:00:07,168:INFO:_display_container: 2
2023-02-13 15:00:07,169:INFO:Lasso(random_state=1)
2023-02-13 15:00:07,169:INFO:create_model() successfully completed......................................
2023-02-13 15:00:07,268:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:07,268:INFO:Creating metrics dataframe
2023-02-13 15:00:07,275:INFO:Initializing Ridge Regression
2023-02-13 15:00:07,275:INFO:Total runtime is 0.008811771869659424 minutes
2023-02-13 15:00:07,279:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:07,279:INFO:Initializing create_model()
2023-02-13 15:00:07,280:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:07,280:INFO:Checking exceptions
2023-02-13 15:00:07,280:INFO:Importing libraries
2023-02-13 15:00:07,280:INFO:Copying training dataset
2023-02-13 15:00:07,283:INFO:Defining folds
2023-02-13 15:00:07,283:INFO:Declaring metric variables
2023-02-13 15:00:07,287:INFO:Importing untrained model
2023-02-13 15:00:07,291:INFO:Ridge Regression Imported successfully
2023-02-13 15:00:07,299:INFO:Starting cross validation
2023-02-13 15:00:07,300:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:07,423:INFO:Calculating mean and std
2023-02-13 15:00:07,423:INFO:Creating metrics dataframe
2023-02-13 15:00:07,425:INFO:Uploading results into container
2023-02-13 15:00:07,426:INFO:Uploading model into container now
2023-02-13 15:00:07,426:INFO:_master_model_container: 3
2023-02-13 15:00:07,426:INFO:_display_container: 2
2023-02-13 15:00:07,426:INFO:Ridge(random_state=1)
2023-02-13 15:00:07,426:INFO:create_model() successfully completed......................................
2023-02-13 15:00:07,527:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:07,527:INFO:Creating metrics dataframe
2023-02-13 15:00:07,535:INFO:Initializing Elastic Net
2023-02-13 15:00:07,536:INFO:Total runtime is 0.013154117266337077 minutes
2023-02-13 15:00:07,539:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:07,540:INFO:Initializing create_model()
2023-02-13 15:00:07,540:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:07,540:INFO:Checking exceptions
2023-02-13 15:00:07,540:INFO:Importing libraries
2023-02-13 15:00:07,540:INFO:Copying training dataset
2023-02-13 15:00:07,543:INFO:Defining folds
2023-02-13 15:00:07,543:INFO:Declaring metric variables
2023-02-13 15:00:07,546:INFO:Importing untrained model
2023-02-13 15:00:07,551:INFO:Elastic Net Imported successfully
2023-02-13 15:00:07,558:INFO:Starting cross validation
2023-02-13 15:00:07,559:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:07,686:INFO:Calculating mean and std
2023-02-13 15:00:07,687:INFO:Creating metrics dataframe
2023-02-13 15:00:07,689:INFO:Uploading results into container
2023-02-13 15:00:07,689:INFO:Uploading model into container now
2023-02-13 15:00:07,690:INFO:_master_model_container: 4
2023-02-13 15:00:07,690:INFO:_display_container: 2
2023-02-13 15:00:07,690:INFO:ElasticNet(random_state=1)
2023-02-13 15:00:07,690:INFO:create_model() successfully completed......................................
2023-02-13 15:00:07,791:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:07,792:INFO:Creating metrics dataframe
2023-02-13 15:00:07,800:INFO:Initializing Least Angle Regression
2023-02-13 15:00:07,801:INFO:Total runtime is 0.01756900946299235 minutes
2023-02-13 15:00:07,804:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:07,804:INFO:Initializing create_model()
2023-02-13 15:00:07,804:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:07,804:INFO:Checking exceptions
2023-02-13 15:00:07,804:INFO:Importing libraries
2023-02-13 15:00:07,804:INFO:Copying training dataset
2023-02-13 15:00:07,806:INFO:Defining folds
2023-02-13 15:00:07,807:INFO:Declaring metric variables
2023-02-13 15:00:07,811:INFO:Importing untrained model
2023-02-13 15:00:07,814:INFO:Least Angle Regression Imported successfully
2023-02-13 15:00:07,823:INFO:Starting cross validation
2023-02-13 15:00:07,824:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:07,859:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:07,867:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:07,875:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:07,883:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:07,891:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:07,902:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:07,912:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:07,920:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:07,928:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:07,936:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:07,949:INFO:Calculating mean and std
2023-02-13 15:00:07,950:INFO:Creating metrics dataframe
2023-02-13 15:00:07,954:INFO:Uploading results into container
2023-02-13 15:00:07,955:INFO:Uploading model into container now
2023-02-13 15:00:07,955:INFO:_master_model_container: 5
2023-02-13 15:00:07,955:INFO:_display_container: 2
2023-02-13 15:00:07,955:INFO:Lars(random_state=1)
2023-02-13 15:00:07,955:INFO:create_model() successfully completed......................................
2023-02-13 15:00:08,064:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:08,065:INFO:Creating metrics dataframe
2023-02-13 15:00:08,076:INFO:Initializing Lasso Least Angle Regression
2023-02-13 15:00:08,076:INFO:Total runtime is 0.02215747833251953 minutes
2023-02-13 15:00:08,079:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:08,080:INFO:Initializing create_model()
2023-02-13 15:00:08,080:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:08,080:INFO:Checking exceptions
2023-02-13 15:00:08,080:INFO:Importing libraries
2023-02-13 15:00:08,080:INFO:Copying training dataset
2023-02-13 15:00:08,086:INFO:Defining folds
2023-02-13 15:00:08,087:INFO:Declaring metric variables
2023-02-13 15:00:08,091:INFO:Importing untrained model
2023-02-13 15:00:08,095:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 15:00:08,103:INFO:Starting cross validation
2023-02-13 15:00:08,104:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:08,147:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:00:08,158:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:00:08,169:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:00:08,180:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:00:08,190:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:00:08,195:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:00:08,207:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:00:08,214:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:00:08,224:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:00:08,234:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:00:08,247:INFO:Calculating mean and std
2023-02-13 15:00:08,248:INFO:Creating metrics dataframe
2023-02-13 15:00:08,251:INFO:Uploading results into container
2023-02-13 15:00:08,252:INFO:Uploading model into container now
2023-02-13 15:00:08,252:INFO:_master_model_container: 6
2023-02-13 15:00:08,252:INFO:_display_container: 2
2023-02-13 15:00:08,252:INFO:LassoLars(random_state=1)
2023-02-13 15:00:08,252:INFO:create_model() successfully completed......................................
2023-02-13 15:00:08,361:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:08,361:INFO:Creating metrics dataframe
2023-02-13 15:00:08,370:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 15:00:08,370:INFO:Total runtime is 0.027056352297465006 minutes
2023-02-13 15:00:08,374:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:08,374:INFO:Initializing create_model()
2023-02-13 15:00:08,375:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:08,375:INFO:Checking exceptions
2023-02-13 15:00:08,375:INFO:Importing libraries
2023-02-13 15:00:08,375:INFO:Copying training dataset
2023-02-13 15:00:08,379:INFO:Defining folds
2023-02-13 15:00:08,379:INFO:Declaring metric variables
2023-02-13 15:00:08,384:INFO:Importing untrained model
2023-02-13 15:00:08,389:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 15:00:08,395:INFO:Starting cross validation
2023-02-13 15:00:08,396:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:08,432:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:08,441:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:08,451:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:08,458:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:08,470:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:08,478:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:08,488:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:08,496:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:08,506:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:08,514:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:00:08,527:INFO:Calculating mean and std
2023-02-13 15:00:08,527:INFO:Creating metrics dataframe
2023-02-13 15:00:08,530:INFO:Uploading results into container
2023-02-13 15:00:08,530:INFO:Uploading model into container now
2023-02-13 15:00:08,531:INFO:_master_model_container: 7
2023-02-13 15:00:08,531:INFO:_display_container: 2
2023-02-13 15:00:08,531:INFO:OrthogonalMatchingPursuit()
2023-02-13 15:00:08,531:INFO:create_model() successfully completed......................................
2023-02-13 15:00:08,642:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:08,643:INFO:Creating metrics dataframe
2023-02-13 15:00:08,652:INFO:Initializing Bayesian Ridge
2023-02-13 15:00:08,652:INFO:Total runtime is 0.031758936246236165 minutes
2023-02-13 15:00:08,657:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:08,657:INFO:Initializing create_model()
2023-02-13 15:00:08,657:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:08,657:INFO:Checking exceptions
2023-02-13 15:00:08,657:INFO:Importing libraries
2023-02-13 15:00:08,658:INFO:Copying training dataset
2023-02-13 15:00:08,661:INFO:Defining folds
2023-02-13 15:00:08,661:INFO:Declaring metric variables
2023-02-13 15:00:08,665:INFO:Importing untrained model
2023-02-13 15:00:08,670:INFO:Bayesian Ridge Imported successfully
2023-02-13 15:00:08,678:INFO:Starting cross validation
2023-02-13 15:00:08,678:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:08,861:INFO:Calculating mean and std
2023-02-13 15:00:08,862:INFO:Creating metrics dataframe
2023-02-13 15:00:08,864:INFO:Uploading results into container
2023-02-13 15:00:08,866:INFO:Uploading model into container now
2023-02-13 15:00:08,867:INFO:_master_model_container: 8
2023-02-13 15:00:08,867:INFO:_display_container: 2
2023-02-13 15:00:08,867:INFO:BayesianRidge()
2023-02-13 15:00:08,868:INFO:create_model() successfully completed......................................
2023-02-13 15:00:08,980:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:08,980:INFO:Creating metrics dataframe
2023-02-13 15:00:08,990:INFO:Initializing Passive Aggressive Regressor
2023-02-13 15:00:08,990:INFO:Total runtime is 0.03738627036412557 minutes
2023-02-13 15:00:08,992:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:08,992:INFO:Initializing create_model()
2023-02-13 15:00:08,992:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:08,992:INFO:Checking exceptions
2023-02-13 15:00:08,992:INFO:Importing libraries
2023-02-13 15:00:08,992:INFO:Copying training dataset
2023-02-13 15:00:08,996:INFO:Defining folds
2023-02-13 15:00:08,996:INFO:Declaring metric variables
2023-02-13 15:00:08,999:INFO:Importing untrained model
2023-02-13 15:00:09,004:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 15:00:09,012:INFO:Starting cross validation
2023-02-13 15:00:09,012:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:09,151:INFO:Calculating mean and std
2023-02-13 15:00:09,152:INFO:Creating metrics dataframe
2023-02-13 15:00:09,155:INFO:Uploading results into container
2023-02-13 15:00:09,156:INFO:Uploading model into container now
2023-02-13 15:00:09,157:INFO:_master_model_container: 9
2023-02-13 15:00:09,157:INFO:_display_container: 2
2023-02-13 15:00:09,157:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 15:00:09,157:INFO:create_model() successfully completed......................................
2023-02-13 15:00:09,269:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:09,269:INFO:Creating metrics dataframe
2023-02-13 15:00:09,278:INFO:Initializing Huber Regressor
2023-02-13 15:00:09,278:INFO:Total runtime is 0.04218829075495402 minutes
2023-02-13 15:00:09,281:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:09,281:INFO:Initializing create_model()
2023-02-13 15:00:09,281:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:09,282:INFO:Checking exceptions
2023-02-13 15:00:09,282:INFO:Importing libraries
2023-02-13 15:00:09,282:INFO:Copying training dataset
2023-02-13 15:00:09,286:INFO:Defining folds
2023-02-13 15:00:09,286:INFO:Declaring metric variables
2023-02-13 15:00:09,290:INFO:Importing untrained model
2023-02-13 15:00:09,295:INFO:Huber Regressor Imported successfully
2023-02-13 15:00:09,302:INFO:Starting cross validation
2023-02-13 15:00:09,303:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:09,370:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:00:09,389:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:00:09,396:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:00:09,408:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:00:09,419:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:00:09,425:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:00:09,435:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:00:09,443:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:00:09,451:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:00:09,458:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:00:09,471:INFO:Calculating mean and std
2023-02-13 15:00:09,471:INFO:Creating metrics dataframe
2023-02-13 15:00:09,474:INFO:Uploading results into container
2023-02-13 15:00:09,474:INFO:Uploading model into container now
2023-02-13 15:00:09,474:INFO:_master_model_container: 10
2023-02-13 15:00:09,475:INFO:_display_container: 2
2023-02-13 15:00:09,475:INFO:HuberRegressor()
2023-02-13 15:00:09,475:INFO:create_model() successfully completed......................................
2023-02-13 15:00:09,586:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:09,586:INFO:Creating metrics dataframe
2023-02-13 15:00:09,595:INFO:Initializing K Neighbors Regressor
2023-02-13 15:00:09,595:INFO:Total runtime is 0.04747372070948283 minutes
2023-02-13 15:00:09,599:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:09,599:INFO:Initializing create_model()
2023-02-13 15:00:09,599:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:09,599:INFO:Checking exceptions
2023-02-13 15:00:09,599:INFO:Importing libraries
2023-02-13 15:00:09,599:INFO:Copying training dataset
2023-02-13 15:00:09,604:INFO:Defining folds
2023-02-13 15:00:09,604:INFO:Declaring metric variables
2023-02-13 15:00:09,609:INFO:Importing untrained model
2023-02-13 15:00:09,611:INFO:K Neighbors Regressor Imported successfully
2023-02-13 15:00:09,619:INFO:Starting cross validation
2023-02-13 15:00:09,620:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:09,759:INFO:Calculating mean and std
2023-02-13 15:00:09,760:INFO:Creating metrics dataframe
2023-02-13 15:00:09,762:INFO:Uploading results into container
2023-02-13 15:00:09,762:INFO:Uploading model into container now
2023-02-13 15:00:09,764:INFO:_master_model_container: 11
2023-02-13 15:00:09,764:INFO:_display_container: 2
2023-02-13 15:00:09,764:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 15:00:09,764:INFO:create_model() successfully completed......................................
2023-02-13 15:00:09,871:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:09,871:INFO:Creating metrics dataframe
2023-02-13 15:00:09,881:INFO:Initializing Decision Tree Regressor
2023-02-13 15:00:09,881:INFO:Total runtime is 0.052245724201202395 minutes
2023-02-13 15:00:09,886:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:09,887:INFO:Initializing create_model()
2023-02-13 15:00:09,887:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:09,887:INFO:Checking exceptions
2023-02-13 15:00:09,887:INFO:Importing libraries
2023-02-13 15:00:09,887:INFO:Copying training dataset
2023-02-13 15:00:09,889:INFO:Defining folds
2023-02-13 15:00:09,890:INFO:Declaring metric variables
2023-02-13 15:00:09,894:INFO:Importing untrained model
2023-02-13 15:00:09,897:INFO:Decision Tree Regressor Imported successfully
2023-02-13 15:00:09,905:INFO:Starting cross validation
2023-02-13 15:00:09,905:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:10,037:INFO:Calculating mean and std
2023-02-13 15:00:10,038:INFO:Creating metrics dataframe
2023-02-13 15:00:10,041:INFO:Uploading results into container
2023-02-13 15:00:10,042:INFO:Uploading model into container now
2023-02-13 15:00:10,043:INFO:_master_model_container: 12
2023-02-13 15:00:10,043:INFO:_display_container: 2
2023-02-13 15:00:10,043:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 15:00:10,043:INFO:create_model() successfully completed......................................
2023-02-13 15:00:10,154:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:10,154:INFO:Creating metrics dataframe
2023-02-13 15:00:10,161:INFO:Initializing Random Forest Regressor
2023-02-13 15:00:10,161:INFO:Total runtime is 0.05691416660944621 minutes
2023-02-13 15:00:10,166:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:10,167:INFO:Initializing create_model()
2023-02-13 15:00:10,167:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:10,167:INFO:Checking exceptions
2023-02-13 15:00:10,167:INFO:Importing libraries
2023-02-13 15:00:10,167:INFO:Copying training dataset
2023-02-13 15:00:10,170:INFO:Defining folds
2023-02-13 15:00:10,170:INFO:Declaring metric variables
2023-02-13 15:00:10,174:INFO:Importing untrained model
2023-02-13 15:00:10,178:INFO:Random Forest Regressor Imported successfully
2023-02-13 15:00:10,187:INFO:Starting cross validation
2023-02-13 15:00:10,188:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:10,623:INFO:Calculating mean and std
2023-02-13 15:00:10,624:INFO:Creating metrics dataframe
2023-02-13 15:00:10,627:INFO:Uploading results into container
2023-02-13 15:00:10,628:INFO:Uploading model into container now
2023-02-13 15:00:10,628:INFO:_master_model_container: 13
2023-02-13 15:00:10,628:INFO:_display_container: 2
2023-02-13 15:00:10,628:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 15:00:10,629:INFO:create_model() successfully completed......................................
2023-02-13 15:00:10,736:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:10,737:INFO:Creating metrics dataframe
2023-02-13 15:00:10,745:INFO:Initializing Extra Trees Regressor
2023-02-13 15:00:10,745:INFO:Total runtime is 0.06664462486902872 minutes
2023-02-13 15:00:10,749:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:10,750:INFO:Initializing create_model()
2023-02-13 15:00:10,750:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:10,750:INFO:Checking exceptions
2023-02-13 15:00:10,750:INFO:Importing libraries
2023-02-13 15:00:10,750:INFO:Copying training dataset
2023-02-13 15:00:10,753:INFO:Defining folds
2023-02-13 15:00:10,753:INFO:Declaring metric variables
2023-02-13 15:00:10,758:INFO:Importing untrained model
2023-02-13 15:00:10,759:INFO:Extra Trees Regressor Imported successfully
2023-02-13 15:00:10,768:INFO:Starting cross validation
2023-02-13 15:00:10,769:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:11,218:INFO:Calculating mean and std
2023-02-13 15:00:11,219:INFO:Creating metrics dataframe
2023-02-13 15:00:11,221:INFO:Uploading results into container
2023-02-13 15:00:11,222:INFO:Uploading model into container now
2023-02-13 15:00:11,222:INFO:_master_model_container: 14
2023-02-13 15:00:11,222:INFO:_display_container: 2
2023-02-13 15:00:11,222:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 15:00:11,222:INFO:create_model() successfully completed......................................
2023-02-13 15:00:11,323:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:11,324:INFO:Creating metrics dataframe
2023-02-13 15:00:11,333:INFO:Initializing AdaBoost Regressor
2023-02-13 15:00:11,333:INFO:Total runtime is 0.07644203503926594 minutes
2023-02-13 15:00:11,336:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:11,336:INFO:Initializing create_model()
2023-02-13 15:00:11,337:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:11,337:INFO:Checking exceptions
2023-02-13 15:00:11,337:INFO:Importing libraries
2023-02-13 15:00:11,337:INFO:Copying training dataset
2023-02-13 15:00:11,340:INFO:Defining folds
2023-02-13 15:00:11,340:INFO:Declaring metric variables
2023-02-13 15:00:11,343:INFO:Importing untrained model
2023-02-13 15:00:11,347:INFO:AdaBoost Regressor Imported successfully
2023-02-13 15:00:11,355:INFO:Starting cross validation
2023-02-13 15:00:11,355:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:11,575:INFO:Calculating mean and std
2023-02-13 15:00:11,576:INFO:Creating metrics dataframe
2023-02-13 15:00:11,579:INFO:Uploading results into container
2023-02-13 15:00:11,580:INFO:Uploading model into container now
2023-02-13 15:00:11,580:INFO:_master_model_container: 15
2023-02-13 15:00:11,581:INFO:_display_container: 2
2023-02-13 15:00:11,581:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 15:00:11,581:INFO:create_model() successfully completed......................................
2023-02-13 15:00:11,683:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:11,684:INFO:Creating metrics dataframe
2023-02-13 15:00:11,693:INFO:Initializing Gradient Boosting Regressor
2023-02-13 15:00:11,693:INFO:Total runtime is 0.0824357231458028 minutes
2023-02-13 15:00:11,697:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:11,697:INFO:Initializing create_model()
2023-02-13 15:00:11,699:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:11,699:INFO:Checking exceptions
2023-02-13 15:00:11,699:INFO:Importing libraries
2023-02-13 15:00:11,699:INFO:Copying training dataset
2023-02-13 15:00:11,701:INFO:Defining folds
2023-02-13 15:00:11,702:INFO:Declaring metric variables
2023-02-13 15:00:11,705:INFO:Importing untrained model
2023-02-13 15:00:11,710:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 15:00:11,716:INFO:Starting cross validation
2023-02-13 15:00:11,717:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:11,886:INFO:Calculating mean and std
2023-02-13 15:00:11,887:INFO:Creating metrics dataframe
2023-02-13 15:00:11,889:INFO:Uploading results into container
2023-02-13 15:00:11,890:INFO:Uploading model into container now
2023-02-13 15:00:11,890:INFO:_master_model_container: 16
2023-02-13 15:00:11,890:INFO:_display_container: 2
2023-02-13 15:00:11,890:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 15:00:11,891:INFO:create_model() successfully completed......................................
2023-02-13 15:00:11,992:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:11,992:INFO:Creating metrics dataframe
2023-02-13 15:00:12,003:INFO:Initializing Extreme Gradient Boosting
2023-02-13 15:00:12,003:INFO:Total runtime is 0.08760279814402261 minutes
2023-02-13 15:00:12,005:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:12,005:INFO:Initializing create_model()
2023-02-13 15:00:12,005:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:12,005:INFO:Checking exceptions
2023-02-13 15:00:12,005:INFO:Importing libraries
2023-02-13 15:00:12,006:INFO:Copying training dataset
2023-02-13 15:00:12,008:INFO:Defining folds
2023-02-13 15:00:12,009:INFO:Declaring metric variables
2023-02-13 15:00:12,012:INFO:Importing untrained model
2023-02-13 15:00:12,017:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 15:00:12,022:INFO:Starting cross validation
2023-02-13 15:00:12,023:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:12,197:INFO:Calculating mean and std
2023-02-13 15:00:12,198:INFO:Creating metrics dataframe
2023-02-13 15:00:12,200:INFO:Uploading results into container
2023-02-13 15:00:12,201:INFO:Uploading model into container now
2023-02-13 15:00:12,201:INFO:_master_model_container: 17
2023-02-13 15:00:12,201:INFO:_display_container: 2
2023-02-13 15:00:12,202:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 15:00:12,202:INFO:create_model() successfully completed......................................
2023-02-13 15:00:12,304:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:12,305:INFO:Creating metrics dataframe
2023-02-13 15:00:12,315:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 15:00:12,316:INFO:Total runtime is 0.0928291320800781 minutes
2023-02-13 15:00:12,319:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:12,319:INFO:Initializing create_model()
2023-02-13 15:00:12,319:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:12,319:INFO:Checking exceptions
2023-02-13 15:00:12,319:INFO:Importing libraries
2023-02-13 15:00:12,320:INFO:Copying training dataset
2023-02-13 15:00:12,322:INFO:Defining folds
2023-02-13 15:00:12,323:INFO:Declaring metric variables
2023-02-13 15:00:12,326:INFO:Importing untrained model
2023-02-13 15:00:12,331:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 15:00:12,337:INFO:Starting cross validation
2023-02-13 15:00:12,338:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:12,470:INFO:Calculating mean and std
2023-02-13 15:00:12,471:INFO:Creating metrics dataframe
2023-02-13 15:00:12,473:INFO:Uploading results into container
2023-02-13 15:00:12,473:INFO:Uploading model into container now
2023-02-13 15:00:12,474:INFO:_master_model_container: 18
2023-02-13 15:00:12,474:INFO:_display_container: 2
2023-02-13 15:00:12,474:INFO:LGBMRegressor(random_state=1)
2023-02-13 15:00:12,474:INFO:create_model() successfully completed......................................
2023-02-13 15:00:12,576:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:12,576:INFO:Creating metrics dataframe
2023-02-13 15:00:12,587:INFO:Initializing Dummy Regressor
2023-02-13 15:00:12,587:INFO:Total runtime is 0.09733855724334715 minutes
2023-02-13 15:00:12,590:INFO:SubProcess create_model() called ==================================
2023-02-13 15:00:12,591:INFO:Initializing create_model()
2023-02-13 15:00:12,591:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A65D6A57C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:12,591:INFO:Checking exceptions
2023-02-13 15:00:12,591:INFO:Importing libraries
2023-02-13 15:00:12,591:INFO:Copying training dataset
2023-02-13 15:00:12,595:INFO:Defining folds
2023-02-13 15:00:12,595:INFO:Declaring metric variables
2023-02-13 15:00:12,599:INFO:Importing untrained model
2023-02-13 15:00:12,603:INFO:Dummy Regressor Imported successfully
2023-02-13 15:00:12,609:INFO:Starting cross validation
2023-02-13 15:00:12,610:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:00:12,727:INFO:Calculating mean and std
2023-02-13 15:00:12,728:INFO:Creating metrics dataframe
2023-02-13 15:00:12,733:INFO:Uploading results into container
2023-02-13 15:00:12,733:INFO:Uploading model into container now
2023-02-13 15:00:12,733:INFO:_master_model_container: 19
2023-02-13 15:00:12,733:INFO:_display_container: 2
2023-02-13 15:00:12,734:INFO:DummyRegressor()
2023-02-13 15:00:12,734:INFO:create_model() successfully completed......................................
2023-02-13 15:00:12,835:INFO:SubProcess create_model() end ==================================
2023-02-13 15:00:12,836:INFO:Creating metrics dataframe
2023-02-13 15:00:12,858:INFO:Initializing create_model()
2023-02-13 15:00:12,858:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A663639460>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:00:12,858:INFO:Checking exceptions
2023-02-13 15:00:12,861:INFO:Importing libraries
2023-02-13 15:00:12,861:INFO:Copying training dataset
2023-02-13 15:00:12,864:INFO:Defining folds
2023-02-13 15:00:12,864:INFO:Declaring metric variables
2023-02-13 15:00:12,864:INFO:Importing untrained model
2023-02-13 15:00:12,864:INFO:Declaring custom model
2023-02-13 15:00:12,865:INFO:Bayesian Ridge Imported successfully
2023-02-13 15:00:12,866:INFO:Cross validation set to False
2023-02-13 15:00:12,866:INFO:Fitting Model
2023-02-13 15:00:12,882:INFO:BayesianRidge()
2023-02-13 15:00:12,882:INFO:create_model() successfully completed......................................
2023-02-13 15:00:13,015:INFO:_master_model_container: 19
2023-02-13 15:00:13,016:INFO:_display_container: 2
2023-02-13 15:00:13,016:INFO:BayesianRidge()
2023-02-13 15:00:13,016:INFO:compare_models() successfully completed......................................
2023-02-13 15:39:11,554:INFO:PyCaret RegressionExperiment
2023-02-13 15:39:11,554:INFO:Logging name: reg-default-name
2023-02-13 15:39:11,554:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 15:39:11,554:INFO:version 3.0.0.rc8
2023-02-13 15:39:11,554:INFO:Initializing setup()
2023-02-13 15:39:11,555:INFO:self.USI: 022f
2023-02-13 15:39:11,555:INFO:self._variable_keys: {'exp_id', 'gpu_param', 'exp_name_log', 'fold_shuffle_param', 'transform_target_param', '_ml_usecase', 'html_param', 'pipeline', 'idx', 'X_test', 'X', 'X_train', 'n_jobs_param', 'fold_groups_param', 'USI', 'y_test', 'y', 'seed', 'memory', 'fold_generator', 'data', 'log_plots_param', '_available_plots', 'logging_param', 'gpu_n_jobs_param', 'y_train', 'target_param'}
2023-02-13 15:39:11,555:INFO:Checking environment
2023-02-13 15:39:11,555:INFO:python_version: 3.9.13
2023-02-13 15:39:11,555:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 15:39:11,555:INFO:machine: AMD64
2023-02-13 15:39:11,555:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 15:39:11,561:INFO:Memory: svmem(total=16805040128, available=6644781056, percent=60.5, used=10160259072, free=6644781056)
2023-02-13 15:39:11,561:INFO:Physical Core: 4
2023-02-13 15:39:11,561:INFO:Logical Core: 8
2023-02-13 15:39:11,561:INFO:Checking libraries
2023-02-13 15:39:11,561:INFO:System:
2023-02-13 15:39:11,561:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 15:39:11,561:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 15:39:11,561:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 15:39:11,562:INFO:PyCaret required dependencies:
2023-02-13 15:39:11,562:INFO:                 pip: 23.0
2023-02-13 15:39:11,562:INFO:          setuptools: 58.1.0
2023-02-13 15:39:11,562:INFO:             pycaret: 3.0.0rc8
2023-02-13 15:39:11,562:INFO:             IPython: 8.7.0
2023-02-13 15:39:11,562:INFO:          ipywidgets: 8.0.4
2023-02-13 15:39:11,562:INFO:                tqdm: 4.64.1
2023-02-13 15:39:11,562:INFO:               numpy: 1.22.1
2023-02-13 15:39:11,562:INFO:              pandas: 1.5.2
2023-02-13 15:39:11,562:INFO:              jinja2: 3.1.2
2023-02-13 15:39:11,562:INFO:               scipy: 1.5.4
2023-02-13 15:39:11,562:INFO:              joblib: 1.2.0
2023-02-13 15:39:11,562:INFO:             sklearn: 1.1.3
2023-02-13 15:39:11,562:INFO:                pyod: 1.0.7
2023-02-13 15:39:11,562:INFO:            imblearn: 0.10.1
2023-02-13 15:39:11,562:INFO:   category_encoders: 2.6.0
2023-02-13 15:39:11,562:INFO:            lightgbm: 3.3.4
2023-02-13 15:39:11,562:INFO:               numba: 0.56.4
2023-02-13 15:39:11,562:INFO:            requests: 2.28.1
2023-02-13 15:39:11,562:INFO:          matplotlib: 3.6.2
2023-02-13 15:39:11,562:INFO:          scikitplot: 0.3.7
2023-02-13 15:39:11,562:INFO:         yellowbrick: 1.5
2023-02-13 15:39:11,562:INFO:              plotly: 5.11.0
2023-02-13 15:39:11,562:INFO:             kaleido: 0.2.1
2023-02-13 15:39:11,562:INFO:         statsmodels: 0.13.5
2023-02-13 15:39:11,562:INFO:              sktime: 0.15.1
2023-02-13 15:39:11,562:INFO:               tbats: 1.1.2
2023-02-13 15:39:11,562:INFO:            pmdarima: 2.0.2
2023-02-13 15:39:11,562:INFO:              psutil: 5.9.4
2023-02-13 15:39:11,562:INFO:PyCaret optional dependencies:
2023-02-13 15:39:11,563:INFO:                shap: 0.41.0
2023-02-13 15:39:11,563:INFO:           interpret: 0.3.0
2023-02-13 15:39:11,563:INFO:                umap: Not installed
2023-02-13 15:39:11,563:INFO:    pandas_profiling: 3.6.2
2023-02-13 15:39:11,563:INFO:  explainerdashboard: Not installed
2023-02-13 15:39:11,563:INFO:             autoviz: Not installed
2023-02-13 15:39:11,563:INFO:           fairlearn: Not installed
2023-02-13 15:39:11,563:INFO:             xgboost: 1.7.3
2023-02-13 15:39:11,563:INFO:            catboost: Not installed
2023-02-13 15:39:11,563:INFO:              kmodes: Not installed
2023-02-13 15:39:11,563:INFO:             mlxtend: Not installed
2023-02-13 15:39:11,563:INFO:       statsforecast: Not installed
2023-02-13 15:39:11,563:INFO:        tune_sklearn: Not installed
2023-02-13 15:39:11,563:INFO:                 ray: Not installed
2023-02-13 15:39:11,563:INFO:            hyperopt: Not installed
2023-02-13 15:39:11,563:INFO:              optuna: Not installed
2023-02-13 15:39:11,563:INFO:               skopt: Not installed
2023-02-13 15:39:11,563:INFO:              mlflow: Not installed
2023-02-13 15:39:11,563:INFO:              gradio: Not installed
2023-02-13 15:39:11,563:INFO:             fastapi: Not installed
2023-02-13 15:39:11,563:INFO:             uvicorn: Not installed
2023-02-13 15:39:11,563:INFO:              m2cgen: Not installed
2023-02-13 15:39:11,563:INFO:           evidently: Not installed
2023-02-13 15:39:11,563:INFO:                nltk: 3.8
2023-02-13 15:39:11,563:INFO:            pyLDAvis: Not installed
2023-02-13 15:39:11,564:INFO:              gensim: Not installed
2023-02-13 15:39:11,564:INFO:               spacy: Not installed
2023-02-13 15:39:11,564:INFO:           wordcloud: 1.8.2.2
2023-02-13 15:39:11,564:INFO:            textblob: Not installed
2023-02-13 15:39:11,564:INFO:               fugue: Not installed
2023-02-13 15:39:11,564:INFO:           streamlit: 1.16.0
2023-02-13 15:39:11,564:INFO:             prophet: Not installed
2023-02-13 15:39:11,564:INFO:None
2023-02-13 15:39:11,564:INFO:Set up data.
2023-02-13 15:39:11,571:INFO:Set up train/test split.
2023-02-13 15:39:11,574:INFO:Set up index.
2023-02-13 15:39:11,574:INFO:Set up folding strategy.
2023-02-13 15:39:11,574:INFO:Assigning column types.
2023-02-13 15:39:11,577:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 15:39:11,578:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,583:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,588:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,640:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,686:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,687:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:11,689:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:11,689:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,691:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,699:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,751:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,792:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,793:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:11,796:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:11,796:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 15:39:11,800:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,804:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,858:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,906:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,906:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:11,910:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:11,915:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,921:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:39:11,971:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,011:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,020:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:12,024:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:12,024:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 15:39:12,035:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,087:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,127:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,128:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:12,130:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:12,137:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,187:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,230:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,231:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:12,234:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:12,234:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 15:39:12,298:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,336:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,337:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:12,339:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:12,398:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,448:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,448:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:12,451:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:12,451:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 15:39:12,514:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,556:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:12,560:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:12,666:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 15:39:12,717:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:12,721:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:12,721:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 15:39:12,867:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:12,870:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:12,973:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:12,976:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:12,977:INFO:Preparing preprocessing pipeline...
2023-02-13 15:39:12,978:INFO:Set up column name cleaning.
2023-02-13 15:39:12,978:INFO:Set up simple imputation.
2023-02-13 15:39:12,991:INFO:Finished creating preprocessing pipeline.
2023-02-13 15:39:12,995:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 15:39:12,995:INFO:Creating final display dataframe.
2023-02-13 15:39:13,100:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              022f
2023-02-13 15:39:13,209:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:13,213:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:13,321:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 15:39:13,323:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 15:39:13,324:INFO:setup() successfully completed in 1.77s...............
2023-02-13 15:39:13,325:INFO:Initializing compare_models()
2023-02-13 15:39:13,325:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 15:39:13,325:INFO:Checking exceptions
2023-02-13 15:39:13,326:INFO:Preparing display monitor
2023-02-13 15:39:13,349:INFO:Initializing Linear Regression
2023-02-13 15:39:13,349:INFO:Total runtime is 0.0 minutes
2023-02-13 15:39:13,353:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:13,354:INFO:Initializing create_model()
2023-02-13 15:39:13,354:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:13,354:INFO:Checking exceptions
2023-02-13 15:39:13,354:INFO:Importing libraries
2023-02-13 15:39:13,354:INFO:Copying training dataset
2023-02-13 15:39:13,356:INFO:Defining folds
2023-02-13 15:39:13,357:INFO:Declaring metric variables
2023-02-13 15:39:13,361:INFO:Importing untrained model
2023-02-13 15:39:13,365:INFO:Linear Regression Imported successfully
2023-02-13 15:39:13,372:INFO:Starting cross validation
2023-02-13 15:39:13,375:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:17,850:INFO:Calculating mean and std
2023-02-13 15:39:17,851:INFO:Creating metrics dataframe
2023-02-13 15:39:17,856:INFO:Uploading results into container
2023-02-13 15:39:17,857:INFO:Uploading model into container now
2023-02-13 15:39:17,858:INFO:_master_model_container: 1
2023-02-13 15:39:17,858:INFO:_display_container: 2
2023-02-13 15:39:17,858:INFO:LinearRegression(n_jobs=-1)
2023-02-13 15:39:17,858:INFO:create_model() successfully completed......................................
2023-02-13 15:39:18,011:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:18,012:INFO:Creating metrics dataframe
2023-02-13 15:39:18,018:INFO:Initializing Lasso Regression
2023-02-13 15:39:18,018:INFO:Total runtime is 0.07781298955281575 minutes
2023-02-13 15:39:18,023:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:18,024:INFO:Initializing create_model()
2023-02-13 15:39:18,024:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:18,024:INFO:Checking exceptions
2023-02-13 15:39:18,024:INFO:Importing libraries
2023-02-13 15:39:18,024:INFO:Copying training dataset
2023-02-13 15:39:18,028:INFO:Defining folds
2023-02-13 15:39:18,028:INFO:Declaring metric variables
2023-02-13 15:39:18,031:INFO:Importing untrained model
2023-02-13 15:39:18,037:INFO:Lasso Regression Imported successfully
2023-02-13 15:39:18,045:INFO:Starting cross validation
2023-02-13 15:39:18,046:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:18,173:INFO:Calculating mean and std
2023-02-13 15:39:18,174:INFO:Creating metrics dataframe
2023-02-13 15:39:18,177:INFO:Uploading results into container
2023-02-13 15:39:18,177:INFO:Uploading model into container now
2023-02-13 15:39:18,177:INFO:_master_model_container: 2
2023-02-13 15:39:18,177:INFO:_display_container: 2
2023-02-13 15:39:18,177:INFO:Lasso(random_state=1)
2023-02-13 15:39:18,177:INFO:create_model() successfully completed......................................
2023-02-13 15:39:18,303:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:18,304:INFO:Creating metrics dataframe
2023-02-13 15:39:18,312:INFO:Initializing Ridge Regression
2023-02-13 15:39:18,312:INFO:Total runtime is 0.08271161715189615 minutes
2023-02-13 15:39:18,316:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:18,316:INFO:Initializing create_model()
2023-02-13 15:39:18,316:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:18,316:INFO:Checking exceptions
2023-02-13 15:39:18,317:INFO:Importing libraries
2023-02-13 15:39:18,317:INFO:Copying training dataset
2023-02-13 15:39:18,320:INFO:Defining folds
2023-02-13 15:39:18,320:INFO:Declaring metric variables
2023-02-13 15:39:18,324:INFO:Importing untrained model
2023-02-13 15:39:18,328:INFO:Ridge Regression Imported successfully
2023-02-13 15:39:18,334:INFO:Starting cross validation
2023-02-13 15:39:18,335:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:18,466:INFO:Calculating mean and std
2023-02-13 15:39:18,467:INFO:Creating metrics dataframe
2023-02-13 15:39:18,470:INFO:Uploading results into container
2023-02-13 15:39:18,471:INFO:Uploading model into container now
2023-02-13 15:39:18,471:INFO:_master_model_container: 3
2023-02-13 15:39:18,471:INFO:_display_container: 2
2023-02-13 15:39:18,472:INFO:Ridge(random_state=1)
2023-02-13 15:39:18,472:INFO:create_model() successfully completed......................................
2023-02-13 15:39:18,600:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:18,600:INFO:Creating metrics dataframe
2023-02-13 15:39:18,608:INFO:Initializing Elastic Net
2023-02-13 15:39:18,608:INFO:Total runtime is 0.08765606880187987 minutes
2023-02-13 15:39:18,613:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:18,613:INFO:Initializing create_model()
2023-02-13 15:39:18,613:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:18,613:INFO:Checking exceptions
2023-02-13 15:39:18,613:INFO:Importing libraries
2023-02-13 15:39:18,613:INFO:Copying training dataset
2023-02-13 15:39:18,616:INFO:Defining folds
2023-02-13 15:39:18,616:INFO:Declaring metric variables
2023-02-13 15:39:18,619:INFO:Importing untrained model
2023-02-13 15:39:18,625:INFO:Elastic Net Imported successfully
2023-02-13 15:39:18,632:INFO:Starting cross validation
2023-02-13 15:39:18,633:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:18,765:INFO:Calculating mean and std
2023-02-13 15:39:18,766:INFO:Creating metrics dataframe
2023-02-13 15:39:18,768:INFO:Uploading results into container
2023-02-13 15:39:18,770:INFO:Uploading model into container now
2023-02-13 15:39:18,770:INFO:_master_model_container: 4
2023-02-13 15:39:18,770:INFO:_display_container: 2
2023-02-13 15:39:18,771:INFO:ElasticNet(random_state=1)
2023-02-13 15:39:18,771:INFO:create_model() successfully completed......................................
2023-02-13 15:39:18,900:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:18,900:INFO:Creating metrics dataframe
2023-02-13 15:39:18,908:INFO:Initializing Least Angle Regression
2023-02-13 15:39:18,908:INFO:Total runtime is 0.09265984296798704 minutes
2023-02-13 15:39:18,911:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:18,912:INFO:Initializing create_model()
2023-02-13 15:39:18,912:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:18,912:INFO:Checking exceptions
2023-02-13 15:39:18,912:INFO:Importing libraries
2023-02-13 15:39:18,912:INFO:Copying training dataset
2023-02-13 15:39:18,914:INFO:Defining folds
2023-02-13 15:39:18,914:INFO:Declaring metric variables
2023-02-13 15:39:18,919:INFO:Importing untrained model
2023-02-13 15:39:18,923:INFO:Least Angle Regression Imported successfully
2023-02-13 15:39:18,930:INFO:Starting cross validation
2023-02-13 15:39:18,931:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:18,968:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:18,980:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:18,990:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:18,999:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,006:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,016:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,026:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,033:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,039:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,045:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,058:INFO:Calculating mean and std
2023-02-13 15:39:19,059:INFO:Creating metrics dataframe
2023-02-13 15:39:19,063:INFO:Uploading results into container
2023-02-13 15:39:19,064:INFO:Uploading model into container now
2023-02-13 15:39:19,064:INFO:_master_model_container: 5
2023-02-13 15:39:19,064:INFO:_display_container: 2
2023-02-13 15:39:19,064:INFO:Lars(random_state=1)
2023-02-13 15:39:19,064:INFO:create_model() successfully completed......................................
2023-02-13 15:39:19,193:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:19,193:INFO:Creating metrics dataframe
2023-02-13 15:39:19,200:INFO:Initializing Lasso Least Angle Regression
2023-02-13 15:39:19,200:INFO:Total runtime is 0.097523562113444 minutes
2023-02-13 15:39:19,205:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:19,205:INFO:Initializing create_model()
2023-02-13 15:39:19,205:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:19,206:INFO:Checking exceptions
2023-02-13 15:39:19,206:INFO:Importing libraries
2023-02-13 15:39:19,206:INFO:Copying training dataset
2023-02-13 15:39:19,210:INFO:Defining folds
2023-02-13 15:39:19,210:INFO:Declaring metric variables
2023-02-13 15:39:19,214:INFO:Importing untrained model
2023-02-13 15:39:19,219:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 15:39:19,227:INFO:Starting cross validation
2023-02-13 15:39:19,228:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:19,269:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:39:19,278:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:39:19,289:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:39:19,297:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:39:19,309:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:39:19,318:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:39:19,325:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:39:19,334:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:39:19,341:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:39:19,349:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 15:39:19,361:INFO:Calculating mean and std
2023-02-13 15:39:19,362:INFO:Creating metrics dataframe
2023-02-13 15:39:19,366:INFO:Uploading results into container
2023-02-13 15:39:19,366:INFO:Uploading model into container now
2023-02-13 15:39:19,366:INFO:_master_model_container: 6
2023-02-13 15:39:19,366:INFO:_display_container: 2
2023-02-13 15:39:19,367:INFO:LassoLars(random_state=1)
2023-02-13 15:39:19,367:INFO:create_model() successfully completed......................................
2023-02-13 15:39:19,495:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:19,495:INFO:Creating metrics dataframe
2023-02-13 15:39:19,504:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 15:39:19,504:INFO:Total runtime is 0.10258660316467284 minutes
2023-02-13 15:39:19,508:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:19,508:INFO:Initializing create_model()
2023-02-13 15:39:19,508:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:19,509:INFO:Checking exceptions
2023-02-13 15:39:19,509:INFO:Importing libraries
2023-02-13 15:39:19,509:INFO:Copying training dataset
2023-02-13 15:39:19,512:INFO:Defining folds
2023-02-13 15:39:19,512:INFO:Declaring metric variables
2023-02-13 15:39:19,516:INFO:Importing untrained model
2023-02-13 15:39:19,521:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 15:39:19,529:INFO:Starting cross validation
2023-02-13 15:39:19,530:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:19,574:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,583:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,597:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,608:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,617:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,623:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,633:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,643:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,651:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,661:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 15:39:19,673:INFO:Calculating mean and std
2023-02-13 15:39:19,675:INFO:Creating metrics dataframe
2023-02-13 15:39:19,677:INFO:Uploading results into container
2023-02-13 15:39:19,679:INFO:Uploading model into container now
2023-02-13 15:39:19,679:INFO:_master_model_container: 7
2023-02-13 15:39:19,679:INFO:_display_container: 2
2023-02-13 15:39:19,679:INFO:OrthogonalMatchingPursuit()
2023-02-13 15:39:19,679:INFO:create_model() successfully completed......................................
2023-02-13 15:39:19,805:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:19,805:INFO:Creating metrics dataframe
2023-02-13 15:39:19,816:INFO:Initializing Bayesian Ridge
2023-02-13 15:39:19,816:INFO:Total runtime is 0.10777830282847085 minutes
2023-02-13 15:39:19,820:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:19,821:INFO:Initializing create_model()
2023-02-13 15:39:19,821:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:19,821:INFO:Checking exceptions
2023-02-13 15:39:19,821:INFO:Importing libraries
2023-02-13 15:39:19,822:INFO:Copying training dataset
2023-02-13 15:39:19,825:INFO:Defining folds
2023-02-13 15:39:19,825:INFO:Declaring metric variables
2023-02-13 15:39:19,828:INFO:Importing untrained model
2023-02-13 15:39:19,833:INFO:Bayesian Ridge Imported successfully
2023-02-13 15:39:19,839:INFO:Starting cross validation
2023-02-13 15:39:19,841:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:19,973:INFO:Calculating mean and std
2023-02-13 15:39:19,973:INFO:Creating metrics dataframe
2023-02-13 15:39:19,976:INFO:Uploading results into container
2023-02-13 15:39:19,976:INFO:Uploading model into container now
2023-02-13 15:39:19,977:INFO:_master_model_container: 8
2023-02-13 15:39:19,977:INFO:_display_container: 2
2023-02-13 15:39:19,977:INFO:BayesianRidge()
2023-02-13 15:39:19,977:INFO:create_model() successfully completed......................................
2023-02-13 15:39:20,102:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:20,102:INFO:Creating metrics dataframe
2023-02-13 15:39:20,112:INFO:Initializing Passive Aggressive Regressor
2023-02-13 15:39:20,112:INFO:Total runtime is 0.11272254784901936 minutes
2023-02-13 15:39:20,115:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:20,116:INFO:Initializing create_model()
2023-02-13 15:39:20,116:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:20,116:INFO:Checking exceptions
2023-02-13 15:39:20,116:INFO:Importing libraries
2023-02-13 15:39:20,116:INFO:Copying training dataset
2023-02-13 15:39:20,120:INFO:Defining folds
2023-02-13 15:39:20,121:INFO:Declaring metric variables
2023-02-13 15:39:20,125:INFO:Importing untrained model
2023-02-13 15:39:20,127:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 15:39:20,133:INFO:Starting cross validation
2023-02-13 15:39:20,134:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:20,257:INFO:Calculating mean and std
2023-02-13 15:39:20,258:INFO:Creating metrics dataframe
2023-02-13 15:39:20,260:INFO:Uploading results into container
2023-02-13 15:39:20,261:INFO:Uploading model into container now
2023-02-13 15:39:20,261:INFO:_master_model_container: 9
2023-02-13 15:39:20,261:INFO:_display_container: 2
2023-02-13 15:39:20,261:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 15:39:20,261:INFO:create_model() successfully completed......................................
2023-02-13 15:39:20,381:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:20,381:INFO:Creating metrics dataframe
2023-02-13 15:39:20,391:INFO:Initializing Huber Regressor
2023-02-13 15:39:20,391:INFO:Total runtime is 0.11736947298049925 minutes
2023-02-13 15:39:20,395:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:20,395:INFO:Initializing create_model()
2023-02-13 15:39:20,395:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:20,395:INFO:Checking exceptions
2023-02-13 15:39:20,396:INFO:Importing libraries
2023-02-13 15:39:20,396:INFO:Copying training dataset
2023-02-13 15:39:20,397:INFO:Defining folds
2023-02-13 15:39:20,397:INFO:Declaring metric variables
2023-02-13 15:39:20,400:INFO:Importing untrained model
2023-02-13 15:39:20,406:INFO:Huber Regressor Imported successfully
2023-02-13 15:39:20,424:INFO:Starting cross validation
2023-02-13 15:39:20,424:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:20,498:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:39:20,509:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:39:20,522:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:39:20,533:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:39:20,544:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:39:20,556:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:39:20,566:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:39:20,576:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:39:20,578:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:39:20,582:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 15:39:20,595:INFO:Calculating mean and std
2023-02-13 15:39:20,595:INFO:Creating metrics dataframe
2023-02-13 15:39:20,598:INFO:Uploading results into container
2023-02-13 15:39:20,599:INFO:Uploading model into container now
2023-02-13 15:39:20,599:INFO:_master_model_container: 10
2023-02-13 15:39:20,599:INFO:_display_container: 2
2023-02-13 15:39:20,599:INFO:HuberRegressor()
2023-02-13 15:39:20,600:INFO:create_model() successfully completed......................................
2023-02-13 15:39:20,722:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:20,722:INFO:Creating metrics dataframe
2023-02-13 15:39:20,729:INFO:Initializing K Neighbors Regressor
2023-02-13 15:39:20,729:INFO:Total runtime is 0.12300976117451984 minutes
2023-02-13 15:39:20,734:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:20,735:INFO:Initializing create_model()
2023-02-13 15:39:20,735:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:20,735:INFO:Checking exceptions
2023-02-13 15:39:20,735:INFO:Importing libraries
2023-02-13 15:39:20,735:INFO:Copying training dataset
2023-02-13 15:39:20,738:INFO:Defining folds
2023-02-13 15:39:20,739:INFO:Declaring metric variables
2023-02-13 15:39:20,743:INFO:Importing untrained model
2023-02-13 15:39:20,747:INFO:K Neighbors Regressor Imported successfully
2023-02-13 15:39:20,754:INFO:Starting cross validation
2023-02-13 15:39:20,755:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:20,894:INFO:Calculating mean and std
2023-02-13 15:39:20,895:INFO:Creating metrics dataframe
2023-02-13 15:39:20,898:INFO:Uploading results into container
2023-02-13 15:39:20,899:INFO:Uploading model into container now
2023-02-13 15:39:20,899:INFO:_master_model_container: 11
2023-02-13 15:39:20,899:INFO:_display_container: 2
2023-02-13 15:39:20,899:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 15:39:20,899:INFO:create_model() successfully completed......................................
2023-02-13 15:39:21,013:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:21,013:INFO:Creating metrics dataframe
2023-02-13 15:39:21,024:INFO:Initializing Decision Tree Regressor
2023-02-13 15:39:21,024:INFO:Total runtime is 0.12791661024093626 minutes
2023-02-13 15:39:21,028:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:21,028:INFO:Initializing create_model()
2023-02-13 15:39:21,028:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:21,028:INFO:Checking exceptions
2023-02-13 15:39:21,028:INFO:Importing libraries
2023-02-13 15:39:21,028:INFO:Copying training dataset
2023-02-13 15:39:21,030:INFO:Defining folds
2023-02-13 15:39:21,030:INFO:Declaring metric variables
2023-02-13 15:39:21,036:INFO:Importing untrained model
2023-02-13 15:39:21,041:INFO:Decision Tree Regressor Imported successfully
2023-02-13 15:39:21,047:INFO:Starting cross validation
2023-02-13 15:39:21,048:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:21,172:INFO:Calculating mean and std
2023-02-13 15:39:21,173:INFO:Creating metrics dataframe
2023-02-13 15:39:21,176:INFO:Uploading results into container
2023-02-13 15:39:21,176:INFO:Uploading model into container now
2023-02-13 15:39:21,176:INFO:_master_model_container: 12
2023-02-13 15:39:21,176:INFO:_display_container: 2
2023-02-13 15:39:21,177:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 15:39:21,177:INFO:create_model() successfully completed......................................
2023-02-13 15:39:21,304:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:21,304:INFO:Creating metrics dataframe
2023-02-13 15:39:21,312:INFO:Initializing Random Forest Regressor
2023-02-13 15:39:21,312:INFO:Total runtime is 0.1327213366826375 minutes
2023-02-13 15:39:21,315:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:21,315:INFO:Initializing create_model()
2023-02-13 15:39:21,315:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:21,315:INFO:Checking exceptions
2023-02-13 15:39:21,315:INFO:Importing libraries
2023-02-13 15:39:21,315:INFO:Copying training dataset
2023-02-13 15:39:21,320:INFO:Defining folds
2023-02-13 15:39:21,320:INFO:Declaring metric variables
2023-02-13 15:39:21,323:INFO:Importing untrained model
2023-02-13 15:39:21,328:INFO:Random Forest Regressor Imported successfully
2023-02-13 15:39:21,336:INFO:Starting cross validation
2023-02-13 15:39:21,337:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:21,795:INFO:Calculating mean and std
2023-02-13 15:39:21,797:INFO:Creating metrics dataframe
2023-02-13 15:39:21,799:INFO:Uploading results into container
2023-02-13 15:39:21,800:INFO:Uploading model into container now
2023-02-13 15:39:21,800:INFO:_master_model_container: 13
2023-02-13 15:39:21,801:INFO:_display_container: 2
2023-02-13 15:39:21,801:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 15:39:21,801:INFO:create_model() successfully completed......................................
2023-02-13 15:39:21,927:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:21,929:INFO:Creating metrics dataframe
2023-02-13 15:39:21,944:INFO:Initializing Extra Trees Regressor
2023-02-13 15:39:21,944:INFO:Total runtime is 0.1432533502578735 minutes
2023-02-13 15:39:21,947:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:21,948:INFO:Initializing create_model()
2023-02-13 15:39:21,948:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:21,948:INFO:Checking exceptions
2023-02-13 15:39:21,948:INFO:Importing libraries
2023-02-13 15:39:21,948:INFO:Copying training dataset
2023-02-13 15:39:21,952:INFO:Defining folds
2023-02-13 15:39:21,953:INFO:Declaring metric variables
2023-02-13 15:39:21,958:INFO:Importing untrained model
2023-02-13 15:39:21,963:INFO:Extra Trees Regressor Imported successfully
2023-02-13 15:39:21,973:INFO:Starting cross validation
2023-02-13 15:39:21,974:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:22,372:INFO:Calculating mean and std
2023-02-13 15:39:22,373:INFO:Creating metrics dataframe
2023-02-13 15:39:22,375:INFO:Uploading results into container
2023-02-13 15:39:22,376:INFO:Uploading model into container now
2023-02-13 15:39:22,376:INFO:_master_model_container: 14
2023-02-13 15:39:22,376:INFO:_display_container: 2
2023-02-13 15:39:22,376:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 15:39:22,378:INFO:create_model() successfully completed......................................
2023-02-13 15:39:22,503:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:22,503:INFO:Creating metrics dataframe
2023-02-13 15:39:22,515:INFO:Initializing AdaBoost Regressor
2023-02-13 15:39:22,517:INFO:Total runtime is 0.15279659032821652 minutes
2023-02-13 15:39:22,521:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:22,522:INFO:Initializing create_model()
2023-02-13 15:39:22,522:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:22,522:INFO:Checking exceptions
2023-02-13 15:39:22,522:INFO:Importing libraries
2023-02-13 15:39:22,522:INFO:Copying training dataset
2023-02-13 15:39:22,525:INFO:Defining folds
2023-02-13 15:39:22,525:INFO:Declaring metric variables
2023-02-13 15:39:22,529:INFO:Importing untrained model
2023-02-13 15:39:22,534:INFO:AdaBoost Regressor Imported successfully
2023-02-13 15:39:22,542:INFO:Starting cross validation
2023-02-13 15:39:22,543:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:22,790:INFO:Calculating mean and std
2023-02-13 15:39:22,791:INFO:Creating metrics dataframe
2023-02-13 15:39:22,794:INFO:Uploading results into container
2023-02-13 15:39:22,794:INFO:Uploading model into container now
2023-02-13 15:39:22,794:INFO:_master_model_container: 15
2023-02-13 15:39:22,794:INFO:_display_container: 2
2023-02-13 15:39:22,795:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 15:39:22,795:INFO:create_model() successfully completed......................................
2023-02-13 15:39:22,926:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:22,929:INFO:Creating metrics dataframe
2023-02-13 15:39:22,939:INFO:Initializing Gradient Boosting Regressor
2023-02-13 15:39:22,939:INFO:Total runtime is 0.1598282933235168 minutes
2023-02-13 15:39:22,942:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:22,942:INFO:Initializing create_model()
2023-02-13 15:39:22,942:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:22,942:INFO:Checking exceptions
2023-02-13 15:39:22,942:INFO:Importing libraries
2023-02-13 15:39:22,942:INFO:Copying training dataset
2023-02-13 15:39:22,945:INFO:Defining folds
2023-02-13 15:39:22,945:INFO:Declaring metric variables
2023-02-13 15:39:22,948:INFO:Importing untrained model
2023-02-13 15:39:22,953:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 15:39:22,958:INFO:Starting cross validation
2023-02-13 15:39:22,959:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:23,155:INFO:Calculating mean and std
2023-02-13 15:39:23,157:INFO:Creating metrics dataframe
2023-02-13 15:39:23,160:INFO:Uploading results into container
2023-02-13 15:39:23,160:INFO:Uploading model into container now
2023-02-13 15:39:23,160:INFO:_master_model_container: 16
2023-02-13 15:39:23,160:INFO:_display_container: 2
2023-02-13 15:39:23,161:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 15:39:23,161:INFO:create_model() successfully completed......................................
2023-02-13 15:39:23,287:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:23,287:INFO:Creating metrics dataframe
2023-02-13 15:39:23,299:INFO:Initializing Extreme Gradient Boosting
2023-02-13 15:39:23,299:INFO:Total runtime is 0.16583548784255978 minutes
2023-02-13 15:39:23,302:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:23,302:INFO:Initializing create_model()
2023-02-13 15:39:23,302:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:23,303:INFO:Checking exceptions
2023-02-13 15:39:23,303:INFO:Importing libraries
2023-02-13 15:39:23,303:INFO:Copying training dataset
2023-02-13 15:39:23,306:INFO:Defining folds
2023-02-13 15:39:23,306:INFO:Declaring metric variables
2023-02-13 15:39:23,309:INFO:Importing untrained model
2023-02-13 15:39:23,313:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 15:39:23,322:INFO:Starting cross validation
2023-02-13 15:39:23,324:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:23,543:INFO:Calculating mean and std
2023-02-13 15:39:23,544:INFO:Creating metrics dataframe
2023-02-13 15:39:23,547:INFO:Uploading results into container
2023-02-13 15:39:23,547:INFO:Uploading model into container now
2023-02-13 15:39:23,548:INFO:_master_model_container: 17
2023-02-13 15:39:23,548:INFO:_display_container: 2
2023-02-13 15:39:23,550:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 15:39:23,550:INFO:create_model() successfully completed......................................
2023-02-13 15:39:23,680:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:23,680:INFO:Creating metrics dataframe
2023-02-13 15:39:23,695:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 15:39:23,695:INFO:Total runtime is 0.1724345723787943 minutes
2023-02-13 15:39:23,698:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:23,700:INFO:Initializing create_model()
2023-02-13 15:39:23,700:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:23,700:INFO:Checking exceptions
2023-02-13 15:39:23,700:INFO:Importing libraries
2023-02-13 15:39:23,700:INFO:Copying training dataset
2023-02-13 15:39:23,703:INFO:Defining folds
2023-02-13 15:39:23,703:INFO:Declaring metric variables
2023-02-13 15:39:23,708:INFO:Importing untrained model
2023-02-13 15:39:23,713:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 15:39:23,721:INFO:Starting cross validation
2023-02-13 15:39:23,722:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:23,922:INFO:Calculating mean and std
2023-02-13 15:39:23,922:INFO:Creating metrics dataframe
2023-02-13 15:39:23,925:INFO:Uploading results into container
2023-02-13 15:39:23,925:INFO:Uploading model into container now
2023-02-13 15:39:23,926:INFO:_master_model_container: 18
2023-02-13 15:39:23,926:INFO:_display_container: 2
2023-02-13 15:39:23,926:INFO:LGBMRegressor(random_state=1)
2023-02-13 15:39:23,926:INFO:create_model() successfully completed......................................
2023-02-13 15:39:24,052:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:24,052:INFO:Creating metrics dataframe
2023-02-13 15:39:24,065:INFO:Initializing Dummy Regressor
2023-02-13 15:39:24,065:INFO:Total runtime is 0.1785988887151082 minutes
2023-02-13 15:39:24,069:INFO:SubProcess create_model() called ==================================
2023-02-13 15:39:24,069:INFO:Initializing create_model()
2023-02-13 15:39:24,070:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A6631A9940>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:24,070:INFO:Checking exceptions
2023-02-13 15:39:24,070:INFO:Importing libraries
2023-02-13 15:39:24,070:INFO:Copying training dataset
2023-02-13 15:39:24,072:INFO:Defining folds
2023-02-13 15:39:24,072:INFO:Declaring metric variables
2023-02-13 15:39:24,076:INFO:Importing untrained model
2023-02-13 15:39:24,080:INFO:Dummy Regressor Imported successfully
2023-02-13 15:39:24,089:INFO:Starting cross validation
2023-02-13 15:39:24,090:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 15:39:24,238:INFO:Calculating mean and std
2023-02-13 15:39:24,238:INFO:Creating metrics dataframe
2023-02-13 15:39:24,241:INFO:Uploading results into container
2023-02-13 15:39:24,241:INFO:Uploading model into container now
2023-02-13 15:39:24,241:INFO:_master_model_container: 19
2023-02-13 15:39:24,242:INFO:_display_container: 2
2023-02-13 15:39:24,242:INFO:DummyRegressor()
2023-02-13 15:39:24,242:INFO:create_model() successfully completed......................................
2023-02-13 15:39:24,369:INFO:SubProcess create_model() end ==================================
2023-02-13 15:39:24,369:INFO:Creating metrics dataframe
2023-02-13 15:39:24,392:INFO:Initializing create_model()
2023-02-13 15:39:24,393:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D809040>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 15:39:24,393:INFO:Checking exceptions
2023-02-13 15:39:24,394:INFO:Importing libraries
2023-02-13 15:39:24,396:INFO:Copying training dataset
2023-02-13 15:39:24,398:INFO:Defining folds
2023-02-13 15:39:24,398:INFO:Declaring metric variables
2023-02-13 15:39:24,399:INFO:Importing untrained model
2023-02-13 15:39:24,399:INFO:Declaring custom model
2023-02-13 15:39:24,399:INFO:Bayesian Ridge Imported successfully
2023-02-13 15:39:24,399:INFO:Cross validation set to False
2023-02-13 15:39:24,399:INFO:Fitting Model
2023-02-13 15:39:24,417:INFO:BayesianRidge()
2023-02-13 15:39:24,417:INFO:create_model() successfully completed......................................
2023-02-13 15:39:24,576:INFO:_master_model_container: 19
2023-02-13 15:39:24,576:INFO:_display_container: 2
2023-02-13 15:39:24,576:INFO:BayesianRidge()
2023-02-13 15:39:24,576:INFO:compare_models() successfully completed......................................
2023-02-13 16:23:10,243:INFO:PyCaret RegressionExperiment
2023-02-13 16:23:10,243:INFO:Logging name: reg-default-name
2023-02-13 16:23:10,243:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 16:23:10,243:INFO:version 3.0.0.rc8
2023-02-13 16:23:10,243:INFO:Initializing setup()
2023-02-13 16:23:10,243:INFO:self.USI: 5c37
2023-02-13 16:23:10,243:INFO:self._variable_keys: {'exp_id', 'gpu_param', 'exp_name_log', 'fold_shuffle_param', 'transform_target_param', '_ml_usecase', 'html_param', 'pipeline', 'idx', 'X_test', 'X', 'X_train', 'n_jobs_param', 'fold_groups_param', 'USI', 'y_test', 'y', 'seed', 'memory', 'fold_generator', 'data', 'log_plots_param', '_available_plots', 'logging_param', 'gpu_n_jobs_param', 'y_train', 'target_param'}
2023-02-13 16:23:10,243:INFO:Checking environment
2023-02-13 16:23:10,243:INFO:python_version: 3.9.13
2023-02-13 16:23:10,243:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 16:23:10,243:INFO:machine: AMD64
2023-02-13 16:23:10,243:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 16:23:10,250:INFO:Memory: svmem(total=16805040128, available=6782423040, percent=59.6, used=10022617088, free=6782423040)
2023-02-13 16:23:10,250:INFO:Physical Core: 4
2023-02-13 16:23:10,251:INFO:Logical Core: 8
2023-02-13 16:23:10,251:INFO:Checking libraries
2023-02-13 16:23:10,251:INFO:System:
2023-02-13 16:23:10,251:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 16:23:10,251:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 16:23:10,251:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 16:23:10,251:INFO:PyCaret required dependencies:
2023-02-13 16:23:10,251:INFO:                 pip: 23.0
2023-02-13 16:23:10,251:INFO:          setuptools: 58.1.0
2023-02-13 16:23:10,251:INFO:             pycaret: 3.0.0rc8
2023-02-13 16:23:10,251:INFO:             IPython: 8.7.0
2023-02-13 16:23:10,251:INFO:          ipywidgets: 8.0.4
2023-02-13 16:23:10,251:INFO:                tqdm: 4.64.1
2023-02-13 16:23:10,251:INFO:               numpy: 1.22.1
2023-02-13 16:23:10,251:INFO:              pandas: 1.5.2
2023-02-13 16:23:10,251:INFO:              jinja2: 3.1.2
2023-02-13 16:23:10,251:INFO:               scipy: 1.5.4
2023-02-13 16:23:10,251:INFO:              joblib: 1.2.0
2023-02-13 16:23:10,252:INFO:             sklearn: 1.1.3
2023-02-13 16:23:10,252:INFO:                pyod: 1.0.7
2023-02-13 16:23:10,252:INFO:            imblearn: 0.10.1
2023-02-13 16:23:10,252:INFO:   category_encoders: 2.6.0
2023-02-13 16:23:10,252:INFO:            lightgbm: 3.3.4
2023-02-13 16:23:10,252:INFO:               numba: 0.56.4
2023-02-13 16:23:10,252:INFO:            requests: 2.28.1
2023-02-13 16:23:10,252:INFO:          matplotlib: 3.6.2
2023-02-13 16:23:10,252:INFO:          scikitplot: 0.3.7
2023-02-13 16:23:10,252:INFO:         yellowbrick: 1.5
2023-02-13 16:23:10,252:INFO:              plotly: 5.11.0
2023-02-13 16:23:10,252:INFO:             kaleido: 0.2.1
2023-02-13 16:23:10,252:INFO:         statsmodels: 0.13.5
2023-02-13 16:23:10,252:INFO:              sktime: 0.15.1
2023-02-13 16:23:10,252:INFO:               tbats: 1.1.2
2023-02-13 16:23:10,252:INFO:            pmdarima: 2.0.2
2023-02-13 16:23:10,252:INFO:              psutil: 5.9.4
2023-02-13 16:23:10,252:INFO:PyCaret optional dependencies:
2023-02-13 16:23:10,252:INFO:                shap: 0.41.0
2023-02-13 16:23:10,253:INFO:           interpret: 0.3.0
2023-02-13 16:23:10,253:INFO:                umap: Not installed
2023-02-13 16:23:10,253:INFO:    pandas_profiling: 3.6.2
2023-02-13 16:23:10,253:INFO:  explainerdashboard: Not installed
2023-02-13 16:23:10,253:INFO:             autoviz: Not installed
2023-02-13 16:23:10,253:INFO:           fairlearn: Not installed
2023-02-13 16:23:10,253:INFO:             xgboost: 1.7.3
2023-02-13 16:23:10,253:INFO:            catboost: Not installed
2023-02-13 16:23:10,253:INFO:              kmodes: Not installed
2023-02-13 16:23:10,253:INFO:             mlxtend: Not installed
2023-02-13 16:23:10,253:INFO:       statsforecast: Not installed
2023-02-13 16:23:10,253:INFO:        tune_sklearn: Not installed
2023-02-13 16:23:10,253:INFO:                 ray: Not installed
2023-02-13 16:23:10,253:INFO:            hyperopt: Not installed
2023-02-13 16:23:10,253:INFO:              optuna: Not installed
2023-02-13 16:23:10,253:INFO:               skopt: Not installed
2023-02-13 16:23:10,254:INFO:              mlflow: Not installed
2023-02-13 16:23:10,254:INFO:              gradio: Not installed
2023-02-13 16:23:10,254:INFO:             fastapi: Not installed
2023-02-13 16:23:10,254:INFO:             uvicorn: Not installed
2023-02-13 16:23:10,254:INFO:              m2cgen: Not installed
2023-02-13 16:23:10,254:INFO:           evidently: Not installed
2023-02-13 16:23:10,254:INFO:                nltk: 3.8
2023-02-13 16:23:10,254:INFO:            pyLDAvis: Not installed
2023-02-13 16:23:10,255:INFO:              gensim: Not installed
2023-02-13 16:23:10,255:INFO:               spacy: Not installed
2023-02-13 16:23:10,255:INFO:           wordcloud: 1.8.2.2
2023-02-13 16:23:10,255:INFO:            textblob: Not installed
2023-02-13 16:23:10,255:INFO:               fugue: Not installed
2023-02-13 16:23:10,255:INFO:           streamlit: 1.16.0
2023-02-13 16:23:10,255:INFO:             prophet: Not installed
2023-02-13 16:23:10,255:INFO:None
2023-02-13 16:23:10,255:INFO:Set up data.
2023-02-13 16:23:10,264:INFO:Set up train/test split.
2023-02-13 16:23:10,267:INFO:Set up index.
2023-02-13 16:23:10,268:INFO:Set up folding strategy.
2023-02-13 16:23:10,268:INFO:Assigning column types.
2023-02-13 16:23:10,271:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 16:23:10,272:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,281:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,289:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,356:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,399:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,400:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:10,402:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:10,402:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,407:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,410:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,458:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,508:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,508:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:10,510:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:10,511:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 16:23:10,516:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,520:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,575:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,618:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,618:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:10,621:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:10,625:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,629:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,685:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,724:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,724:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:10,728:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:10,729:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 16:23:10,737:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,787:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,827:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,827:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:10,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:10,840:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,896:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,942:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:23:10,943:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:10,945:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:10,946:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 16:23:11,008:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:23:11,047:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:23:11,048:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:11,051:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:11,110:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:23:11,147:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:23:11,147:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:11,149:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:11,149:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 16:23:11,203:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:23:11,239:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:11,241:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:11,300:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:23:11,336:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:11,338:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:11,338:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 16:23:11,446:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:11,448:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:11,539:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:11,541:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:11,542:INFO:Preparing preprocessing pipeline...
2023-02-13 16:23:11,544:INFO:Set up column name cleaning.
2023-02-13 16:23:11,544:INFO:Set up simple imputation.
2023-02-13 16:23:11,558:INFO:Finished creating preprocessing pipeline.
2023-02-13 16:23:11,562:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 16:23:11,562:INFO:Creating final display dataframe.
2023-02-13 16:23:11,673:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              5c37
2023-02-13 16:23:11,779:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:11,781:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:11,878:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:23:11,880:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:23:11,881:INFO:setup() successfully completed in 1.64s...............
2023-02-13 16:23:11,881:INFO:Initializing compare_models()
2023-02-13 16:23:11,881:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 16:23:11,881:INFO:Checking exceptions
2023-02-13 16:23:11,882:INFO:Preparing display monitor
2023-02-13 16:23:11,905:INFO:Initializing Linear Regression
2023-02-13 16:23:11,906:INFO:Total runtime is 1.6740957895914714e-05 minutes
2023-02-13 16:23:11,909:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:11,910:INFO:Initializing create_model()
2023-02-13 16:23:11,910:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:11,910:INFO:Checking exceptions
2023-02-13 16:23:11,910:INFO:Importing libraries
2023-02-13 16:23:11,910:INFO:Copying training dataset
2023-02-13 16:23:11,913:INFO:Defining folds
2023-02-13 16:23:11,913:INFO:Declaring metric variables
2023-02-13 16:23:11,917:INFO:Importing untrained model
2023-02-13 16:23:11,921:INFO:Linear Regression Imported successfully
2023-02-13 16:23:11,933:INFO:Starting cross validation
2023-02-13 16:23:11,934:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:17,055:INFO:Calculating mean and std
2023-02-13 16:23:17,057:INFO:Creating metrics dataframe
2023-02-13 16:23:17,060:INFO:Uploading results into container
2023-02-13 16:23:17,061:INFO:Uploading model into container now
2023-02-13 16:23:17,061:INFO:_master_model_container: 1
2023-02-13 16:23:17,062:INFO:_display_container: 2
2023-02-13 16:23:17,062:INFO:LinearRegression(n_jobs=-1)
2023-02-13 16:23:17,062:INFO:create_model() successfully completed......................................
2023-02-13 16:23:17,263:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:17,264:INFO:Creating metrics dataframe
2023-02-13 16:23:17,270:INFO:Initializing Lasso Regression
2023-02-13 16:23:17,270:INFO:Total runtime is 0.08940698305765787 minutes
2023-02-13 16:23:17,275:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:17,275:INFO:Initializing create_model()
2023-02-13 16:23:17,275:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:17,275:INFO:Checking exceptions
2023-02-13 16:23:17,275:INFO:Importing libraries
2023-02-13 16:23:17,276:INFO:Copying training dataset
2023-02-13 16:23:17,278:INFO:Defining folds
2023-02-13 16:23:17,280:INFO:Declaring metric variables
2023-02-13 16:23:17,283:INFO:Importing untrained model
2023-02-13 16:23:17,285:INFO:Lasso Regression Imported successfully
2023-02-13 16:23:17,293:INFO:Starting cross validation
2023-02-13 16:23:17,294:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:17,426:INFO:Calculating mean and std
2023-02-13 16:23:17,427:INFO:Creating metrics dataframe
2023-02-13 16:23:17,430:INFO:Uploading results into container
2023-02-13 16:23:17,431:INFO:Uploading model into container now
2023-02-13 16:23:17,431:INFO:_master_model_container: 2
2023-02-13 16:23:17,431:INFO:_display_container: 2
2023-02-13 16:23:17,431:INFO:Lasso(random_state=1)
2023-02-13 16:23:17,432:INFO:create_model() successfully completed......................................
2023-02-13 16:23:17,564:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:17,564:INFO:Creating metrics dataframe
2023-02-13 16:23:17,575:INFO:Initializing Ridge Regression
2023-02-13 16:23:17,575:INFO:Total runtime is 0.09449120759963989 minutes
2023-02-13 16:23:17,579:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:17,579:INFO:Initializing create_model()
2023-02-13 16:23:17,579:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:17,579:INFO:Checking exceptions
2023-02-13 16:23:17,579:INFO:Importing libraries
2023-02-13 16:23:17,580:INFO:Copying training dataset
2023-02-13 16:23:17,582:INFO:Defining folds
2023-02-13 16:23:17,582:INFO:Declaring metric variables
2023-02-13 16:23:17,585:INFO:Importing untrained model
2023-02-13 16:23:17,591:INFO:Ridge Regression Imported successfully
2023-02-13 16:23:17,597:INFO:Starting cross validation
2023-02-13 16:23:17,598:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:17,735:INFO:Calculating mean and std
2023-02-13 16:23:17,736:INFO:Creating metrics dataframe
2023-02-13 16:23:17,741:INFO:Uploading results into container
2023-02-13 16:23:17,741:INFO:Uploading model into container now
2023-02-13 16:23:17,742:INFO:_master_model_container: 3
2023-02-13 16:23:17,742:INFO:_display_container: 2
2023-02-13 16:23:17,742:INFO:Ridge(random_state=1)
2023-02-13 16:23:17,742:INFO:create_model() successfully completed......................................
2023-02-13 16:23:17,874:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:17,874:INFO:Creating metrics dataframe
2023-02-13 16:23:17,881:INFO:Initializing Elastic Net
2023-02-13 16:23:17,882:INFO:Total runtime is 0.09960959752400715 minutes
2023-02-13 16:23:17,886:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:17,888:INFO:Initializing create_model()
2023-02-13 16:23:17,888:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:17,888:INFO:Checking exceptions
2023-02-13 16:23:17,888:INFO:Importing libraries
2023-02-13 16:23:17,888:INFO:Copying training dataset
2023-02-13 16:23:17,890:INFO:Defining folds
2023-02-13 16:23:17,892:INFO:Declaring metric variables
2023-02-13 16:23:17,895:INFO:Importing untrained model
2023-02-13 16:23:17,900:INFO:Elastic Net Imported successfully
2023-02-13 16:23:17,908:INFO:Starting cross validation
2023-02-13 16:23:17,909:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:18,034:INFO:Calculating mean and std
2023-02-13 16:23:18,035:INFO:Creating metrics dataframe
2023-02-13 16:23:18,039:INFO:Uploading results into container
2023-02-13 16:23:18,039:INFO:Uploading model into container now
2023-02-13 16:23:18,040:INFO:_master_model_container: 4
2023-02-13 16:23:18,040:INFO:_display_container: 2
2023-02-13 16:23:18,040:INFO:ElasticNet(random_state=1)
2023-02-13 16:23:18,040:INFO:create_model() successfully completed......................................
2023-02-13 16:23:18,167:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:18,167:INFO:Creating metrics dataframe
2023-02-13 16:23:18,177:INFO:Initializing Least Angle Regression
2023-02-13 16:23:18,177:INFO:Total runtime is 0.10452333291371663 minutes
2023-02-13 16:23:18,180:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:18,180:INFO:Initializing create_model()
2023-02-13 16:23:18,181:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:18,181:INFO:Checking exceptions
2023-02-13 16:23:18,181:INFO:Importing libraries
2023-02-13 16:23:18,181:INFO:Copying training dataset
2023-02-13 16:23:18,184:INFO:Defining folds
2023-02-13 16:23:18,184:INFO:Declaring metric variables
2023-02-13 16:23:18,189:INFO:Importing untrained model
2023-02-13 16:23:18,194:INFO:Least Angle Regression Imported successfully
2023-02-13 16:23:18,201:INFO:Starting cross validation
2023-02-13 16:23:18,202:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:18,240:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,249:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,259:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,264:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,273:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,284:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,294:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,302:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,309:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,317:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,330:INFO:Calculating mean and std
2023-02-13 16:23:18,330:INFO:Creating metrics dataframe
2023-02-13 16:23:18,333:INFO:Uploading results into container
2023-02-13 16:23:18,333:INFO:Uploading model into container now
2023-02-13 16:23:18,333:INFO:_master_model_container: 5
2023-02-13 16:23:18,333:INFO:_display_container: 2
2023-02-13 16:23:18,334:INFO:Lars(random_state=1)
2023-02-13 16:23:18,334:INFO:create_model() successfully completed......................................
2023-02-13 16:23:18,454:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:18,454:INFO:Creating metrics dataframe
2023-02-13 16:23:18,464:INFO:Initializing Lasso Least Angle Regression
2023-02-13 16:23:18,464:INFO:Total runtime is 0.10931235949198405 minutes
2023-02-13 16:23:18,468:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:18,469:INFO:Initializing create_model()
2023-02-13 16:23:18,469:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:18,471:INFO:Checking exceptions
2023-02-13 16:23:18,471:INFO:Importing libraries
2023-02-13 16:23:18,471:INFO:Copying training dataset
2023-02-13 16:23:18,474:INFO:Defining folds
2023-02-13 16:23:18,474:INFO:Declaring metric variables
2023-02-13 16:23:18,477:INFO:Importing untrained model
2023-02-13 16:23:18,480:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 16:23:18,488:INFO:Starting cross validation
2023-02-13 16:23:18,490:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:18,524:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:23:18,532:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:23:18,539:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:23:18,551:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:23:18,560:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:23:18,566:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:23:18,575:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:23:18,585:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:23:18,591:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:23:18,598:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:23:18,612:INFO:Calculating mean and std
2023-02-13 16:23:18,612:INFO:Creating metrics dataframe
2023-02-13 16:23:18,615:INFO:Uploading results into container
2023-02-13 16:23:18,615:INFO:Uploading model into container now
2023-02-13 16:23:18,615:INFO:_master_model_container: 6
2023-02-13 16:23:18,616:INFO:_display_container: 2
2023-02-13 16:23:18,616:INFO:LassoLars(random_state=1)
2023-02-13 16:23:18,616:INFO:create_model() successfully completed......................................
2023-02-13 16:23:18,738:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:18,739:INFO:Creating metrics dataframe
2023-02-13 16:23:18,749:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 16:23:18,749:INFO:Total runtime is 0.11406395037968953 minutes
2023-02-13 16:23:18,753:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:18,754:INFO:Initializing create_model()
2023-02-13 16:23:18,754:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:18,754:INFO:Checking exceptions
2023-02-13 16:23:18,754:INFO:Importing libraries
2023-02-13 16:23:18,754:INFO:Copying training dataset
2023-02-13 16:23:18,758:INFO:Defining folds
2023-02-13 16:23:18,758:INFO:Declaring metric variables
2023-02-13 16:23:18,761:INFO:Importing untrained model
2023-02-13 16:23:18,764:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 16:23:18,773:INFO:Starting cross validation
2023-02-13 16:23:18,774:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:18,809:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,816:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,824:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,834:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,845:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,851:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,858:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,872:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,880:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,888:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:23:18,903:INFO:Calculating mean and std
2023-02-13 16:23:18,906:INFO:Creating metrics dataframe
2023-02-13 16:23:18,908:INFO:Uploading results into container
2023-02-13 16:23:18,908:INFO:Uploading model into container now
2023-02-13 16:23:18,909:INFO:_master_model_container: 7
2023-02-13 16:23:18,909:INFO:_display_container: 2
2023-02-13 16:23:18,909:INFO:OrthogonalMatchingPursuit()
2023-02-13 16:23:18,909:INFO:create_model() successfully completed......................................
2023-02-13 16:23:19,065:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:19,065:INFO:Creating metrics dataframe
2023-02-13 16:23:19,074:INFO:Initializing Bayesian Ridge
2023-02-13 16:23:19,074:INFO:Total runtime is 0.11947490374247233 minutes
2023-02-13 16:23:19,077:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:19,079:INFO:Initializing create_model()
2023-02-13 16:23:19,079:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:19,079:INFO:Checking exceptions
2023-02-13 16:23:19,079:INFO:Importing libraries
2023-02-13 16:23:19,079:INFO:Copying training dataset
2023-02-13 16:23:19,081:INFO:Defining folds
2023-02-13 16:23:19,082:INFO:Declaring metric variables
2023-02-13 16:23:19,085:INFO:Importing untrained model
2023-02-13 16:23:19,091:INFO:Bayesian Ridge Imported successfully
2023-02-13 16:23:19,099:INFO:Starting cross validation
2023-02-13 16:23:19,099:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:19,248:INFO:Calculating mean and std
2023-02-13 16:23:19,249:INFO:Creating metrics dataframe
2023-02-13 16:23:19,252:INFO:Uploading results into container
2023-02-13 16:23:19,253:INFO:Uploading model into container now
2023-02-13 16:23:19,253:INFO:_master_model_container: 8
2023-02-13 16:23:19,253:INFO:_display_container: 2
2023-02-13 16:23:19,254:INFO:BayesianRidge()
2023-02-13 16:23:19,254:INFO:create_model() successfully completed......................................
2023-02-13 16:23:19,415:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:19,416:INFO:Creating metrics dataframe
2023-02-13 16:23:19,425:INFO:Initializing Passive Aggressive Regressor
2023-02-13 16:23:19,425:INFO:Total runtime is 0.12533172766367595 minutes
2023-02-13 16:23:19,428:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:19,430:INFO:Initializing create_model()
2023-02-13 16:23:19,430:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:19,430:INFO:Checking exceptions
2023-02-13 16:23:19,430:INFO:Importing libraries
2023-02-13 16:23:19,430:INFO:Copying training dataset
2023-02-13 16:23:19,432:INFO:Defining folds
2023-02-13 16:23:19,433:INFO:Declaring metric variables
2023-02-13 16:23:19,437:INFO:Importing untrained model
2023-02-13 16:23:19,440:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 16:23:19,446:INFO:Starting cross validation
2023-02-13 16:23:19,446:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:19,611:INFO:Calculating mean and std
2023-02-13 16:23:19,612:INFO:Creating metrics dataframe
2023-02-13 16:23:19,614:INFO:Uploading results into container
2023-02-13 16:23:19,616:INFO:Uploading model into container now
2023-02-13 16:23:19,616:INFO:_master_model_container: 9
2023-02-13 16:23:19,617:INFO:_display_container: 2
2023-02-13 16:23:19,617:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 16:23:19,617:INFO:create_model() successfully completed......................................
2023-02-13 16:23:19,768:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:19,768:INFO:Creating metrics dataframe
2023-02-13 16:23:19,777:INFO:Initializing Huber Regressor
2023-02-13 16:23:19,777:INFO:Total runtime is 0.1311944087346395 minutes
2023-02-13 16:23:19,780:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:19,780:INFO:Initializing create_model()
2023-02-13 16:23:19,780:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:19,780:INFO:Checking exceptions
2023-02-13 16:23:19,781:INFO:Importing libraries
2023-02-13 16:23:19,781:INFO:Copying training dataset
2023-02-13 16:23:19,784:INFO:Defining folds
2023-02-13 16:23:19,784:INFO:Declaring metric variables
2023-02-13 16:23:19,788:INFO:Importing untrained model
2023-02-13 16:23:19,793:INFO:Huber Regressor Imported successfully
2023-02-13 16:23:19,803:INFO:Starting cross validation
2023-02-13 16:23:19,804:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:19,876:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:23:19,886:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:23:19,897:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:23:19,909:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:23:19,931:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:23:19,948:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:23:19,957:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:23:19,969:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:23:20,014:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:23:19,978:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:23:20,040:INFO:Calculating mean and std
2023-02-13 16:23:20,041:INFO:Creating metrics dataframe
2023-02-13 16:23:20,045:INFO:Uploading results into container
2023-02-13 16:23:20,046:INFO:Uploading model into container now
2023-02-13 16:23:20,046:INFO:_master_model_container: 10
2023-02-13 16:23:20,047:INFO:_display_container: 2
2023-02-13 16:23:20,047:INFO:HuberRegressor()
2023-02-13 16:23:20,048:INFO:create_model() successfully completed......................................
2023-02-13 16:23:20,177:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:20,177:INFO:Creating metrics dataframe
2023-02-13 16:23:20,189:INFO:Initializing K Neighbors Regressor
2023-02-13 16:23:20,190:INFO:Total runtime is 0.13807114760080974 minutes
2023-02-13 16:23:20,194:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:20,194:INFO:Initializing create_model()
2023-02-13 16:23:20,194:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:20,194:INFO:Checking exceptions
2023-02-13 16:23:20,194:INFO:Importing libraries
2023-02-13 16:23:20,194:INFO:Copying training dataset
2023-02-13 16:23:20,197:INFO:Defining folds
2023-02-13 16:23:20,199:INFO:Declaring metric variables
2023-02-13 16:23:20,203:INFO:Importing untrained model
2023-02-13 16:23:20,206:INFO:K Neighbors Regressor Imported successfully
2023-02-13 16:23:20,213:INFO:Starting cross validation
2023-02-13 16:23:20,214:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:20,400:INFO:Calculating mean and std
2023-02-13 16:23:20,401:INFO:Creating metrics dataframe
2023-02-13 16:23:20,404:INFO:Uploading results into container
2023-02-13 16:23:20,404:INFO:Uploading model into container now
2023-02-13 16:23:20,405:INFO:_master_model_container: 11
2023-02-13 16:23:20,405:INFO:_display_container: 2
2023-02-13 16:23:20,406:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 16:23:20,406:INFO:create_model() successfully completed......................................
2023-02-13 16:23:20,562:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:20,562:INFO:Creating metrics dataframe
2023-02-13 16:23:20,577:INFO:Initializing Decision Tree Regressor
2023-02-13 16:23:20,577:INFO:Total runtime is 0.14452384312947592 minutes
2023-02-13 16:23:20,581:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:20,581:INFO:Initializing create_model()
2023-02-13 16:23:20,581:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:20,582:INFO:Checking exceptions
2023-02-13 16:23:20,582:INFO:Importing libraries
2023-02-13 16:23:20,582:INFO:Copying training dataset
2023-02-13 16:23:20,586:INFO:Defining folds
2023-02-13 16:23:20,586:INFO:Declaring metric variables
2023-02-13 16:23:20,592:INFO:Importing untrained model
2023-02-13 16:23:20,596:INFO:Decision Tree Regressor Imported successfully
2023-02-13 16:23:20,605:INFO:Starting cross validation
2023-02-13 16:23:20,606:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:20,758:INFO:Calculating mean and std
2023-02-13 16:23:20,759:INFO:Creating metrics dataframe
2023-02-13 16:23:20,763:INFO:Uploading results into container
2023-02-13 16:23:20,763:INFO:Uploading model into container now
2023-02-13 16:23:20,764:INFO:_master_model_container: 12
2023-02-13 16:23:20,764:INFO:_display_container: 2
2023-02-13 16:23:20,764:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 16:23:20,764:INFO:create_model() successfully completed......................................
2023-02-13 16:23:20,899:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:20,899:INFO:Creating metrics dataframe
2023-02-13 16:23:20,910:INFO:Initializing Random Forest Regressor
2023-02-13 16:23:20,910:INFO:Total runtime is 0.15007447401682536 minutes
2023-02-13 16:23:20,913:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:20,913:INFO:Initializing create_model()
2023-02-13 16:23:20,913:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:20,914:INFO:Checking exceptions
2023-02-13 16:23:20,914:INFO:Importing libraries
2023-02-13 16:23:20,914:INFO:Copying training dataset
2023-02-13 16:23:20,916:INFO:Defining folds
2023-02-13 16:23:20,916:INFO:Declaring metric variables
2023-02-13 16:23:20,920:INFO:Importing untrained model
2023-02-13 16:23:20,923:INFO:Random Forest Regressor Imported successfully
2023-02-13 16:23:20,929:INFO:Starting cross validation
2023-02-13 16:23:20,931:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:21,413:INFO:Calculating mean and std
2023-02-13 16:23:21,413:INFO:Creating metrics dataframe
2023-02-13 16:23:21,416:INFO:Uploading results into container
2023-02-13 16:23:21,417:INFO:Uploading model into container now
2023-02-13 16:23:21,417:INFO:_master_model_container: 13
2023-02-13 16:23:21,417:INFO:_display_container: 2
2023-02-13 16:23:21,417:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 16:23:21,417:INFO:create_model() successfully completed......................................
2023-02-13 16:23:21,559:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:21,560:INFO:Creating metrics dataframe
2023-02-13 16:23:21,572:INFO:Initializing Extra Trees Regressor
2023-02-13 16:23:21,572:INFO:Total runtime is 0.16110209226608277 minutes
2023-02-13 16:23:21,576:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:21,576:INFO:Initializing create_model()
2023-02-13 16:23:21,576:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:21,576:INFO:Checking exceptions
2023-02-13 16:23:21,576:INFO:Importing libraries
2023-02-13 16:23:21,576:INFO:Copying training dataset
2023-02-13 16:23:21,579:INFO:Defining folds
2023-02-13 16:23:21,579:INFO:Declaring metric variables
2023-02-13 16:23:21,587:INFO:Importing untrained model
2023-02-13 16:23:21,591:INFO:Extra Trees Regressor Imported successfully
2023-02-13 16:23:21,597:INFO:Starting cross validation
2023-02-13 16:23:21,599:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:22,091:INFO:Calculating mean and std
2023-02-13 16:23:22,092:INFO:Creating metrics dataframe
2023-02-13 16:23:22,095:INFO:Uploading results into container
2023-02-13 16:23:22,095:INFO:Uploading model into container now
2023-02-13 16:23:22,096:INFO:_master_model_container: 14
2023-02-13 16:23:22,096:INFO:_display_container: 2
2023-02-13 16:23:22,096:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 16:23:22,096:INFO:create_model() successfully completed......................................
2023-02-13 16:23:22,221:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:22,222:INFO:Creating metrics dataframe
2023-02-13 16:23:22,233:INFO:Initializing AdaBoost Regressor
2023-02-13 16:23:22,234:INFO:Total runtime is 0.17214829524358113 minutes
2023-02-13 16:23:22,239:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:22,239:INFO:Initializing create_model()
2023-02-13 16:23:22,239:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:22,239:INFO:Checking exceptions
2023-02-13 16:23:22,239:INFO:Importing libraries
2023-02-13 16:23:22,239:INFO:Copying training dataset
2023-02-13 16:23:22,243:INFO:Defining folds
2023-02-13 16:23:22,243:INFO:Declaring metric variables
2023-02-13 16:23:22,247:INFO:Importing untrained model
2023-02-13 16:23:22,254:INFO:AdaBoost Regressor Imported successfully
2023-02-13 16:23:22,262:INFO:Starting cross validation
2023-02-13 16:23:22,263:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:22,541:INFO:Calculating mean and std
2023-02-13 16:23:22,542:INFO:Creating metrics dataframe
2023-02-13 16:23:22,545:INFO:Uploading results into container
2023-02-13 16:23:22,545:INFO:Uploading model into container now
2023-02-13 16:23:22,546:INFO:_master_model_container: 15
2023-02-13 16:23:22,546:INFO:_display_container: 2
2023-02-13 16:23:22,546:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 16:23:22,546:INFO:create_model() successfully completed......................................
2023-02-13 16:23:22,681:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:22,682:INFO:Creating metrics dataframe
2023-02-13 16:23:22,683:INFO:Initializing Gradient Boosting Regressor
2023-02-13 16:23:22,683:INFO:Total runtime is 0.179633629322052 minutes
2023-02-13 16:23:22,683:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:22,683:INFO:Initializing create_model()
2023-02-13 16:23:22,683:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:22,683:INFO:Checking exceptions
2023-02-13 16:23:22,683:INFO:Importing libraries
2023-02-13 16:23:22,683:INFO:Copying training dataset
2023-02-13 16:23:22,701:INFO:Defining folds
2023-02-13 16:23:22,701:INFO:Declaring metric variables
2023-02-13 16:23:22,704:INFO:Importing untrained model
2023-02-13 16:23:22,711:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 16:23:22,720:INFO:Starting cross validation
2023-02-13 16:23:22,721:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:22,897:INFO:Calculating mean and std
2023-02-13 16:23:22,898:INFO:Creating metrics dataframe
2023-02-13 16:23:22,904:INFO:Uploading results into container
2023-02-13 16:23:22,905:INFO:Uploading model into container now
2023-02-13 16:23:22,905:INFO:_master_model_container: 16
2023-02-13 16:23:22,905:INFO:_display_container: 2
2023-02-13 16:23:22,906:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 16:23:22,906:INFO:create_model() successfully completed......................................
2023-02-13 16:23:23,055:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:23,055:INFO:Creating metrics dataframe
2023-02-13 16:23:23,069:INFO:Initializing Extreme Gradient Boosting
2023-02-13 16:23:23,070:INFO:Total runtime is 0.1860707680384318 minutes
2023-02-13 16:23:23,074:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:23,074:INFO:Initializing create_model()
2023-02-13 16:23:23,074:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:23,074:INFO:Checking exceptions
2023-02-13 16:23:23,074:INFO:Importing libraries
2023-02-13 16:23:23,074:INFO:Copying training dataset
2023-02-13 16:23:23,077:INFO:Defining folds
2023-02-13 16:23:23,077:INFO:Declaring metric variables
2023-02-13 16:23:23,081:INFO:Importing untrained model
2023-02-13 16:23:23,087:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 16:23:23,095:INFO:Starting cross validation
2023-02-13 16:23:23,095:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:23,347:INFO:Calculating mean and std
2023-02-13 16:23:23,349:INFO:Creating metrics dataframe
2023-02-13 16:23:23,353:INFO:Uploading results into container
2023-02-13 16:23:23,353:INFO:Uploading model into container now
2023-02-13 16:23:23,354:INFO:_master_model_container: 17
2023-02-13 16:23:23,354:INFO:_display_container: 2
2023-02-13 16:23:23,354:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 16:23:23,355:INFO:create_model() successfully completed......................................
2023-02-13 16:23:23,508:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:23,508:INFO:Creating metrics dataframe
2023-02-13 16:23:23,522:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 16:23:23,522:INFO:Total runtime is 0.19361106157302857 minutes
2023-02-13 16:23:23,526:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:23,526:INFO:Initializing create_model()
2023-02-13 16:23:23,526:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:23,526:INFO:Checking exceptions
2023-02-13 16:23:23,526:INFO:Importing libraries
2023-02-13 16:23:23,527:INFO:Copying training dataset
2023-02-13 16:23:23,530:INFO:Defining folds
2023-02-13 16:23:23,530:INFO:Declaring metric variables
2023-02-13 16:23:23,533:INFO:Importing untrained model
2023-02-13 16:23:23,538:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 16:23:23,544:INFO:Starting cross validation
2023-02-13 16:23:23,545:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:23,725:INFO:Calculating mean and std
2023-02-13 16:23:23,726:INFO:Creating metrics dataframe
2023-02-13 16:23:23,729:INFO:Uploading results into container
2023-02-13 16:23:23,729:INFO:Uploading model into container now
2023-02-13 16:23:23,730:INFO:_master_model_container: 18
2023-02-13 16:23:23,730:INFO:_display_container: 2
2023-02-13 16:23:23,730:INFO:LGBMRegressor(random_state=1)
2023-02-13 16:23:23,730:INFO:create_model() successfully completed......................................
2023-02-13 16:23:23,850:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:23,850:INFO:Creating metrics dataframe
2023-02-13 16:23:23,861:INFO:Initializing Dummy Regressor
2023-02-13 16:23:23,862:INFO:Total runtime is 0.19926844835281374 minutes
2023-02-13 16:23:23,863:INFO:SubProcess create_model() called ==================================
2023-02-13 16:23:23,865:INFO:Initializing create_model()
2023-02-13 16:23:23,865:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664800E20>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:23,865:INFO:Checking exceptions
2023-02-13 16:23:23,865:INFO:Importing libraries
2023-02-13 16:23:23,865:INFO:Copying training dataset
2023-02-13 16:23:23,869:INFO:Defining folds
2023-02-13 16:23:23,869:INFO:Declaring metric variables
2023-02-13 16:23:23,873:INFO:Importing untrained model
2023-02-13 16:23:23,877:INFO:Dummy Regressor Imported successfully
2023-02-13 16:23:23,884:INFO:Starting cross validation
2023-02-13 16:23:23,885:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:23:24,002:INFO:Calculating mean and std
2023-02-13 16:23:24,002:INFO:Creating metrics dataframe
2023-02-13 16:23:24,006:INFO:Uploading results into container
2023-02-13 16:23:24,006:INFO:Uploading model into container now
2023-02-13 16:23:24,007:INFO:_master_model_container: 19
2023-02-13 16:23:24,007:INFO:_display_container: 2
2023-02-13 16:23:24,007:INFO:DummyRegressor()
2023-02-13 16:23:24,007:INFO:create_model() successfully completed......................................
2023-02-13 16:23:24,124:INFO:SubProcess create_model() end ==================================
2023-02-13 16:23:24,124:INFO:Creating metrics dataframe
2023-02-13 16:23:24,147:INFO:Initializing create_model()
2023-02-13 16:23:24,147:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D7DF4C0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:23:24,148:INFO:Checking exceptions
2023-02-13 16:23:24,151:INFO:Importing libraries
2023-02-13 16:23:24,151:INFO:Copying training dataset
2023-02-13 16:23:24,153:INFO:Defining folds
2023-02-13 16:23:24,154:INFO:Declaring metric variables
2023-02-13 16:23:24,154:INFO:Importing untrained model
2023-02-13 16:23:24,154:INFO:Declaring custom model
2023-02-13 16:23:24,154:INFO:Bayesian Ridge Imported successfully
2023-02-13 16:23:24,155:INFO:Cross validation set to False
2023-02-13 16:23:24,155:INFO:Fitting Model
2023-02-13 16:23:24,171:INFO:BayesianRidge()
2023-02-13 16:23:24,171:INFO:create_model() successfully completed......................................
2023-02-13 16:23:24,350:INFO:_master_model_container: 19
2023-02-13 16:23:24,351:INFO:_display_container: 2
2023-02-13 16:23:24,352:INFO:BayesianRidge()
2023-02-13 16:23:24,352:INFO:compare_models() successfully completed......................................
2023-02-13 16:32:21,561:INFO:PyCaret RegressionExperiment
2023-02-13 16:32:21,561:INFO:Logging name: reg-default-name
2023-02-13 16:32:21,561:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 16:32:21,561:INFO:version 3.0.0.rc8
2023-02-13 16:32:21,561:INFO:Initializing setup()
2023-02-13 16:32:21,561:INFO:self.USI: 0a15
2023-02-13 16:32:21,561:INFO:self._variable_keys: {'exp_id', 'gpu_param', 'exp_name_log', 'fold_shuffle_param', 'transform_target_param', '_ml_usecase', 'html_param', 'pipeline', 'idx', 'X_test', 'X', 'X_train', 'n_jobs_param', 'fold_groups_param', 'USI', 'y_test', 'y', 'seed', 'memory', 'fold_generator', 'data', 'log_plots_param', '_available_plots', 'logging_param', 'gpu_n_jobs_param', 'y_train', 'target_param'}
2023-02-13 16:32:21,561:INFO:Checking environment
2023-02-13 16:32:21,561:INFO:python_version: 3.9.13
2023-02-13 16:32:21,561:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 16:32:21,561:INFO:machine: AMD64
2023-02-13 16:32:21,561:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 16:32:21,566:INFO:Memory: svmem(total=16805040128, available=6343475200, percent=62.3, used=10461564928, free=6343475200)
2023-02-13 16:32:21,566:INFO:Physical Core: 4
2023-02-13 16:32:21,566:INFO:Logical Core: 8
2023-02-13 16:32:21,566:INFO:Checking libraries
2023-02-13 16:32:21,567:INFO:System:
2023-02-13 16:32:21,567:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 16:32:21,567:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 16:32:21,567:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 16:32:21,567:INFO:PyCaret required dependencies:
2023-02-13 16:32:21,567:INFO:                 pip: 23.0
2023-02-13 16:32:21,567:INFO:          setuptools: 58.1.0
2023-02-13 16:32:21,567:INFO:             pycaret: 3.0.0rc8
2023-02-13 16:32:21,567:INFO:             IPython: 8.7.0
2023-02-13 16:32:21,567:INFO:          ipywidgets: 8.0.4
2023-02-13 16:32:21,567:INFO:                tqdm: 4.64.1
2023-02-13 16:32:21,567:INFO:               numpy: 1.22.1
2023-02-13 16:32:21,567:INFO:              pandas: 1.5.2
2023-02-13 16:32:21,567:INFO:              jinja2: 3.1.2
2023-02-13 16:32:21,567:INFO:               scipy: 1.5.4
2023-02-13 16:32:21,568:INFO:              joblib: 1.2.0
2023-02-13 16:32:21,568:INFO:             sklearn: 1.1.3
2023-02-13 16:32:21,568:INFO:                pyod: 1.0.7
2023-02-13 16:32:21,568:INFO:            imblearn: 0.10.1
2023-02-13 16:32:21,568:INFO:   category_encoders: 2.6.0
2023-02-13 16:32:21,568:INFO:            lightgbm: 3.3.4
2023-02-13 16:32:21,568:INFO:               numba: 0.56.4
2023-02-13 16:32:21,568:INFO:            requests: 2.28.1
2023-02-13 16:32:21,568:INFO:          matplotlib: 3.6.2
2023-02-13 16:32:21,568:INFO:          scikitplot: 0.3.7
2023-02-13 16:32:21,568:INFO:         yellowbrick: 1.5
2023-02-13 16:32:21,568:INFO:              plotly: 5.11.0
2023-02-13 16:32:21,568:INFO:             kaleido: 0.2.1
2023-02-13 16:32:21,568:INFO:         statsmodels: 0.13.5
2023-02-13 16:32:21,568:INFO:              sktime: 0.15.1
2023-02-13 16:32:21,568:INFO:               tbats: 1.1.2
2023-02-13 16:32:21,568:INFO:            pmdarima: 2.0.2
2023-02-13 16:32:21,568:INFO:              psutil: 5.9.4
2023-02-13 16:32:21,568:INFO:PyCaret optional dependencies:
2023-02-13 16:32:21,569:INFO:                shap: 0.41.0
2023-02-13 16:32:21,569:INFO:           interpret: 0.3.0
2023-02-13 16:32:21,569:INFO:                umap: Not installed
2023-02-13 16:32:21,569:INFO:    pandas_profiling: 3.6.2
2023-02-13 16:32:21,569:INFO:  explainerdashboard: Not installed
2023-02-13 16:32:21,569:INFO:             autoviz: Not installed
2023-02-13 16:32:21,569:INFO:           fairlearn: Not installed
2023-02-13 16:32:21,569:INFO:             xgboost: 1.7.3
2023-02-13 16:32:21,569:INFO:            catboost: Not installed
2023-02-13 16:32:21,569:INFO:              kmodes: Not installed
2023-02-13 16:32:21,569:INFO:             mlxtend: Not installed
2023-02-13 16:32:21,569:INFO:       statsforecast: Not installed
2023-02-13 16:32:21,569:INFO:        tune_sklearn: Not installed
2023-02-13 16:32:21,569:INFO:                 ray: Not installed
2023-02-13 16:32:21,569:INFO:            hyperopt: Not installed
2023-02-13 16:32:21,569:INFO:              optuna: Not installed
2023-02-13 16:32:21,569:INFO:               skopt: Not installed
2023-02-13 16:32:21,569:INFO:              mlflow: Not installed
2023-02-13 16:32:21,569:INFO:              gradio: Not installed
2023-02-13 16:32:21,569:INFO:             fastapi: Not installed
2023-02-13 16:32:21,569:INFO:             uvicorn: Not installed
2023-02-13 16:32:21,569:INFO:              m2cgen: Not installed
2023-02-13 16:32:21,569:INFO:           evidently: Not installed
2023-02-13 16:32:21,569:INFO:                nltk: 3.8
2023-02-13 16:32:21,569:INFO:            pyLDAvis: Not installed
2023-02-13 16:32:21,570:INFO:              gensim: Not installed
2023-02-13 16:32:21,570:INFO:               spacy: Not installed
2023-02-13 16:32:21,570:INFO:           wordcloud: 1.8.2.2
2023-02-13 16:32:21,570:INFO:            textblob: Not installed
2023-02-13 16:32:21,570:INFO:               fugue: Not installed
2023-02-13 16:32:21,570:INFO:           streamlit: 1.16.0
2023-02-13 16:32:21,570:INFO:             prophet: Not installed
2023-02-13 16:32:21,570:INFO:None
2023-02-13 16:32:21,570:INFO:Set up data.
2023-02-13 16:32:21,576:INFO:Set up train/test split.
2023-02-13 16:32:21,578:INFO:Set up index.
2023-02-13 16:32:21,578:INFO:Set up folding strategy.
2023-02-13 16:32:21,578:INFO:Assigning column types.
2023-02-13 16:32:21,582:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 16:32:21,582:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,589:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,593:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,643:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,678:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,679:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:21,682:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:21,682:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,685:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,689:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,734:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,771:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,771:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:21,773:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:21,774:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 16:32:21,777:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,781:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,828:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,868:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,868:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:21,870:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:21,874:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,877:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,933:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,978:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:32:21,978:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:21,982:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:21,983:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 16:32:21,992:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,038:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,073:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,073:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:22,076:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:22,084:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,143:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,179:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,180:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:22,183:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:22,183:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 16:32:22,242:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,277:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,278:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:22,280:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:22,336:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,373:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,373:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:22,375:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:22,376:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 16:32:22,427:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,463:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:22,466:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:22,522:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 16:32:22,562:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:22,564:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:22,565:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 16:32:22,657:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:22,659:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:22,747:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:22,749:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:22,750:INFO:Preparing preprocessing pipeline...
2023-02-13 16:32:22,751:INFO:Set up column name cleaning.
2023-02-13 16:32:22,751:INFO:Set up simple imputation.
2023-02-13 16:32:22,765:INFO:Finished creating preprocessing pipeline.
2023-02-13 16:32:22,769:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 16:32:22,769:INFO:Creating final display dataframe.
2023-02-13 16:32:22,891:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              0a15
2023-02-13 16:32:23,002:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:23,004:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:23,104:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 16:32:23,106:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 16:32:23,107:INFO:setup() successfully completed in 1.55s...............
2023-02-13 16:32:23,107:INFO:Initializing compare_models()
2023-02-13 16:32:23,107:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 16:32:23,107:INFO:Checking exceptions
2023-02-13 16:32:23,108:INFO:Preparing display monitor
2023-02-13 16:32:23,135:INFO:Initializing Linear Regression
2023-02-13 16:32:23,135:INFO:Total runtime is 0.0 minutes
2023-02-13 16:32:23,139:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:23,139:INFO:Initializing create_model()
2023-02-13 16:32:23,140:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:23,140:INFO:Checking exceptions
2023-02-13 16:32:23,140:INFO:Importing libraries
2023-02-13 16:32:23,140:INFO:Copying training dataset
2023-02-13 16:32:23,142:INFO:Defining folds
2023-02-13 16:32:23,142:INFO:Declaring metric variables
2023-02-13 16:32:23,149:INFO:Importing untrained model
2023-02-13 16:32:23,166:INFO:Linear Regression Imported successfully
2023-02-13 16:32:23,175:INFO:Starting cross validation
2023-02-13 16:32:23,176:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:26,772:INFO:Calculating mean and std
2023-02-13 16:32:26,773:INFO:Creating metrics dataframe
2023-02-13 16:32:26,777:INFO:Uploading results into container
2023-02-13 16:32:26,778:INFO:Uploading model into container now
2023-02-13 16:32:26,778:INFO:_master_model_container: 1
2023-02-13 16:32:26,779:INFO:_display_container: 2
2023-02-13 16:32:26,779:INFO:LinearRegression(n_jobs=-1)
2023-02-13 16:32:26,779:INFO:create_model() successfully completed......................................
2023-02-13 16:32:26,920:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:26,920:INFO:Creating metrics dataframe
2023-02-13 16:32:26,927:INFO:Initializing Lasso Regression
2023-02-13 16:32:26,928:INFO:Total runtime is 0.06321867704391479 minutes
2023-02-13 16:32:26,931:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:26,931:INFO:Initializing create_model()
2023-02-13 16:32:26,931:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:26,931:INFO:Checking exceptions
2023-02-13 16:32:26,931:INFO:Importing libraries
2023-02-13 16:32:26,931:INFO:Copying training dataset
2023-02-13 16:32:26,935:INFO:Defining folds
2023-02-13 16:32:26,935:INFO:Declaring metric variables
2023-02-13 16:32:26,940:INFO:Importing untrained model
2023-02-13 16:32:26,945:INFO:Lasso Regression Imported successfully
2023-02-13 16:32:26,952:INFO:Starting cross validation
2023-02-13 16:32:26,955:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:27,086:INFO:Calculating mean and std
2023-02-13 16:32:27,087:INFO:Creating metrics dataframe
2023-02-13 16:32:27,090:INFO:Uploading results into container
2023-02-13 16:32:27,091:INFO:Uploading model into container now
2023-02-13 16:32:27,091:INFO:_master_model_container: 2
2023-02-13 16:32:27,091:INFO:_display_container: 2
2023-02-13 16:32:27,091:INFO:Lasso(random_state=1)
2023-02-13 16:32:27,091:INFO:create_model() successfully completed......................................
2023-02-13 16:32:27,214:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:27,214:INFO:Creating metrics dataframe
2023-02-13 16:32:27,221:INFO:Initializing Ridge Regression
2023-02-13 16:32:27,221:INFO:Total runtime is 0.06809690395991007 minutes
2023-02-13 16:32:27,224:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:27,225:INFO:Initializing create_model()
2023-02-13 16:32:27,225:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:27,225:INFO:Checking exceptions
2023-02-13 16:32:27,225:INFO:Importing libraries
2023-02-13 16:32:27,225:INFO:Copying training dataset
2023-02-13 16:32:27,228:INFO:Defining folds
2023-02-13 16:32:27,228:INFO:Declaring metric variables
2023-02-13 16:32:27,232:INFO:Importing untrained model
2023-02-13 16:32:27,236:INFO:Ridge Regression Imported successfully
2023-02-13 16:32:27,245:INFO:Starting cross validation
2023-02-13 16:32:27,246:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:27,368:INFO:Calculating mean and std
2023-02-13 16:32:27,369:INFO:Creating metrics dataframe
2023-02-13 16:32:27,371:INFO:Uploading results into container
2023-02-13 16:32:27,371:INFO:Uploading model into container now
2023-02-13 16:32:27,371:INFO:_master_model_container: 3
2023-02-13 16:32:27,371:INFO:_display_container: 2
2023-02-13 16:32:27,371:INFO:Ridge(random_state=1)
2023-02-13 16:32:27,371:INFO:create_model() successfully completed......................................
2023-02-13 16:32:27,497:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:27,497:INFO:Creating metrics dataframe
2023-02-13 16:32:27,505:INFO:Initializing Elastic Net
2023-02-13 16:32:27,507:INFO:Total runtime is 0.07286156018575032 minutes
2023-02-13 16:32:27,510:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:27,510:INFO:Initializing create_model()
2023-02-13 16:32:27,510:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:27,510:INFO:Checking exceptions
2023-02-13 16:32:27,511:INFO:Importing libraries
2023-02-13 16:32:27,511:INFO:Copying training dataset
2023-02-13 16:32:27,515:INFO:Defining folds
2023-02-13 16:32:27,515:INFO:Declaring metric variables
2023-02-13 16:32:27,519:INFO:Importing untrained model
2023-02-13 16:32:27,523:INFO:Elastic Net Imported successfully
2023-02-13 16:32:27,531:INFO:Starting cross validation
2023-02-13 16:32:27,533:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:27,653:INFO:Calculating mean and std
2023-02-13 16:32:27,654:INFO:Creating metrics dataframe
2023-02-13 16:32:27,656:INFO:Uploading results into container
2023-02-13 16:32:27,658:INFO:Uploading model into container now
2023-02-13 16:32:27,658:INFO:_master_model_container: 4
2023-02-13 16:32:27,659:INFO:_display_container: 2
2023-02-13 16:32:27,659:INFO:ElasticNet(random_state=1)
2023-02-13 16:32:27,659:INFO:create_model() successfully completed......................................
2023-02-13 16:32:27,781:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:27,782:INFO:Creating metrics dataframe
2023-02-13 16:32:27,789:INFO:Initializing Least Angle Regression
2023-02-13 16:32:27,789:INFO:Total runtime is 0.07757382392883301 minutes
2023-02-13 16:32:27,795:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:27,795:INFO:Initializing create_model()
2023-02-13 16:32:27,795:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:27,795:INFO:Checking exceptions
2023-02-13 16:32:27,796:INFO:Importing libraries
2023-02-13 16:32:27,796:INFO:Copying training dataset
2023-02-13 16:32:27,799:INFO:Defining folds
2023-02-13 16:32:27,799:INFO:Declaring metric variables
2023-02-13 16:32:27,804:INFO:Importing untrained model
2023-02-13 16:32:27,806:INFO:Least Angle Regression Imported successfully
2023-02-13 16:32:27,815:INFO:Starting cross validation
2023-02-13 16:32:27,816:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:27,853:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:27,863:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:27,872:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:27,879:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:27,886:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:27,896:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:27,902:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:27,913:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:27,916:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:27,925:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:27,937:INFO:Calculating mean and std
2023-02-13 16:32:27,938:INFO:Creating metrics dataframe
2023-02-13 16:32:27,942:INFO:Uploading results into container
2023-02-13 16:32:27,942:INFO:Uploading model into container now
2023-02-13 16:32:27,943:INFO:_master_model_container: 5
2023-02-13 16:32:27,943:INFO:_display_container: 2
2023-02-13 16:32:27,943:INFO:Lars(random_state=1)
2023-02-13 16:32:27,943:INFO:create_model() successfully completed......................................
2023-02-13 16:32:28,067:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:28,067:INFO:Creating metrics dataframe
2023-02-13 16:32:28,074:INFO:Initializing Lasso Least Angle Regression
2023-02-13 16:32:28,074:INFO:Total runtime is 0.08232558170954386 minutes
2023-02-13 16:32:28,078:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:28,079:INFO:Initializing create_model()
2023-02-13 16:32:28,079:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:28,079:INFO:Checking exceptions
2023-02-13 16:32:28,079:INFO:Importing libraries
2023-02-13 16:32:28,079:INFO:Copying training dataset
2023-02-13 16:32:28,083:INFO:Defining folds
2023-02-13 16:32:28,083:INFO:Declaring metric variables
2023-02-13 16:32:28,086:INFO:Importing untrained model
2023-02-13 16:32:28,091:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 16:32:28,099:INFO:Starting cross validation
2023-02-13 16:32:28,101:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:28,136:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:32:28,143:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:32:28,152:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:32:28,163:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:32:28,170:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:32:28,178:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:32:28,188:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:32:28,196:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:32:28,203:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:32:28,212:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 16:32:28,222:INFO:Calculating mean and std
2023-02-13 16:32:28,224:INFO:Creating metrics dataframe
2023-02-13 16:32:28,227:INFO:Uploading results into container
2023-02-13 16:32:28,227:INFO:Uploading model into container now
2023-02-13 16:32:28,228:INFO:_master_model_container: 6
2023-02-13 16:32:28,228:INFO:_display_container: 2
2023-02-13 16:32:28,228:INFO:LassoLars(random_state=1)
2023-02-13 16:32:28,229:INFO:create_model() successfully completed......................................
2023-02-13 16:32:28,399:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:28,399:INFO:Creating metrics dataframe
2023-02-13 16:32:28,407:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 16:32:28,407:INFO:Total runtime is 0.08787701924641927 minutes
2023-02-13 16:32:28,411:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:28,411:INFO:Initializing create_model()
2023-02-13 16:32:28,411:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:28,411:INFO:Checking exceptions
2023-02-13 16:32:28,411:INFO:Importing libraries
2023-02-13 16:32:28,411:INFO:Copying training dataset
2023-02-13 16:32:28,414:INFO:Defining folds
2023-02-13 16:32:28,414:INFO:Declaring metric variables
2023-02-13 16:32:28,416:INFO:Importing untrained model
2023-02-13 16:32:28,420:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 16:32:28,428:INFO:Starting cross validation
2023-02-13 16:32:28,429:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:28,461:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:28,468:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:28,479:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:28,488:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:28,497:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:28,502:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:28,513:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:28,525:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:28,533:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:28,539:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 16:32:28,552:INFO:Calculating mean and std
2023-02-13 16:32:28,553:INFO:Creating metrics dataframe
2023-02-13 16:32:28,555:INFO:Uploading results into container
2023-02-13 16:32:28,555:INFO:Uploading model into container now
2023-02-13 16:32:28,556:INFO:_master_model_container: 7
2023-02-13 16:32:28,556:INFO:_display_container: 2
2023-02-13 16:32:28,556:INFO:OrthogonalMatchingPursuit()
2023-02-13 16:32:28,557:INFO:create_model() successfully completed......................................
2023-02-13 16:32:28,693:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:28,694:INFO:Creating metrics dataframe
2023-02-13 16:32:28,704:INFO:Initializing Bayesian Ridge
2023-02-13 16:32:28,704:INFO:Total runtime is 0.09281607071558635 minutes
2023-02-13 16:32:28,709:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:28,710:INFO:Initializing create_model()
2023-02-13 16:32:28,710:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:28,710:INFO:Checking exceptions
2023-02-13 16:32:28,711:INFO:Importing libraries
2023-02-13 16:32:28,711:INFO:Copying training dataset
2023-02-13 16:32:28,714:INFO:Defining folds
2023-02-13 16:32:28,714:INFO:Declaring metric variables
2023-02-13 16:32:28,718:INFO:Importing untrained model
2023-02-13 16:32:28,723:INFO:Bayesian Ridge Imported successfully
2023-02-13 16:32:28,732:INFO:Starting cross validation
2023-02-13 16:32:28,740:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:28,878:INFO:Calculating mean and std
2023-02-13 16:32:28,879:INFO:Creating metrics dataframe
2023-02-13 16:32:28,882:INFO:Uploading results into container
2023-02-13 16:32:28,882:INFO:Uploading model into container now
2023-02-13 16:32:28,882:INFO:_master_model_container: 8
2023-02-13 16:32:28,882:INFO:_display_container: 2
2023-02-13 16:32:28,882:INFO:BayesianRidge()
2023-02-13 16:32:28,882:INFO:create_model() successfully completed......................................
2023-02-13 16:32:29,017:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:29,017:INFO:Creating metrics dataframe
2023-02-13 16:32:29,028:INFO:Initializing Passive Aggressive Regressor
2023-02-13 16:32:29,028:INFO:Total runtime is 0.0982270121574402 minutes
2023-02-13 16:32:29,034:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:29,034:INFO:Initializing create_model()
2023-02-13 16:32:29,034:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:29,035:INFO:Checking exceptions
2023-02-13 16:32:29,035:INFO:Importing libraries
2023-02-13 16:32:29,035:INFO:Copying training dataset
2023-02-13 16:32:29,037:INFO:Defining folds
2023-02-13 16:32:29,037:INFO:Declaring metric variables
2023-02-13 16:32:29,044:INFO:Importing untrained model
2023-02-13 16:32:29,047:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 16:32:29,055:INFO:Starting cross validation
2023-02-13 16:32:29,057:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:29,187:INFO:Calculating mean and std
2023-02-13 16:32:29,189:INFO:Creating metrics dataframe
2023-02-13 16:32:29,192:INFO:Uploading results into container
2023-02-13 16:32:29,193:INFO:Uploading model into container now
2023-02-13 16:32:29,193:INFO:_master_model_container: 9
2023-02-13 16:32:29,194:INFO:_display_container: 2
2023-02-13 16:32:29,194:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 16:32:29,194:INFO:create_model() successfully completed......................................
2023-02-13 16:32:29,329:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:29,329:INFO:Creating metrics dataframe
2023-02-13 16:32:29,342:INFO:Initializing Huber Regressor
2023-02-13 16:32:29,342:INFO:Total runtime is 0.1034497102101644 minutes
2023-02-13 16:32:29,346:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:29,346:INFO:Initializing create_model()
2023-02-13 16:32:29,346:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:29,346:INFO:Checking exceptions
2023-02-13 16:32:29,346:INFO:Importing libraries
2023-02-13 16:32:29,347:INFO:Copying training dataset
2023-02-13 16:32:29,350:INFO:Defining folds
2023-02-13 16:32:29,350:INFO:Declaring metric variables
2023-02-13 16:32:29,379:INFO:Importing untrained model
2023-02-13 16:32:29,383:INFO:Huber Regressor Imported successfully
2023-02-13 16:32:29,391:INFO:Starting cross validation
2023-02-13 16:32:29,392:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:29,455:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:32:29,464:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:32:29,469:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:32:29,490:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:32:29,495:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:32:29,506:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:32:29,512:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:32:29,521:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:32:29,524:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:32:29,532:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 16:32:29,544:INFO:Calculating mean and std
2023-02-13 16:32:29,544:INFO:Creating metrics dataframe
2023-02-13 16:32:29,547:INFO:Uploading results into container
2023-02-13 16:32:29,547:INFO:Uploading model into container now
2023-02-13 16:32:29,548:INFO:_master_model_container: 10
2023-02-13 16:32:29,548:INFO:_display_container: 2
2023-02-13 16:32:29,548:INFO:HuberRegressor()
2023-02-13 16:32:29,548:INFO:create_model() successfully completed......................................
2023-02-13 16:32:29,668:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:29,668:INFO:Creating metrics dataframe
2023-02-13 16:32:29,679:INFO:Initializing K Neighbors Regressor
2023-02-13 16:32:29,679:INFO:Total runtime is 0.10907408396402996 minutes
2023-02-13 16:32:29,684:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:29,684:INFO:Initializing create_model()
2023-02-13 16:32:29,684:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:29,684:INFO:Checking exceptions
2023-02-13 16:32:29,684:INFO:Importing libraries
2023-02-13 16:32:29,685:INFO:Copying training dataset
2023-02-13 16:32:29,688:INFO:Defining folds
2023-02-13 16:32:29,689:INFO:Declaring metric variables
2023-02-13 16:32:29,693:INFO:Importing untrained model
2023-02-13 16:32:29,698:INFO:K Neighbors Regressor Imported successfully
2023-02-13 16:32:29,705:INFO:Starting cross validation
2023-02-13 16:32:29,706:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:29,858:INFO:Calculating mean and std
2023-02-13 16:32:29,859:INFO:Creating metrics dataframe
2023-02-13 16:32:29,861:INFO:Uploading results into container
2023-02-13 16:32:29,861:INFO:Uploading model into container now
2023-02-13 16:32:29,862:INFO:_master_model_container: 11
2023-02-13 16:32:29,862:INFO:_display_container: 2
2023-02-13 16:32:29,862:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 16:32:29,862:INFO:create_model() successfully completed......................................
2023-02-13 16:32:29,993:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:29,993:INFO:Creating metrics dataframe
2023-02-13 16:32:30,009:INFO:Initializing Decision Tree Regressor
2023-02-13 16:32:30,010:INFO:Total runtime is 0.1145789662996928 minutes
2023-02-13 16:32:30,014:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:30,014:INFO:Initializing create_model()
2023-02-13 16:32:30,014:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:30,014:INFO:Checking exceptions
2023-02-13 16:32:30,014:INFO:Importing libraries
2023-02-13 16:32:30,014:INFO:Copying training dataset
2023-02-13 16:32:30,017:INFO:Defining folds
2023-02-13 16:32:30,017:INFO:Declaring metric variables
2023-02-13 16:32:30,021:INFO:Importing untrained model
2023-02-13 16:32:30,026:INFO:Decision Tree Regressor Imported successfully
2023-02-13 16:32:30,034:INFO:Starting cross validation
2023-02-13 16:32:30,035:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:30,178:INFO:Calculating mean and std
2023-02-13 16:32:30,180:INFO:Creating metrics dataframe
2023-02-13 16:32:30,182:INFO:Uploading results into container
2023-02-13 16:32:30,183:INFO:Uploading model into container now
2023-02-13 16:32:30,184:INFO:_master_model_container: 12
2023-02-13 16:32:30,184:INFO:_display_container: 2
2023-02-13 16:32:30,184:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 16:32:30,184:INFO:create_model() successfully completed......................................
2023-02-13 16:32:30,306:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:30,306:INFO:Creating metrics dataframe
2023-02-13 16:32:30,314:INFO:Initializing Random Forest Regressor
2023-02-13 16:32:30,315:INFO:Total runtime is 0.11966302792231243 minutes
2023-02-13 16:32:30,317:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:30,318:INFO:Initializing create_model()
2023-02-13 16:32:30,318:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:30,318:INFO:Checking exceptions
2023-02-13 16:32:30,318:INFO:Importing libraries
2023-02-13 16:32:30,318:INFO:Copying training dataset
2023-02-13 16:32:30,321:INFO:Defining folds
2023-02-13 16:32:30,321:INFO:Declaring metric variables
2023-02-13 16:32:30,325:INFO:Importing untrained model
2023-02-13 16:32:30,330:INFO:Random Forest Regressor Imported successfully
2023-02-13 16:32:30,338:INFO:Starting cross validation
2023-02-13 16:32:30,339:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:30,846:INFO:Calculating mean and std
2023-02-13 16:32:30,847:INFO:Creating metrics dataframe
2023-02-13 16:32:30,849:INFO:Uploading results into container
2023-02-13 16:32:30,849:INFO:Uploading model into container now
2023-02-13 16:32:30,850:INFO:_master_model_container: 13
2023-02-13 16:32:30,850:INFO:_display_container: 2
2023-02-13 16:32:30,850:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 16:32:30,850:INFO:create_model() successfully completed......................................
2023-02-13 16:32:30,975:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:30,975:INFO:Creating metrics dataframe
2023-02-13 16:32:30,986:INFO:Initializing Extra Trees Regressor
2023-02-13 16:32:30,987:INFO:Total runtime is 0.13086942434310914 minutes
2023-02-13 16:32:30,990:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:30,992:INFO:Initializing create_model()
2023-02-13 16:32:30,992:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:30,992:INFO:Checking exceptions
2023-02-13 16:32:30,993:INFO:Importing libraries
2023-02-13 16:32:30,993:INFO:Copying training dataset
2023-02-13 16:32:30,996:INFO:Defining folds
2023-02-13 16:32:30,996:INFO:Declaring metric variables
2023-02-13 16:32:30,999:INFO:Importing untrained model
2023-02-13 16:32:31,005:INFO:Extra Trees Regressor Imported successfully
2023-02-13 16:32:31,013:INFO:Starting cross validation
2023-02-13 16:32:31,014:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:31,374:INFO:Calculating mean and std
2023-02-13 16:32:31,375:INFO:Creating metrics dataframe
2023-02-13 16:32:31,377:INFO:Uploading results into container
2023-02-13 16:32:31,378:INFO:Uploading model into container now
2023-02-13 16:32:31,378:INFO:_master_model_container: 14
2023-02-13 16:32:31,378:INFO:_display_container: 2
2023-02-13 16:32:31,379:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 16:32:31,379:INFO:create_model() successfully completed......................................
2023-02-13 16:32:31,499:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:31,499:INFO:Creating metrics dataframe
2023-02-13 16:32:31,509:INFO:Initializing AdaBoost Regressor
2023-02-13 16:32:31,509:INFO:Total runtime is 0.13956382671991985 minutes
2023-02-13 16:32:31,511:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:31,512:INFO:Initializing create_model()
2023-02-13 16:32:31,512:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:31,512:INFO:Checking exceptions
2023-02-13 16:32:31,512:INFO:Importing libraries
2023-02-13 16:32:31,512:INFO:Copying training dataset
2023-02-13 16:32:31,516:INFO:Defining folds
2023-02-13 16:32:31,516:INFO:Declaring metric variables
2023-02-13 16:32:31,522:INFO:Importing untrained model
2023-02-13 16:32:31,527:INFO:AdaBoost Regressor Imported successfully
2023-02-13 16:32:31,534:INFO:Starting cross validation
2023-02-13 16:32:31,535:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:31,778:INFO:Calculating mean and std
2023-02-13 16:32:31,779:INFO:Creating metrics dataframe
2023-02-13 16:32:31,782:INFO:Uploading results into container
2023-02-13 16:32:31,782:INFO:Uploading model into container now
2023-02-13 16:32:31,783:INFO:_master_model_container: 15
2023-02-13 16:32:31,783:INFO:_display_container: 2
2023-02-13 16:32:31,783:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 16:32:31,783:INFO:create_model() successfully completed......................................
2023-02-13 16:32:31,943:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:31,943:INFO:Creating metrics dataframe
2023-02-13 16:32:31,956:INFO:Initializing Gradient Boosting Regressor
2023-02-13 16:32:31,956:INFO:Total runtime is 0.14701839685440063 minutes
2023-02-13 16:32:31,959:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:31,959:INFO:Initializing create_model()
2023-02-13 16:32:31,959:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:31,959:INFO:Checking exceptions
2023-02-13 16:32:31,959:INFO:Importing libraries
2023-02-13 16:32:31,961:INFO:Copying training dataset
2023-02-13 16:32:31,963:INFO:Defining folds
2023-02-13 16:32:31,963:INFO:Declaring metric variables
2023-02-13 16:32:31,966:INFO:Importing untrained model
2023-02-13 16:32:31,971:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 16:32:31,977:INFO:Starting cross validation
2023-02-13 16:32:31,978:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:32,218:INFO:Calculating mean and std
2023-02-13 16:32:32,220:INFO:Creating metrics dataframe
2023-02-13 16:32:32,223:INFO:Uploading results into container
2023-02-13 16:32:32,223:INFO:Uploading model into container now
2023-02-13 16:32:32,224:INFO:_master_model_container: 16
2023-02-13 16:32:32,224:INFO:_display_container: 2
2023-02-13 16:32:32,224:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 16:32:32,224:INFO:create_model() successfully completed......................................
2023-02-13 16:32:32,410:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:32,410:INFO:Creating metrics dataframe
2023-02-13 16:32:32,424:INFO:Initializing Extreme Gradient Boosting
2023-02-13 16:32:32,425:INFO:Total runtime is 0.15483642816543577 minutes
2023-02-13 16:32:32,429:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:32,429:INFO:Initializing create_model()
2023-02-13 16:32:32,429:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:32,429:INFO:Checking exceptions
2023-02-13 16:32:32,429:INFO:Importing libraries
2023-02-13 16:32:32,429:INFO:Copying training dataset
2023-02-13 16:32:32,432:INFO:Defining folds
2023-02-13 16:32:32,432:INFO:Declaring metric variables
2023-02-13 16:32:32,435:INFO:Importing untrained model
2023-02-13 16:32:32,438:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 16:32:32,443:INFO:Starting cross validation
2023-02-13 16:32:32,444:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:32,731:INFO:Calculating mean and std
2023-02-13 16:32:32,733:INFO:Creating metrics dataframe
2023-02-13 16:32:32,736:INFO:Uploading results into container
2023-02-13 16:32:32,738:INFO:Uploading model into container now
2023-02-13 16:32:32,740:INFO:_master_model_container: 17
2023-02-13 16:32:32,740:INFO:_display_container: 2
2023-02-13 16:32:32,741:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 16:32:32,741:INFO:create_model() successfully completed......................................
2023-02-13 16:32:32,893:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:32,895:INFO:Creating metrics dataframe
2023-02-13 16:32:32,914:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 16:32:32,915:INFO:Total runtime is 0.16300061146418252 minutes
2023-02-13 16:32:32,918:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:32,918:INFO:Initializing create_model()
2023-02-13 16:32:32,918:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:32,919:INFO:Checking exceptions
2023-02-13 16:32:32,919:INFO:Importing libraries
2023-02-13 16:32:32,919:INFO:Copying training dataset
2023-02-13 16:32:32,921:INFO:Defining folds
2023-02-13 16:32:32,921:INFO:Declaring metric variables
2023-02-13 16:32:32,924:INFO:Importing untrained model
2023-02-13 16:32:32,927:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 16:32:32,933:INFO:Starting cross validation
2023-02-13 16:32:32,934:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:33,217:INFO:Calculating mean and std
2023-02-13 16:32:33,219:INFO:Creating metrics dataframe
2023-02-13 16:32:33,220:INFO:Uploading results into container
2023-02-13 16:32:33,223:INFO:Uploading model into container now
2023-02-13 16:32:33,223:INFO:_master_model_container: 18
2023-02-13 16:32:33,224:INFO:_display_container: 2
2023-02-13 16:32:33,224:INFO:LGBMRegressor(random_state=1)
2023-02-13 16:32:33,224:INFO:create_model() successfully completed......................................
2023-02-13 16:32:33,353:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:33,353:INFO:Creating metrics dataframe
2023-02-13 16:32:33,363:INFO:Initializing Dummy Regressor
2023-02-13 16:32:33,363:INFO:Total runtime is 0.17046374082565305 minutes
2023-02-13 16:32:33,365:INFO:SubProcess create_model() called ==================================
2023-02-13 16:32:33,367:INFO:Initializing create_model()
2023-02-13 16:32:33,367:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A664AFB400>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:33,367:INFO:Checking exceptions
2023-02-13 16:32:33,367:INFO:Importing libraries
2023-02-13 16:32:33,367:INFO:Copying training dataset
2023-02-13 16:32:33,371:INFO:Defining folds
2023-02-13 16:32:33,371:INFO:Declaring metric variables
2023-02-13 16:32:33,373:INFO:Importing untrained model
2023-02-13 16:32:33,378:INFO:Dummy Regressor Imported successfully
2023-02-13 16:32:33,386:INFO:Starting cross validation
2023-02-13 16:32:33,387:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 16:32:33,518:INFO:Calculating mean and std
2023-02-13 16:32:33,521:INFO:Creating metrics dataframe
2023-02-13 16:32:33,523:INFO:Uploading results into container
2023-02-13 16:32:33,523:INFO:Uploading model into container now
2023-02-13 16:32:33,525:INFO:_master_model_container: 19
2023-02-13 16:32:33,525:INFO:_display_container: 2
2023-02-13 16:32:33,525:INFO:DummyRegressor()
2023-02-13 16:32:33,525:INFO:create_model() successfully completed......................................
2023-02-13 16:32:33,682:INFO:SubProcess create_model() end ==================================
2023-02-13 16:32:33,682:INFO:Creating metrics dataframe
2023-02-13 16:32:33,713:INFO:Initializing create_model()
2023-02-13 16:32:33,713:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002A65D2B8460>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 16:32:33,713:INFO:Checking exceptions
2023-02-13 16:32:33,715:INFO:Importing libraries
2023-02-13 16:32:33,716:INFO:Copying training dataset
2023-02-13 16:32:33,718:INFO:Defining folds
2023-02-13 16:32:33,718:INFO:Declaring metric variables
2023-02-13 16:32:33,719:INFO:Importing untrained model
2023-02-13 16:32:33,719:INFO:Declaring custom model
2023-02-13 16:32:33,720:INFO:Bayesian Ridge Imported successfully
2023-02-13 16:32:33,721:INFO:Cross validation set to False
2023-02-13 16:32:33,721:INFO:Fitting Model
2023-02-13 16:32:33,738:INFO:BayesianRidge()
2023-02-13 16:32:33,738:INFO:create_model() successfully completed......................................
2023-02-13 16:32:33,917:INFO:_master_model_container: 19
2023-02-13 16:32:33,917:INFO:_display_container: 2
2023-02-13 16:32:33,918:INFO:BayesianRidge()
2023-02-13 16:32:33,919:INFO:compare_models() successfully completed......................................
2023-02-13 17:06:45,748:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 17:06:45,748:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 17:06:45,748:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 17:06:45,748:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 17:06:46,241:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-13 17:06:51,475:INFO:PyCaret RegressionExperiment
2023-02-13 17:06:51,475:INFO:Logging name: reg-default-name
2023-02-13 17:06:51,475:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 17:06:51,475:INFO:version 3.0.0.rc8
2023-02-13 17:06:51,475:INFO:Initializing setup()
2023-02-13 17:06:51,475:INFO:self.USI: 8d67
2023-02-13 17:06:51,475:INFO:self._variable_keys: {'fold_generator', 'X_train', 'y_train', 'idx', 'fold_shuffle_param', 'logging_param', 'target_param', '_ml_usecase', '_available_plots', 'fold_groups_param', 'y', 'html_param', 'gpu_param', 'seed', 'pipeline', 'data', 'exp_name_log', 'USI', 'gpu_n_jobs_param', 'transform_target_param', 'log_plots_param', 'n_jobs_param', 'memory', 'X', 'y_test', 'exp_id', 'X_test'}
2023-02-13 17:06:51,475:INFO:Checking environment
2023-02-13 17:06:51,475:INFO:python_version: 3.9.13
2023-02-13 17:06:51,475:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 17:06:51,475:INFO:machine: AMD64
2023-02-13 17:06:51,475:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 17:06:51,482:INFO:Memory: svmem(total=16805040128, available=5847015424, percent=65.2, used=10958024704, free=5847015424)
2023-02-13 17:06:51,483:INFO:Physical Core: 4
2023-02-13 17:06:51,483:INFO:Logical Core: 8
2023-02-13 17:06:51,483:INFO:Checking libraries
2023-02-13 17:06:51,483:INFO:System:
2023-02-13 17:06:51,483:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 17:06:51,483:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 17:06:51,483:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 17:06:51,483:INFO:PyCaret required dependencies:
2023-02-13 17:06:51,483:INFO:                 pip: 23.0
2023-02-13 17:06:51,484:INFO:          setuptools: 58.1.0
2023-02-13 17:06:51,484:INFO:             pycaret: 3.0.0rc8
2023-02-13 17:06:51,484:INFO:             IPython: 8.7.0
2023-02-13 17:06:51,484:INFO:          ipywidgets: 8.0.4
2023-02-13 17:06:51,484:INFO:                tqdm: 4.64.1
2023-02-13 17:06:51,484:INFO:               numpy: 1.22.1
2023-02-13 17:06:51,484:INFO:              pandas: 1.5.2
2023-02-13 17:06:51,484:INFO:              jinja2: 3.1.2
2023-02-13 17:06:51,484:INFO:               scipy: 1.5.4
2023-02-13 17:06:51,484:INFO:              joblib: 1.2.0
2023-02-13 17:06:51,484:INFO:             sklearn: 1.1.3
2023-02-13 17:06:51,484:INFO:                pyod: 1.0.7
2023-02-13 17:06:51,484:INFO:            imblearn: 0.10.1
2023-02-13 17:06:51,484:INFO:   category_encoders: 2.6.0
2023-02-13 17:06:51,484:INFO:            lightgbm: 3.3.4
2023-02-13 17:06:51,484:INFO:               numba: 0.56.4
2023-02-13 17:06:51,484:INFO:            requests: 2.28.1
2023-02-13 17:06:51,484:INFO:          matplotlib: 3.6.2
2023-02-13 17:06:51,484:INFO:          scikitplot: 0.3.7
2023-02-13 17:06:51,484:INFO:         yellowbrick: 1.5
2023-02-13 17:06:51,484:INFO:              plotly: 5.11.0
2023-02-13 17:06:51,484:INFO:             kaleido: 0.2.1
2023-02-13 17:06:51,484:INFO:         statsmodels: 0.13.5
2023-02-13 17:06:51,484:INFO:              sktime: 0.15.1
2023-02-13 17:06:51,484:INFO:               tbats: 1.1.2
2023-02-13 17:06:51,484:INFO:            pmdarima: 2.0.2
2023-02-13 17:06:51,484:INFO:              psutil: 5.9.4
2023-02-13 17:06:51,484:INFO:PyCaret optional dependencies:
2023-02-13 17:06:51,500:INFO:                shap: 0.41.0
2023-02-13 17:06:51,500:INFO:           interpret: 0.3.0
2023-02-13 17:06:51,500:INFO:                umap: Not installed
2023-02-13 17:06:51,500:INFO:    pandas_profiling: 3.6.2
2023-02-13 17:06:51,500:INFO:  explainerdashboard: Not installed
2023-02-13 17:06:51,500:INFO:             autoviz: Not installed
2023-02-13 17:06:51,501:INFO:           fairlearn: Not installed
2023-02-13 17:06:51,501:INFO:             xgboost: 1.7.3
2023-02-13 17:06:51,501:INFO:            catboost: Not installed
2023-02-13 17:06:51,501:INFO:              kmodes: Not installed
2023-02-13 17:06:51,501:INFO:             mlxtend: Not installed
2023-02-13 17:06:51,501:INFO:       statsforecast: Not installed
2023-02-13 17:06:51,501:INFO:        tune_sklearn: Not installed
2023-02-13 17:06:51,501:INFO:                 ray: Not installed
2023-02-13 17:06:51,501:INFO:            hyperopt: Not installed
2023-02-13 17:06:51,501:INFO:              optuna: Not installed
2023-02-13 17:06:51,501:INFO:               skopt: Not installed
2023-02-13 17:06:51,501:INFO:              mlflow: Not installed
2023-02-13 17:06:51,501:INFO:              gradio: Not installed
2023-02-13 17:06:51,501:INFO:             fastapi: Not installed
2023-02-13 17:06:51,501:INFO:             uvicorn: Not installed
2023-02-13 17:06:51,501:INFO:              m2cgen: Not installed
2023-02-13 17:06:51,501:INFO:           evidently: Not installed
2023-02-13 17:06:51,501:INFO:                nltk: 3.8
2023-02-13 17:06:51,501:INFO:            pyLDAvis: Not installed
2023-02-13 17:06:51,501:INFO:              gensim: Not installed
2023-02-13 17:06:51,501:INFO:               spacy: Not installed
2023-02-13 17:06:51,501:INFO:           wordcloud: 1.8.2.2
2023-02-13 17:06:51,501:INFO:            textblob: Not installed
2023-02-13 17:06:51,501:INFO:               fugue: Not installed
2023-02-13 17:06:51,501:INFO:           streamlit: 1.16.0
2023-02-13 17:06:51,501:INFO:             prophet: Not installed
2023-02-13 17:06:51,501:INFO:None
2023-02-13 17:06:51,501:INFO:Set up data.
2023-02-13 17:06:51,507:INFO:Set up train/test split.
2023-02-13 17:06:51,509:INFO:Set up index.
2023-02-13 17:06:51,509:INFO:Set up folding strategy.
2023-02-13 17:06:51,509:INFO:Assigning column types.
2023-02-13 17:06:51,513:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 17:06:51,514:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,519:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,523:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,594:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,634:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,634:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:51,695:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:51,695:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,700:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,704:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,764:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,810:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,810:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:51,814:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:51,814:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 17:06:51,818:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,823:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,875:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,916:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,917:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:51,919:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:51,924:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,929:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 17:06:51,992:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,051:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,051:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:52,055:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:52,055:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 17:06:52,066:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,134:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,192:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,192:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:52,197:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:52,207:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,273:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,321:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,322:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:52,324:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:52,324:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 17:06:52,399:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,446:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,447:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:52,449:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:52,567:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,608:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,609:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:52,612:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:52,612:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 17:06:52,690:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,730:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:52,732:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:52,813:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 17:06:52,857:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:52,859:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:52,859:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 17:06:52,990:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:52,993:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:53,094:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:53,098:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:53,099:INFO:Preparing preprocessing pipeline...
2023-02-13 17:06:53,100:INFO:Set up column name cleaning.
2023-02-13 17:06:53,100:INFO:Set up simple imputation.
2023-02-13 17:06:53,116:INFO:Finished creating preprocessing pipeline.
2023-02-13 17:06:53,119:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 17:06:53,119:INFO:Creating final display dataframe.
2023-02-13 17:06:53,233:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              8d67
2023-02-13 17:06:53,338:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:53,340:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:53,446:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 17:06:53,451:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 17:06:53,452:INFO:setup() successfully completed in 1.98s...............
2023-02-13 17:06:53,452:INFO:Initializing compare_models()
2023-02-13 17:06:53,452:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 17:06:53,452:INFO:Checking exceptions
2023-02-13 17:06:53,454:INFO:Preparing display monitor
2023-02-13 17:06:53,482:INFO:Initializing Linear Regression
2023-02-13 17:06:53,482:INFO:Total runtime is 0.0 minutes
2023-02-13 17:06:53,485:INFO:SubProcess create_model() called ==================================
2023-02-13 17:06:53,485:INFO:Initializing create_model()
2023-02-13 17:06:53,485:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:06:53,485:INFO:Checking exceptions
2023-02-13 17:06:53,485:INFO:Importing libraries
2023-02-13 17:06:53,486:INFO:Copying training dataset
2023-02-13 17:06:53,487:INFO:Defining folds
2023-02-13 17:06:53,487:INFO:Declaring metric variables
2023-02-13 17:06:53,491:INFO:Importing untrained model
2023-02-13 17:06:53,496:INFO:Linear Regression Imported successfully
2023-02-13 17:06:53,506:INFO:Starting cross validation
2023-02-13 17:06:53,516:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:06:58,326:INFO:Calculating mean and std
2023-02-13 17:06:58,327:INFO:Creating metrics dataframe
2023-02-13 17:06:58,330:INFO:Uploading results into container
2023-02-13 17:06:58,330:INFO:Uploading model into container now
2023-02-13 17:06:58,331:INFO:_master_model_container: 1
2023-02-13 17:06:58,331:INFO:_display_container: 2
2023-02-13 17:06:58,331:INFO:LinearRegression(n_jobs=-1)
2023-02-13 17:06:58,331:INFO:create_model() successfully completed......................................
2023-02-13 17:06:58,431:INFO:SubProcess create_model() end ==================================
2023-02-13 17:06:58,431:INFO:Creating metrics dataframe
2023-02-13 17:06:58,441:INFO:Initializing Lasso Regression
2023-02-13 17:06:58,441:INFO:Total runtime is 0.08265268007914225 minutes
2023-02-13 17:06:58,446:INFO:SubProcess create_model() called ==================================
2023-02-13 17:06:58,446:INFO:Initializing create_model()
2023-02-13 17:06:58,446:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:06:58,446:INFO:Checking exceptions
2023-02-13 17:06:58,446:INFO:Importing libraries
2023-02-13 17:06:58,446:INFO:Copying training dataset
2023-02-13 17:06:58,449:INFO:Defining folds
2023-02-13 17:06:58,449:INFO:Declaring metric variables
2023-02-13 17:06:58,454:INFO:Importing untrained model
2023-02-13 17:06:58,460:INFO:Lasso Regression Imported successfully
2023-02-13 17:06:58,468:INFO:Starting cross validation
2023-02-13 17:06:58,469:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:06:58,611:INFO:Calculating mean and std
2023-02-13 17:06:58,611:INFO:Creating metrics dataframe
2023-02-13 17:06:58,614:INFO:Uploading results into container
2023-02-13 17:06:58,615:INFO:Uploading model into container now
2023-02-13 17:06:58,615:INFO:_master_model_container: 2
2023-02-13 17:06:58,615:INFO:_display_container: 2
2023-02-13 17:06:58,615:INFO:Lasso(random_state=1)
2023-02-13 17:06:58,615:INFO:create_model() successfully completed......................................
2023-02-13 17:06:58,706:INFO:SubProcess create_model() end ==================================
2023-02-13 17:06:58,706:INFO:Creating metrics dataframe
2023-02-13 17:06:58,713:INFO:Initializing Ridge Regression
2023-02-13 17:06:58,713:INFO:Total runtime is 0.08718130985895793 minutes
2023-02-13 17:06:58,717:INFO:SubProcess create_model() called ==================================
2023-02-13 17:06:58,718:INFO:Initializing create_model()
2023-02-13 17:06:58,718:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:06:58,718:INFO:Checking exceptions
2023-02-13 17:06:58,718:INFO:Importing libraries
2023-02-13 17:06:58,718:INFO:Copying training dataset
2023-02-13 17:06:58,721:INFO:Defining folds
2023-02-13 17:06:58,722:INFO:Declaring metric variables
2023-02-13 17:06:58,727:INFO:Importing untrained model
2023-02-13 17:06:58,732:INFO:Ridge Regression Imported successfully
2023-02-13 17:06:58,741:INFO:Starting cross validation
2023-02-13 17:06:58,742:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:06:58,906:INFO:Calculating mean and std
2023-02-13 17:06:58,907:INFO:Creating metrics dataframe
2023-02-13 17:06:58,910:INFO:Uploading results into container
2023-02-13 17:06:58,910:INFO:Uploading model into container now
2023-02-13 17:06:58,910:INFO:_master_model_container: 3
2023-02-13 17:06:58,911:INFO:_display_container: 2
2023-02-13 17:06:58,911:INFO:Ridge(random_state=1)
2023-02-13 17:06:58,911:INFO:create_model() successfully completed......................................
2023-02-13 17:06:59,000:INFO:SubProcess create_model() end ==================================
2023-02-13 17:06:59,001:INFO:Creating metrics dataframe
2023-02-13 17:06:59,012:INFO:Initializing Elastic Net
2023-02-13 17:06:59,013:INFO:Total runtime is 0.09217245976130169 minutes
2023-02-13 17:06:59,016:INFO:SubProcess create_model() called ==================================
2023-02-13 17:06:59,017:INFO:Initializing create_model()
2023-02-13 17:06:59,017:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:06:59,017:INFO:Checking exceptions
2023-02-13 17:06:59,017:INFO:Importing libraries
2023-02-13 17:06:59,017:INFO:Copying training dataset
2023-02-13 17:06:59,020:INFO:Defining folds
2023-02-13 17:06:59,021:INFO:Declaring metric variables
2023-02-13 17:06:59,026:INFO:Importing untrained model
2023-02-13 17:06:59,031:INFO:Elastic Net Imported successfully
2023-02-13 17:06:59,038:INFO:Starting cross validation
2023-02-13 17:06:59,040:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:06:59,174:INFO:Calculating mean and std
2023-02-13 17:06:59,175:INFO:Creating metrics dataframe
2023-02-13 17:06:59,178:INFO:Uploading results into container
2023-02-13 17:06:59,178:INFO:Uploading model into container now
2023-02-13 17:06:59,180:INFO:_master_model_container: 4
2023-02-13 17:06:59,180:INFO:_display_container: 2
2023-02-13 17:06:59,180:INFO:ElasticNet(random_state=1)
2023-02-13 17:06:59,180:INFO:create_model() successfully completed......................................
2023-02-13 17:06:59,279:INFO:SubProcess create_model() end ==================================
2023-02-13 17:06:59,280:INFO:Creating metrics dataframe
2023-02-13 17:06:59,288:INFO:Initializing Least Angle Regression
2023-02-13 17:06:59,288:INFO:Total runtime is 0.09676563342412314 minutes
2023-02-13 17:06:59,292:INFO:SubProcess create_model() called ==================================
2023-02-13 17:06:59,293:INFO:Initializing create_model()
2023-02-13 17:06:59,293:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:06:59,293:INFO:Checking exceptions
2023-02-13 17:06:59,293:INFO:Importing libraries
2023-02-13 17:06:59,293:INFO:Copying training dataset
2023-02-13 17:06:59,297:INFO:Defining folds
2023-02-13 17:06:59,298:INFO:Declaring metric variables
2023-02-13 17:06:59,300:INFO:Importing untrained model
2023-02-13 17:06:59,304:INFO:Least Angle Regression Imported successfully
2023-02-13 17:06:59,314:INFO:Starting cross validation
2023-02-13 17:06:59,315:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:06:59,360:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,370:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,381:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,392:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,401:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,411:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,419:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,429:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,434:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,444:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,458:INFO:Calculating mean and std
2023-02-13 17:06:59,459:INFO:Creating metrics dataframe
2023-02-13 17:06:59,462:INFO:Uploading results into container
2023-02-13 17:06:59,462:INFO:Uploading model into container now
2023-02-13 17:06:59,462:INFO:_master_model_container: 5
2023-02-13 17:06:59,463:INFO:_display_container: 2
2023-02-13 17:06:59,463:INFO:Lars(random_state=1)
2023-02-13 17:06:59,463:INFO:create_model() successfully completed......................................
2023-02-13 17:06:59,544:INFO:SubProcess create_model() end ==================================
2023-02-13 17:06:59,544:INFO:Creating metrics dataframe
2023-02-13 17:06:59,555:INFO:Initializing Lasso Least Angle Regression
2023-02-13 17:06:59,555:INFO:Total runtime is 0.10121947526931764 minutes
2023-02-13 17:06:59,560:INFO:SubProcess create_model() called ==================================
2023-02-13 17:06:59,562:INFO:Initializing create_model()
2023-02-13 17:06:59,562:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:06:59,562:INFO:Checking exceptions
2023-02-13 17:06:59,562:INFO:Importing libraries
2023-02-13 17:06:59,562:INFO:Copying training dataset
2023-02-13 17:06:59,564:INFO:Defining folds
2023-02-13 17:06:59,565:INFO:Declaring metric variables
2023-02-13 17:06:59,569:INFO:Importing untrained model
2023-02-13 17:06:59,575:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 17:06:59,582:INFO:Starting cross validation
2023-02-13 17:06:59,584:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:06:59,636:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 17:06:59,646:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 17:06:59,658:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 17:06:59,672:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 17:06:59,677:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 17:06:59,687:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 17:06:59,698:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 17:06:59,703:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 17:06:59,712:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 17:06:59,722:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 17:06:59,734:INFO:Calculating mean and std
2023-02-13 17:06:59,734:INFO:Creating metrics dataframe
2023-02-13 17:06:59,739:INFO:Uploading results into container
2023-02-13 17:06:59,740:INFO:Uploading model into container now
2023-02-13 17:06:59,740:INFO:_master_model_container: 6
2023-02-13 17:06:59,740:INFO:_display_container: 2
2023-02-13 17:06:59,740:INFO:LassoLars(random_state=1)
2023-02-13 17:06:59,740:INFO:create_model() successfully completed......................................
2023-02-13 17:06:59,825:INFO:SubProcess create_model() end ==================================
2023-02-13 17:06:59,825:INFO:Creating metrics dataframe
2023-02-13 17:06:59,833:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 17:06:59,833:INFO:Total runtime is 0.10584152142206829 minutes
2023-02-13 17:06:59,835:INFO:SubProcess create_model() called ==================================
2023-02-13 17:06:59,835:INFO:Initializing create_model()
2023-02-13 17:06:59,835:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:06:59,835:INFO:Checking exceptions
2023-02-13 17:06:59,836:INFO:Importing libraries
2023-02-13 17:06:59,837:INFO:Copying training dataset
2023-02-13 17:06:59,841:INFO:Defining folds
2023-02-13 17:06:59,841:INFO:Declaring metric variables
2023-02-13 17:06:59,844:INFO:Importing untrained model
2023-02-13 17:06:59,850:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 17:06:59,862:INFO:Starting cross validation
2023-02-13 17:06:59,863:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:06:59,919:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,929:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,940:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,948:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,960:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,971:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,982:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:06:59,996:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:07:00,003:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:07:00,013:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 17:07:00,027:INFO:Calculating mean and std
2023-02-13 17:07:00,028:INFO:Creating metrics dataframe
2023-02-13 17:07:00,031:INFO:Uploading results into container
2023-02-13 17:07:00,032:INFO:Uploading model into container now
2023-02-13 17:07:00,032:INFO:_master_model_container: 7
2023-02-13 17:07:00,032:INFO:_display_container: 2
2023-02-13 17:07:00,032:INFO:OrthogonalMatchingPursuit()
2023-02-13 17:07:00,032:INFO:create_model() successfully completed......................................
2023-02-13 17:07:00,134:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:00,134:INFO:Creating metrics dataframe
2023-02-13 17:07:00,146:INFO:Initializing Bayesian Ridge
2023-02-13 17:07:00,146:INFO:Total runtime is 0.1110690752665202 minutes
2023-02-13 17:07:00,150:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:00,150:INFO:Initializing create_model()
2023-02-13 17:07:00,150:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:00,150:INFO:Checking exceptions
2023-02-13 17:07:00,151:INFO:Importing libraries
2023-02-13 17:07:00,151:INFO:Copying training dataset
2023-02-13 17:07:00,154:INFO:Defining folds
2023-02-13 17:07:00,154:INFO:Declaring metric variables
2023-02-13 17:07:00,158:INFO:Importing untrained model
2023-02-13 17:07:00,163:INFO:Bayesian Ridge Imported successfully
2023-02-13 17:07:00,169:INFO:Starting cross validation
2023-02-13 17:07:00,170:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:00,307:INFO:Calculating mean and std
2023-02-13 17:07:00,308:INFO:Creating metrics dataframe
2023-02-13 17:07:00,311:INFO:Uploading results into container
2023-02-13 17:07:00,311:INFO:Uploading model into container now
2023-02-13 17:07:00,311:INFO:_master_model_container: 8
2023-02-13 17:07:00,312:INFO:_display_container: 2
2023-02-13 17:07:00,312:INFO:BayesianRidge()
2023-02-13 17:07:00,312:INFO:create_model() successfully completed......................................
2023-02-13 17:07:00,415:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:00,415:INFO:Creating metrics dataframe
2023-02-13 17:07:00,430:INFO:Initializing Passive Aggressive Regressor
2023-02-13 17:07:00,430:INFO:Total runtime is 0.11580394109090171 minutes
2023-02-13 17:07:00,435:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:00,436:INFO:Initializing create_model()
2023-02-13 17:07:00,436:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:00,436:INFO:Checking exceptions
2023-02-13 17:07:00,436:INFO:Importing libraries
2023-02-13 17:07:00,437:INFO:Copying training dataset
2023-02-13 17:07:00,441:INFO:Defining folds
2023-02-13 17:07:00,442:INFO:Declaring metric variables
2023-02-13 17:07:00,445:INFO:Importing untrained model
2023-02-13 17:07:00,450:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 17:07:00,458:INFO:Starting cross validation
2023-02-13 17:07:00,459:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:00,643:INFO:Calculating mean and std
2023-02-13 17:07:00,644:INFO:Creating metrics dataframe
2023-02-13 17:07:00,646:INFO:Uploading results into container
2023-02-13 17:07:00,646:INFO:Uploading model into container now
2023-02-13 17:07:00,646:INFO:_master_model_container: 9
2023-02-13 17:07:00,646:INFO:_display_container: 2
2023-02-13 17:07:00,648:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 17:07:00,648:INFO:create_model() successfully completed......................................
2023-02-13 17:07:00,735:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:00,735:INFO:Creating metrics dataframe
2023-02-13 17:07:00,747:INFO:Initializing Huber Regressor
2023-02-13 17:07:00,748:INFO:Total runtime is 0.1210978945096334 minutes
2023-02-13 17:07:00,751:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:00,751:INFO:Initializing create_model()
2023-02-13 17:07:00,751:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:00,751:INFO:Checking exceptions
2023-02-13 17:07:00,751:INFO:Importing libraries
2023-02-13 17:07:00,751:INFO:Copying training dataset
2023-02-13 17:07:00,756:INFO:Defining folds
2023-02-13 17:07:00,756:INFO:Declaring metric variables
2023-02-13 17:07:00,763:INFO:Importing untrained model
2023-02-13 17:07:00,767:INFO:Huber Regressor Imported successfully
2023-02-13 17:07:00,783:INFO:Starting cross validation
2023-02-13 17:07:00,791:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:00,877:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 17:07:00,880:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 17:07:00,896:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 17:07:00,915:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 17:07:00,952:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 17:07:00,958:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 17:07:00,958:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 17:07:00,975:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 17:07:00,975:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 17:07:00,985:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 17:07:01,000:INFO:Calculating mean and std
2023-02-13 17:07:01,001:INFO:Creating metrics dataframe
2023-02-13 17:07:01,004:INFO:Uploading results into container
2023-02-13 17:07:01,005:INFO:Uploading model into container now
2023-02-13 17:07:01,007:INFO:_master_model_container: 10
2023-02-13 17:07:01,007:INFO:_display_container: 2
2023-02-13 17:07:01,007:INFO:HuberRegressor()
2023-02-13 17:07:01,007:INFO:create_model() successfully completed......................................
2023-02-13 17:07:01,100:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:01,100:INFO:Creating metrics dataframe
2023-02-13 17:07:01,113:INFO:Initializing K Neighbors Regressor
2023-02-13 17:07:01,113:INFO:Total runtime is 0.12718693017959598 minutes
2023-02-13 17:07:01,118:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:01,118:INFO:Initializing create_model()
2023-02-13 17:07:01,118:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:01,118:INFO:Checking exceptions
2023-02-13 17:07:01,119:INFO:Importing libraries
2023-02-13 17:07:01,119:INFO:Copying training dataset
2023-02-13 17:07:01,124:INFO:Defining folds
2023-02-13 17:07:01,124:INFO:Declaring metric variables
2023-02-13 17:07:01,130:INFO:Importing untrained model
2023-02-13 17:07:01,135:INFO:K Neighbors Regressor Imported successfully
2023-02-13 17:07:01,145:INFO:Starting cross validation
2023-02-13 17:07:01,147:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:01,323:INFO:Calculating mean and std
2023-02-13 17:07:01,326:INFO:Creating metrics dataframe
2023-02-13 17:07:01,329:INFO:Uploading results into container
2023-02-13 17:07:01,329:INFO:Uploading model into container now
2023-02-13 17:07:01,330:INFO:_master_model_container: 11
2023-02-13 17:07:01,330:INFO:_display_container: 2
2023-02-13 17:07:01,330:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 17:07:01,330:INFO:create_model() successfully completed......................................
2023-02-13 17:07:01,425:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:01,425:INFO:Creating metrics dataframe
2023-02-13 17:07:01,436:INFO:Initializing Decision Tree Regressor
2023-02-13 17:07:01,437:INFO:Total runtime is 0.13258537451426192 minutes
2023-02-13 17:07:01,442:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:01,442:INFO:Initializing create_model()
2023-02-13 17:07:01,442:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:01,442:INFO:Checking exceptions
2023-02-13 17:07:01,442:INFO:Importing libraries
2023-02-13 17:07:01,442:INFO:Copying training dataset
2023-02-13 17:07:01,447:INFO:Defining folds
2023-02-13 17:07:01,447:INFO:Declaring metric variables
2023-02-13 17:07:01,451:INFO:Importing untrained model
2023-02-13 17:07:01,457:INFO:Decision Tree Regressor Imported successfully
2023-02-13 17:07:01,465:INFO:Starting cross validation
2023-02-13 17:07:01,466:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:01,617:INFO:Calculating mean and std
2023-02-13 17:07:01,618:INFO:Creating metrics dataframe
2023-02-13 17:07:01,623:INFO:Uploading results into container
2023-02-13 17:07:01,624:INFO:Uploading model into container now
2023-02-13 17:07:01,624:INFO:_master_model_container: 12
2023-02-13 17:07:01,624:INFO:_display_container: 2
2023-02-13 17:07:01,625:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 17:07:01,625:INFO:create_model() successfully completed......................................
2023-02-13 17:07:01,745:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:01,745:INFO:Creating metrics dataframe
2023-02-13 17:07:01,755:INFO:Initializing Random Forest Regressor
2023-02-13 17:07:01,755:INFO:Total runtime is 0.1378852725028992 minutes
2023-02-13 17:07:01,759:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:01,759:INFO:Initializing create_model()
2023-02-13 17:07:01,759:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:01,759:INFO:Checking exceptions
2023-02-13 17:07:01,759:INFO:Importing libraries
2023-02-13 17:07:01,759:INFO:Copying training dataset
2023-02-13 17:07:01,762:INFO:Defining folds
2023-02-13 17:07:01,762:INFO:Declaring metric variables
2023-02-13 17:07:01,765:INFO:Importing untrained model
2023-02-13 17:07:01,769:INFO:Random Forest Regressor Imported successfully
2023-02-13 17:07:01,776:INFO:Starting cross validation
2023-02-13 17:07:01,777:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:02,351:INFO:Calculating mean and std
2023-02-13 17:07:02,352:INFO:Creating metrics dataframe
2023-02-13 17:07:02,355:INFO:Uploading results into container
2023-02-13 17:07:02,356:INFO:Uploading model into container now
2023-02-13 17:07:02,356:INFO:_master_model_container: 13
2023-02-13 17:07:02,356:INFO:_display_container: 2
2023-02-13 17:07:02,357:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 17:07:02,357:INFO:create_model() successfully completed......................................
2023-02-13 17:07:02,465:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:02,465:INFO:Creating metrics dataframe
2023-02-13 17:07:02,476:INFO:Initializing Extra Trees Regressor
2023-02-13 17:07:02,477:INFO:Total runtime is 0.14992094039916995 minutes
2023-02-13 17:07:02,480:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:02,481:INFO:Initializing create_model()
2023-02-13 17:07:02,481:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:02,481:INFO:Checking exceptions
2023-02-13 17:07:02,481:INFO:Importing libraries
2023-02-13 17:07:02,481:INFO:Copying training dataset
2023-02-13 17:07:02,485:INFO:Defining folds
2023-02-13 17:07:02,485:INFO:Declaring metric variables
2023-02-13 17:07:02,490:INFO:Importing untrained model
2023-02-13 17:07:02,494:INFO:Extra Trees Regressor Imported successfully
2023-02-13 17:07:02,503:INFO:Starting cross validation
2023-02-13 17:07:02,503:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:02,960:INFO:Calculating mean and std
2023-02-13 17:07:02,961:INFO:Creating metrics dataframe
2023-02-13 17:07:02,964:INFO:Uploading results into container
2023-02-13 17:07:02,965:INFO:Uploading model into container now
2023-02-13 17:07:02,965:INFO:_master_model_container: 14
2023-02-13 17:07:02,965:INFO:_display_container: 2
2023-02-13 17:07:02,966:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 17:07:02,966:INFO:create_model() successfully completed......................................
2023-02-13 17:07:03,049:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:03,050:INFO:Creating metrics dataframe
2023-02-13 17:07:03,061:INFO:Initializing AdaBoost Regressor
2023-02-13 17:07:03,061:INFO:Total runtime is 0.15965081453323368 minutes
2023-02-13 17:07:03,064:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:03,064:INFO:Initializing create_model()
2023-02-13 17:07:03,064:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:03,065:INFO:Checking exceptions
2023-02-13 17:07:03,065:INFO:Importing libraries
2023-02-13 17:07:03,065:INFO:Copying training dataset
2023-02-13 17:07:03,068:INFO:Defining folds
2023-02-13 17:07:03,069:INFO:Declaring metric variables
2023-02-13 17:07:03,073:INFO:Importing untrained model
2023-02-13 17:07:03,077:INFO:AdaBoost Regressor Imported successfully
2023-02-13 17:07:03,089:INFO:Starting cross validation
2023-02-13 17:07:03,090:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:03,359:INFO:Calculating mean and std
2023-02-13 17:07:03,359:INFO:Creating metrics dataframe
2023-02-13 17:07:03,362:INFO:Uploading results into container
2023-02-13 17:07:03,362:INFO:Uploading model into container now
2023-02-13 17:07:03,363:INFO:_master_model_container: 15
2023-02-13 17:07:03,363:INFO:_display_container: 2
2023-02-13 17:07:03,363:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 17:07:03,363:INFO:create_model() successfully completed......................................
2023-02-13 17:07:03,450:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:03,450:INFO:Creating metrics dataframe
2023-02-13 17:07:03,463:INFO:Initializing Gradient Boosting Regressor
2023-02-13 17:07:03,463:INFO:Total runtime is 0.16634784539540612 minutes
2023-02-13 17:07:03,466:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:03,466:INFO:Initializing create_model()
2023-02-13 17:07:03,466:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:03,466:INFO:Checking exceptions
2023-02-13 17:07:03,466:INFO:Importing libraries
2023-02-13 17:07:03,467:INFO:Copying training dataset
2023-02-13 17:07:03,471:INFO:Defining folds
2023-02-13 17:07:03,472:INFO:Declaring metric variables
2023-02-13 17:07:03,474:INFO:Importing untrained model
2023-02-13 17:07:03,479:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 17:07:03,485:INFO:Starting cross validation
2023-02-13 17:07:03,487:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:03,684:INFO:Calculating mean and std
2023-02-13 17:07:03,686:INFO:Creating metrics dataframe
2023-02-13 17:07:03,689:INFO:Uploading results into container
2023-02-13 17:07:03,690:INFO:Uploading model into container now
2023-02-13 17:07:03,690:INFO:_master_model_container: 16
2023-02-13 17:07:03,690:INFO:_display_container: 2
2023-02-13 17:07:03,691:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 17:07:03,691:INFO:create_model() successfully completed......................................
2023-02-13 17:07:03,780:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:03,782:INFO:Creating metrics dataframe
2023-02-13 17:07:03,796:INFO:Initializing Extreme Gradient Boosting
2023-02-13 17:07:03,796:INFO:Total runtime is 0.17190100749333703 minutes
2023-02-13 17:07:03,799:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:03,799:INFO:Initializing create_model()
2023-02-13 17:07:03,799:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:03,799:INFO:Checking exceptions
2023-02-13 17:07:03,799:INFO:Importing libraries
2023-02-13 17:07:03,801:INFO:Copying training dataset
2023-02-13 17:07:03,805:INFO:Defining folds
2023-02-13 17:07:03,805:INFO:Declaring metric variables
2023-02-13 17:07:03,808:INFO:Importing untrained model
2023-02-13 17:07:03,815:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 17:07:03,824:INFO:Starting cross validation
2023-02-13 17:07:03,825:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:04,093:INFO:Calculating mean and std
2023-02-13 17:07:04,094:INFO:Creating metrics dataframe
2023-02-13 17:07:04,097:INFO:Uploading results into container
2023-02-13 17:07:04,098:INFO:Uploading model into container now
2023-02-13 17:07:04,098:INFO:_master_model_container: 17
2023-02-13 17:07:04,098:INFO:_display_container: 2
2023-02-13 17:07:04,099:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 17:07:04,099:INFO:create_model() successfully completed......................................
2023-02-13 17:07:04,181:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:04,181:INFO:Creating metrics dataframe
2023-02-13 17:07:04,195:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 17:07:04,195:INFO:Total runtime is 0.1785389661788941 minutes
2023-02-13 17:07:04,198:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:04,199:INFO:Initializing create_model()
2023-02-13 17:07:04,199:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:04,199:INFO:Checking exceptions
2023-02-13 17:07:04,199:INFO:Importing libraries
2023-02-13 17:07:04,199:INFO:Copying training dataset
2023-02-13 17:07:04,203:INFO:Defining folds
2023-02-13 17:07:04,203:INFO:Declaring metric variables
2023-02-13 17:07:04,206:INFO:Importing untrained model
2023-02-13 17:07:04,210:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 17:07:04,218:INFO:Starting cross validation
2023-02-13 17:07:04,219:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:04,420:INFO:Calculating mean and std
2023-02-13 17:07:04,421:INFO:Creating metrics dataframe
2023-02-13 17:07:04,425:INFO:Uploading results into container
2023-02-13 17:07:04,426:INFO:Uploading model into container now
2023-02-13 17:07:04,426:INFO:_master_model_container: 18
2023-02-13 17:07:04,426:INFO:_display_container: 2
2023-02-13 17:07:04,427:INFO:LGBMRegressor(random_state=1)
2023-02-13 17:07:04,427:INFO:create_model() successfully completed......................................
2023-02-13 17:07:04,545:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:04,545:INFO:Creating metrics dataframe
2023-02-13 17:07:04,560:INFO:Initializing Dummy Regressor
2023-02-13 17:07:04,560:INFO:Total runtime is 0.1846286773681641 minutes
2023-02-13 17:07:04,563:INFO:SubProcess create_model() called ==================================
2023-02-13 17:07:04,564:INFO:Initializing create_model()
2023-02-13 17:07:04,564:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217F023F970>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:04,564:INFO:Checking exceptions
2023-02-13 17:07:04,564:INFO:Importing libraries
2023-02-13 17:07:04,564:INFO:Copying training dataset
2023-02-13 17:07:04,568:INFO:Defining folds
2023-02-13 17:07:04,569:INFO:Declaring metric variables
2023-02-13 17:07:04,573:INFO:Importing untrained model
2023-02-13 17:07:04,578:INFO:Dummy Regressor Imported successfully
2023-02-13 17:07:04,586:INFO:Starting cross validation
2023-02-13 17:07:04,587:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 17:07:04,724:INFO:Calculating mean and std
2023-02-13 17:07:04,725:INFO:Creating metrics dataframe
2023-02-13 17:07:04,728:INFO:Uploading results into container
2023-02-13 17:07:04,728:INFO:Uploading model into container now
2023-02-13 17:07:04,730:INFO:_master_model_container: 19
2023-02-13 17:07:04,730:INFO:_display_container: 2
2023-02-13 17:07:04,730:INFO:DummyRegressor()
2023-02-13 17:07:04,730:INFO:create_model() successfully completed......................................
2023-02-13 17:07:04,822:INFO:SubProcess create_model() end ==================================
2023-02-13 17:07:04,823:INFO:Creating metrics dataframe
2023-02-13 17:07:04,842:INFO:Initializing create_model()
2023-02-13 17:07:04,842:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217EF6710A0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 17:07:04,843:INFO:Checking exceptions
2023-02-13 17:07:04,844:INFO:Importing libraries
2023-02-13 17:07:04,844:INFO:Copying training dataset
2023-02-13 17:07:04,847:INFO:Defining folds
2023-02-13 17:07:04,847:INFO:Declaring metric variables
2023-02-13 17:07:04,847:INFO:Importing untrained model
2023-02-13 17:07:04,847:INFO:Declaring custom model
2023-02-13 17:07:04,847:INFO:Bayesian Ridge Imported successfully
2023-02-13 17:07:04,848:INFO:Cross validation set to False
2023-02-13 17:07:04,848:INFO:Fitting Model
2023-02-13 17:07:04,865:INFO:BayesianRidge()
2023-02-13 17:07:04,865:INFO:create_model() successfully completed......................................
2023-02-13 17:07:04,997:INFO:_master_model_container: 19
2023-02-13 17:07:04,997:INFO:_display_container: 2
2023-02-13 17:07:04,997:INFO:BayesianRidge()
2023-02-13 17:07:04,997:INFO:compare_models() successfully completed......................................
2023-02-13 21:17:29,536:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 21:17:29,537:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 21:17:29,537:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 21:17:29,537:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-13 21:17:30,238:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-13 21:17:35,374:INFO:PyCaret RegressionExperiment
2023-02-13 21:17:35,374:INFO:Logging name: reg-default-name
2023-02-13 21:17:35,375:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 21:17:35,375:INFO:version 3.0.0.rc8
2023-02-13 21:17:35,375:INFO:Initializing setup()
2023-02-13 21:17:35,375:INFO:self.USI: ee95
2023-02-13 21:17:35,375:INFO:self._variable_keys: {'seed', 'transform_target_param', 'data', 'exp_id', 'html_param', '_ml_usecase', 'log_plots_param', 'gpu_param', 'y_train', 'exp_name_log', 'USI', 'target_param', 'fold_generator', 'X_train', 'fold_groups_param', 'X', 'gpu_n_jobs_param', '_available_plots', 'X_test', 'pipeline', 'fold_shuffle_param', 'idx', 'y_test', 'n_jobs_param', 'y', 'memory', 'logging_param'}
2023-02-13 21:17:35,375:INFO:Checking environment
2023-02-13 21:17:35,375:INFO:python_version: 3.9.13
2023-02-13 21:17:35,375:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 21:17:35,376:INFO:machine: AMD64
2023-02-13 21:17:35,376:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 21:17:35,381:INFO:Memory: svmem(total=16805040128, available=7663288320, percent=54.4, used=9141751808, free=7663288320)
2023-02-13 21:17:35,382:INFO:Physical Core: 4
2023-02-13 21:17:35,382:INFO:Logical Core: 8
2023-02-13 21:17:35,382:INFO:Checking libraries
2023-02-13 21:17:35,382:INFO:System:
2023-02-13 21:17:35,382:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 21:17:35,382:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 21:17:35,382:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 21:17:35,382:INFO:PyCaret required dependencies:
2023-02-13 21:17:35,382:INFO:                 pip: 23.0
2023-02-13 21:17:35,382:INFO:          setuptools: 58.1.0
2023-02-13 21:17:35,382:INFO:             pycaret: 3.0.0rc8
2023-02-13 21:17:35,382:INFO:             IPython: 8.7.0
2023-02-13 21:17:35,383:INFO:          ipywidgets: 8.0.4
2023-02-13 21:17:35,383:INFO:                tqdm: 4.64.1
2023-02-13 21:17:35,383:INFO:               numpy: 1.22.1
2023-02-13 21:17:35,383:INFO:              pandas: 1.5.2
2023-02-13 21:17:35,383:INFO:              jinja2: 3.1.2
2023-02-13 21:17:35,383:INFO:               scipy: 1.5.4
2023-02-13 21:17:35,383:INFO:              joblib: 1.2.0
2023-02-13 21:17:35,383:INFO:             sklearn: 1.1.3
2023-02-13 21:17:35,383:INFO:                pyod: 1.0.7
2023-02-13 21:17:35,383:INFO:            imblearn: 0.10.1
2023-02-13 21:17:35,383:INFO:   category_encoders: 2.6.0
2023-02-13 21:17:35,383:INFO:            lightgbm: 3.3.4
2023-02-13 21:17:35,383:INFO:               numba: 0.56.4
2023-02-13 21:17:35,383:INFO:            requests: 2.28.1
2023-02-13 21:17:35,383:INFO:          matplotlib: 3.6.2
2023-02-13 21:17:35,383:INFO:          scikitplot: 0.3.7
2023-02-13 21:17:35,383:INFO:         yellowbrick: 1.5
2023-02-13 21:17:35,383:INFO:              plotly: 5.11.0
2023-02-13 21:17:35,383:INFO:             kaleido: 0.2.1
2023-02-13 21:17:35,384:INFO:         statsmodels: 0.13.5
2023-02-13 21:17:35,384:INFO:              sktime: 0.15.1
2023-02-13 21:17:35,384:INFO:               tbats: 1.1.2
2023-02-13 21:17:35,384:INFO:            pmdarima: 2.0.2
2023-02-13 21:17:35,384:INFO:              psutil: 5.9.4
2023-02-13 21:17:35,384:INFO:PyCaret optional dependencies:
2023-02-13 21:17:35,405:INFO:                shap: 0.41.0
2023-02-13 21:17:35,405:INFO:           interpret: 0.3.0
2023-02-13 21:17:35,405:INFO:                umap: Not installed
2023-02-13 21:17:35,405:INFO:    pandas_profiling: 3.6.2
2023-02-13 21:17:35,405:INFO:  explainerdashboard: Not installed
2023-02-13 21:17:35,405:INFO:             autoviz: Not installed
2023-02-13 21:17:35,405:INFO:           fairlearn: Not installed
2023-02-13 21:17:35,405:INFO:             xgboost: 1.7.3
2023-02-13 21:17:35,405:INFO:            catboost: Not installed
2023-02-13 21:17:35,406:INFO:              kmodes: Not installed
2023-02-13 21:17:35,406:INFO:             mlxtend: Not installed
2023-02-13 21:17:35,406:INFO:       statsforecast: Not installed
2023-02-13 21:17:35,406:INFO:        tune_sklearn: Not installed
2023-02-13 21:17:35,406:INFO:                 ray: Not installed
2023-02-13 21:17:35,406:INFO:            hyperopt: Not installed
2023-02-13 21:17:35,406:INFO:              optuna: Not installed
2023-02-13 21:17:35,406:INFO:               skopt: Not installed
2023-02-13 21:17:35,406:INFO:              mlflow: Not installed
2023-02-13 21:17:35,406:INFO:              gradio: Not installed
2023-02-13 21:17:35,406:INFO:             fastapi: Not installed
2023-02-13 21:17:35,406:INFO:             uvicorn: Not installed
2023-02-13 21:17:35,406:INFO:              m2cgen: Not installed
2023-02-13 21:17:35,406:INFO:           evidently: Not installed
2023-02-13 21:17:35,406:INFO:                nltk: 3.8
2023-02-13 21:17:35,406:INFO:            pyLDAvis: Not installed
2023-02-13 21:17:35,406:INFO:              gensim: Not installed
2023-02-13 21:17:35,406:INFO:               spacy: Not installed
2023-02-13 21:17:35,406:INFO:           wordcloud: 1.8.2.2
2023-02-13 21:17:35,406:INFO:            textblob: Not installed
2023-02-13 21:17:35,406:INFO:               fugue: Not installed
2023-02-13 21:17:35,406:INFO:           streamlit: 1.16.0
2023-02-13 21:17:35,406:INFO:             prophet: Not installed
2023-02-13 21:17:35,406:INFO:None
2023-02-13 21:17:35,406:INFO:Set up data.
2023-02-13 21:17:35,413:INFO:Set up train/test split.
2023-02-13 21:17:35,416:INFO:Set up index.
2023-02-13 21:17:35,416:INFO:Set up folding strategy.
2023-02-13 21:17:35,416:INFO:Assigning column types.
2023-02-13 21:17:35,419:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 21:17:35,420:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,426:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,431:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,483:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,520:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,521:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:35,635:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:35,636:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,639:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,643:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,687:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,720:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,721:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:35,723:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:35,723:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 21:17:35,726:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,730:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,775:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,810:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,810:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:35,813:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:35,816:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,820:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,865:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,901:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,902:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:35,904:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:35,904:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 21:17:35,911:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,957:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,992:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:35,992:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:35,994:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:36,002:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:36,047:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:36,083:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:36,083:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:36,085:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:36,085:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 21:17:36,140:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:36,177:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:36,178:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:36,180:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:36,232:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:36,268:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:36,269:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:36,271:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:36,271:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 21:17:36,323:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:36,360:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:36,361:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:36,448:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:36,489:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:36,492:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:36,493:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 21:17:36,600:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:36,600:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:36,710:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:36,732:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:36,741:INFO:Preparing preprocessing pipeline...
2023-02-13 21:17:36,741:INFO:Set up column name cleaning.
2023-02-13 21:17:36,741:INFO:Set up simple imputation.
2023-02-13 21:17:36,797:INFO:Finished creating preprocessing pipeline.
2023-02-13 21:17:36,805:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 21:17:36,805:INFO:Creating final display dataframe.
2023-02-13 21:17:36,980:INFO:Setup _display_container:                     Description             Value
0                    Session id                 2
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              ee95
2023-02-13 21:17:37,122:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:37,123:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:37,216:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:37,216:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:37,216:INFO:setup() successfully completed in 1.84s...............
2023-02-13 21:17:37,216:INFO:Initializing compare_models()
2023-02-13 21:17:37,216:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 21:17:37,216:INFO:Checking exceptions
2023-02-13 21:17:37,216:INFO:Preparing display monitor
2023-02-13 21:17:37,249:INFO:Initializing Linear Regression
2023-02-13 21:17:37,251:INFO:Total runtime is 3.5595893859863284e-05 minutes
2023-02-13 21:17:37,252:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:37,252:INFO:Initializing create_model()
2023-02-13 21:17:37,252:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:37,255:INFO:Checking exceptions
2023-02-13 21:17:37,255:INFO:Importing libraries
2023-02-13 21:17:37,255:INFO:Copying training dataset
2023-02-13 21:17:37,256:INFO:Defining folds
2023-02-13 21:17:37,256:INFO:Declaring metric variables
2023-02-13 21:17:37,258:INFO:Importing untrained model
2023-02-13 21:17:37,264:INFO:Linear Regression Imported successfully
2023-02-13 21:17:37,273:INFO:Starting cross validation
2023-02-13 21:17:37,291:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:41,695:INFO:Calculating mean and std
2023-02-13 21:17:41,695:INFO:Creating metrics dataframe
2023-02-13 21:17:41,695:INFO:Uploading results into container
2023-02-13 21:17:41,695:INFO:Uploading model into container now
2023-02-13 21:17:41,695:INFO:_master_model_container: 1
2023-02-13 21:17:41,695:INFO:_display_container: 2
2023-02-13 21:17:41,695:INFO:LinearRegression(n_jobs=-1)
2023-02-13 21:17:41,695:INFO:create_model() successfully completed......................................
2023-02-13 21:17:41,784:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:41,784:INFO:Creating metrics dataframe
2023-02-13 21:17:41,791:INFO:Initializing Lasso Regression
2023-02-13 21:17:41,791:INFO:Total runtime is 0.07570993502934774 minutes
2023-02-13 21:17:41,794:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:41,794:INFO:Initializing create_model()
2023-02-13 21:17:41,794:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:41,794:INFO:Checking exceptions
2023-02-13 21:17:41,794:INFO:Importing libraries
2023-02-13 21:17:41,794:INFO:Copying training dataset
2023-02-13 21:17:41,797:INFO:Defining folds
2023-02-13 21:17:41,797:INFO:Declaring metric variables
2023-02-13 21:17:41,801:INFO:Importing untrained model
2023-02-13 21:17:41,804:INFO:Lasso Regression Imported successfully
2023-02-13 21:17:41,810:INFO:Starting cross validation
2023-02-13 21:17:41,811:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:41,947:INFO:Calculating mean and std
2023-02-13 21:17:41,948:INFO:Creating metrics dataframe
2023-02-13 21:17:41,951:INFO:Uploading results into container
2023-02-13 21:17:41,951:INFO:Uploading model into container now
2023-02-13 21:17:41,951:INFO:_master_model_container: 2
2023-02-13 21:17:41,951:INFO:_display_container: 2
2023-02-13 21:17:41,952:INFO:Lasso(random_state=2)
2023-02-13 21:17:41,952:INFO:create_model() successfully completed......................................
2023-02-13 21:17:42,027:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:42,027:INFO:Creating metrics dataframe
2023-02-13 21:17:42,034:INFO:Initializing Ridge Regression
2023-02-13 21:17:42,034:INFO:Total runtime is 0.07974791924158732 minutes
2023-02-13 21:17:42,036:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:42,037:INFO:Initializing create_model()
2023-02-13 21:17:42,037:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:42,037:INFO:Checking exceptions
2023-02-13 21:17:42,037:INFO:Importing libraries
2023-02-13 21:17:42,037:INFO:Copying training dataset
2023-02-13 21:17:42,037:INFO:Defining folds
2023-02-13 21:17:42,037:INFO:Declaring metric variables
2023-02-13 21:17:42,040:INFO:Importing untrained model
2023-02-13 21:17:42,040:INFO:Ridge Regression Imported successfully
2023-02-13 21:17:42,049:INFO:Starting cross validation
2023-02-13 21:17:42,051:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:42,190:INFO:Calculating mean and std
2023-02-13 21:17:42,191:INFO:Creating metrics dataframe
2023-02-13 21:17:42,194:INFO:Uploading results into container
2023-02-13 21:17:42,195:INFO:Uploading model into container now
2023-02-13 21:17:42,195:INFO:_master_model_container: 3
2023-02-13 21:17:42,195:INFO:_display_container: 2
2023-02-13 21:17:42,196:INFO:Ridge(random_state=2)
2023-02-13 21:17:42,196:INFO:create_model() successfully completed......................................
2023-02-13 21:17:42,268:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:42,268:INFO:Creating metrics dataframe
2023-02-13 21:17:42,276:INFO:Initializing Elastic Net
2023-02-13 21:17:42,276:INFO:Total runtime is 0.08378191391626993 minutes
2023-02-13 21:17:42,278:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:42,278:INFO:Initializing create_model()
2023-02-13 21:17:42,279:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:42,279:INFO:Checking exceptions
2023-02-13 21:17:42,279:INFO:Importing libraries
2023-02-13 21:17:42,279:INFO:Copying training dataset
2023-02-13 21:17:42,281:INFO:Defining folds
2023-02-13 21:17:42,281:INFO:Declaring metric variables
2023-02-13 21:17:42,283:INFO:Importing untrained model
2023-02-13 21:17:42,286:INFO:Elastic Net Imported successfully
2023-02-13 21:17:42,293:INFO:Starting cross validation
2023-02-13 21:17:42,294:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:42,410:INFO:Calculating mean and std
2023-02-13 21:17:42,410:INFO:Creating metrics dataframe
2023-02-13 21:17:42,412:INFO:Uploading results into container
2023-02-13 21:17:42,413:INFO:Uploading model into container now
2023-02-13 21:17:42,413:INFO:_master_model_container: 4
2023-02-13 21:17:42,413:INFO:_display_container: 2
2023-02-13 21:17:42,413:INFO:ElasticNet(random_state=2)
2023-02-13 21:17:42,414:INFO:create_model() successfully completed......................................
2023-02-13 21:17:42,489:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:42,489:INFO:Creating metrics dataframe
2023-02-13 21:17:42,497:INFO:Initializing Least Angle Regression
2023-02-13 21:17:42,497:INFO:Total runtime is 0.08746489286422729 minutes
2023-02-13 21:17:42,498:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:42,498:INFO:Initializing create_model()
2023-02-13 21:17:42,499:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:42,499:INFO:Checking exceptions
2023-02-13 21:17:42,499:INFO:Importing libraries
2023-02-13 21:17:42,499:INFO:Copying training dataset
2023-02-13 21:17:42,504:INFO:Defining folds
2023-02-13 21:17:42,504:INFO:Declaring metric variables
2023-02-13 21:17:42,506:INFO:Importing untrained model
2023-02-13 21:17:42,509:INFO:Least Angle Regression Imported successfully
2023-02-13 21:17:42,515:INFO:Starting cross validation
2023-02-13 21:17:42,515:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:42,551:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:42,560:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:42,568:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:42,579:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:42,589:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:42,600:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:42,608:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:42,617:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:42,624:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:42,631:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:42,644:INFO:Calculating mean and std
2023-02-13 21:17:42,644:INFO:Creating metrics dataframe
2023-02-13 21:17:42,647:INFO:Uploading results into container
2023-02-13 21:17:42,647:INFO:Uploading model into container now
2023-02-13 21:17:42,648:INFO:_master_model_container: 5
2023-02-13 21:17:42,648:INFO:_display_container: 2
2023-02-13 21:17:42,648:INFO:Lars(random_state=2)
2023-02-13 21:17:42,648:INFO:create_model() successfully completed......................................
2023-02-13 21:17:42,722:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:42,722:INFO:Creating metrics dataframe
2023-02-13 21:17:42,729:INFO:Initializing Lasso Least Angle Regression
2023-02-13 21:17:42,729:INFO:Total runtime is 0.09134069283803303 minutes
2023-02-13 21:17:42,732:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:42,732:INFO:Initializing create_model()
2023-02-13 21:17:42,732:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:42,732:INFO:Checking exceptions
2023-02-13 21:17:42,732:INFO:Importing libraries
2023-02-13 21:17:42,732:INFO:Copying training dataset
2023-02-13 21:17:42,734:INFO:Defining folds
2023-02-13 21:17:42,734:INFO:Declaring metric variables
2023-02-13 21:17:42,738:INFO:Importing untrained model
2023-02-13 21:17:42,741:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 21:17:42,746:INFO:Starting cross validation
2023-02-13 21:17:42,747:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:42,781:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:42,790:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:42,798:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:42,808:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:42,813:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:42,823:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:42,832:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:42,841:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:42,848:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:42,855:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:42,867:INFO:Calculating mean and std
2023-02-13 21:17:42,868:INFO:Creating metrics dataframe
2023-02-13 21:17:42,870:INFO:Uploading results into container
2023-02-13 21:17:42,871:INFO:Uploading model into container now
2023-02-13 21:17:42,872:INFO:_master_model_container: 6
2023-02-13 21:17:42,872:INFO:_display_container: 2
2023-02-13 21:17:42,872:INFO:LassoLars(random_state=2)
2023-02-13 21:17:42,872:INFO:create_model() successfully completed......................................
2023-02-13 21:17:42,946:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:42,946:INFO:Creating metrics dataframe
2023-02-13 21:17:42,954:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 21:17:42,954:INFO:Total runtime is 0.09508397181828816 minutes
2023-02-13 21:17:42,957:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:42,957:INFO:Initializing create_model()
2023-02-13 21:17:42,957:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:42,957:INFO:Checking exceptions
2023-02-13 21:17:42,957:INFO:Importing libraries
2023-02-13 21:17:42,957:INFO:Copying training dataset
2023-02-13 21:17:42,959:INFO:Defining folds
2023-02-13 21:17:42,959:INFO:Declaring metric variables
2023-02-13 21:17:42,962:INFO:Importing untrained model
2023-02-13 21:17:42,964:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 21:17:42,971:INFO:Starting cross validation
2023-02-13 21:17:42,972:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:43,003:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:43,010:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:43,021:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:43,029:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:43,036:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:43,046:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:43,054:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:43,063:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:43,071:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:43,078:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:43,092:INFO:Calculating mean and std
2023-02-13 21:17:43,093:INFO:Creating metrics dataframe
2023-02-13 21:17:43,095:INFO:Uploading results into container
2023-02-13 21:17:43,095:INFO:Uploading model into container now
2023-02-13 21:17:43,095:INFO:_master_model_container: 7
2023-02-13 21:17:43,096:INFO:_display_container: 2
2023-02-13 21:17:43,096:INFO:OrthogonalMatchingPursuit()
2023-02-13 21:17:43,096:INFO:create_model() successfully completed......................................
2023-02-13 21:17:43,201:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:43,201:INFO:Creating metrics dataframe
2023-02-13 21:17:43,209:INFO:Initializing Bayesian Ridge
2023-02-13 21:17:43,209:INFO:Total runtime is 0.09934087594350179 minutes
2023-02-13 21:17:43,212:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:43,212:INFO:Initializing create_model()
2023-02-13 21:17:43,212:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:43,213:INFO:Checking exceptions
2023-02-13 21:17:43,213:INFO:Importing libraries
2023-02-13 21:17:43,213:INFO:Copying training dataset
2023-02-13 21:17:43,215:INFO:Defining folds
2023-02-13 21:17:43,215:INFO:Declaring metric variables
2023-02-13 21:17:43,216:INFO:Importing untrained model
2023-02-13 21:17:43,222:INFO:Bayesian Ridge Imported successfully
2023-02-13 21:17:43,228:INFO:Starting cross validation
2023-02-13 21:17:43,228:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:43,365:INFO:Calculating mean and std
2023-02-13 21:17:43,366:INFO:Creating metrics dataframe
2023-02-13 21:17:43,368:INFO:Uploading results into container
2023-02-13 21:17:43,369:INFO:Uploading model into container now
2023-02-13 21:17:43,369:INFO:_master_model_container: 8
2023-02-13 21:17:43,369:INFO:_display_container: 2
2023-02-13 21:17:43,370:INFO:BayesianRidge()
2023-02-13 21:17:43,370:INFO:create_model() successfully completed......................................
2023-02-13 21:17:43,444:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:43,444:INFO:Creating metrics dataframe
2023-02-13 21:17:43,450:INFO:Initializing Passive Aggressive Regressor
2023-02-13 21:17:43,450:INFO:Total runtime is 0.10335452159245809 minutes
2023-02-13 21:17:43,455:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:43,455:INFO:Initializing create_model()
2023-02-13 21:17:43,455:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:43,455:INFO:Checking exceptions
2023-02-13 21:17:43,455:INFO:Importing libraries
2023-02-13 21:17:43,455:INFO:Copying training dataset
2023-02-13 21:17:43,458:INFO:Defining folds
2023-02-13 21:17:43,458:INFO:Declaring metric variables
2023-02-13 21:17:43,460:INFO:Importing untrained model
2023-02-13 21:17:43,462:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 21:17:43,467:INFO:Starting cross validation
2023-02-13 21:17:43,469:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:43,599:INFO:Calculating mean and std
2023-02-13 21:17:43,600:INFO:Creating metrics dataframe
2023-02-13 21:17:43,603:INFO:Uploading results into container
2023-02-13 21:17:43,603:INFO:Uploading model into container now
2023-02-13 21:17:43,603:INFO:_master_model_container: 9
2023-02-13 21:17:43,603:INFO:_display_container: 2
2023-02-13 21:17:43,604:INFO:PassiveAggressiveRegressor(random_state=2)
2023-02-13 21:17:43,604:INFO:create_model() successfully completed......................................
2023-02-13 21:17:43,682:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:43,683:INFO:Creating metrics dataframe
2023-02-13 21:17:43,693:INFO:Initializing Huber Regressor
2023-02-13 21:17:43,693:INFO:Total runtime is 0.10739662647247314 minutes
2023-02-13 21:17:43,696:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:43,696:INFO:Initializing create_model()
2023-02-13 21:17:43,696:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:43,696:INFO:Checking exceptions
2023-02-13 21:17:43,696:INFO:Importing libraries
2023-02-13 21:17:43,696:INFO:Copying training dataset
2023-02-13 21:17:43,698:INFO:Defining folds
2023-02-13 21:17:43,698:INFO:Declaring metric variables
2023-02-13 21:17:43,702:INFO:Importing untrained model
2023-02-13 21:17:43,705:INFO:Huber Regressor Imported successfully
2023-02-13 21:17:43,713:INFO:Starting cross validation
2023-02-13 21:17:43,714:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:43,776:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:43,796:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:43,800:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:43,806:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:43,826:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:43,838:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:43,846:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:43,862:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:43,866:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:43,878:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:43,890:INFO:Calculating mean and std
2023-02-13 21:17:43,890:INFO:Creating metrics dataframe
2023-02-13 21:17:43,893:INFO:Uploading results into container
2023-02-13 21:17:43,894:INFO:Uploading model into container now
2023-02-13 21:17:43,894:INFO:_master_model_container: 10
2023-02-13 21:17:43,894:INFO:_display_container: 2
2023-02-13 21:17:43,894:INFO:HuberRegressor()
2023-02-13 21:17:43,894:INFO:create_model() successfully completed......................................
2023-02-13 21:17:43,974:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:43,974:INFO:Creating metrics dataframe
2023-02-13 21:17:43,982:INFO:Initializing K Neighbors Regressor
2023-02-13 21:17:43,982:INFO:Total runtime is 0.11222594181696573 minutes
2023-02-13 21:17:43,983:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:43,985:INFO:Initializing create_model()
2023-02-13 21:17:43,985:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:43,985:INFO:Checking exceptions
2023-02-13 21:17:43,985:INFO:Importing libraries
2023-02-13 21:17:43,985:INFO:Copying training dataset
2023-02-13 21:17:43,988:INFO:Defining folds
2023-02-13 21:17:43,988:INFO:Declaring metric variables
2023-02-13 21:17:43,990:INFO:Importing untrained model
2023-02-13 21:17:43,993:INFO:K Neighbors Regressor Imported successfully
2023-02-13 21:17:44,001:INFO:Starting cross validation
2023-02-13 21:17:44,002:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:44,153:INFO:Calculating mean and std
2023-02-13 21:17:44,153:INFO:Creating metrics dataframe
2023-02-13 21:17:44,157:INFO:Uploading results into container
2023-02-13 21:17:44,157:INFO:Uploading model into container now
2023-02-13 21:17:44,158:INFO:_master_model_container: 11
2023-02-13 21:17:44,158:INFO:_display_container: 2
2023-02-13 21:17:44,158:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 21:17:44,158:INFO:create_model() successfully completed......................................
2023-02-13 21:17:44,258:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:44,258:INFO:Creating metrics dataframe
2023-02-13 21:17:44,266:INFO:Initializing Decision Tree Regressor
2023-02-13 21:17:44,266:INFO:Total runtime is 0.11695965528488159 minutes
2023-02-13 21:17:44,270:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:44,270:INFO:Initializing create_model()
2023-02-13 21:17:44,270:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:44,271:INFO:Checking exceptions
2023-02-13 21:17:44,271:INFO:Importing libraries
2023-02-13 21:17:44,271:INFO:Copying training dataset
2023-02-13 21:17:44,273:INFO:Defining folds
2023-02-13 21:17:44,273:INFO:Declaring metric variables
2023-02-13 21:17:44,275:INFO:Importing untrained model
2023-02-13 21:17:44,277:INFO:Decision Tree Regressor Imported successfully
2023-02-13 21:17:44,286:INFO:Starting cross validation
2023-02-13 21:17:44,286:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:44,419:INFO:Calculating mean and std
2023-02-13 21:17:44,419:INFO:Creating metrics dataframe
2023-02-13 21:17:44,423:INFO:Uploading results into container
2023-02-13 21:17:44,423:INFO:Uploading model into container now
2023-02-13 21:17:44,424:INFO:_master_model_container: 12
2023-02-13 21:17:44,424:INFO:_display_container: 2
2023-02-13 21:17:44,424:INFO:DecisionTreeRegressor(random_state=2)
2023-02-13 21:17:44,424:INFO:create_model() successfully completed......................................
2023-02-13 21:17:44,505:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:44,505:INFO:Creating metrics dataframe
2023-02-13 21:17:44,513:INFO:Initializing Random Forest Regressor
2023-02-13 21:17:44,513:INFO:Total runtime is 0.1210737109184265 minutes
2023-02-13 21:17:44,516:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:44,518:INFO:Initializing create_model()
2023-02-13 21:17:44,518:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:44,518:INFO:Checking exceptions
2023-02-13 21:17:44,518:INFO:Importing libraries
2023-02-13 21:17:44,519:INFO:Copying training dataset
2023-02-13 21:17:44,520:INFO:Defining folds
2023-02-13 21:17:44,521:INFO:Declaring metric variables
2023-02-13 21:17:44,523:INFO:Importing untrained model
2023-02-13 21:17:44,527:INFO:Random Forest Regressor Imported successfully
2023-02-13 21:17:44,536:INFO:Starting cross validation
2023-02-13 21:17:44,536:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:45,052:INFO:Calculating mean and std
2023-02-13 21:17:45,053:INFO:Creating metrics dataframe
2023-02-13 21:17:45,055:INFO:Uploading results into container
2023-02-13 21:17:45,056:INFO:Uploading model into container now
2023-02-13 21:17:45,056:INFO:_master_model_container: 13
2023-02-13 21:17:45,057:INFO:_display_container: 2
2023-02-13 21:17:45,057:INFO:RandomForestRegressor(n_jobs=-1, random_state=2)
2023-02-13 21:17:45,057:INFO:create_model() successfully completed......................................
2023-02-13 21:17:45,131:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:45,131:INFO:Creating metrics dataframe
2023-02-13 21:17:45,139:INFO:Initializing Extra Trees Regressor
2023-02-13 21:17:45,139:INFO:Total runtime is 0.1315080404281616 minutes
2023-02-13 21:17:45,141:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:45,142:INFO:Initializing create_model()
2023-02-13 21:17:45,142:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:45,142:INFO:Checking exceptions
2023-02-13 21:17:45,142:INFO:Importing libraries
2023-02-13 21:17:45,142:INFO:Copying training dataset
2023-02-13 21:17:45,144:INFO:Defining folds
2023-02-13 21:17:45,144:INFO:Declaring metric variables
2023-02-13 21:17:45,147:INFO:Importing untrained model
2023-02-13 21:17:45,149:INFO:Extra Trees Regressor Imported successfully
2023-02-13 21:17:45,155:INFO:Starting cross validation
2023-02-13 21:17:45,156:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:45,549:INFO:Calculating mean and std
2023-02-13 21:17:45,550:INFO:Creating metrics dataframe
2023-02-13 21:17:45,553:INFO:Uploading results into container
2023-02-13 21:17:45,553:INFO:Uploading model into container now
2023-02-13 21:17:45,553:INFO:_master_model_container: 14
2023-02-13 21:17:45,554:INFO:_display_container: 2
2023-02-13 21:17:45,554:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=2)
2023-02-13 21:17:45,554:INFO:create_model() successfully completed......................................
2023-02-13 21:17:45,628:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:45,628:INFO:Creating metrics dataframe
2023-02-13 21:17:45,636:INFO:Initializing AdaBoost Regressor
2023-02-13 21:17:45,636:INFO:Total runtime is 0.13979013363520304 minutes
2023-02-13 21:17:45,639:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:45,639:INFO:Initializing create_model()
2023-02-13 21:17:45,639:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:45,639:INFO:Checking exceptions
2023-02-13 21:17:45,640:INFO:Importing libraries
2023-02-13 21:17:45,640:INFO:Copying training dataset
2023-02-13 21:17:45,641:INFO:Defining folds
2023-02-13 21:17:45,641:INFO:Declaring metric variables
2023-02-13 21:17:45,644:INFO:Importing untrained model
2023-02-13 21:17:45,647:INFO:AdaBoost Regressor Imported successfully
2023-02-13 21:17:45,653:INFO:Starting cross validation
2023-02-13 21:17:45,654:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:45,880:INFO:Calculating mean and std
2023-02-13 21:17:45,882:INFO:Creating metrics dataframe
2023-02-13 21:17:45,885:INFO:Uploading results into container
2023-02-13 21:17:45,885:INFO:Uploading model into container now
2023-02-13 21:17:45,885:INFO:_master_model_container: 15
2023-02-13 21:17:45,886:INFO:_display_container: 2
2023-02-13 21:17:45,886:INFO:AdaBoostRegressor(random_state=2)
2023-02-13 21:17:45,886:INFO:create_model() successfully completed......................................
2023-02-13 21:17:45,972:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:45,972:INFO:Creating metrics dataframe
2023-02-13 21:17:45,981:INFO:Initializing Gradient Boosting Regressor
2023-02-13 21:17:45,981:INFO:Total runtime is 0.14553025166193645 minutes
2023-02-13 21:17:45,985:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:45,985:INFO:Initializing create_model()
2023-02-13 21:17:45,985:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:45,985:INFO:Checking exceptions
2023-02-13 21:17:45,985:INFO:Importing libraries
2023-02-13 21:17:45,985:INFO:Copying training dataset
2023-02-13 21:17:45,987:INFO:Defining folds
2023-02-13 21:17:45,987:INFO:Declaring metric variables
2023-02-13 21:17:45,991:INFO:Importing untrained model
2023-02-13 21:17:45,993:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 21:17:46,001:INFO:Starting cross validation
2023-02-13 21:17:46,001:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:46,181:INFO:Calculating mean and std
2023-02-13 21:17:46,181:INFO:Creating metrics dataframe
2023-02-13 21:17:46,186:INFO:Uploading results into container
2023-02-13 21:17:46,186:INFO:Uploading model into container now
2023-02-13 21:17:46,187:INFO:_master_model_container: 16
2023-02-13 21:17:46,187:INFO:_display_container: 2
2023-02-13 21:17:46,187:INFO:GradientBoostingRegressor(random_state=2)
2023-02-13 21:17:46,187:INFO:create_model() successfully completed......................................
2023-02-13 21:17:46,260:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:46,260:INFO:Creating metrics dataframe
2023-02-13 21:17:46,270:INFO:Initializing Extreme Gradient Boosting
2023-02-13 21:17:46,270:INFO:Total runtime is 0.15034674406051637 minutes
2023-02-13 21:17:46,272:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:46,272:INFO:Initializing create_model()
2023-02-13 21:17:46,272:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:46,272:INFO:Checking exceptions
2023-02-13 21:17:46,272:INFO:Importing libraries
2023-02-13 21:17:46,272:INFO:Copying training dataset
2023-02-13 21:17:46,274:INFO:Defining folds
2023-02-13 21:17:46,274:INFO:Declaring metric variables
2023-02-13 21:17:46,276:INFO:Importing untrained model
2023-02-13 21:17:46,279:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 21:17:46,285:INFO:Starting cross validation
2023-02-13 21:17:46,286:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:46,511:INFO:Calculating mean and std
2023-02-13 21:17:46,512:INFO:Creating metrics dataframe
2023-02-13 21:17:46,515:INFO:Uploading results into container
2023-02-13 21:17:46,516:INFO:Uploading model into container now
2023-02-13 21:17:46,516:INFO:_master_model_container: 17
2023-02-13 21:17:46,518:INFO:_display_container: 2
2023-02-13 21:17:46,518:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=2, ...)
2023-02-13 21:17:46,518:INFO:create_model() successfully completed......................................
2023-02-13 21:17:46,602:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:46,602:INFO:Creating metrics dataframe
2023-02-13 21:17:46,613:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 21:17:46,613:INFO:Total runtime is 0.15607546170552572 minutes
2023-02-13 21:17:46,617:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:46,617:INFO:Initializing create_model()
2023-02-13 21:17:46,617:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:46,617:INFO:Checking exceptions
2023-02-13 21:17:46,617:INFO:Importing libraries
2023-02-13 21:17:46,617:INFO:Copying training dataset
2023-02-13 21:17:46,620:INFO:Defining folds
2023-02-13 21:17:46,620:INFO:Declaring metric variables
2023-02-13 21:17:46,624:INFO:Importing untrained model
2023-02-13 21:17:46,628:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 21:17:46,635:INFO:Starting cross validation
2023-02-13 21:17:46,635:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:46,841:INFO:Calculating mean and std
2023-02-13 21:17:46,842:INFO:Creating metrics dataframe
2023-02-13 21:17:46,845:INFO:Uploading results into container
2023-02-13 21:17:46,846:INFO:Uploading model into container now
2023-02-13 21:17:46,846:INFO:_master_model_container: 18
2023-02-13 21:17:46,846:INFO:_display_container: 2
2023-02-13 21:17:46,847:INFO:LGBMRegressor(random_state=2)
2023-02-13 21:17:46,847:INFO:create_model() successfully completed......................................
2023-02-13 21:17:46,935:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:46,935:INFO:Creating metrics dataframe
2023-02-13 21:17:46,945:INFO:Initializing Dummy Regressor
2023-02-13 21:17:46,945:INFO:Total runtime is 0.16161022186279297 minutes
2023-02-13 21:17:46,949:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:46,950:INFO:Initializing create_model()
2023-02-13 21:17:46,950:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD40F9C40>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:46,950:INFO:Checking exceptions
2023-02-13 21:17:46,950:INFO:Importing libraries
2023-02-13 21:17:46,950:INFO:Copying training dataset
2023-02-13 21:17:46,953:INFO:Defining folds
2023-02-13 21:17:46,953:INFO:Declaring metric variables
2023-02-13 21:17:46,957:INFO:Importing untrained model
2023-02-13 21:17:46,961:INFO:Dummy Regressor Imported successfully
2023-02-13 21:17:46,968:INFO:Starting cross validation
2023-02-13 21:17:46,969:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:47,111:INFO:Calculating mean and std
2023-02-13 21:17:47,112:INFO:Creating metrics dataframe
2023-02-13 21:17:47,113:INFO:Uploading results into container
2023-02-13 21:17:47,116:INFO:Uploading model into container now
2023-02-13 21:17:47,116:INFO:_master_model_container: 19
2023-02-13 21:17:47,117:INFO:_display_container: 2
2023-02-13 21:17:47,117:INFO:DummyRegressor()
2023-02-13 21:17:47,117:INFO:create_model() successfully completed......................................
2023-02-13 21:17:47,204:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:47,204:INFO:Creating metrics dataframe
2023-02-13 21:17:47,224:INFO:Initializing create_model()
2023-02-13 21:17:47,224:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD36B99D0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:47,224:INFO:Checking exceptions
2023-02-13 21:17:47,226:INFO:Importing libraries
2023-02-13 21:17:47,226:INFO:Copying training dataset
2023-02-13 21:17:47,229:INFO:Defining folds
2023-02-13 21:17:47,229:INFO:Declaring metric variables
2023-02-13 21:17:47,229:INFO:Importing untrained model
2023-02-13 21:17:47,229:INFO:Declaring custom model
2023-02-13 21:17:47,230:INFO:Bayesian Ridge Imported successfully
2023-02-13 21:17:47,230:INFO:Cross validation set to False
2023-02-13 21:17:47,230:INFO:Fitting Model
2023-02-13 21:17:47,297:INFO:BayesianRidge()
2023-02-13 21:17:47,297:INFO:create_model() successfully completed......................................
2023-02-13 21:17:47,419:INFO:_master_model_container: 19
2023-02-13 21:17:47,420:INFO:_display_container: 2
2023-02-13 21:17:47,420:INFO:BayesianRidge()
2023-02-13 21:17:47,420:INFO:compare_models() successfully completed......................................
2023-02-13 21:17:54,984:INFO:PyCaret RegressionExperiment
2023-02-13 21:17:54,984:INFO:Logging name: reg-default-name
2023-02-13 21:17:54,985:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 21:17:54,985:INFO:version 3.0.0.rc8
2023-02-13 21:17:54,985:INFO:Initializing setup()
2023-02-13 21:17:54,985:INFO:self.USI: 0422
2023-02-13 21:17:54,985:INFO:self._variable_keys: {'seed', 'transform_target_param', 'data', 'exp_id', 'html_param', '_ml_usecase', 'log_plots_param', 'gpu_param', 'y_train', 'exp_name_log', 'USI', 'target_param', 'fold_generator', 'X_train', 'fold_groups_param', 'X', 'gpu_n_jobs_param', '_available_plots', 'X_test', 'pipeline', 'fold_shuffle_param', 'idx', 'y_test', 'n_jobs_param', 'y', 'memory', 'logging_param'}
2023-02-13 21:17:54,985:INFO:Checking environment
2023-02-13 21:17:54,985:INFO:python_version: 3.9.13
2023-02-13 21:17:54,985:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 21:17:54,985:INFO:machine: AMD64
2023-02-13 21:17:54,985:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 21:17:54,986:INFO:Memory: svmem(total=16805040128, available=6946689024, percent=58.7, used=9858351104, free=6946689024)
2023-02-13 21:17:54,986:INFO:Physical Core: 4
2023-02-13 21:17:54,986:INFO:Logical Core: 8
2023-02-13 21:17:54,986:INFO:Checking libraries
2023-02-13 21:17:54,986:INFO:System:
2023-02-13 21:17:54,986:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 21:17:54,986:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 21:17:54,986:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 21:17:54,986:INFO:PyCaret required dependencies:
2023-02-13 21:17:54,986:INFO:                 pip: 23.0
2023-02-13 21:17:54,986:INFO:          setuptools: 58.1.0
2023-02-13 21:17:54,986:INFO:             pycaret: 3.0.0rc8
2023-02-13 21:17:54,986:INFO:             IPython: 8.7.0
2023-02-13 21:17:54,986:INFO:          ipywidgets: 8.0.4
2023-02-13 21:17:54,986:INFO:                tqdm: 4.64.1
2023-02-13 21:17:54,986:INFO:               numpy: 1.22.1
2023-02-13 21:17:54,986:INFO:              pandas: 1.5.2
2023-02-13 21:17:54,986:INFO:              jinja2: 3.1.2
2023-02-13 21:17:54,986:INFO:               scipy: 1.5.4
2023-02-13 21:17:54,986:INFO:              joblib: 1.2.0
2023-02-13 21:17:54,986:INFO:             sklearn: 1.1.3
2023-02-13 21:17:54,986:INFO:                pyod: 1.0.7
2023-02-13 21:17:54,986:INFO:            imblearn: 0.10.1
2023-02-13 21:17:54,986:INFO:   category_encoders: 2.6.0
2023-02-13 21:17:54,986:INFO:            lightgbm: 3.3.4
2023-02-13 21:17:54,986:INFO:               numba: 0.56.4
2023-02-13 21:17:54,986:INFO:            requests: 2.28.1
2023-02-13 21:17:54,986:INFO:          matplotlib: 3.6.2
2023-02-13 21:17:54,986:INFO:          scikitplot: 0.3.7
2023-02-13 21:17:54,986:INFO:         yellowbrick: 1.5
2023-02-13 21:17:54,986:INFO:              plotly: 5.11.0
2023-02-13 21:17:54,986:INFO:             kaleido: 0.2.1
2023-02-13 21:17:54,986:INFO:         statsmodels: 0.13.5
2023-02-13 21:17:54,986:INFO:              sktime: 0.15.1
2023-02-13 21:17:54,986:INFO:               tbats: 1.1.2
2023-02-13 21:17:54,986:INFO:            pmdarima: 2.0.2
2023-02-13 21:17:54,986:INFO:              psutil: 5.9.4
2023-02-13 21:17:54,986:INFO:PyCaret optional dependencies:
2023-02-13 21:17:54,986:INFO:                shap: 0.41.0
2023-02-13 21:17:54,986:INFO:           interpret: 0.3.0
2023-02-13 21:17:54,986:INFO:                umap: Not installed
2023-02-13 21:17:54,986:INFO:    pandas_profiling: 3.6.2
2023-02-13 21:17:54,986:INFO:  explainerdashboard: Not installed
2023-02-13 21:17:54,986:INFO:             autoviz: Not installed
2023-02-13 21:17:54,986:INFO:           fairlearn: Not installed
2023-02-13 21:17:54,986:INFO:             xgboost: 1.7.3
2023-02-13 21:17:54,986:INFO:            catboost: Not installed
2023-02-13 21:17:54,986:INFO:              kmodes: Not installed
2023-02-13 21:17:54,986:INFO:             mlxtend: Not installed
2023-02-13 21:17:54,986:INFO:       statsforecast: Not installed
2023-02-13 21:17:54,986:INFO:        tune_sklearn: Not installed
2023-02-13 21:17:54,986:INFO:                 ray: Not installed
2023-02-13 21:17:54,986:INFO:            hyperopt: Not installed
2023-02-13 21:17:54,986:INFO:              optuna: Not installed
2023-02-13 21:17:54,986:INFO:               skopt: Not installed
2023-02-13 21:17:54,986:INFO:              mlflow: Not installed
2023-02-13 21:17:54,986:INFO:              gradio: Not installed
2023-02-13 21:17:54,986:INFO:             fastapi: Not installed
2023-02-13 21:17:54,986:INFO:             uvicorn: Not installed
2023-02-13 21:17:54,986:INFO:              m2cgen: Not installed
2023-02-13 21:17:54,986:INFO:           evidently: Not installed
2023-02-13 21:17:54,986:INFO:                nltk: 3.8
2023-02-13 21:17:54,991:INFO:            pyLDAvis: Not installed
2023-02-13 21:17:54,991:INFO:              gensim: Not installed
2023-02-13 21:17:54,991:INFO:               spacy: Not installed
2023-02-13 21:17:54,991:INFO:           wordcloud: 1.8.2.2
2023-02-13 21:17:54,991:INFO:            textblob: Not installed
2023-02-13 21:17:54,991:INFO:               fugue: Not installed
2023-02-13 21:17:54,991:INFO:           streamlit: 1.16.0
2023-02-13 21:17:54,991:INFO:             prophet: Not installed
2023-02-13 21:17:54,991:INFO:None
2023-02-13 21:17:54,991:INFO:Set up data.
2023-02-13 21:17:54,995:INFO:Set up train/test split.
2023-02-13 21:17:54,997:INFO:Set up index.
2023-02-13 21:17:54,998:INFO:Set up folding strategy.
2023-02-13 21:17:54,998:INFO:Assigning column types.
2023-02-13 21:17:55,000:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 21:17:55,000:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,004:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,009:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,062:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,113:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,113:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:55,116:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:55,116:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,120:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,124:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,180:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,223:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,223:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:55,226:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:55,226:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 21:17:55,230:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,234:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,285:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,323:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,323:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:55,327:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:55,332:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,336:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,390:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,433:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,434:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:55,436:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:55,436:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 21:17:55,445:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,497:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,538:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,538:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:55,541:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:55,551:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,603:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,640:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,641:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:55,643:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:55,644:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 21:17:55,704:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,742:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,743:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:55,745:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:55,803:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,845:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,845:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:55,847:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:55,848:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 21:17:55,909:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:55,951:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:55,953:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:56,023:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 21:17:56,064:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:56,067:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:56,067:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 21:17:56,167:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:56,170:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:56,277:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:56,280:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:56,280:INFO:Preparing preprocessing pipeline...
2023-02-13 21:17:56,282:INFO:Set up column name cleaning.
2023-02-13 21:17:56,282:INFO:Set up simple imputation.
2023-02-13 21:17:56,301:INFO:Finished creating preprocessing pipeline.
2023-02-13 21:17:56,304:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 21:17:56,304:INFO:Creating final display dataframe.
2023-02-13 21:17:56,398:INFO:Setup _display_container:                     Description             Value
0                    Session id                60
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              0422
2023-02-13 21:17:56,506:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:56,509:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:56,612:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 21:17:56,614:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 21:17:56,615:INFO:setup() successfully completed in 1.63s...............
2023-02-13 21:17:56,615:INFO:Initializing compare_models()
2023-02-13 21:17:56,615:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 21:17:56,615:INFO:Checking exceptions
2023-02-13 21:17:56,616:INFO:Preparing display monitor
2023-02-13 21:17:56,635:INFO:Initializing Linear Regression
2023-02-13 21:17:56,635:INFO:Total runtime is 0.0 minutes
2023-02-13 21:17:56,638:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:56,638:INFO:Initializing create_model()
2023-02-13 21:17:56,638:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:56,638:INFO:Checking exceptions
2023-02-13 21:17:56,638:INFO:Importing libraries
2023-02-13 21:17:56,638:INFO:Copying training dataset
2023-02-13 21:17:56,642:INFO:Defining folds
2023-02-13 21:17:56,642:INFO:Declaring metric variables
2023-02-13 21:17:56,646:INFO:Importing untrained model
2023-02-13 21:17:56,649:INFO:Linear Regression Imported successfully
2023-02-13 21:17:56,657:INFO:Starting cross validation
2023-02-13 21:17:56,658:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:56,824:INFO:Calculating mean and std
2023-02-13 21:17:56,824:INFO:Creating metrics dataframe
2023-02-13 21:17:56,824:INFO:Uploading results into container
2023-02-13 21:17:56,824:INFO:Uploading model into container now
2023-02-13 21:17:56,824:INFO:_master_model_container: 1
2023-02-13 21:17:56,824:INFO:_display_container: 2
2023-02-13 21:17:56,824:INFO:LinearRegression(n_jobs=-1)
2023-02-13 21:17:56,824:INFO:create_model() successfully completed......................................
2023-02-13 21:17:56,910:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:56,910:INFO:Creating metrics dataframe
2023-02-13 21:17:56,916:INFO:Initializing Lasso Regression
2023-02-13 21:17:56,917:INFO:Total runtime is 0.004689474900563558 minutes
2023-02-13 21:17:56,919:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:56,920:INFO:Initializing create_model()
2023-02-13 21:17:56,920:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:56,920:INFO:Checking exceptions
2023-02-13 21:17:56,920:INFO:Importing libraries
2023-02-13 21:17:56,920:INFO:Copying training dataset
2023-02-13 21:17:56,921:INFO:Defining folds
2023-02-13 21:17:56,921:INFO:Declaring metric variables
2023-02-13 21:17:56,925:INFO:Importing untrained model
2023-02-13 21:17:56,929:INFO:Lasso Regression Imported successfully
2023-02-13 21:17:56,934:INFO:Starting cross validation
2023-02-13 21:17:56,934:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:57,052:INFO:Calculating mean and std
2023-02-13 21:17:57,053:INFO:Creating metrics dataframe
2023-02-13 21:17:57,056:INFO:Uploading results into container
2023-02-13 21:17:57,056:INFO:Uploading model into container now
2023-02-13 21:17:57,056:INFO:_master_model_container: 2
2023-02-13 21:17:57,056:INFO:_display_container: 2
2023-02-13 21:17:57,056:INFO:Lasso(random_state=60)
2023-02-13 21:17:57,056:INFO:create_model() successfully completed......................................
2023-02-13 21:17:57,132:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:57,132:INFO:Creating metrics dataframe
2023-02-13 21:17:57,138:INFO:Initializing Ridge Regression
2023-02-13 21:17:57,138:INFO:Total runtime is 0.008373979727427164 minutes
2023-02-13 21:17:57,141:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:57,141:INFO:Initializing create_model()
2023-02-13 21:17:57,141:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:57,141:INFO:Checking exceptions
2023-02-13 21:17:57,142:INFO:Importing libraries
2023-02-13 21:17:57,142:INFO:Copying training dataset
2023-02-13 21:17:57,144:INFO:Defining folds
2023-02-13 21:17:57,144:INFO:Declaring metric variables
2023-02-13 21:17:57,146:INFO:Importing untrained model
2023-02-13 21:17:57,149:INFO:Ridge Regression Imported successfully
2023-02-13 21:17:57,154:INFO:Starting cross validation
2023-02-13 21:17:57,155:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:57,313:INFO:Calculating mean and std
2023-02-13 21:17:57,314:INFO:Creating metrics dataframe
2023-02-13 21:17:57,316:INFO:Uploading results into container
2023-02-13 21:17:57,316:INFO:Uploading model into container now
2023-02-13 21:17:57,317:INFO:_master_model_container: 3
2023-02-13 21:17:57,317:INFO:_display_container: 2
2023-02-13 21:17:57,317:INFO:Ridge(random_state=60)
2023-02-13 21:17:57,317:INFO:create_model() successfully completed......................................
2023-02-13 21:17:57,393:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:57,393:INFO:Creating metrics dataframe
2023-02-13 21:17:57,400:INFO:Initializing Elastic Net
2023-02-13 21:17:57,400:INFO:Total runtime is 0.01275273561477661 minutes
2023-02-13 21:17:57,402:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:57,402:INFO:Initializing create_model()
2023-02-13 21:17:57,402:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:57,402:INFO:Checking exceptions
2023-02-13 21:17:57,402:INFO:Importing libraries
2023-02-13 21:17:57,404:INFO:Copying training dataset
2023-02-13 21:17:57,406:INFO:Defining folds
2023-02-13 21:17:57,406:INFO:Declaring metric variables
2023-02-13 21:17:57,409:INFO:Importing untrained model
2023-02-13 21:17:57,412:INFO:Elastic Net Imported successfully
2023-02-13 21:17:57,417:INFO:Starting cross validation
2023-02-13 21:17:57,417:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:57,543:INFO:Calculating mean and std
2023-02-13 21:17:57,543:INFO:Creating metrics dataframe
2023-02-13 21:17:57,545:INFO:Uploading results into container
2023-02-13 21:17:57,546:INFO:Uploading model into container now
2023-02-13 21:17:57,546:INFO:_master_model_container: 4
2023-02-13 21:17:57,546:INFO:_display_container: 2
2023-02-13 21:17:57,546:INFO:ElasticNet(random_state=60)
2023-02-13 21:17:57,546:INFO:create_model() successfully completed......................................
2023-02-13 21:17:57,619:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:57,619:INFO:Creating metrics dataframe
2023-02-13 21:17:57,627:INFO:Initializing Least Angle Regression
2023-02-13 21:17:57,627:INFO:Total runtime is 0.01653014024098714 minutes
2023-02-13 21:17:57,630:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:57,630:INFO:Initializing create_model()
2023-02-13 21:17:57,630:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:57,630:INFO:Checking exceptions
2023-02-13 21:17:57,630:INFO:Importing libraries
2023-02-13 21:17:57,630:INFO:Copying training dataset
2023-02-13 21:17:57,635:INFO:Defining folds
2023-02-13 21:17:57,636:INFO:Declaring metric variables
2023-02-13 21:17:57,643:INFO:Importing untrained model
2023-02-13 21:17:57,648:INFO:Least Angle Regression Imported successfully
2023-02-13 21:17:57,653:INFO:Starting cross validation
2023-02-13 21:17:57,655:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:57,692:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:57,701:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:57,708:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:57,717:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:57,727:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:57,735:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:57,743:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:57,748:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:57,759:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:57,766:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:57,779:INFO:Calculating mean and std
2023-02-13 21:17:57,779:INFO:Creating metrics dataframe
2023-02-13 21:17:57,782:INFO:Uploading results into container
2023-02-13 21:17:57,782:INFO:Uploading model into container now
2023-02-13 21:17:57,783:INFO:_master_model_container: 5
2023-02-13 21:17:57,783:INFO:_display_container: 2
2023-02-13 21:17:57,783:INFO:Lars(random_state=60)
2023-02-13 21:17:57,783:INFO:create_model() successfully completed......................................
2023-02-13 21:17:57,861:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:57,861:INFO:Creating metrics dataframe
2023-02-13 21:17:57,869:INFO:Initializing Lasso Least Angle Regression
2023-02-13 21:17:57,869:INFO:Total runtime is 0.02055882612864176 minutes
2023-02-13 21:17:57,871:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:57,871:INFO:Initializing create_model()
2023-02-13 21:17:57,872:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:57,872:INFO:Checking exceptions
2023-02-13 21:17:57,872:INFO:Importing libraries
2023-02-13 21:17:57,872:INFO:Copying training dataset
2023-02-13 21:17:57,874:INFO:Defining folds
2023-02-13 21:17:57,874:INFO:Declaring metric variables
2023-02-13 21:17:57,877:INFO:Importing untrained model
2023-02-13 21:17:57,880:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 21:17:57,887:INFO:Starting cross validation
2023-02-13 21:17:57,887:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:57,923:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:57,932:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:57,940:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:57,947:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:57,955:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:57,965:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:57,975:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:57,986:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:57,992:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:58,000:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 21:17:58,013:INFO:Calculating mean and std
2023-02-13 21:17:58,013:INFO:Creating metrics dataframe
2023-02-13 21:17:58,015:INFO:Uploading results into container
2023-02-13 21:17:58,016:INFO:Uploading model into container now
2023-02-13 21:17:58,016:INFO:_master_model_container: 6
2023-02-13 21:17:58,016:INFO:_display_container: 2
2023-02-13 21:17:58,016:INFO:LassoLars(random_state=60)
2023-02-13 21:17:58,016:INFO:create_model() successfully completed......................................
2023-02-13 21:17:58,087:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:58,089:INFO:Creating metrics dataframe
2023-02-13 21:17:58,096:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 21:17:58,096:INFO:Total runtime is 0.02434455553690592 minutes
2023-02-13 21:17:58,099:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:58,099:INFO:Initializing create_model()
2023-02-13 21:17:58,099:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:58,099:INFO:Checking exceptions
2023-02-13 21:17:58,099:INFO:Importing libraries
2023-02-13 21:17:58,099:INFO:Copying training dataset
2023-02-13 21:17:58,101:INFO:Defining folds
2023-02-13 21:17:58,101:INFO:Declaring metric variables
2023-02-13 21:17:58,105:INFO:Importing untrained model
2023-02-13 21:17:58,108:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 21:17:58,115:INFO:Starting cross validation
2023-02-13 21:17:58,116:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:58,150:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:58,158:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:58,165:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:58,174:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:58,182:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:58,192:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:58,200:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:58,210:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:58,217:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:58,227:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 21:17:58,241:INFO:Calculating mean and std
2023-02-13 21:17:58,242:INFO:Creating metrics dataframe
2023-02-13 21:17:58,244:INFO:Uploading results into container
2023-02-13 21:17:58,245:INFO:Uploading model into container now
2023-02-13 21:17:58,245:INFO:_master_model_container: 7
2023-02-13 21:17:58,245:INFO:_display_container: 2
2023-02-13 21:17:58,245:INFO:OrthogonalMatchingPursuit()
2023-02-13 21:17:58,245:INFO:create_model() successfully completed......................................
2023-02-13 21:17:58,319:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:58,319:INFO:Creating metrics dataframe
2023-02-13 21:17:58,329:INFO:Initializing Bayesian Ridge
2023-02-13 21:17:58,329:INFO:Total runtime is 0.02822367747624715 minutes
2023-02-13 21:17:58,332:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:58,332:INFO:Initializing create_model()
2023-02-13 21:17:58,332:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:58,332:INFO:Checking exceptions
2023-02-13 21:17:58,332:INFO:Importing libraries
2023-02-13 21:17:58,332:INFO:Copying training dataset
2023-02-13 21:17:58,335:INFO:Defining folds
2023-02-13 21:17:58,335:INFO:Declaring metric variables
2023-02-13 21:17:58,338:INFO:Importing untrained model
2023-02-13 21:17:58,342:INFO:Bayesian Ridge Imported successfully
2023-02-13 21:17:58,350:INFO:Starting cross validation
2023-02-13 21:17:58,351:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:58,644:INFO:Calculating mean and std
2023-02-13 21:17:58,645:INFO:Creating metrics dataframe
2023-02-13 21:17:58,648:INFO:Uploading results into container
2023-02-13 21:17:58,648:INFO:Uploading model into container now
2023-02-13 21:17:58,648:INFO:_master_model_container: 8
2023-02-13 21:17:58,648:INFO:_display_container: 2
2023-02-13 21:17:58,649:INFO:BayesianRidge()
2023-02-13 21:17:58,649:INFO:create_model() successfully completed......................................
2023-02-13 21:17:58,747:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:58,747:INFO:Creating metrics dataframe
2023-02-13 21:17:58,755:INFO:Initializing Passive Aggressive Regressor
2023-02-13 21:17:58,755:INFO:Total runtime is 0.03532221317291259 minutes
2023-02-13 21:17:58,758:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:58,758:INFO:Initializing create_model()
2023-02-13 21:17:58,758:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:58,758:INFO:Checking exceptions
2023-02-13 21:17:58,758:INFO:Importing libraries
2023-02-13 21:17:58,758:INFO:Copying training dataset
2023-02-13 21:17:58,761:INFO:Defining folds
2023-02-13 21:17:58,761:INFO:Declaring metric variables
2023-02-13 21:17:58,764:INFO:Importing untrained model
2023-02-13 21:17:58,768:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 21:17:58,774:INFO:Starting cross validation
2023-02-13 21:17:58,775:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:58,904:INFO:Calculating mean and std
2023-02-13 21:17:58,905:INFO:Creating metrics dataframe
2023-02-13 21:17:58,907:INFO:Uploading results into container
2023-02-13 21:17:58,909:INFO:Uploading model into container now
2023-02-13 21:17:58,909:INFO:_master_model_container: 9
2023-02-13 21:17:58,909:INFO:_display_container: 2
2023-02-13 21:17:58,909:INFO:PassiveAggressiveRegressor(random_state=60)
2023-02-13 21:17:58,909:INFO:create_model() successfully completed......................................
2023-02-13 21:17:58,983:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:58,984:INFO:Creating metrics dataframe
2023-02-13 21:17:58,993:INFO:Initializing Huber Regressor
2023-02-13 21:17:58,993:INFO:Total runtime is 0.03929197390874226 minutes
2023-02-13 21:17:58,996:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:58,996:INFO:Initializing create_model()
2023-02-13 21:17:58,996:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:58,996:INFO:Checking exceptions
2023-02-13 21:17:58,996:INFO:Importing libraries
2023-02-13 21:17:58,996:INFO:Copying training dataset
2023-02-13 21:17:58,999:INFO:Defining folds
2023-02-13 21:17:58,999:INFO:Declaring metric variables
2023-02-13 21:17:59,001:INFO:Importing untrained model
2023-02-13 21:17:59,004:INFO:Huber Regressor Imported successfully
2023-02-13 21:17:59,010:INFO:Starting cross validation
2023-02-13 21:17:59,011:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:59,060:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:59,078:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:59,078:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:59,102:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:59,112:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:59,126:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:59,137:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:59,144:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:59,156:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:59,163:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 21:17:59,176:INFO:Calculating mean and std
2023-02-13 21:17:59,177:INFO:Creating metrics dataframe
2023-02-13 21:17:59,180:INFO:Uploading results into container
2023-02-13 21:17:59,180:INFO:Uploading model into container now
2023-02-13 21:17:59,181:INFO:_master_model_container: 10
2023-02-13 21:17:59,181:INFO:_display_container: 2
2023-02-13 21:17:59,181:INFO:HuberRegressor()
2023-02-13 21:17:59,181:INFO:create_model() successfully completed......................................
2023-02-13 21:17:59,258:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:59,258:INFO:Creating metrics dataframe
2023-02-13 21:17:59,266:INFO:Initializing K Neighbors Regressor
2023-02-13 21:17:59,266:INFO:Total runtime is 0.04384493033091227 minutes
2023-02-13 21:17:59,268:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:59,269:INFO:Initializing create_model()
2023-02-13 21:17:59,269:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:59,269:INFO:Checking exceptions
2023-02-13 21:17:59,269:INFO:Importing libraries
2023-02-13 21:17:59,269:INFO:Copying training dataset
2023-02-13 21:17:59,271:INFO:Defining folds
2023-02-13 21:17:59,271:INFO:Declaring metric variables
2023-02-13 21:17:59,274:INFO:Importing untrained model
2023-02-13 21:17:59,277:INFO:K Neighbors Regressor Imported successfully
2023-02-13 21:17:59,284:INFO:Starting cross validation
2023-02-13 21:17:59,286:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:59,424:INFO:Calculating mean and std
2023-02-13 21:17:59,424:INFO:Creating metrics dataframe
2023-02-13 21:17:59,427:INFO:Uploading results into container
2023-02-13 21:17:59,427:INFO:Uploading model into container now
2023-02-13 21:17:59,428:INFO:_master_model_container: 11
2023-02-13 21:17:59,428:INFO:_display_container: 2
2023-02-13 21:17:59,428:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 21:17:59,428:INFO:create_model() successfully completed......................................
2023-02-13 21:17:59,502:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:59,502:INFO:Creating metrics dataframe
2023-02-13 21:17:59,511:INFO:Initializing Decision Tree Regressor
2023-02-13 21:17:59,511:INFO:Total runtime is 0.04793352683385213 minutes
2023-02-13 21:17:59,513:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:59,513:INFO:Initializing create_model()
2023-02-13 21:17:59,514:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:59,514:INFO:Checking exceptions
2023-02-13 21:17:59,514:INFO:Importing libraries
2023-02-13 21:17:59,514:INFO:Copying training dataset
2023-02-13 21:17:59,516:INFO:Defining folds
2023-02-13 21:17:59,516:INFO:Declaring metric variables
2023-02-13 21:17:59,519:INFO:Importing untrained model
2023-02-13 21:17:59,522:INFO:Decision Tree Regressor Imported successfully
2023-02-13 21:17:59,528:INFO:Starting cross validation
2023-02-13 21:17:59,529:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:17:59,700:INFO:Calculating mean and std
2023-02-13 21:17:59,701:INFO:Creating metrics dataframe
2023-02-13 21:17:59,704:INFO:Uploading results into container
2023-02-13 21:17:59,705:INFO:Uploading model into container now
2023-02-13 21:17:59,706:INFO:_master_model_container: 12
2023-02-13 21:17:59,706:INFO:_display_container: 2
2023-02-13 21:17:59,707:INFO:DecisionTreeRegressor(random_state=60)
2023-02-13 21:17:59,707:INFO:create_model() successfully completed......................................
2023-02-13 21:17:59,792:INFO:SubProcess create_model() end ==================================
2023-02-13 21:17:59,792:INFO:Creating metrics dataframe
2023-02-13 21:17:59,800:INFO:Initializing Random Forest Regressor
2023-02-13 21:17:59,800:INFO:Total runtime is 0.05274803638458252 minutes
2023-02-13 21:17:59,804:INFO:SubProcess create_model() called ==================================
2023-02-13 21:17:59,804:INFO:Initializing create_model()
2023-02-13 21:17:59,805:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:17:59,805:INFO:Checking exceptions
2023-02-13 21:17:59,805:INFO:Importing libraries
2023-02-13 21:17:59,805:INFO:Copying training dataset
2023-02-13 21:17:59,808:INFO:Defining folds
2023-02-13 21:17:59,809:INFO:Declaring metric variables
2023-02-13 21:17:59,812:INFO:Importing untrained model
2023-02-13 21:17:59,816:INFO:Random Forest Regressor Imported successfully
2023-02-13 21:17:59,824:INFO:Starting cross validation
2023-02-13 21:17:59,825:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:18:00,394:INFO:Calculating mean and std
2023-02-13 21:18:00,395:INFO:Creating metrics dataframe
2023-02-13 21:18:00,399:INFO:Uploading results into container
2023-02-13 21:18:00,400:INFO:Uploading model into container now
2023-02-13 21:18:00,400:INFO:_master_model_container: 13
2023-02-13 21:18:00,400:INFO:_display_container: 2
2023-02-13 21:18:00,401:INFO:RandomForestRegressor(n_jobs=-1, random_state=60)
2023-02-13 21:18:00,401:INFO:create_model() successfully completed......................................
2023-02-13 21:18:00,515:INFO:SubProcess create_model() end ==================================
2023-02-13 21:18:00,516:INFO:Creating metrics dataframe
2023-02-13 21:18:00,531:INFO:Initializing Extra Trees Regressor
2023-02-13 21:18:00,531:INFO:Total runtime is 0.06493326822916666 minutes
2023-02-13 21:18:00,536:INFO:SubProcess create_model() called ==================================
2023-02-13 21:18:00,536:INFO:Initializing create_model()
2023-02-13 21:18:00,536:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:18:00,536:INFO:Checking exceptions
2023-02-13 21:18:00,536:INFO:Importing libraries
2023-02-13 21:18:00,536:INFO:Copying training dataset
2023-02-13 21:18:00,542:INFO:Defining folds
2023-02-13 21:18:00,542:INFO:Declaring metric variables
2023-02-13 21:18:00,546:INFO:Importing untrained model
2023-02-13 21:18:00,552:INFO:Extra Trees Regressor Imported successfully
2023-02-13 21:18:00,561:INFO:Starting cross validation
2023-02-13 21:18:00,562:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:18:01,559:INFO:Calculating mean and std
2023-02-13 21:18:01,561:INFO:Creating metrics dataframe
2023-02-13 21:18:01,566:INFO:Uploading results into container
2023-02-13 21:18:01,567:INFO:Uploading model into container now
2023-02-13 21:18:01,570:INFO:_master_model_container: 14
2023-02-13 21:18:01,570:INFO:_display_container: 2
2023-02-13 21:18:01,570:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=60)
2023-02-13 21:18:01,570:INFO:create_model() successfully completed......................................
2023-02-13 21:18:01,775:INFO:SubProcess create_model() end ==================================
2023-02-13 21:18:01,775:INFO:Creating metrics dataframe
2023-02-13 21:18:01,796:INFO:Initializing AdaBoost Regressor
2023-02-13 21:18:01,796:INFO:Total runtime is 0.08601597150166829 minutes
2023-02-13 21:18:01,800:INFO:SubProcess create_model() called ==================================
2023-02-13 21:18:01,801:INFO:Initializing create_model()
2023-02-13 21:18:01,801:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:18:01,802:INFO:Checking exceptions
2023-02-13 21:18:01,802:INFO:Importing libraries
2023-02-13 21:18:01,802:INFO:Copying training dataset
2023-02-13 21:18:01,807:INFO:Defining folds
2023-02-13 21:18:01,807:INFO:Declaring metric variables
2023-02-13 21:18:01,812:INFO:Importing untrained model
2023-02-13 21:18:01,818:INFO:AdaBoost Regressor Imported successfully
2023-02-13 21:18:01,831:INFO:Starting cross validation
2023-02-13 21:18:01,832:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:18:02,180:INFO:Calculating mean and std
2023-02-13 21:18:02,182:INFO:Creating metrics dataframe
2023-02-13 21:18:02,187:INFO:Uploading results into container
2023-02-13 21:18:02,188:INFO:Uploading model into container now
2023-02-13 21:18:02,188:INFO:_master_model_container: 15
2023-02-13 21:18:02,188:INFO:_display_container: 2
2023-02-13 21:18:02,188:INFO:AdaBoostRegressor(random_state=60)
2023-02-13 21:18:02,188:INFO:create_model() successfully completed......................................
2023-02-13 21:18:02,447:INFO:SubProcess create_model() end ==================================
2023-02-13 21:18:02,447:INFO:Creating metrics dataframe
2023-02-13 21:18:02,473:INFO:Initializing Gradient Boosting Regressor
2023-02-13 21:18:02,473:INFO:Total runtime is 0.09730100631713867 minutes
2023-02-13 21:18:02,479:INFO:SubProcess create_model() called ==================================
2023-02-13 21:18:02,479:INFO:Initializing create_model()
2023-02-13 21:18:02,480:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:18:02,480:INFO:Checking exceptions
2023-02-13 21:18:02,480:INFO:Importing libraries
2023-02-13 21:18:02,480:INFO:Copying training dataset
2023-02-13 21:18:02,488:INFO:Defining folds
2023-02-13 21:18:02,488:INFO:Declaring metric variables
2023-02-13 21:18:02,495:INFO:Importing untrained model
2023-02-13 21:18:02,500:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 21:18:02,514:INFO:Starting cross validation
2023-02-13 21:18:02,516:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:18:02,861:INFO:Calculating mean and std
2023-02-13 21:18:02,862:INFO:Creating metrics dataframe
2023-02-13 21:18:02,866:INFO:Uploading results into container
2023-02-13 21:18:02,867:INFO:Uploading model into container now
2023-02-13 21:18:02,869:INFO:_master_model_container: 16
2023-02-13 21:18:02,869:INFO:_display_container: 2
2023-02-13 21:18:02,869:INFO:GradientBoostingRegressor(random_state=60)
2023-02-13 21:18:02,869:INFO:create_model() successfully completed......................................
2023-02-13 21:18:03,013:INFO:SubProcess create_model() end ==================================
2023-02-13 21:18:03,013:INFO:Creating metrics dataframe
2023-02-13 21:18:03,038:INFO:Initializing Extreme Gradient Boosting
2023-02-13 21:18:03,038:INFO:Total runtime is 0.10671354134877523 minutes
2023-02-13 21:18:03,046:INFO:SubProcess create_model() called ==================================
2023-02-13 21:18:03,047:INFO:Initializing create_model()
2023-02-13 21:18:03,047:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:18:03,047:INFO:Checking exceptions
2023-02-13 21:18:03,048:INFO:Importing libraries
2023-02-13 21:18:03,048:INFO:Copying training dataset
2023-02-13 21:18:03,062:INFO:Defining folds
2023-02-13 21:18:03,063:INFO:Declaring metric variables
2023-02-13 21:18:03,089:INFO:Importing untrained model
2023-02-13 21:18:03,098:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 21:18:03,112:INFO:Starting cross validation
2023-02-13 21:18:03,130:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:18:03,624:INFO:Calculating mean and std
2023-02-13 21:18:03,626:INFO:Creating metrics dataframe
2023-02-13 21:18:03,634:INFO:Uploading results into container
2023-02-13 21:18:03,635:INFO:Uploading model into container now
2023-02-13 21:18:03,635:INFO:_master_model_container: 17
2023-02-13 21:18:03,636:INFO:_display_container: 2
2023-02-13 21:18:03,637:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=60, ...)
2023-02-13 21:18:03,637:INFO:create_model() successfully completed......................................
2023-02-13 21:18:03,807:INFO:SubProcess create_model() end ==================================
2023-02-13 21:18:03,807:INFO:Creating metrics dataframe
2023-02-13 21:18:03,839:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 21:18:03,839:INFO:Total runtime is 0.12006746927897136 minutes
2023-02-13 21:18:03,846:INFO:SubProcess create_model() called ==================================
2023-02-13 21:18:03,846:INFO:Initializing create_model()
2023-02-13 21:18:03,846:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:18:03,847:INFO:Checking exceptions
2023-02-13 21:18:03,847:INFO:Importing libraries
2023-02-13 21:18:03,847:INFO:Copying training dataset
2023-02-13 21:18:03,853:INFO:Defining folds
2023-02-13 21:18:03,853:INFO:Declaring metric variables
2023-02-13 21:18:03,859:INFO:Importing untrained model
2023-02-13 21:18:03,864:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 21:18:03,875:INFO:Starting cross validation
2023-02-13 21:18:03,877:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:18:04,345:INFO:Calculating mean and std
2023-02-13 21:18:04,345:INFO:Creating metrics dataframe
2023-02-13 21:18:04,353:INFO:Uploading results into container
2023-02-13 21:18:04,355:INFO:Uploading model into container now
2023-02-13 21:18:04,356:INFO:_master_model_container: 18
2023-02-13 21:18:04,356:INFO:_display_container: 2
2023-02-13 21:18:04,357:INFO:LGBMRegressor(random_state=60)
2023-02-13 21:18:04,357:INFO:create_model() successfully completed......................................
2023-02-13 21:18:04,493:INFO:SubProcess create_model() end ==================================
2023-02-13 21:18:04,493:INFO:Creating metrics dataframe
2023-02-13 21:18:04,540:INFO:Initializing Dummy Regressor
2023-02-13 21:18:04,541:INFO:Total runtime is 0.1317687233289083 minutes
2023-02-13 21:18:04,552:INFO:SubProcess create_model() called ==================================
2023-02-13 21:18:04,554:INFO:Initializing create_model()
2023-02-13 21:18:04,554:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD41138E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:18:04,554:INFO:Checking exceptions
2023-02-13 21:18:04,554:INFO:Importing libraries
2023-02-13 21:18:04,554:INFO:Copying training dataset
2023-02-13 21:18:04,559:INFO:Defining folds
2023-02-13 21:18:04,560:INFO:Declaring metric variables
2023-02-13 21:18:04,567:INFO:Importing untrained model
2023-02-13 21:18:04,573:INFO:Dummy Regressor Imported successfully
2023-02-13 21:18:04,585:INFO:Starting cross validation
2023-02-13 21:18:04,586:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 21:18:04,806:INFO:Calculating mean and std
2023-02-13 21:18:04,807:INFO:Creating metrics dataframe
2023-02-13 21:18:04,811:INFO:Uploading results into container
2023-02-13 21:18:04,812:INFO:Uploading model into container now
2023-02-13 21:18:04,812:INFO:_master_model_container: 19
2023-02-13 21:18:04,812:INFO:_display_container: 2
2023-02-13 21:18:04,813:INFO:DummyRegressor()
2023-02-13 21:18:04,813:INFO:create_model() successfully completed......................................
2023-02-13 21:18:04,921:INFO:SubProcess create_model() end ==================================
2023-02-13 21:18:04,921:INFO:Creating metrics dataframe
2023-02-13 21:18:04,950:INFO:Initializing create_model()
2023-02-13 21:18:04,950:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD3A099A0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 21:18:04,950:INFO:Checking exceptions
2023-02-13 21:18:04,952:INFO:Importing libraries
2023-02-13 21:18:04,953:INFO:Copying training dataset
2023-02-13 21:18:04,955:INFO:Defining folds
2023-02-13 21:18:04,955:INFO:Declaring metric variables
2023-02-13 21:18:04,956:INFO:Importing untrained model
2023-02-13 21:18:04,956:INFO:Declaring custom model
2023-02-13 21:18:04,956:INFO:Bayesian Ridge Imported successfully
2023-02-13 21:18:04,958:INFO:Cross validation set to False
2023-02-13 21:18:04,958:INFO:Fitting Model
2023-02-13 21:18:05,005:INFO:BayesianRidge()
2023-02-13 21:18:05,005:INFO:create_model() successfully completed......................................
2023-02-13 21:18:05,145:INFO:_master_model_container: 19
2023-02-13 21:18:05,145:INFO:_display_container: 2
2023-02-13 21:18:05,145:INFO:BayesianRidge()
2023-02-13 21:18:05,146:INFO:compare_models() successfully completed......................................
2023-02-13 22:26:59,886:INFO:PyCaret RegressionExperiment
2023-02-13 22:26:59,886:INFO:Logging name: reg-default-name
2023-02-13 22:26:59,886:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-13 22:26:59,886:INFO:version 3.0.0.rc8
2023-02-13 22:26:59,886:INFO:Initializing setup()
2023-02-13 22:26:59,886:INFO:self.USI: cc1c
2023-02-13 22:26:59,887:INFO:self._variable_keys: {'seed', 'transform_target_param', 'data', 'exp_id', 'html_param', '_ml_usecase', 'log_plots_param', 'gpu_param', 'y_train', 'exp_name_log', 'USI', 'target_param', 'fold_generator', 'X_train', 'fold_groups_param', 'X', 'gpu_n_jobs_param', '_available_plots', 'X_test', 'pipeline', 'fold_shuffle_param', 'idx', 'y_test', 'n_jobs_param', 'y', 'memory', 'logging_param'}
2023-02-13 22:26:59,887:INFO:Checking environment
2023-02-13 22:26:59,887:INFO:python_version: 3.9.13
2023-02-13 22:26:59,887:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-13 22:26:59,887:INFO:machine: AMD64
2023-02-13 22:26:59,887:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-13 22:26:59,891:INFO:Memory: svmem(total=16805040128, available=7692087296, percent=54.2, used=9112952832, free=7692087296)
2023-02-13 22:26:59,891:INFO:Physical Core: 4
2023-02-13 22:26:59,891:INFO:Logical Core: 8
2023-02-13 22:26:59,891:INFO:Checking libraries
2023-02-13 22:26:59,891:INFO:System:
2023-02-13 22:26:59,891:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-13 22:26:59,891:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-13 22:26:59,891:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-13 22:26:59,891:INFO:PyCaret required dependencies:
2023-02-13 22:26:59,891:INFO:                 pip: 23.0
2023-02-13 22:26:59,891:INFO:          setuptools: 58.1.0
2023-02-13 22:26:59,891:INFO:             pycaret: 3.0.0rc8
2023-02-13 22:26:59,891:INFO:             IPython: 8.7.0
2023-02-13 22:26:59,891:INFO:          ipywidgets: 8.0.4
2023-02-13 22:26:59,891:INFO:                tqdm: 4.64.1
2023-02-13 22:26:59,891:INFO:               numpy: 1.22.1
2023-02-13 22:26:59,891:INFO:              pandas: 1.5.2
2023-02-13 22:26:59,891:INFO:              jinja2: 3.1.2
2023-02-13 22:26:59,891:INFO:               scipy: 1.5.4
2023-02-13 22:26:59,891:INFO:              joblib: 1.2.0
2023-02-13 22:26:59,891:INFO:             sklearn: 1.1.3
2023-02-13 22:26:59,891:INFO:                pyod: 1.0.7
2023-02-13 22:26:59,891:INFO:            imblearn: 0.10.1
2023-02-13 22:26:59,891:INFO:   category_encoders: 2.6.0
2023-02-13 22:26:59,891:INFO:            lightgbm: 3.3.4
2023-02-13 22:26:59,891:INFO:               numba: 0.56.4
2023-02-13 22:26:59,891:INFO:            requests: 2.28.1
2023-02-13 22:26:59,891:INFO:          matplotlib: 3.6.2
2023-02-13 22:26:59,891:INFO:          scikitplot: 0.3.7
2023-02-13 22:26:59,891:INFO:         yellowbrick: 1.5
2023-02-13 22:26:59,891:INFO:              plotly: 5.11.0
2023-02-13 22:26:59,891:INFO:             kaleido: 0.2.1
2023-02-13 22:26:59,891:INFO:         statsmodels: 0.13.5
2023-02-13 22:26:59,891:INFO:              sktime: 0.15.1
2023-02-13 22:26:59,891:INFO:               tbats: 1.1.2
2023-02-13 22:26:59,891:INFO:            pmdarima: 2.0.2
2023-02-13 22:26:59,891:INFO:              psutil: 5.9.4
2023-02-13 22:26:59,894:INFO:PyCaret optional dependencies:
2023-02-13 22:26:59,894:INFO:                shap: 0.41.0
2023-02-13 22:26:59,894:INFO:           interpret: 0.3.0
2023-02-13 22:26:59,894:INFO:                umap: Not installed
2023-02-13 22:26:59,894:INFO:    pandas_profiling: 3.6.2
2023-02-13 22:26:59,894:INFO:  explainerdashboard: Not installed
2023-02-13 22:26:59,894:INFO:             autoviz: Not installed
2023-02-13 22:26:59,894:INFO:           fairlearn: Not installed
2023-02-13 22:26:59,894:INFO:             xgboost: 1.7.3
2023-02-13 22:26:59,894:INFO:            catboost: Not installed
2023-02-13 22:26:59,894:INFO:              kmodes: Not installed
2023-02-13 22:26:59,894:INFO:             mlxtend: Not installed
2023-02-13 22:26:59,894:INFO:       statsforecast: Not installed
2023-02-13 22:26:59,894:INFO:        tune_sklearn: Not installed
2023-02-13 22:26:59,894:INFO:                 ray: Not installed
2023-02-13 22:26:59,894:INFO:            hyperopt: Not installed
2023-02-13 22:26:59,894:INFO:              optuna: Not installed
2023-02-13 22:26:59,894:INFO:               skopt: Not installed
2023-02-13 22:26:59,894:INFO:              mlflow: Not installed
2023-02-13 22:26:59,894:INFO:              gradio: Not installed
2023-02-13 22:26:59,894:INFO:             fastapi: Not installed
2023-02-13 22:26:59,894:INFO:             uvicorn: Not installed
2023-02-13 22:26:59,895:INFO:              m2cgen: Not installed
2023-02-13 22:26:59,895:INFO:           evidently: Not installed
2023-02-13 22:26:59,895:INFO:                nltk: 3.8
2023-02-13 22:26:59,895:INFO:            pyLDAvis: Not installed
2023-02-13 22:26:59,895:INFO:              gensim: Not installed
2023-02-13 22:26:59,895:INFO:               spacy: Not installed
2023-02-13 22:26:59,895:INFO:           wordcloud: 1.8.2.2
2023-02-13 22:26:59,895:INFO:            textblob: Not installed
2023-02-13 22:26:59,895:INFO:               fugue: Not installed
2023-02-13 22:26:59,895:INFO:           streamlit: 1.16.0
2023-02-13 22:26:59,895:INFO:             prophet: Not installed
2023-02-13 22:26:59,895:INFO:None
2023-02-13 22:26:59,895:INFO:Set up data.
2023-02-13 22:26:59,905:INFO:Set up train/test split.
2023-02-13 22:26:59,909:INFO:Set up index.
2023-02-13 22:26:59,910:INFO:Set up folding strategy.
2023-02-13 22:26:59,910:INFO:Assigning column types.
2023-02-13 22:26:59,915:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-13 22:26:59,916:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 22:26:59,922:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 22:26:59,927:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 22:26:59,985:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,031:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,033:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:00,037:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:00,038:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,043:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,048:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,124:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,191:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,192:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:00,196:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:00,196:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-13 22:27:00,203:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,210:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,278:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,317:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,318:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:00,323:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:00,327:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,331:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,381:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,422:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,422:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:00,424:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:00,425:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-13 22:27:00,432:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,475:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,509:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,510:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:00,512:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:00,519:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,564:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,600:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,601:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:00,603:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:00,603:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-13 22:27:00,654:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,689:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,689:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:00,691:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:00,743:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,777:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,777:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:00,779:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:00,780:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-13 22:27:00,830:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 22:27:00,864:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:00,866:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:00,963:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-13 22:27:01,000:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:01,002:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:01,002:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-13 22:27:01,089:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:01,090:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:01,177:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:01,179:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:01,180:INFO:Preparing preprocessing pipeline...
2023-02-13 22:27:01,181:INFO:Set up column name cleaning.
2023-02-13 22:27:01,181:INFO:Set up simple imputation.
2023-02-13 22:27:01,203:INFO:Finished creating preprocessing pipeline.
2023-02-13 22:27:01,205:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-13 22:27:01,206:INFO:Creating final display dataframe.
2023-02-13 22:27:01,300:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              cc1c
2023-02-13 22:27:01,400:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:01,402:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:01,487:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-13 22:27:01,489:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-13 22:27:01,489:INFO:setup() successfully completed in 1.61s...............
2023-02-13 22:27:01,490:INFO:Initializing compare_models()
2023-02-13 22:27:01,490:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-13 22:27:01,490:INFO:Checking exceptions
2023-02-13 22:27:01,490:INFO:Preparing display monitor
2023-02-13 22:27:01,513:INFO:Initializing Linear Regression
2023-02-13 22:27:01,513:INFO:Total runtime is 0.0 minutes
2023-02-13 22:27:01,516:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:01,517:INFO:Initializing create_model()
2023-02-13 22:27:01,517:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:01,517:INFO:Checking exceptions
2023-02-13 22:27:01,517:INFO:Importing libraries
2023-02-13 22:27:01,517:INFO:Copying training dataset
2023-02-13 22:27:01,518:INFO:Defining folds
2023-02-13 22:27:01,520:INFO:Declaring metric variables
2023-02-13 22:27:01,523:INFO:Importing untrained model
2023-02-13 22:27:01,527:INFO:Linear Regression Imported successfully
2023-02-13 22:27:01,534:INFO:Starting cross validation
2023-02-13 22:27:01,535:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:05,623:INFO:Calculating mean and std
2023-02-13 22:27:05,624:INFO:Creating metrics dataframe
2023-02-13 22:27:05,626:INFO:Uploading results into container
2023-02-13 22:27:05,627:INFO:Uploading model into container now
2023-02-13 22:27:05,627:INFO:_master_model_container: 1
2023-02-13 22:27:05,627:INFO:_display_container: 2
2023-02-13 22:27:05,628:INFO:LinearRegression(n_jobs=-1)
2023-02-13 22:27:05,628:INFO:create_model() successfully completed......................................
2023-02-13 22:27:05,776:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:05,776:INFO:Creating metrics dataframe
2023-02-13 22:27:05,783:INFO:Initializing Lasso Regression
2023-02-13 22:27:05,783:INFO:Total runtime is 0.07116824785868327 minutes
2023-02-13 22:27:05,786:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:05,786:INFO:Initializing create_model()
2023-02-13 22:27:05,787:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:05,787:INFO:Checking exceptions
2023-02-13 22:27:05,787:INFO:Importing libraries
2023-02-13 22:27:05,787:INFO:Copying training dataset
2023-02-13 22:27:05,791:INFO:Defining folds
2023-02-13 22:27:05,791:INFO:Declaring metric variables
2023-02-13 22:27:05,795:INFO:Importing untrained model
2023-02-13 22:27:05,800:INFO:Lasso Regression Imported successfully
2023-02-13 22:27:05,809:INFO:Starting cross validation
2023-02-13 22:27:05,810:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:05,937:INFO:Calculating mean and std
2023-02-13 22:27:05,939:INFO:Creating metrics dataframe
2023-02-13 22:27:05,941:INFO:Uploading results into container
2023-02-13 22:27:05,942:INFO:Uploading model into container now
2023-02-13 22:27:05,942:INFO:_master_model_container: 2
2023-02-13 22:27:05,942:INFO:_display_container: 2
2023-02-13 22:27:05,943:INFO:Lasso(random_state=1)
2023-02-13 22:27:05,943:INFO:create_model() successfully completed......................................
2023-02-13 22:27:06,020:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:06,020:INFO:Creating metrics dataframe
2023-02-13 22:27:06,027:INFO:Initializing Ridge Regression
2023-02-13 22:27:06,027:INFO:Total runtime is 0.07524356444676716 minutes
2023-02-13 22:27:06,030:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:06,032:INFO:Initializing create_model()
2023-02-13 22:27:06,032:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:06,032:INFO:Checking exceptions
2023-02-13 22:27:06,032:INFO:Importing libraries
2023-02-13 22:27:06,032:INFO:Copying training dataset
2023-02-13 22:27:06,033:INFO:Defining folds
2023-02-13 22:27:06,033:INFO:Declaring metric variables
2023-02-13 22:27:06,035:INFO:Importing untrained model
2023-02-13 22:27:06,039:INFO:Ridge Regression Imported successfully
2023-02-13 22:27:06,048:INFO:Starting cross validation
2023-02-13 22:27:06,049:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:06,164:INFO:Calculating mean and std
2023-02-13 22:27:06,165:INFO:Creating metrics dataframe
2023-02-13 22:27:06,167:INFO:Uploading results into container
2023-02-13 22:27:06,168:INFO:Uploading model into container now
2023-02-13 22:27:06,168:INFO:_master_model_container: 3
2023-02-13 22:27:06,168:INFO:_display_container: 2
2023-02-13 22:27:06,168:INFO:Ridge(random_state=1)
2023-02-13 22:27:06,168:INFO:create_model() successfully completed......................................
2023-02-13 22:27:06,249:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:06,249:INFO:Creating metrics dataframe
2023-02-13 22:27:06,257:INFO:Initializing Elastic Net
2023-02-13 22:27:06,257:INFO:Total runtime is 0.07906312147776286 minutes
2023-02-13 22:27:06,260:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:06,260:INFO:Initializing create_model()
2023-02-13 22:27:06,260:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:06,260:INFO:Checking exceptions
2023-02-13 22:27:06,260:INFO:Importing libraries
2023-02-13 22:27:06,260:INFO:Copying training dataset
2023-02-13 22:27:06,262:INFO:Defining folds
2023-02-13 22:27:06,263:INFO:Declaring metric variables
2023-02-13 22:27:06,265:INFO:Importing untrained model
2023-02-13 22:27:06,267:INFO:Elastic Net Imported successfully
2023-02-13 22:27:06,275:INFO:Starting cross validation
2023-02-13 22:27:06,276:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:06,395:INFO:Calculating mean and std
2023-02-13 22:27:06,396:INFO:Creating metrics dataframe
2023-02-13 22:27:06,399:INFO:Uploading results into container
2023-02-13 22:27:06,399:INFO:Uploading model into container now
2023-02-13 22:27:06,400:INFO:_master_model_container: 4
2023-02-13 22:27:06,400:INFO:_display_container: 2
2023-02-13 22:27:06,400:INFO:ElasticNet(random_state=1)
2023-02-13 22:27:06,400:INFO:create_model() successfully completed......................................
2023-02-13 22:27:06,476:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:06,476:INFO:Creating metrics dataframe
2023-02-13 22:27:06,484:INFO:Initializing Least Angle Regression
2023-02-13 22:27:06,484:INFO:Total runtime is 0.0828603704770406 minutes
2023-02-13 22:27:06,486:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:06,488:INFO:Initializing create_model()
2023-02-13 22:27:06,488:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:06,489:INFO:Checking exceptions
2023-02-13 22:27:06,489:INFO:Importing libraries
2023-02-13 22:27:06,489:INFO:Copying training dataset
2023-02-13 22:27:06,490:INFO:Defining folds
2023-02-13 22:27:06,490:INFO:Declaring metric variables
2023-02-13 22:27:06,494:INFO:Importing untrained model
2023-02-13 22:27:06,496:INFO:Least Angle Regression Imported successfully
2023-02-13 22:27:06,502:INFO:Starting cross validation
2023-02-13 22:27:06,503:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:06,566:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:06,575:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:06,581:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:06,593:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:06,600:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:06,610:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:06,619:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:06,629:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:06,632:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:06,641:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:06,652:INFO:Calculating mean and std
2023-02-13 22:27:06,652:INFO:Creating metrics dataframe
2023-02-13 22:27:06,656:INFO:Uploading results into container
2023-02-13 22:27:06,656:INFO:Uploading model into container now
2023-02-13 22:27:06,657:INFO:_master_model_container: 5
2023-02-13 22:27:06,657:INFO:_display_container: 2
2023-02-13 22:27:06,657:INFO:Lars(random_state=1)
2023-02-13 22:27:06,657:INFO:create_model() successfully completed......................................
2023-02-13 22:27:06,736:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:06,736:INFO:Creating metrics dataframe
2023-02-13 22:27:06,743:INFO:Initializing Lasso Least Angle Regression
2023-02-13 22:27:06,744:INFO:Total runtime is 0.08719308376312256 minutes
2023-02-13 22:27:06,747:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:06,747:INFO:Initializing create_model()
2023-02-13 22:27:06,747:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:06,747:INFO:Checking exceptions
2023-02-13 22:27:06,747:INFO:Importing libraries
2023-02-13 22:27:06,747:INFO:Copying training dataset
2023-02-13 22:27:06,749:INFO:Defining folds
2023-02-13 22:27:06,749:INFO:Declaring metric variables
2023-02-13 22:27:06,751:INFO:Importing untrained model
2023-02-13 22:27:06,753:INFO:Lasso Least Angle Regression Imported successfully
2023-02-13 22:27:06,761:INFO:Starting cross validation
2023-02-13 22:27:06,762:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:06,798:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 22:27:06,806:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 22:27:06,812:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 22:27:06,820:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 22:27:06,827:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 22:27:06,837:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 22:27:06,845:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 22:27:06,853:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 22:27:06,859:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 22:27:06,869:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-13 22:27:06,880:INFO:Calculating mean and std
2023-02-13 22:27:06,880:INFO:Creating metrics dataframe
2023-02-13 22:27:06,884:INFO:Uploading results into container
2023-02-13 22:27:06,884:INFO:Uploading model into container now
2023-02-13 22:27:06,884:INFO:_master_model_container: 6
2023-02-13 22:27:06,884:INFO:_display_container: 2
2023-02-13 22:27:06,885:INFO:LassoLars(random_state=1)
2023-02-13 22:27:06,885:INFO:create_model() successfully completed......................................
2023-02-13 22:27:06,960:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:06,960:INFO:Creating metrics dataframe
2023-02-13 22:27:06,967:INFO:Initializing Orthogonal Matching Pursuit
2023-02-13 22:27:06,967:INFO:Total runtime is 0.09089485009511311 minutes
2023-02-13 22:27:06,968:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:06,968:INFO:Initializing create_model()
2023-02-13 22:27:06,968:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:06,968:INFO:Checking exceptions
2023-02-13 22:27:06,968:INFO:Importing libraries
2023-02-13 22:27:06,968:INFO:Copying training dataset
2023-02-13 22:27:06,973:INFO:Defining folds
2023-02-13 22:27:06,973:INFO:Declaring metric variables
2023-02-13 22:27:06,975:INFO:Importing untrained model
2023-02-13 22:27:06,977:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-13 22:27:06,983:INFO:Starting cross validation
2023-02-13 22:27:06,984:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:07,015:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:07,023:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:07,031:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:07,040:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:07,048:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:07,057:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:07,066:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:07,072:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:07,080:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:07,089:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-13 22:27:07,100:INFO:Calculating mean and std
2023-02-13 22:27:07,101:INFO:Creating metrics dataframe
2023-02-13 22:27:07,104:INFO:Uploading results into container
2023-02-13 22:27:07,105:INFO:Uploading model into container now
2023-02-13 22:27:07,105:INFO:_master_model_container: 7
2023-02-13 22:27:07,105:INFO:_display_container: 2
2023-02-13 22:27:07,105:INFO:OrthogonalMatchingPursuit()
2023-02-13 22:27:07,105:INFO:create_model() successfully completed......................................
2023-02-13 22:27:07,181:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:07,181:INFO:Creating metrics dataframe
2023-02-13 22:27:07,190:INFO:Initializing Bayesian Ridge
2023-02-13 22:27:07,190:INFO:Total runtime is 0.09461454947789509 minutes
2023-02-13 22:27:07,193:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:07,193:INFO:Initializing create_model()
2023-02-13 22:27:07,193:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:07,193:INFO:Checking exceptions
2023-02-13 22:27:07,193:INFO:Importing libraries
2023-02-13 22:27:07,193:INFO:Copying training dataset
2023-02-13 22:27:07,195:INFO:Defining folds
2023-02-13 22:27:07,195:INFO:Declaring metric variables
2023-02-13 22:27:07,197:INFO:Importing untrained model
2023-02-13 22:27:07,200:INFO:Bayesian Ridge Imported successfully
2023-02-13 22:27:07,207:INFO:Starting cross validation
2023-02-13 22:27:07,208:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:07,326:INFO:Calculating mean and std
2023-02-13 22:27:07,327:INFO:Creating metrics dataframe
2023-02-13 22:27:07,330:INFO:Uploading results into container
2023-02-13 22:27:07,330:INFO:Uploading model into container now
2023-02-13 22:27:07,330:INFO:_master_model_container: 8
2023-02-13 22:27:07,330:INFO:_display_container: 2
2023-02-13 22:27:07,331:INFO:BayesianRidge()
2023-02-13 22:27:07,331:INFO:create_model() successfully completed......................................
2023-02-13 22:27:07,414:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:07,415:INFO:Creating metrics dataframe
2023-02-13 22:27:07,421:INFO:Initializing Passive Aggressive Regressor
2023-02-13 22:27:07,422:INFO:Total runtime is 0.09849411646525064 minutes
2023-02-13 22:27:07,425:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:07,425:INFO:Initializing create_model()
2023-02-13 22:27:07,425:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:07,426:INFO:Checking exceptions
2023-02-13 22:27:07,426:INFO:Importing libraries
2023-02-13 22:27:07,426:INFO:Copying training dataset
2023-02-13 22:27:07,428:INFO:Defining folds
2023-02-13 22:27:07,428:INFO:Declaring metric variables
2023-02-13 22:27:07,431:INFO:Importing untrained model
2023-02-13 22:27:07,434:INFO:Passive Aggressive Regressor Imported successfully
2023-02-13 22:27:07,440:INFO:Starting cross validation
2023-02-13 22:27:07,441:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:07,565:INFO:Calculating mean and std
2023-02-13 22:27:07,565:INFO:Creating metrics dataframe
2023-02-13 22:27:07,568:INFO:Uploading results into container
2023-02-13 22:27:07,568:INFO:Uploading model into container now
2023-02-13 22:27:07,569:INFO:_master_model_container: 9
2023-02-13 22:27:07,569:INFO:_display_container: 2
2023-02-13 22:27:07,569:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-13 22:27:07,569:INFO:create_model() successfully completed......................................
2023-02-13 22:27:07,663:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:07,663:INFO:Creating metrics dataframe
2023-02-13 22:27:07,672:INFO:Initializing Huber Regressor
2023-02-13 22:27:07,672:INFO:Total runtime is 0.10264780918757119 minutes
2023-02-13 22:27:07,674:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:07,675:INFO:Initializing create_model()
2023-02-13 22:27:07,675:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:07,675:INFO:Checking exceptions
2023-02-13 22:27:07,675:INFO:Importing libraries
2023-02-13 22:27:07,675:INFO:Copying training dataset
2023-02-13 22:27:07,677:INFO:Defining folds
2023-02-13 22:27:07,677:INFO:Declaring metric variables
2023-02-13 22:27:07,680:INFO:Importing untrained model
2023-02-13 22:27:07,682:INFO:Huber Regressor Imported successfully
2023-02-13 22:27:07,687:INFO:Starting cross validation
2023-02-13 22:27:07,688:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:07,740:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 22:27:07,750:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 22:27:07,758:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 22:27:07,775:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 22:27:07,789:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 22:27:07,795:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 22:27:07,808:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 22:27:07,813:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 22:27:07,818:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 22:27:07,827:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-13 22:27:07,839:INFO:Calculating mean and std
2023-02-13 22:27:07,839:INFO:Creating metrics dataframe
2023-02-13 22:27:07,842:INFO:Uploading results into container
2023-02-13 22:27:07,842:INFO:Uploading model into container now
2023-02-13 22:27:07,843:INFO:_master_model_container: 10
2023-02-13 22:27:07,843:INFO:_display_container: 2
2023-02-13 22:27:07,843:INFO:HuberRegressor()
2023-02-13 22:27:07,843:INFO:create_model() successfully completed......................................
2023-02-13 22:27:07,918:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:07,918:INFO:Creating metrics dataframe
2023-02-13 22:27:07,926:INFO:Initializing K Neighbors Regressor
2023-02-13 22:27:07,926:INFO:Total runtime is 0.10688085158665973 minutes
2023-02-13 22:27:07,926:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:07,926:INFO:Initializing create_model()
2023-02-13 22:27:07,926:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:07,926:INFO:Checking exceptions
2023-02-13 22:27:07,926:INFO:Importing libraries
2023-02-13 22:27:07,926:INFO:Copying training dataset
2023-02-13 22:27:07,926:INFO:Defining folds
2023-02-13 22:27:07,926:INFO:Declaring metric variables
2023-02-13 22:27:07,926:INFO:Importing untrained model
2023-02-13 22:27:07,926:INFO:K Neighbors Regressor Imported successfully
2023-02-13 22:27:07,942:INFO:Starting cross validation
2023-02-13 22:27:07,943:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:08,075:INFO:Calculating mean and std
2023-02-13 22:27:08,076:INFO:Creating metrics dataframe
2023-02-13 22:27:08,078:INFO:Uploading results into container
2023-02-13 22:27:08,079:INFO:Uploading model into container now
2023-02-13 22:27:08,079:INFO:_master_model_container: 11
2023-02-13 22:27:08,079:INFO:_display_container: 2
2023-02-13 22:27:08,079:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-13 22:27:08,079:INFO:create_model() successfully completed......................................
2023-02-13 22:27:08,155:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:08,155:INFO:Creating metrics dataframe
2023-02-13 22:27:08,163:INFO:Initializing Decision Tree Regressor
2023-02-13 22:27:08,163:INFO:Total runtime is 0.11082886854807535 minutes
2023-02-13 22:27:08,165:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:08,165:INFO:Initializing create_model()
2023-02-13 22:27:08,165:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:08,165:INFO:Checking exceptions
2023-02-13 22:27:08,165:INFO:Importing libraries
2023-02-13 22:27:08,165:INFO:Copying training dataset
2023-02-13 22:27:08,167:INFO:Defining folds
2023-02-13 22:27:08,167:INFO:Declaring metric variables
2023-02-13 22:27:08,170:INFO:Importing untrained model
2023-02-13 22:27:08,174:INFO:Decision Tree Regressor Imported successfully
2023-02-13 22:27:08,179:INFO:Starting cross validation
2023-02-13 22:27:08,179:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:08,308:INFO:Calculating mean and std
2023-02-13 22:27:08,308:INFO:Creating metrics dataframe
2023-02-13 22:27:08,311:INFO:Uploading results into container
2023-02-13 22:27:08,312:INFO:Uploading model into container now
2023-02-13 22:27:08,312:INFO:_master_model_container: 12
2023-02-13 22:27:08,312:INFO:_display_container: 2
2023-02-13 22:27:08,312:INFO:DecisionTreeRegressor(random_state=1)
2023-02-13 22:27:08,312:INFO:create_model() successfully completed......................................
2023-02-13 22:27:08,388:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:08,388:INFO:Creating metrics dataframe
2023-02-13 22:27:08,396:INFO:Initializing Random Forest Regressor
2023-02-13 22:27:08,396:INFO:Total runtime is 0.11472165584564208 minutes
2023-02-13 22:27:08,399:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:08,399:INFO:Initializing create_model()
2023-02-13 22:27:08,399:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:08,399:INFO:Checking exceptions
2023-02-13 22:27:08,399:INFO:Importing libraries
2023-02-13 22:27:08,399:INFO:Copying training dataset
2023-02-13 22:27:08,400:INFO:Defining folds
2023-02-13 22:27:08,401:INFO:Declaring metric variables
2023-02-13 22:27:08,405:INFO:Importing untrained model
2023-02-13 22:27:08,407:INFO:Random Forest Regressor Imported successfully
2023-02-13 22:27:08,413:INFO:Starting cross validation
2023-02-13 22:27:08,414:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:08,862:INFO:Calculating mean and std
2023-02-13 22:27:08,863:INFO:Creating metrics dataframe
2023-02-13 22:27:08,865:INFO:Uploading results into container
2023-02-13 22:27:08,866:INFO:Uploading model into container now
2023-02-13 22:27:08,866:INFO:_master_model_container: 13
2023-02-13 22:27:08,866:INFO:_display_container: 2
2023-02-13 22:27:08,866:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-13 22:27:08,866:INFO:create_model() successfully completed......................................
2023-02-13 22:27:08,940:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:08,940:INFO:Creating metrics dataframe
2023-02-13 22:27:08,948:INFO:Initializing Extra Trees Regressor
2023-02-13 22:27:08,948:INFO:Total runtime is 0.12392595211664834 minutes
2023-02-13 22:27:08,950:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:08,950:INFO:Initializing create_model()
2023-02-13 22:27:08,950:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:08,950:INFO:Checking exceptions
2023-02-13 22:27:08,950:INFO:Importing libraries
2023-02-13 22:27:08,950:INFO:Copying training dataset
2023-02-13 22:27:08,954:INFO:Defining folds
2023-02-13 22:27:08,955:INFO:Declaring metric variables
2023-02-13 22:27:08,957:INFO:Importing untrained model
2023-02-13 22:27:08,959:INFO:Extra Trees Regressor Imported successfully
2023-02-13 22:27:08,964:INFO:Starting cross validation
2023-02-13 22:27:08,965:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:09,348:INFO:Calculating mean and std
2023-02-13 22:27:09,348:INFO:Creating metrics dataframe
2023-02-13 22:27:09,351:INFO:Uploading results into container
2023-02-13 22:27:09,353:INFO:Uploading model into container now
2023-02-13 22:27:09,353:INFO:_master_model_container: 14
2023-02-13 22:27:09,353:INFO:_display_container: 2
2023-02-13 22:27:09,353:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-13 22:27:09,354:INFO:create_model() successfully completed......................................
2023-02-13 22:27:09,428:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:09,428:INFO:Creating metrics dataframe
2023-02-13 22:27:09,437:INFO:Initializing AdaBoost Regressor
2023-02-13 22:27:09,437:INFO:Total runtime is 0.13206769227981566 minutes
2023-02-13 22:27:09,439:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:09,439:INFO:Initializing create_model()
2023-02-13 22:27:09,439:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:09,440:INFO:Checking exceptions
2023-02-13 22:27:09,440:INFO:Importing libraries
2023-02-13 22:27:09,440:INFO:Copying training dataset
2023-02-13 22:27:09,441:INFO:Defining folds
2023-02-13 22:27:09,442:INFO:Declaring metric variables
2023-02-13 22:27:09,444:INFO:Importing untrained model
2023-02-13 22:27:09,446:INFO:AdaBoost Regressor Imported successfully
2023-02-13 22:27:09,453:INFO:Starting cross validation
2023-02-13 22:27:09,454:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:09,656:INFO:Calculating mean and std
2023-02-13 22:27:09,656:INFO:Creating metrics dataframe
2023-02-13 22:27:09,659:INFO:Uploading results into container
2023-02-13 22:27:09,659:INFO:Uploading model into container now
2023-02-13 22:27:09,660:INFO:_master_model_container: 15
2023-02-13 22:27:09,660:INFO:_display_container: 2
2023-02-13 22:27:09,660:INFO:AdaBoostRegressor(random_state=1)
2023-02-13 22:27:09,660:INFO:create_model() successfully completed......................................
2023-02-13 22:27:09,738:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:09,738:INFO:Creating metrics dataframe
2023-02-13 22:27:09,746:INFO:Initializing Gradient Boosting Regressor
2023-02-13 22:27:09,746:INFO:Total runtime is 0.13722616434097287 minutes
2023-02-13 22:27:09,749:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:09,749:INFO:Initializing create_model()
2023-02-13 22:27:09,749:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:09,749:INFO:Checking exceptions
2023-02-13 22:27:09,749:INFO:Importing libraries
2023-02-13 22:27:09,749:INFO:Copying training dataset
2023-02-13 22:27:09,752:INFO:Defining folds
2023-02-13 22:27:09,753:INFO:Declaring metric variables
2023-02-13 22:27:09,755:INFO:Importing untrained model
2023-02-13 22:27:09,758:INFO:Gradient Boosting Regressor Imported successfully
2023-02-13 22:27:09,764:INFO:Starting cross validation
2023-02-13 22:27:09,765:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:09,946:INFO:Calculating mean and std
2023-02-13 22:27:09,946:INFO:Creating metrics dataframe
2023-02-13 22:27:09,949:INFO:Uploading results into container
2023-02-13 22:27:09,949:INFO:Uploading model into container now
2023-02-13 22:27:09,949:INFO:_master_model_container: 16
2023-02-13 22:27:09,949:INFO:_display_container: 2
2023-02-13 22:27:09,949:INFO:GradientBoostingRegressor(random_state=1)
2023-02-13 22:27:09,949:INFO:create_model() successfully completed......................................
2023-02-13 22:27:10,026:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:10,026:INFO:Creating metrics dataframe
2023-02-13 22:27:10,036:INFO:Initializing Extreme Gradient Boosting
2023-02-13 22:27:10,036:INFO:Total runtime is 0.1420591870943705 minutes
2023-02-13 22:27:10,038:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:10,038:INFO:Initializing create_model()
2023-02-13 22:27:10,038:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:10,039:INFO:Checking exceptions
2023-02-13 22:27:10,039:INFO:Importing libraries
2023-02-13 22:27:10,039:INFO:Copying training dataset
2023-02-13 22:27:10,041:INFO:Defining folds
2023-02-13 22:27:10,041:INFO:Declaring metric variables
2023-02-13 22:27:10,044:INFO:Importing untrained model
2023-02-13 22:27:10,046:INFO:Extreme Gradient Boosting Imported successfully
2023-02-13 22:27:10,052:INFO:Starting cross validation
2023-02-13 22:27:10,053:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:10,273:INFO:Calculating mean and std
2023-02-13 22:27:10,274:INFO:Creating metrics dataframe
2023-02-13 22:27:10,276:INFO:Uploading results into container
2023-02-13 22:27:10,278:INFO:Uploading model into container now
2023-02-13 22:27:10,278:INFO:_master_model_container: 17
2023-02-13 22:27:10,278:INFO:_display_container: 2
2023-02-13 22:27:10,279:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-13 22:27:10,279:INFO:create_model() successfully completed......................................
2023-02-13 22:27:10,356:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:10,356:INFO:Creating metrics dataframe
2023-02-13 22:27:10,368:INFO:Initializing Light Gradient Boosting Machine
2023-02-13 22:27:10,368:INFO:Total runtime is 0.14758414824803667 minutes
2023-02-13 22:27:10,371:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:10,371:INFO:Initializing create_model()
2023-02-13 22:27:10,371:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:10,371:INFO:Checking exceptions
2023-02-13 22:27:10,371:INFO:Importing libraries
2023-02-13 22:27:10,371:INFO:Copying training dataset
2023-02-13 22:27:10,374:INFO:Defining folds
2023-02-13 22:27:10,374:INFO:Declaring metric variables
2023-02-13 22:27:10,377:INFO:Importing untrained model
2023-02-13 22:27:10,379:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-13 22:27:10,385:INFO:Starting cross validation
2023-02-13 22:27:10,386:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:10,595:INFO:Calculating mean and std
2023-02-13 22:27:10,595:INFO:Creating metrics dataframe
2023-02-13 22:27:10,598:INFO:Uploading results into container
2023-02-13 22:27:10,598:INFO:Uploading model into container now
2023-02-13 22:27:10,598:INFO:_master_model_container: 18
2023-02-13 22:27:10,598:INFO:_display_container: 2
2023-02-13 22:27:10,599:INFO:LGBMRegressor(random_state=1)
2023-02-13 22:27:10,599:INFO:create_model() successfully completed......................................
2023-02-13 22:27:10,675:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:10,675:INFO:Creating metrics dataframe
2023-02-13 22:27:10,683:INFO:Initializing Dummy Regressor
2023-02-13 22:27:10,683:INFO:Total runtime is 0.15284235874811805 minutes
2023-02-13 22:27:10,688:INFO:SubProcess create_model() called ==================================
2023-02-13 22:27:10,688:INFO:Initializing create_model()
2023-02-13 22:27:10,688:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021FD8A6DDC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:10,688:INFO:Checking exceptions
2023-02-13 22:27:10,688:INFO:Importing libraries
2023-02-13 22:27:10,689:INFO:Copying training dataset
2023-02-13 22:27:10,691:INFO:Defining folds
2023-02-13 22:27:10,691:INFO:Declaring metric variables
2023-02-13 22:27:10,694:INFO:Importing untrained model
2023-02-13 22:27:10,696:INFO:Dummy Regressor Imported successfully
2023-02-13 22:27:10,702:INFO:Starting cross validation
2023-02-13 22:27:10,703:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-13 22:27:10,812:INFO:Calculating mean and std
2023-02-13 22:27:10,813:INFO:Creating metrics dataframe
2023-02-13 22:27:10,815:INFO:Uploading results into container
2023-02-13 22:27:10,815:INFO:Uploading model into container now
2023-02-13 22:27:10,815:INFO:_master_model_container: 19
2023-02-13 22:27:10,815:INFO:_display_container: 2
2023-02-13 22:27:10,815:INFO:DummyRegressor()
2023-02-13 22:27:10,815:INFO:create_model() successfully completed......................................
2023-02-13 22:27:10,891:INFO:SubProcess create_model() end ==================================
2023-02-13 22:27:10,891:INFO:Creating metrics dataframe
2023-02-13 22:27:10,907:INFO:Initializing create_model()
2023-02-13 22:27:10,907:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021FD432B730>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-13 22:27:10,909:INFO:Checking exceptions
2023-02-13 22:27:10,910:INFO:Importing libraries
2023-02-13 22:27:10,910:INFO:Copying training dataset
2023-02-13 22:27:10,911:INFO:Defining folds
2023-02-13 22:27:10,911:INFO:Declaring metric variables
2023-02-13 22:27:10,911:INFO:Importing untrained model
2023-02-13 22:27:10,911:INFO:Declaring custom model
2023-02-13 22:27:10,911:INFO:Bayesian Ridge Imported successfully
2023-02-13 22:27:10,912:INFO:Cross validation set to False
2023-02-13 22:27:10,912:INFO:Fitting Model
2023-02-13 22:27:10,929:INFO:BayesianRidge()
2023-02-13 22:27:10,929:INFO:create_model() successfully completed......................................
2023-02-13 22:27:11,034:INFO:_master_model_container: 19
2023-02-13 22:27:11,034:INFO:_display_container: 2
2023-02-13 22:27:11,035:INFO:BayesianRidge()
2023-02-13 22:27:11,035:INFO:compare_models() successfully completed......................................
2023-02-14 08:17:16,249:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 08:17:16,249:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 08:17:16,257:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 08:17:16,257:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 08:17:17,445:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-14 08:17:28,842:INFO:PyCaret RegressionExperiment
2023-02-14 08:17:28,842:INFO:Logging name: reg-default-name
2023-02-14 08:17:28,842:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 08:17:28,844:INFO:version 3.0.0.rc8
2023-02-14 08:17:28,844:INFO:Initializing setup()
2023-02-14 08:17:28,844:INFO:self.USI: 5805
2023-02-14 08:17:28,844:INFO:self._variable_keys: {'html_param', 'data', '_available_plots', 'idx', 'fold_generator', 'X_train', 'y_test', 'exp_name_log', 'gpu_param', 'exp_id', 'fold_shuffle_param', 'log_plots_param', 'y', 'seed', 'gpu_n_jobs_param', 'target_param', 'X', 'transform_target_param', 'memory', 'fold_groups_param', 'y_train', 'X_test', '_ml_usecase', 'logging_param', 'n_jobs_param', 'USI', 'pipeline'}
2023-02-14 08:17:28,844:INFO:Checking environment
2023-02-14 08:17:28,844:INFO:python_version: 3.9.13
2023-02-14 08:17:28,844:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 08:17:28,844:INFO:machine: AMD64
2023-02-14 08:17:28,844:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 08:17:28,849:INFO:Memory: svmem(total=16805040128, available=6413017088, percent=61.8, used=10392023040, free=6413017088)
2023-02-14 08:17:28,849:INFO:Physical Core: 4
2023-02-14 08:17:28,849:INFO:Logical Core: 8
2023-02-14 08:17:28,849:INFO:Checking libraries
2023-02-14 08:17:28,849:INFO:System:
2023-02-14 08:17:28,849:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 08:17:28,849:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 08:17:28,849:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 08:17:28,849:INFO:PyCaret required dependencies:
2023-02-14 08:17:28,849:INFO:                 pip: 23.0
2023-02-14 08:17:28,849:INFO:          setuptools: 58.1.0
2023-02-14 08:17:28,849:INFO:             pycaret: 3.0.0rc8
2023-02-14 08:17:28,849:INFO:             IPython: 8.7.0
2023-02-14 08:17:28,849:INFO:          ipywidgets: 8.0.4
2023-02-14 08:17:28,849:INFO:                tqdm: 4.64.1
2023-02-14 08:17:28,849:INFO:               numpy: 1.22.1
2023-02-14 08:17:28,849:INFO:              pandas: 1.5.2
2023-02-14 08:17:28,849:INFO:              jinja2: 3.1.2
2023-02-14 08:17:28,849:INFO:               scipy: 1.5.4
2023-02-14 08:17:28,849:INFO:              joblib: 1.2.0
2023-02-14 08:17:28,849:INFO:             sklearn: 1.1.3
2023-02-14 08:17:28,849:INFO:                pyod: 1.0.7
2023-02-14 08:17:28,849:INFO:            imblearn: 0.10.1
2023-02-14 08:17:28,849:INFO:   category_encoders: 2.6.0
2023-02-14 08:17:28,849:INFO:            lightgbm: 3.3.4
2023-02-14 08:17:28,849:INFO:               numba: 0.56.4
2023-02-14 08:17:28,849:INFO:            requests: 2.28.1
2023-02-14 08:17:28,849:INFO:          matplotlib: 3.6.2
2023-02-14 08:17:28,849:INFO:          scikitplot: 0.3.7
2023-02-14 08:17:28,849:INFO:         yellowbrick: 1.5
2023-02-14 08:17:28,849:INFO:              plotly: 5.11.0
2023-02-14 08:17:28,849:INFO:             kaleido: 0.2.1
2023-02-14 08:17:28,849:INFO:         statsmodels: 0.13.5
2023-02-14 08:17:28,849:INFO:              sktime: 0.15.1
2023-02-14 08:17:28,849:INFO:               tbats: 1.1.2
2023-02-14 08:17:28,852:INFO:            pmdarima: 2.0.2
2023-02-14 08:17:28,852:INFO:              psutil: 5.9.4
2023-02-14 08:17:28,852:INFO:PyCaret optional dependencies:
2023-02-14 08:17:28,869:INFO:                shap: 0.41.0
2023-02-14 08:17:28,869:INFO:           interpret: 0.3.0
2023-02-14 08:17:28,869:INFO:                umap: Not installed
2023-02-14 08:17:28,869:INFO:    pandas_profiling: 3.6.2
2023-02-14 08:17:28,869:INFO:  explainerdashboard: Not installed
2023-02-14 08:17:28,869:INFO:             autoviz: Not installed
2023-02-14 08:17:28,869:INFO:           fairlearn: Not installed
2023-02-14 08:17:28,869:INFO:             xgboost: 1.7.3
2023-02-14 08:17:28,869:INFO:            catboost: Not installed
2023-02-14 08:17:28,869:INFO:              kmodes: Not installed
2023-02-14 08:17:28,869:INFO:             mlxtend: Not installed
2023-02-14 08:17:28,869:INFO:       statsforecast: Not installed
2023-02-14 08:17:28,869:INFO:        tune_sklearn: Not installed
2023-02-14 08:17:28,870:INFO:                 ray: Not installed
2023-02-14 08:17:28,870:INFO:            hyperopt: Not installed
2023-02-14 08:17:28,870:INFO:              optuna: Not installed
2023-02-14 08:17:28,870:INFO:               skopt: Not installed
2023-02-14 08:17:28,870:INFO:              mlflow: Not installed
2023-02-14 08:17:28,870:INFO:              gradio: Not installed
2023-02-14 08:17:28,870:INFO:             fastapi: Not installed
2023-02-14 08:17:28,870:INFO:             uvicorn: Not installed
2023-02-14 08:17:28,870:INFO:              m2cgen: Not installed
2023-02-14 08:17:28,870:INFO:           evidently: Not installed
2023-02-14 08:17:28,870:INFO:                nltk: 3.8
2023-02-14 08:17:28,870:INFO:            pyLDAvis: Not installed
2023-02-14 08:17:28,870:INFO:              gensim: Not installed
2023-02-14 08:17:28,870:INFO:               spacy: Not installed
2023-02-14 08:17:28,870:INFO:           wordcloud: 1.8.2.2
2023-02-14 08:17:28,870:INFO:            textblob: Not installed
2023-02-14 08:17:28,870:INFO:               fugue: Not installed
2023-02-14 08:17:28,870:INFO:           streamlit: 1.16.0
2023-02-14 08:17:28,870:INFO:             prophet: Not installed
2023-02-14 08:17:28,870:INFO:None
2023-02-14 08:17:28,870:INFO:Set up data.
2023-02-14 08:17:28,870:INFO:Set up train/test split.
2023-02-14 08:17:28,877:INFO:Set up index.
2023-02-14 08:17:28,877:INFO:Set up folding strategy.
2023-02-14 08:17:28,877:INFO:Assigning column types.
2023-02-14 08:17:28,877:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 08:17:28,877:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 08:17:28,887:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 08:17:28,895:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 08:17:28,944:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,013:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,013:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:29,190:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:29,190:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,198:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,198:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,262:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,299:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,299:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:29,299:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:29,299:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 08:17:29,305:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,305:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,353:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,394:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,394:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:29,394:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:29,394:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,401:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,447:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,483:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,483:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:29,483:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:29,483:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 08:17:29,494:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,532:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,567:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,567:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:29,575:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:29,582:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,628:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,662:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,662:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:29,662:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:29,662:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 08:17:29,715:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,747:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,747:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:29,756:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:29,804:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,844:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,845:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:29,847:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:29,847:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 08:17:29,903:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 08:17:29,936:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:29,936:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:29,986:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 08:17:30,021:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:30,021:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:30,021:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 08:17:30,111:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:30,113:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:30,200:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:30,200:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:30,216:INFO:Preparing preprocessing pipeline...
2023-02-14 08:17:30,216:INFO:Set up column name cleaning.
2023-02-14 08:17:30,216:INFO:Set up simple imputation.
2023-02-14 08:17:30,243:INFO:Finished creating preprocessing pipeline.
2023-02-14 08:17:30,249:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 08:17:30,249:INFO:Creating final display dataframe.
2023-02-14 08:17:30,413:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              5805
2023-02-14 08:17:30,519:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:30,524:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:30,610:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 08:17:30,613:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 08:17:30,613:INFO:setup() successfully completed in 1.77s...............
2023-02-14 08:17:30,616:INFO:Initializing compare_models()
2023-02-14 08:17:30,616:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 08:17:30,616:INFO:Checking exceptions
2023-02-14 08:17:30,616:INFO:Preparing display monitor
2023-02-14 08:17:30,644:INFO:Initializing Linear Regression
2023-02-14 08:17:30,644:INFO:Total runtime is 0.0 minutes
2023-02-14 08:17:30,647:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:30,647:INFO:Initializing create_model()
2023-02-14 08:17:30,647:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:30,647:INFO:Checking exceptions
2023-02-14 08:17:30,647:INFO:Importing libraries
2023-02-14 08:17:30,647:INFO:Copying training dataset
2023-02-14 08:17:30,649:INFO:Defining folds
2023-02-14 08:17:30,649:INFO:Declaring metric variables
2023-02-14 08:17:30,649:INFO:Importing untrained model
2023-02-14 08:17:30,659:INFO:Linear Regression Imported successfully
2023-02-14 08:17:30,665:INFO:Starting cross validation
2023-02-14 08:17:30,682:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:35,145:INFO:Calculating mean and std
2023-02-14 08:17:35,145:INFO:Creating metrics dataframe
2023-02-14 08:17:35,145:INFO:Uploading results into container
2023-02-14 08:17:35,145:INFO:Uploading model into container now
2023-02-14 08:17:35,145:INFO:_master_model_container: 1
2023-02-14 08:17:35,145:INFO:_display_container: 2
2023-02-14 08:17:35,145:INFO:LinearRegression(n_jobs=-1)
2023-02-14 08:17:35,145:INFO:create_model() successfully completed......................................
2023-02-14 08:17:35,250:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:35,250:INFO:Creating metrics dataframe
2023-02-14 08:17:35,263:INFO:Initializing Lasso Regression
2023-02-14 08:17:35,263:INFO:Total runtime is 0.07697491645812989 minutes
2023-02-14 08:17:35,267:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:35,271:INFO:Initializing create_model()
2023-02-14 08:17:35,271:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:35,271:INFO:Checking exceptions
2023-02-14 08:17:35,271:INFO:Importing libraries
2023-02-14 08:17:35,271:INFO:Copying training dataset
2023-02-14 08:17:35,275:INFO:Defining folds
2023-02-14 08:17:35,275:INFO:Declaring metric variables
2023-02-14 08:17:35,286:INFO:Importing untrained model
2023-02-14 08:17:35,300:INFO:Lasso Regression Imported successfully
2023-02-14 08:17:35,318:INFO:Starting cross validation
2023-02-14 08:17:35,319:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:35,580:INFO:Calculating mean and std
2023-02-14 08:17:35,580:INFO:Creating metrics dataframe
2023-02-14 08:17:35,580:INFO:Uploading results into container
2023-02-14 08:17:35,587:INFO:Uploading model into container now
2023-02-14 08:17:35,587:INFO:_master_model_container: 2
2023-02-14 08:17:35,587:INFO:_display_container: 2
2023-02-14 08:17:35,587:INFO:Lasso(random_state=1)
2023-02-14 08:17:35,587:INFO:create_model() successfully completed......................................
2023-02-14 08:17:35,689:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:35,689:INFO:Creating metrics dataframe
2023-02-14 08:17:35,702:INFO:Initializing Ridge Regression
2023-02-14 08:17:35,705:INFO:Total runtime is 0.08432257175445557 minutes
2023-02-14 08:17:35,705:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:35,705:INFO:Initializing create_model()
2023-02-14 08:17:35,705:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:35,705:INFO:Checking exceptions
2023-02-14 08:17:35,705:INFO:Importing libraries
2023-02-14 08:17:35,705:INFO:Copying training dataset
2023-02-14 08:17:35,710:INFO:Defining folds
2023-02-14 08:17:35,710:INFO:Declaring metric variables
2023-02-14 08:17:35,714:INFO:Importing untrained model
2023-02-14 08:17:35,720:INFO:Ridge Regression Imported successfully
2023-02-14 08:17:35,729:INFO:Starting cross validation
2023-02-14 08:17:35,729:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:35,928:INFO:Calculating mean and std
2023-02-14 08:17:35,929:INFO:Creating metrics dataframe
2023-02-14 08:17:35,933:INFO:Uploading results into container
2023-02-14 08:17:35,933:INFO:Uploading model into container now
2023-02-14 08:17:35,933:INFO:_master_model_container: 3
2023-02-14 08:17:35,934:INFO:_display_container: 2
2023-02-14 08:17:35,934:INFO:Ridge(random_state=1)
2023-02-14 08:17:35,934:INFO:create_model() successfully completed......................................
2023-02-14 08:17:36,036:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:36,036:INFO:Creating metrics dataframe
2023-02-14 08:17:36,041:INFO:Initializing Elastic Net
2023-02-14 08:17:36,048:INFO:Total runtime is 0.09005413055419922 minutes
2023-02-14 08:17:36,050:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:36,052:INFO:Initializing create_model()
2023-02-14 08:17:36,052:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:36,052:INFO:Checking exceptions
2023-02-14 08:17:36,052:INFO:Importing libraries
2023-02-14 08:17:36,052:INFO:Copying training dataset
2023-02-14 08:17:36,056:INFO:Defining folds
2023-02-14 08:17:36,056:INFO:Declaring metric variables
2023-02-14 08:17:36,061:INFO:Importing untrained model
2023-02-14 08:17:36,064:INFO:Elastic Net Imported successfully
2023-02-14 08:17:36,074:INFO:Starting cross validation
2023-02-14 08:17:36,075:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:36,284:INFO:Calculating mean and std
2023-02-14 08:17:36,285:INFO:Creating metrics dataframe
2023-02-14 08:17:36,286:INFO:Uploading results into container
2023-02-14 08:17:36,286:INFO:Uploading model into container now
2023-02-14 08:17:36,291:INFO:_master_model_container: 4
2023-02-14 08:17:36,291:INFO:_display_container: 2
2023-02-14 08:17:36,291:INFO:ElasticNet(random_state=1)
2023-02-14 08:17:36,291:INFO:create_model() successfully completed......................................
2023-02-14 08:17:36,391:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:36,391:INFO:Creating metrics dataframe
2023-02-14 08:17:36,395:INFO:Initializing Least Angle Regression
2023-02-14 08:17:36,395:INFO:Total runtime is 0.09583961168924968 minutes
2023-02-14 08:17:36,405:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:36,405:INFO:Initializing create_model()
2023-02-14 08:17:36,405:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:36,405:INFO:Checking exceptions
2023-02-14 08:17:36,405:INFO:Importing libraries
2023-02-14 08:17:36,405:INFO:Copying training dataset
2023-02-14 08:17:36,410:INFO:Defining folds
2023-02-14 08:17:36,412:INFO:Declaring metric variables
2023-02-14 08:17:36,412:INFO:Importing untrained model
2023-02-14 08:17:36,420:INFO:Least Angle Regression Imported successfully
2023-02-14 08:17:36,430:INFO:Starting cross validation
2023-02-14 08:17:36,430:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:36,477:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:36,493:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:36,501:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:36,512:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:36,527:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:36,542:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:36,557:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:36,568:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:36,580:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:36,591:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:36,608:INFO:Calculating mean and std
2023-02-14 08:17:36,608:INFO:Creating metrics dataframe
2023-02-14 08:17:36,608:INFO:Uploading results into container
2023-02-14 08:17:36,616:INFO:Uploading model into container now
2023-02-14 08:17:36,616:INFO:_master_model_container: 5
2023-02-14 08:17:36,616:INFO:_display_container: 2
2023-02-14 08:17:36,617:INFO:Lars(random_state=1)
2023-02-14 08:17:36,617:INFO:create_model() successfully completed......................................
2023-02-14 08:17:36,714:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:36,714:INFO:Creating metrics dataframe
2023-02-14 08:17:36,726:INFO:Initializing Lasso Least Angle Regression
2023-02-14 08:17:36,726:INFO:Total runtime is 0.10136412779490153 minutes
2023-02-14 08:17:36,728:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:36,731:INFO:Initializing create_model()
2023-02-14 08:17:36,731:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:36,731:INFO:Checking exceptions
2023-02-14 08:17:36,731:INFO:Importing libraries
2023-02-14 08:17:36,731:INFO:Copying training dataset
2023-02-14 08:17:36,735:INFO:Defining folds
2023-02-14 08:17:36,735:INFO:Declaring metric variables
2023-02-14 08:17:36,740:INFO:Importing untrained model
2023-02-14 08:17:36,742:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 08:17:36,750:INFO:Starting cross validation
2023-02-14 08:17:36,754:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:36,805:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 08:17:36,818:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 08:17:36,831:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 08:17:36,846:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 08:17:36,854:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 08:17:36,866:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 08:17:36,879:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 08:17:36,895:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 08:17:36,903:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 08:17:36,912:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 08:17:36,927:INFO:Calculating mean and std
2023-02-14 08:17:36,933:INFO:Creating metrics dataframe
2023-02-14 08:17:36,936:INFO:Uploading results into container
2023-02-14 08:17:36,938:INFO:Uploading model into container now
2023-02-14 08:17:36,938:INFO:_master_model_container: 6
2023-02-14 08:17:36,938:INFO:_display_container: 2
2023-02-14 08:17:36,938:INFO:LassoLars(random_state=1)
2023-02-14 08:17:36,938:INFO:create_model() successfully completed......................................
2023-02-14 08:17:37,034:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:37,034:INFO:Creating metrics dataframe
2023-02-14 08:17:37,047:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 08:17:37,047:INFO:Total runtime is 0.10670838356018067 minutes
2023-02-14 08:17:37,053:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:37,060:INFO:Initializing create_model()
2023-02-14 08:17:37,060:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:37,060:INFO:Checking exceptions
2023-02-14 08:17:37,060:INFO:Importing libraries
2023-02-14 08:17:37,060:INFO:Copying training dataset
2023-02-14 08:17:37,063:INFO:Defining folds
2023-02-14 08:17:37,063:INFO:Declaring metric variables
2023-02-14 08:17:37,070:INFO:Importing untrained model
2023-02-14 08:17:37,075:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 08:17:37,080:INFO:Starting cross validation
2023-02-14 08:17:37,083:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:37,126:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:37,145:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:37,160:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:37,169:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:37,198:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:37,222:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:37,229:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:37,244:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:37,257:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:37,264:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 08:17:37,289:INFO:Calculating mean and std
2023-02-14 08:17:37,289:INFO:Creating metrics dataframe
2023-02-14 08:17:37,292:INFO:Uploading results into container
2023-02-14 08:17:37,293:INFO:Uploading model into container now
2023-02-14 08:17:37,293:INFO:_master_model_container: 7
2023-02-14 08:17:37,293:INFO:_display_container: 2
2023-02-14 08:17:37,293:INFO:OrthogonalMatchingPursuit()
2023-02-14 08:17:37,293:INFO:create_model() successfully completed......................................
2023-02-14 08:17:37,389:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:37,389:INFO:Creating metrics dataframe
2023-02-14 08:17:37,408:INFO:Initializing Bayesian Ridge
2023-02-14 08:17:37,408:INFO:Total runtime is 0.11272116502126059 minutes
2023-02-14 08:17:37,412:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:37,413:INFO:Initializing create_model()
2023-02-14 08:17:37,413:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:37,413:INFO:Checking exceptions
2023-02-14 08:17:37,413:INFO:Importing libraries
2023-02-14 08:17:37,413:INFO:Copying training dataset
2023-02-14 08:17:37,416:INFO:Defining folds
2023-02-14 08:17:37,416:INFO:Declaring metric variables
2023-02-14 08:17:37,421:INFO:Importing untrained model
2023-02-14 08:17:37,422:INFO:Bayesian Ridge Imported successfully
2023-02-14 08:17:37,431:INFO:Starting cross validation
2023-02-14 08:17:37,434:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:37,597:INFO:Calculating mean and std
2023-02-14 08:17:37,597:INFO:Creating metrics dataframe
2023-02-14 08:17:37,602:INFO:Uploading results into container
2023-02-14 08:17:37,602:INFO:Uploading model into container now
2023-02-14 08:17:37,602:INFO:_master_model_container: 8
2023-02-14 08:17:37,602:INFO:_display_container: 2
2023-02-14 08:17:37,602:INFO:BayesianRidge()
2023-02-14 08:17:37,602:INFO:create_model() successfully completed......................................
2023-02-14 08:17:37,693:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:37,693:INFO:Creating metrics dataframe
2023-02-14 08:17:37,704:INFO:Initializing Passive Aggressive Regressor
2023-02-14 08:17:37,704:INFO:Total runtime is 0.11765476862589519 minutes
2023-02-14 08:17:37,710:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:37,711:INFO:Initializing create_model()
2023-02-14 08:17:37,711:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:37,711:INFO:Checking exceptions
2023-02-14 08:17:37,711:INFO:Importing libraries
2023-02-14 08:17:37,711:INFO:Copying training dataset
2023-02-14 08:17:37,712:INFO:Defining folds
2023-02-14 08:17:37,712:INFO:Declaring metric variables
2023-02-14 08:17:37,718:INFO:Importing untrained model
2023-02-14 08:17:37,720:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 08:17:37,726:INFO:Starting cross validation
2023-02-14 08:17:37,733:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:38,003:INFO:Calculating mean and std
2023-02-14 08:17:38,011:INFO:Creating metrics dataframe
2023-02-14 08:17:38,019:INFO:Uploading results into container
2023-02-14 08:17:38,020:INFO:Uploading model into container now
2023-02-14 08:17:38,020:INFO:_master_model_container: 9
2023-02-14 08:17:38,020:INFO:_display_container: 2
2023-02-14 08:17:38,023:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-14 08:17:38,023:INFO:create_model() successfully completed......................................
2023-02-14 08:17:38,125:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:38,125:INFO:Creating metrics dataframe
2023-02-14 08:17:38,142:INFO:Initializing Huber Regressor
2023-02-14 08:17:38,142:INFO:Total runtime is 0.12495441834131878 minutes
2023-02-14 08:17:38,151:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:38,151:INFO:Initializing create_model()
2023-02-14 08:17:38,151:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:38,151:INFO:Checking exceptions
2023-02-14 08:17:38,151:INFO:Importing libraries
2023-02-14 08:17:38,151:INFO:Copying training dataset
2023-02-14 08:17:38,160:INFO:Defining folds
2023-02-14 08:17:38,160:INFO:Declaring metric variables
2023-02-14 08:17:38,183:INFO:Importing untrained model
2023-02-14 08:17:38,191:INFO:Huber Regressor Imported successfully
2023-02-14 08:17:38,224:INFO:Starting cross validation
2023-02-14 08:17:38,224:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:38,304:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 08:17:38,314:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 08:17:38,332:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 08:17:38,346:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 08:17:38,363:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 08:17:38,371:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 08:17:38,379:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 08:17:38,387:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 08:17:38,396:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 08:17:38,404:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 08:17:38,422:INFO:Calculating mean and std
2023-02-14 08:17:38,422:INFO:Creating metrics dataframe
2023-02-14 08:17:38,427:INFO:Uploading results into container
2023-02-14 08:17:38,427:INFO:Uploading model into container now
2023-02-14 08:17:38,427:INFO:_master_model_container: 10
2023-02-14 08:17:38,427:INFO:_display_container: 2
2023-02-14 08:17:38,429:INFO:HuberRegressor()
2023-02-14 08:17:38,429:INFO:create_model() successfully completed......................................
2023-02-14 08:17:38,514:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:38,514:INFO:Creating metrics dataframe
2023-02-14 08:17:38,525:INFO:Initializing K Neighbors Regressor
2023-02-14 08:17:38,525:INFO:Total runtime is 0.13134555021921795 minutes
2023-02-14 08:17:38,528:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:38,528:INFO:Initializing create_model()
2023-02-14 08:17:38,528:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:38,528:INFO:Checking exceptions
2023-02-14 08:17:38,528:INFO:Importing libraries
2023-02-14 08:17:38,528:INFO:Copying training dataset
2023-02-14 08:17:38,530:INFO:Defining folds
2023-02-14 08:17:38,530:INFO:Declaring metric variables
2023-02-14 08:17:38,536:INFO:Importing untrained model
2023-02-14 08:17:38,536:INFO:K Neighbors Regressor Imported successfully
2023-02-14 08:17:38,544:INFO:Starting cross validation
2023-02-14 08:17:38,544:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:38,718:INFO:Calculating mean and std
2023-02-14 08:17:38,721:INFO:Creating metrics dataframe
2023-02-14 08:17:38,721:INFO:Uploading results into container
2023-02-14 08:17:38,721:INFO:Uploading model into container now
2023-02-14 08:17:38,721:INFO:_master_model_container: 11
2023-02-14 08:17:38,721:INFO:_display_container: 2
2023-02-14 08:17:38,721:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 08:17:38,721:INFO:create_model() successfully completed......................................
2023-02-14 08:17:38,807:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:38,807:INFO:Creating metrics dataframe
2023-02-14 08:17:38,821:INFO:Initializing Decision Tree Regressor
2023-02-14 08:17:38,821:INFO:Total runtime is 0.13626842498779299 minutes
2023-02-14 08:17:38,823:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:38,823:INFO:Initializing create_model()
2023-02-14 08:17:38,823:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:38,823:INFO:Checking exceptions
2023-02-14 08:17:38,823:INFO:Importing libraries
2023-02-14 08:17:38,823:INFO:Copying training dataset
2023-02-14 08:17:38,829:INFO:Defining folds
2023-02-14 08:17:38,829:INFO:Declaring metric variables
2023-02-14 08:17:38,834:INFO:Importing untrained model
2023-02-14 08:17:38,840:INFO:Decision Tree Regressor Imported successfully
2023-02-14 08:17:38,845:INFO:Starting cross validation
2023-02-14 08:17:38,848:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:39,003:INFO:Calculating mean and std
2023-02-14 08:17:39,003:INFO:Creating metrics dataframe
2023-02-14 08:17:39,011:INFO:Uploading results into container
2023-02-14 08:17:39,011:INFO:Uploading model into container now
2023-02-14 08:17:39,011:INFO:_master_model_container: 12
2023-02-14 08:17:39,011:INFO:_display_container: 2
2023-02-14 08:17:39,011:INFO:DecisionTreeRegressor(random_state=1)
2023-02-14 08:17:39,011:INFO:create_model() successfully completed......................................
2023-02-14 08:17:39,100:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:39,100:INFO:Creating metrics dataframe
2023-02-14 08:17:39,108:INFO:Initializing Random Forest Regressor
2023-02-14 08:17:39,108:INFO:Total runtime is 0.14106483856836957 minutes
2023-02-14 08:17:39,108:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:39,117:INFO:Initializing create_model()
2023-02-14 08:17:39,117:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:39,117:INFO:Checking exceptions
2023-02-14 08:17:39,117:INFO:Importing libraries
2023-02-14 08:17:39,118:INFO:Copying training dataset
2023-02-14 08:17:39,121:INFO:Defining folds
2023-02-14 08:17:39,121:INFO:Declaring metric variables
2023-02-14 08:17:39,125:INFO:Importing untrained model
2023-02-14 08:17:39,130:INFO:Random Forest Regressor Imported successfully
2023-02-14 08:17:39,141:INFO:Starting cross validation
2023-02-14 08:17:39,141:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:39,659:INFO:Calculating mean and std
2023-02-14 08:17:39,659:INFO:Creating metrics dataframe
2023-02-14 08:17:39,659:INFO:Uploading results into container
2023-02-14 08:17:39,664:INFO:Uploading model into container now
2023-02-14 08:17:39,664:INFO:_master_model_container: 13
2023-02-14 08:17:39,664:INFO:_display_container: 2
2023-02-14 08:17:39,664:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-14 08:17:39,664:INFO:create_model() successfully completed......................................
2023-02-14 08:17:39,746:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:39,746:INFO:Creating metrics dataframe
2023-02-14 08:17:39,754:INFO:Initializing Extra Trees Regressor
2023-02-14 08:17:39,754:INFO:Total runtime is 0.1518270532290141 minutes
2023-02-14 08:17:39,762:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:39,762:INFO:Initializing create_model()
2023-02-14 08:17:39,762:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:39,762:INFO:Checking exceptions
2023-02-14 08:17:39,762:INFO:Importing libraries
2023-02-14 08:17:39,762:INFO:Copying training dataset
2023-02-14 08:17:39,767:INFO:Defining folds
2023-02-14 08:17:39,767:INFO:Declaring metric variables
2023-02-14 08:17:39,772:INFO:Importing untrained model
2023-02-14 08:17:39,778:INFO:Extra Trees Regressor Imported successfully
2023-02-14 08:17:39,786:INFO:Starting cross validation
2023-02-14 08:17:39,789:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:40,208:INFO:Calculating mean and std
2023-02-14 08:17:40,208:INFO:Creating metrics dataframe
2023-02-14 08:17:40,208:INFO:Uploading results into container
2023-02-14 08:17:40,208:INFO:Uploading model into container now
2023-02-14 08:17:40,208:INFO:_master_model_container: 14
2023-02-14 08:17:40,208:INFO:_display_container: 2
2023-02-14 08:17:40,208:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-14 08:17:40,208:INFO:create_model() successfully completed......................................
2023-02-14 08:17:40,295:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:40,295:INFO:Creating metrics dataframe
2023-02-14 08:17:40,305:INFO:Initializing AdaBoost Regressor
2023-02-14 08:17:40,305:INFO:Total runtime is 0.16100222269694012 minutes
2023-02-14 08:17:40,312:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:40,312:INFO:Initializing create_model()
2023-02-14 08:17:40,312:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:40,312:INFO:Checking exceptions
2023-02-14 08:17:40,312:INFO:Importing libraries
2023-02-14 08:17:40,312:INFO:Copying training dataset
2023-02-14 08:17:40,317:INFO:Defining folds
2023-02-14 08:17:40,317:INFO:Declaring metric variables
2023-02-14 08:17:40,321:INFO:Importing untrained model
2023-02-14 08:17:40,326:INFO:AdaBoost Regressor Imported successfully
2023-02-14 08:17:40,335:INFO:Starting cross validation
2023-02-14 08:17:40,337:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:40,585:INFO:Calculating mean and std
2023-02-14 08:17:40,587:INFO:Creating metrics dataframe
2023-02-14 08:17:40,591:INFO:Uploading results into container
2023-02-14 08:17:40,591:INFO:Uploading model into container now
2023-02-14 08:17:40,591:INFO:_master_model_container: 15
2023-02-14 08:17:40,591:INFO:_display_container: 2
2023-02-14 08:17:40,591:INFO:AdaBoostRegressor(random_state=1)
2023-02-14 08:17:40,591:INFO:create_model() successfully completed......................................
2023-02-14 08:17:40,674:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:40,674:INFO:Creating metrics dataframe
2023-02-14 08:17:40,689:INFO:Initializing Gradient Boosting Regressor
2023-02-14 08:17:40,689:INFO:Total runtime is 0.16740235487620037 minutes
2023-02-14 08:17:40,692:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:40,692:INFO:Initializing create_model()
2023-02-14 08:17:40,692:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:40,692:INFO:Checking exceptions
2023-02-14 08:17:40,692:INFO:Importing libraries
2023-02-14 08:17:40,692:INFO:Copying training dataset
2023-02-14 08:17:40,695:INFO:Defining folds
2023-02-14 08:17:40,695:INFO:Declaring metric variables
2023-02-14 08:17:40,701:INFO:Importing untrained model
2023-02-14 08:17:40,706:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 08:17:40,714:INFO:Starting cross validation
2023-02-14 08:17:40,714:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:40,990:INFO:Calculating mean and std
2023-02-14 08:17:40,991:INFO:Creating metrics dataframe
2023-02-14 08:17:40,994:INFO:Uploading results into container
2023-02-14 08:17:40,994:INFO:Uploading model into container now
2023-02-14 08:17:40,994:INFO:_master_model_container: 16
2023-02-14 08:17:40,994:INFO:_display_container: 2
2023-02-14 08:17:40,996:INFO:GradientBoostingRegressor(random_state=1)
2023-02-14 08:17:40,996:INFO:create_model() successfully completed......................................
2023-02-14 08:17:41,073:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:41,073:INFO:Creating metrics dataframe
2023-02-14 08:17:41,089:INFO:Initializing Extreme Gradient Boosting
2023-02-14 08:17:41,089:INFO:Total runtime is 0.17406906286875407 minutes
2023-02-14 08:17:41,092:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:41,092:INFO:Initializing create_model()
2023-02-14 08:17:41,092:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:41,092:INFO:Checking exceptions
2023-02-14 08:17:41,092:INFO:Importing libraries
2023-02-14 08:17:41,092:INFO:Copying training dataset
2023-02-14 08:17:41,097:INFO:Defining folds
2023-02-14 08:17:41,097:INFO:Declaring metric variables
2023-02-14 08:17:41,100:INFO:Importing untrained model
2023-02-14 08:17:41,108:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 08:17:41,116:INFO:Starting cross validation
2023-02-14 08:17:41,117:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:41,357:INFO:Calculating mean and std
2023-02-14 08:17:41,357:INFO:Creating metrics dataframe
2023-02-14 08:17:41,365:INFO:Uploading results into container
2023-02-14 08:17:41,365:INFO:Uploading model into container now
2023-02-14 08:17:41,365:INFO:_master_model_container: 17
2023-02-14 08:17:41,365:INFO:_display_container: 2
2023-02-14 08:17:41,365:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-14 08:17:41,365:INFO:create_model() successfully completed......................................
2023-02-14 08:17:41,451:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:41,451:INFO:Creating metrics dataframe
2023-02-14 08:17:41,465:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 08:17:41,465:INFO:Total runtime is 0.18033366203308104 minutes
2023-02-14 08:17:41,470:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:41,470:INFO:Initializing create_model()
2023-02-14 08:17:41,470:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:41,470:INFO:Checking exceptions
2023-02-14 08:17:41,470:INFO:Importing libraries
2023-02-14 08:17:41,470:INFO:Copying training dataset
2023-02-14 08:17:41,473:INFO:Defining folds
2023-02-14 08:17:41,473:INFO:Declaring metric variables
2023-02-14 08:17:41,473:INFO:Importing untrained model
2023-02-14 08:17:41,480:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 08:17:41,487:INFO:Starting cross validation
2023-02-14 08:17:41,487:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:41,694:INFO:Calculating mean and std
2023-02-14 08:17:41,694:INFO:Creating metrics dataframe
2023-02-14 08:17:41,699:INFO:Uploading results into container
2023-02-14 08:17:41,699:INFO:Uploading model into container now
2023-02-14 08:17:41,703:INFO:_master_model_container: 18
2023-02-14 08:17:41,703:INFO:_display_container: 2
2023-02-14 08:17:41,703:INFO:LGBMRegressor(random_state=1)
2023-02-14 08:17:41,703:INFO:create_model() successfully completed......................................
2023-02-14 08:17:41,785:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:41,785:INFO:Creating metrics dataframe
2023-02-14 08:17:41,790:INFO:Initializing Dummy Regressor
2023-02-14 08:17:41,790:INFO:Total runtime is 0.18576608101526895 minutes
2023-02-14 08:17:41,796:INFO:SubProcess create_model() called ==================================
2023-02-14 08:17:41,796:INFO:Initializing create_model()
2023-02-14 08:17:41,796:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001A320AC4FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:41,796:INFO:Checking exceptions
2023-02-14 08:17:41,796:INFO:Importing libraries
2023-02-14 08:17:41,796:INFO:Copying training dataset
2023-02-14 08:17:41,801:INFO:Defining folds
2023-02-14 08:17:41,801:INFO:Declaring metric variables
2023-02-14 08:17:41,801:INFO:Importing untrained model
2023-02-14 08:17:41,809:INFO:Dummy Regressor Imported successfully
2023-02-14 08:17:41,818:INFO:Starting cross validation
2023-02-14 08:17:41,820:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 08:17:41,996:INFO:Calculating mean and std
2023-02-14 08:17:41,996:INFO:Creating metrics dataframe
2023-02-14 08:17:42,001:INFO:Uploading results into container
2023-02-14 08:17:42,001:INFO:Uploading model into container now
2023-02-14 08:17:42,001:INFO:_master_model_container: 19
2023-02-14 08:17:42,003:INFO:_display_container: 2
2023-02-14 08:17:42,003:INFO:DummyRegressor()
2023-02-14 08:17:42,003:INFO:create_model() successfully completed......................................
2023-02-14 08:17:42,083:INFO:SubProcess create_model() end ==================================
2023-02-14 08:17:42,083:INFO:Creating metrics dataframe
2023-02-14 08:17:42,107:INFO:Initializing create_model()
2023-02-14 08:17:42,107:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A31F9849A0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 08:17:42,107:INFO:Checking exceptions
2023-02-14 08:17:42,107:INFO:Importing libraries
2023-02-14 08:17:42,107:INFO:Copying training dataset
2023-02-14 08:17:42,113:INFO:Defining folds
2023-02-14 08:17:42,113:INFO:Declaring metric variables
2023-02-14 08:17:42,113:INFO:Importing untrained model
2023-02-14 08:17:42,113:INFO:Declaring custom model
2023-02-14 08:17:42,115:INFO:Bayesian Ridge Imported successfully
2023-02-14 08:17:42,116:INFO:Cross validation set to False
2023-02-14 08:17:42,116:INFO:Fitting Model
2023-02-14 08:17:42,132:INFO:BayesianRidge()
2023-02-14 08:17:42,132:INFO:create_model() successfully completed......................................
2023-02-14 08:17:42,253:INFO:_master_model_container: 19
2023-02-14 08:17:42,253:INFO:_display_container: 2
2023-02-14 08:17:42,253:INFO:BayesianRidge()
2023-02-14 08:17:42,253:INFO:compare_models() successfully completed......................................
2023-02-14 09:20:01,325:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 09:20:01,325:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 09:20:01,325:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 09:20:01,325:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 09:20:02,627:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-14 09:52:18,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 09:52:18,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 09:52:18,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 09:52:18,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 09:52:18,791:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-14 15:28:19,199:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 15:28:19,200:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 15:28:19,200:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 15:28:19,200:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 15:28:19,761:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-14 15:28:24,979:INFO:PyCaret RegressionExperiment
2023-02-14 15:28:24,979:INFO:Logging name: reg-default-name
2023-02-14 15:28:24,979:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 15:28:24,979:INFO:version 3.0.0.rc8
2023-02-14 15:28:24,979:INFO:Initializing setup()
2023-02-14 15:28:24,979:INFO:self.USI: c48c
2023-02-14 15:28:24,979:INFO:self._variable_keys: {'n_jobs_param', 'seed', 'exp_name_log', 'idx', 'pipeline', 'y_train', 'logging_param', 'USI', 'gpu_n_jobs_param', 'y', 'gpu_param', 'X', 'memory', 'fold_groups_param', 'X_train', 'X_test', 'html_param', '_available_plots', 'data', 'exp_id', 'log_plots_param', '_ml_usecase', 'y_test', 'target_param', 'fold_generator', 'transform_target_param', 'fold_shuffle_param'}
2023-02-14 15:28:24,979:INFO:Checking environment
2023-02-14 15:28:24,979:INFO:python_version: 3.9.13
2023-02-14 15:28:24,979:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 15:28:24,979:INFO:machine: AMD64
2023-02-14 15:28:24,979:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 15:28:24,984:INFO:Memory: svmem(total=16805040128, available=4391084032, percent=73.9, used=12413956096, free=4391084032)
2023-02-14 15:28:24,985:INFO:Physical Core: 4
2023-02-14 15:28:24,985:INFO:Logical Core: 8
2023-02-14 15:28:24,985:INFO:Checking libraries
2023-02-14 15:28:24,985:INFO:System:
2023-02-14 15:28:24,985:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 15:28:24,985:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 15:28:24,985:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 15:28:24,985:INFO:PyCaret required dependencies:
2023-02-14 15:28:24,985:INFO:                 pip: 23.0
2023-02-14 15:28:24,985:INFO:          setuptools: 58.1.0
2023-02-14 15:28:24,985:INFO:             pycaret: 3.0.0rc8
2023-02-14 15:28:24,985:INFO:             IPython: 8.7.0
2023-02-14 15:28:24,985:INFO:          ipywidgets: 8.0.4
2023-02-14 15:28:24,985:INFO:                tqdm: 4.64.1
2023-02-14 15:28:24,985:INFO:               numpy: 1.22.1
2023-02-14 15:28:24,985:INFO:              pandas: 1.5.2
2023-02-14 15:28:24,985:INFO:              jinja2: 3.1.2
2023-02-14 15:28:24,985:INFO:               scipy: 1.5.4
2023-02-14 15:28:24,985:INFO:              joblib: 1.2.0
2023-02-14 15:28:24,985:INFO:             sklearn: 1.1.3
2023-02-14 15:28:24,985:INFO:                pyod: 1.0.7
2023-02-14 15:28:24,986:INFO:            imblearn: 0.10.1
2023-02-14 15:28:24,986:INFO:   category_encoders: 2.6.0
2023-02-14 15:28:24,986:INFO:            lightgbm: 3.3.4
2023-02-14 15:28:24,986:INFO:               numba: 0.56.4
2023-02-14 15:28:24,986:INFO:            requests: 2.28.1
2023-02-14 15:28:24,986:INFO:          matplotlib: 3.6.2
2023-02-14 15:28:24,986:INFO:          scikitplot: 0.3.7
2023-02-14 15:28:24,986:INFO:         yellowbrick: 1.5
2023-02-14 15:28:24,986:INFO:              plotly: 5.11.0
2023-02-14 15:28:24,986:INFO:             kaleido: 0.2.1
2023-02-14 15:28:24,986:INFO:         statsmodels: 0.13.5
2023-02-14 15:28:24,986:INFO:              sktime: 0.15.1
2023-02-14 15:28:24,986:INFO:               tbats: 1.1.2
2023-02-14 15:28:24,986:INFO:            pmdarima: 2.0.2
2023-02-14 15:28:24,986:INFO:              psutil: 5.9.4
2023-02-14 15:28:24,986:INFO:PyCaret optional dependencies:
2023-02-14 15:28:25,002:INFO:                shap: 0.41.0
2023-02-14 15:28:25,002:INFO:           interpret: 0.3.0
2023-02-14 15:28:25,002:INFO:                umap: Not installed
2023-02-14 15:28:25,002:INFO:    pandas_profiling: 3.6.2
2023-02-14 15:28:25,002:INFO:  explainerdashboard: Not installed
2023-02-14 15:28:25,002:INFO:             autoviz: Not installed
2023-02-14 15:28:25,002:INFO:           fairlearn: Not installed
2023-02-14 15:28:25,002:INFO:             xgboost: 1.7.3
2023-02-14 15:28:25,002:INFO:            catboost: Not installed
2023-02-14 15:28:25,003:INFO:              kmodes: Not installed
2023-02-14 15:28:25,003:INFO:             mlxtend: Not installed
2023-02-14 15:28:25,003:INFO:       statsforecast: Not installed
2023-02-14 15:28:25,003:INFO:        tune_sklearn: Not installed
2023-02-14 15:28:25,003:INFO:                 ray: Not installed
2023-02-14 15:28:25,003:INFO:            hyperopt: Not installed
2023-02-14 15:28:25,003:INFO:              optuna: Not installed
2023-02-14 15:28:25,003:INFO:               skopt: Not installed
2023-02-14 15:28:25,003:INFO:              mlflow: Not installed
2023-02-14 15:28:25,003:INFO:              gradio: Not installed
2023-02-14 15:28:25,003:INFO:             fastapi: Not installed
2023-02-14 15:28:25,003:INFO:             uvicorn: Not installed
2023-02-14 15:28:25,003:INFO:              m2cgen: Not installed
2023-02-14 15:28:25,003:INFO:           evidently: Not installed
2023-02-14 15:28:25,003:INFO:                nltk: 3.8
2023-02-14 15:28:25,003:INFO:            pyLDAvis: Not installed
2023-02-14 15:28:25,003:INFO:              gensim: Not installed
2023-02-14 15:28:25,003:INFO:               spacy: Not installed
2023-02-14 15:28:25,003:INFO:           wordcloud: 1.8.2.2
2023-02-14 15:28:25,003:INFO:            textblob: Not installed
2023-02-14 15:28:25,003:INFO:               fugue: Not installed
2023-02-14 15:28:25,003:INFO:           streamlit: 1.16.0
2023-02-14 15:28:25,003:INFO:             prophet: Not installed
2023-02-14 15:28:25,003:INFO:None
2023-02-14 15:28:25,003:INFO:Set up data.
2023-02-14 15:28:25,012:INFO:Set up train/test split.
2023-02-14 15:28:25,015:INFO:Set up index.
2023-02-14 15:28:25,015:INFO:Set up folding strategy.
2023-02-14 15:28:25,015:INFO:Assigning column types.
2023-02-14 15:28:25,017:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 15:28:25,017:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,025:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,033:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,125:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,200:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,200:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:25,387:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:25,387:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,393:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,397:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,450:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,487:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,489:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:25,490:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:25,491:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 15:28:25,495:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,497:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,547:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,589:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,589:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:25,592:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:25,596:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,598:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,643:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,679:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,680:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:25,682:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:25,682:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 15:28:25,692:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,741:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,778:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,779:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:25,781:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:25,791:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,837:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,875:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,876:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:25,877:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:25,879:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 15:28:25,933:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,975:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 15:28:25,976:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:25,977:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:26,044:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 15:28:26,083:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 15:28:26,084:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:26,087:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:26,087:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 15:28:26,143:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 15:28:26,182:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:26,187:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:26,260:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 15:28:26,312:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:26,314:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:26,314:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 15:28:26,482:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:26,486:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:26,613:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:26,616:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:26,617:INFO:Preparing preprocessing pipeline...
2023-02-14 15:28:26,617:INFO:Set up column name cleaning.
2023-02-14 15:28:26,617:INFO:Set up simple imputation.
2023-02-14 15:28:26,645:INFO:Finished creating preprocessing pipeline.
2023-02-14 15:28:26,649:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 15:28:26,649:INFO:Creating final display dataframe.
2023-02-14 15:28:26,765:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              c48c
2023-02-14 15:28:26,903:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:26,906:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:27,027:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 15:28:27,030:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 15:28:27,031:INFO:setup() successfully completed in 2.05s...............
2023-02-14 15:28:27,031:INFO:Initializing compare_models()
2023-02-14 15:28:27,031:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 15:28:27,031:INFO:Checking exceptions
2023-02-14 15:28:27,033:INFO:Preparing display monitor
2023-02-14 15:28:27,072:INFO:Initializing Linear Regression
2023-02-14 15:28:27,072:INFO:Total runtime is 0.0 minutes
2023-02-14 15:28:27,077:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:27,077:INFO:Initializing create_model()
2023-02-14 15:28:27,077:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:27,077:INFO:Checking exceptions
2023-02-14 15:28:27,077:INFO:Importing libraries
2023-02-14 15:28:27,078:INFO:Copying training dataset
2023-02-14 15:28:27,079:INFO:Defining folds
2023-02-14 15:28:27,079:INFO:Declaring metric variables
2023-02-14 15:28:27,082:INFO:Importing untrained model
2023-02-14 15:28:27,085:INFO:Linear Regression Imported successfully
2023-02-14 15:28:27,093:INFO:Starting cross validation
2023-02-14 15:28:27,135:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:31,827:INFO:Calculating mean and std
2023-02-14 15:28:31,828:INFO:Creating metrics dataframe
2023-02-14 15:28:31,834:INFO:Uploading results into container
2023-02-14 15:28:31,835:INFO:Uploading model into container now
2023-02-14 15:28:31,836:INFO:_master_model_container: 1
2023-02-14 15:28:31,836:INFO:_display_container: 2
2023-02-14 15:28:31,836:INFO:LinearRegression(n_jobs=-1)
2023-02-14 15:28:31,836:INFO:create_model() successfully completed......................................
2023-02-14 15:28:31,967:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:31,967:INFO:Creating metrics dataframe
2023-02-14 15:28:31,977:INFO:Initializing Lasso Regression
2023-02-14 15:28:31,977:INFO:Total runtime is 0.08174273570378622 minutes
2023-02-14 15:28:31,983:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:31,983:INFO:Initializing create_model()
2023-02-14 15:28:31,983:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:31,983:INFO:Checking exceptions
2023-02-14 15:28:31,983:INFO:Importing libraries
2023-02-14 15:28:31,985:INFO:Copying training dataset
2023-02-14 15:28:31,987:INFO:Defining folds
2023-02-14 15:28:31,987:INFO:Declaring metric variables
2023-02-14 15:28:31,992:INFO:Importing untrained model
2023-02-14 15:28:31,997:INFO:Lasso Regression Imported successfully
2023-02-14 15:28:32,006:INFO:Starting cross validation
2023-02-14 15:28:32,007:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:32,143:INFO:Calculating mean and std
2023-02-14 15:28:32,143:INFO:Creating metrics dataframe
2023-02-14 15:28:32,146:INFO:Uploading results into container
2023-02-14 15:28:32,147:INFO:Uploading model into container now
2023-02-14 15:28:32,148:INFO:_master_model_container: 2
2023-02-14 15:28:32,148:INFO:_display_container: 2
2023-02-14 15:28:32,148:INFO:Lasso(random_state=1)
2023-02-14 15:28:32,148:INFO:create_model() successfully completed......................................
2023-02-14 15:28:32,254:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:32,254:INFO:Creating metrics dataframe
2023-02-14 15:28:32,261:INFO:Initializing Ridge Regression
2023-02-14 15:28:32,261:INFO:Total runtime is 0.08648525476455689 minutes
2023-02-14 15:28:32,266:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:32,267:INFO:Initializing create_model()
2023-02-14 15:28:32,267:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:32,267:INFO:Checking exceptions
2023-02-14 15:28:32,267:INFO:Importing libraries
2023-02-14 15:28:32,267:INFO:Copying training dataset
2023-02-14 15:28:32,271:INFO:Defining folds
2023-02-14 15:28:32,271:INFO:Declaring metric variables
2023-02-14 15:28:32,274:INFO:Importing untrained model
2023-02-14 15:28:32,280:INFO:Ridge Regression Imported successfully
2023-02-14 15:28:32,290:INFO:Starting cross validation
2023-02-14 15:28:32,290:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:32,432:INFO:Calculating mean and std
2023-02-14 15:28:32,433:INFO:Creating metrics dataframe
2023-02-14 15:28:32,437:INFO:Uploading results into container
2023-02-14 15:28:32,438:INFO:Uploading model into container now
2023-02-14 15:28:32,438:INFO:_master_model_container: 3
2023-02-14 15:28:32,438:INFO:_display_container: 2
2023-02-14 15:28:32,439:INFO:Ridge(random_state=1)
2023-02-14 15:28:32,439:INFO:create_model() successfully completed......................................
2023-02-14 15:28:32,544:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:32,544:INFO:Creating metrics dataframe
2023-02-14 15:28:32,555:INFO:Initializing Elastic Net
2023-02-14 15:28:32,555:INFO:Total runtime is 0.09136934280395508 minutes
2023-02-14 15:28:32,558:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:32,558:INFO:Initializing create_model()
2023-02-14 15:28:32,558:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:32,559:INFO:Checking exceptions
2023-02-14 15:28:32,559:INFO:Importing libraries
2023-02-14 15:28:32,559:INFO:Copying training dataset
2023-02-14 15:28:32,564:INFO:Defining folds
2023-02-14 15:28:32,564:INFO:Declaring metric variables
2023-02-14 15:28:32,569:INFO:Importing untrained model
2023-02-14 15:28:32,572:INFO:Elastic Net Imported successfully
2023-02-14 15:28:32,582:INFO:Starting cross validation
2023-02-14 15:28:32,584:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:32,721:INFO:Calculating mean and std
2023-02-14 15:28:32,722:INFO:Creating metrics dataframe
2023-02-14 15:28:32,726:INFO:Uploading results into container
2023-02-14 15:28:32,727:INFO:Uploading model into container now
2023-02-14 15:28:32,727:INFO:_master_model_container: 4
2023-02-14 15:28:32,728:INFO:_display_container: 2
2023-02-14 15:28:32,728:INFO:ElasticNet(random_state=1)
2023-02-14 15:28:32,728:INFO:create_model() successfully completed......................................
2023-02-14 15:28:32,853:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:32,854:INFO:Creating metrics dataframe
2023-02-14 15:28:32,861:INFO:Initializing Least Angle Regression
2023-02-14 15:28:32,861:INFO:Total runtime is 0.09647583961486816 minutes
2023-02-14 15:28:32,865:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:32,866:INFO:Initializing create_model()
2023-02-14 15:28:32,866:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:32,866:INFO:Checking exceptions
2023-02-14 15:28:32,866:INFO:Importing libraries
2023-02-14 15:28:32,866:INFO:Copying training dataset
2023-02-14 15:28:32,870:INFO:Defining folds
2023-02-14 15:28:32,870:INFO:Declaring metric variables
2023-02-14 15:28:32,873:INFO:Importing untrained model
2023-02-14 15:28:32,877:INFO:Least Angle Regression Imported successfully
2023-02-14 15:28:32,886:INFO:Starting cross validation
2023-02-14 15:28:32,888:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:32,943:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:32,953:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:32,962:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:32,974:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:32,984:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:32,994:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,001:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,011:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,018:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,022:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,037:INFO:Calculating mean and std
2023-02-14 15:28:33,039:INFO:Creating metrics dataframe
2023-02-14 15:28:33,042:INFO:Uploading results into container
2023-02-14 15:28:33,042:INFO:Uploading model into container now
2023-02-14 15:28:33,042:INFO:_master_model_container: 5
2023-02-14 15:28:33,042:INFO:_display_container: 2
2023-02-14 15:28:33,043:INFO:Lars(random_state=1)
2023-02-14 15:28:33,043:INFO:create_model() successfully completed......................................
2023-02-14 15:28:33,140:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:33,140:INFO:Creating metrics dataframe
2023-02-14 15:28:33,152:INFO:Initializing Lasso Least Angle Regression
2023-02-14 15:28:33,152:INFO:Total runtime is 0.10132333834966024 minutes
2023-02-14 15:28:33,155:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:33,156:INFO:Initializing create_model()
2023-02-14 15:28:33,156:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:33,156:INFO:Checking exceptions
2023-02-14 15:28:33,156:INFO:Importing libraries
2023-02-14 15:28:33,156:INFO:Copying training dataset
2023-02-14 15:28:33,159:INFO:Defining folds
2023-02-14 15:28:33,160:INFO:Declaring metric variables
2023-02-14 15:28:33,167:INFO:Importing untrained model
2023-02-14 15:28:33,172:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 15:28:33,184:INFO:Starting cross validation
2023-02-14 15:28:33,184:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:33,233:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 15:28:33,241:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 15:28:33,252:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 15:28:33,264:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 15:28:33,272:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 15:28:33,282:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 15:28:33,289:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 15:28:33,303:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 15:28:33,314:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 15:28:33,317:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 15:28:33,330:INFO:Calculating mean and std
2023-02-14 15:28:33,331:INFO:Creating metrics dataframe
2023-02-14 15:28:33,334:INFO:Uploading results into container
2023-02-14 15:28:33,335:INFO:Uploading model into container now
2023-02-14 15:28:33,335:INFO:_master_model_container: 6
2023-02-14 15:28:33,336:INFO:_display_container: 2
2023-02-14 15:28:33,336:INFO:LassoLars(random_state=1)
2023-02-14 15:28:33,336:INFO:create_model() successfully completed......................................
2023-02-14 15:28:33,444:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:33,444:INFO:Creating metrics dataframe
2023-02-14 15:28:33,462:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 15:28:33,462:INFO:Total runtime is 0.10650118986765544 minutes
2023-02-14 15:28:33,467:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:33,468:INFO:Initializing create_model()
2023-02-14 15:28:33,468:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:33,468:INFO:Checking exceptions
2023-02-14 15:28:33,468:INFO:Importing libraries
2023-02-14 15:28:33,468:INFO:Copying training dataset
2023-02-14 15:28:33,472:INFO:Defining folds
2023-02-14 15:28:33,473:INFO:Declaring metric variables
2023-02-14 15:28:33,477:INFO:Importing untrained model
2023-02-14 15:28:33,484:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 15:28:33,492:INFO:Starting cross validation
2023-02-14 15:28:33,493:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:33,536:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,546:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,556:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,568:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,576:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,587:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,597:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,607:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,616:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,622:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 15:28:33,635:INFO:Calculating mean and std
2023-02-14 15:28:33,635:INFO:Creating metrics dataframe
2023-02-14 15:28:33,638:INFO:Uploading results into container
2023-02-14 15:28:33,639:INFO:Uploading model into container now
2023-02-14 15:28:33,639:INFO:_master_model_container: 7
2023-02-14 15:28:33,639:INFO:_display_container: 2
2023-02-14 15:28:33,639:INFO:OrthogonalMatchingPursuit()
2023-02-14 15:28:33,640:INFO:create_model() successfully completed......................................
2023-02-14 15:28:33,783:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:33,783:INFO:Creating metrics dataframe
2023-02-14 15:28:33,791:INFO:Initializing Bayesian Ridge
2023-02-14 15:28:33,791:INFO:Total runtime is 0.11197323401769003 minutes
2023-02-14 15:28:33,795:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:33,796:INFO:Initializing create_model()
2023-02-14 15:28:33,796:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:33,796:INFO:Checking exceptions
2023-02-14 15:28:33,796:INFO:Importing libraries
2023-02-14 15:28:33,796:INFO:Copying training dataset
2023-02-14 15:28:33,800:INFO:Defining folds
2023-02-14 15:28:33,800:INFO:Declaring metric variables
2023-02-14 15:28:33,804:INFO:Importing untrained model
2023-02-14 15:28:33,807:INFO:Bayesian Ridge Imported successfully
2023-02-14 15:28:33,816:INFO:Starting cross validation
2023-02-14 15:28:33,817:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:33,954:INFO:Calculating mean and std
2023-02-14 15:28:33,955:INFO:Creating metrics dataframe
2023-02-14 15:28:33,959:INFO:Uploading results into container
2023-02-14 15:28:33,959:INFO:Uploading model into container now
2023-02-14 15:28:33,959:INFO:_master_model_container: 8
2023-02-14 15:28:33,959:INFO:_display_container: 2
2023-02-14 15:28:33,960:INFO:BayesianRidge()
2023-02-14 15:28:33,960:INFO:create_model() successfully completed......................................
2023-02-14 15:28:34,069:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:34,069:INFO:Creating metrics dataframe
2023-02-14 15:28:34,083:INFO:Initializing Passive Aggressive Regressor
2023-02-14 15:28:34,083:INFO:Total runtime is 0.1168390472730001 minutes
2023-02-14 15:28:34,086:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:34,086:INFO:Initializing create_model()
2023-02-14 15:28:34,087:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:34,087:INFO:Checking exceptions
2023-02-14 15:28:34,087:INFO:Importing libraries
2023-02-14 15:28:34,087:INFO:Copying training dataset
2023-02-14 15:28:34,091:INFO:Defining folds
2023-02-14 15:28:34,091:INFO:Declaring metric variables
2023-02-14 15:28:34,095:INFO:Importing untrained model
2023-02-14 15:28:34,101:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 15:28:34,111:INFO:Starting cross validation
2023-02-14 15:28:34,113:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:34,258:INFO:Calculating mean and std
2023-02-14 15:28:34,259:INFO:Creating metrics dataframe
2023-02-14 15:28:34,263:INFO:Uploading results into container
2023-02-14 15:28:34,264:INFO:Uploading model into container now
2023-02-14 15:28:34,264:INFO:_master_model_container: 9
2023-02-14 15:28:34,264:INFO:_display_container: 2
2023-02-14 15:28:34,265:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-14 15:28:34,265:INFO:create_model() successfully completed......................................
2023-02-14 15:28:34,361:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:34,362:INFO:Creating metrics dataframe
2023-02-14 15:28:34,373:INFO:Initializing Huber Regressor
2023-02-14 15:28:34,373:INFO:Total runtime is 0.12167989810307822 minutes
2023-02-14 15:28:34,377:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:34,379:INFO:Initializing create_model()
2023-02-14 15:28:34,379:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:34,379:INFO:Checking exceptions
2023-02-14 15:28:34,379:INFO:Importing libraries
2023-02-14 15:28:34,379:INFO:Copying training dataset
2023-02-14 15:28:34,383:INFO:Defining folds
2023-02-14 15:28:34,383:INFO:Declaring metric variables
2023-02-14 15:28:34,387:INFO:Importing untrained model
2023-02-14 15:28:34,391:INFO:Huber Regressor Imported successfully
2023-02-14 15:28:34,400:INFO:Starting cross validation
2023-02-14 15:28:34,401:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:34,476:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 15:28:34,482:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 15:28:34,493:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 15:28:34,501:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 15:28:34,515:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 15:28:34,522:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 15:28:34,540:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 15:28:34,548:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 15:28:34,557:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 15:28:34,561:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 15:28:34,573:INFO:Calculating mean and std
2023-02-14 15:28:34,573:INFO:Creating metrics dataframe
2023-02-14 15:28:34,576:INFO:Uploading results into container
2023-02-14 15:28:34,577:INFO:Uploading model into container now
2023-02-14 15:28:34,578:INFO:_master_model_container: 10
2023-02-14 15:28:34,579:INFO:_display_container: 2
2023-02-14 15:28:34,579:INFO:HuberRegressor()
2023-02-14 15:28:34,579:INFO:create_model() successfully completed......................................
2023-02-14 15:28:34,678:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:34,679:INFO:Creating metrics dataframe
2023-02-14 15:28:34,689:INFO:Initializing K Neighbors Regressor
2023-02-14 15:28:34,690:INFO:Total runtime is 0.12695764700571696 minutes
2023-02-14 15:28:34,694:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:34,695:INFO:Initializing create_model()
2023-02-14 15:28:34,695:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:34,695:INFO:Checking exceptions
2023-02-14 15:28:34,695:INFO:Importing libraries
2023-02-14 15:28:34,695:INFO:Copying training dataset
2023-02-14 15:28:34,698:INFO:Defining folds
2023-02-14 15:28:34,699:INFO:Declaring metric variables
2023-02-14 15:28:34,704:INFO:Importing untrained model
2023-02-14 15:28:34,709:INFO:K Neighbors Regressor Imported successfully
2023-02-14 15:28:34,732:INFO:Starting cross validation
2023-02-14 15:28:34,737:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:34,905:INFO:Calculating mean and std
2023-02-14 15:28:34,906:INFO:Creating metrics dataframe
2023-02-14 15:28:34,909:INFO:Uploading results into container
2023-02-14 15:28:34,910:INFO:Uploading model into container now
2023-02-14 15:28:34,911:INFO:_master_model_container: 11
2023-02-14 15:28:34,911:INFO:_display_container: 2
2023-02-14 15:28:34,911:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 15:28:34,912:INFO:create_model() successfully completed......................................
2023-02-14 15:28:35,009:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:35,009:INFO:Creating metrics dataframe
2023-02-14 15:28:35,021:INFO:Initializing Decision Tree Regressor
2023-02-14 15:28:35,021:INFO:Total runtime is 0.13248302141825358 minutes
2023-02-14 15:28:35,024:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:35,024:INFO:Initializing create_model()
2023-02-14 15:28:35,024:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:35,024:INFO:Checking exceptions
2023-02-14 15:28:35,024:INFO:Importing libraries
2023-02-14 15:28:35,024:INFO:Copying training dataset
2023-02-14 15:28:35,030:INFO:Defining folds
2023-02-14 15:28:35,030:INFO:Declaring metric variables
2023-02-14 15:28:35,033:INFO:Importing untrained model
2023-02-14 15:28:35,039:INFO:Decision Tree Regressor Imported successfully
2023-02-14 15:28:35,048:INFO:Starting cross validation
2023-02-14 15:28:35,051:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:35,189:INFO:Calculating mean and std
2023-02-14 15:28:35,190:INFO:Creating metrics dataframe
2023-02-14 15:28:35,194:INFO:Uploading results into container
2023-02-14 15:28:35,195:INFO:Uploading model into container now
2023-02-14 15:28:35,195:INFO:_master_model_container: 12
2023-02-14 15:28:35,195:INFO:_display_container: 2
2023-02-14 15:28:35,196:INFO:DecisionTreeRegressor(random_state=1)
2023-02-14 15:28:35,196:INFO:create_model() successfully completed......................................
2023-02-14 15:28:35,296:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:35,297:INFO:Creating metrics dataframe
2023-02-14 15:28:35,308:INFO:Initializing Random Forest Regressor
2023-02-14 15:28:35,308:INFO:Total runtime is 0.13726508220036823 minutes
2023-02-14 15:28:35,314:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:35,315:INFO:Initializing create_model()
2023-02-14 15:28:35,315:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:35,315:INFO:Checking exceptions
2023-02-14 15:28:35,315:INFO:Importing libraries
2023-02-14 15:28:35,315:INFO:Copying training dataset
2023-02-14 15:28:35,319:INFO:Defining folds
2023-02-14 15:28:35,319:INFO:Declaring metric variables
2023-02-14 15:28:35,323:INFO:Importing untrained model
2023-02-14 15:28:35,328:INFO:Random Forest Regressor Imported successfully
2023-02-14 15:28:35,337:INFO:Starting cross validation
2023-02-14 15:28:35,338:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:35,816:INFO:Calculating mean and std
2023-02-14 15:28:35,817:INFO:Creating metrics dataframe
2023-02-14 15:28:35,820:INFO:Uploading results into container
2023-02-14 15:28:35,821:INFO:Uploading model into container now
2023-02-14 15:28:35,821:INFO:_master_model_container: 13
2023-02-14 15:28:35,822:INFO:_display_container: 2
2023-02-14 15:28:35,822:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-14 15:28:35,822:INFO:create_model() successfully completed......................................
2023-02-14 15:28:35,923:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:35,923:INFO:Creating metrics dataframe
2023-02-14 15:28:35,934:INFO:Initializing Extra Trees Regressor
2023-02-14 15:28:35,934:INFO:Total runtime is 0.14770105679829915 minutes
2023-02-14 15:28:35,939:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:35,939:INFO:Initializing create_model()
2023-02-14 15:28:35,939:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:35,939:INFO:Checking exceptions
2023-02-14 15:28:35,939:INFO:Importing libraries
2023-02-14 15:28:35,939:INFO:Copying training dataset
2023-02-14 15:28:35,942:INFO:Defining folds
2023-02-14 15:28:35,942:INFO:Declaring metric variables
2023-02-14 15:28:35,945:INFO:Importing untrained model
2023-02-14 15:28:35,950:INFO:Extra Trees Regressor Imported successfully
2023-02-14 15:28:35,959:INFO:Starting cross validation
2023-02-14 15:28:35,960:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:36,393:INFO:Calculating mean and std
2023-02-14 15:28:36,394:INFO:Creating metrics dataframe
2023-02-14 15:28:36,397:INFO:Uploading results into container
2023-02-14 15:28:36,397:INFO:Uploading model into container now
2023-02-14 15:28:36,398:INFO:_master_model_container: 14
2023-02-14 15:28:36,398:INFO:_display_container: 2
2023-02-14 15:28:36,398:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-14 15:28:36,398:INFO:create_model() successfully completed......................................
2023-02-14 15:28:36,502:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:36,502:INFO:Creating metrics dataframe
2023-02-14 15:28:36,516:INFO:Initializing AdaBoost Regressor
2023-02-14 15:28:36,516:INFO:Total runtime is 0.1574007471402486 minutes
2023-02-14 15:28:36,520:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:36,520:INFO:Initializing create_model()
2023-02-14 15:28:36,521:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:36,521:INFO:Checking exceptions
2023-02-14 15:28:36,521:INFO:Importing libraries
2023-02-14 15:28:36,521:INFO:Copying training dataset
2023-02-14 15:28:36,524:INFO:Defining folds
2023-02-14 15:28:36,525:INFO:Declaring metric variables
2023-02-14 15:28:36,531:INFO:Importing untrained model
2023-02-14 15:28:36,535:INFO:AdaBoost Regressor Imported successfully
2023-02-14 15:28:36,544:INFO:Starting cross validation
2023-02-14 15:28:36,546:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:36,787:INFO:Calculating mean and std
2023-02-14 15:28:36,788:INFO:Creating metrics dataframe
2023-02-14 15:28:36,792:INFO:Uploading results into container
2023-02-14 15:28:36,793:INFO:Uploading model into container now
2023-02-14 15:28:36,793:INFO:_master_model_container: 15
2023-02-14 15:28:36,793:INFO:_display_container: 2
2023-02-14 15:28:36,794:INFO:AdaBoostRegressor(random_state=1)
2023-02-14 15:28:36,794:INFO:create_model() successfully completed......................................
2023-02-14 15:28:36,895:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:36,895:INFO:Creating metrics dataframe
2023-02-14 15:28:36,906:INFO:Initializing Gradient Boosting Regressor
2023-02-14 15:28:36,906:INFO:Total runtime is 0.1638918081919352 minutes
2023-02-14 15:28:36,909:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:36,909:INFO:Initializing create_model()
2023-02-14 15:28:36,909:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:36,910:INFO:Checking exceptions
2023-02-14 15:28:36,910:INFO:Importing libraries
2023-02-14 15:28:36,910:INFO:Copying training dataset
2023-02-14 15:28:36,914:INFO:Defining folds
2023-02-14 15:28:36,914:INFO:Declaring metric variables
2023-02-14 15:28:36,918:INFO:Importing untrained model
2023-02-14 15:28:36,923:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 15:28:36,933:INFO:Starting cross validation
2023-02-14 15:28:36,934:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:37,128:INFO:Calculating mean and std
2023-02-14 15:28:37,129:INFO:Creating metrics dataframe
2023-02-14 15:28:37,132:INFO:Uploading results into container
2023-02-14 15:28:37,132:INFO:Uploading model into container now
2023-02-14 15:28:37,133:INFO:_master_model_container: 16
2023-02-14 15:28:37,133:INFO:_display_container: 2
2023-02-14 15:28:37,133:INFO:GradientBoostingRegressor(random_state=1)
2023-02-14 15:28:37,133:INFO:create_model() successfully completed......................................
2023-02-14 15:28:37,237:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:37,237:INFO:Creating metrics dataframe
2023-02-14 15:28:37,247:INFO:Initializing Extreme Gradient Boosting
2023-02-14 15:28:37,247:INFO:Total runtime is 0.16957389513651527 minutes
2023-02-14 15:28:37,249:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:37,251:INFO:Initializing create_model()
2023-02-14 15:28:37,251:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:37,251:INFO:Checking exceptions
2023-02-14 15:28:37,251:INFO:Importing libraries
2023-02-14 15:28:37,251:INFO:Copying training dataset
2023-02-14 15:28:37,254:INFO:Defining folds
2023-02-14 15:28:37,254:INFO:Declaring metric variables
2023-02-14 15:28:37,258:INFO:Importing untrained model
2023-02-14 15:28:37,263:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 15:28:37,271:INFO:Starting cross validation
2023-02-14 15:28:37,273:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:37,521:INFO:Calculating mean and std
2023-02-14 15:28:37,522:INFO:Creating metrics dataframe
2023-02-14 15:28:37,524:INFO:Uploading results into container
2023-02-14 15:28:37,526:INFO:Uploading model into container now
2023-02-14 15:28:37,526:INFO:_master_model_container: 17
2023-02-14 15:28:37,526:INFO:_display_container: 2
2023-02-14 15:28:37,527:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-14 15:28:37,527:INFO:create_model() successfully completed......................................
2023-02-14 15:28:37,629:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:37,630:INFO:Creating metrics dataframe
2023-02-14 15:28:37,644:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 15:28:37,644:INFO:Total runtime is 0.1761905511220296 minutes
2023-02-14 15:28:37,648:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:37,648:INFO:Initializing create_model()
2023-02-14 15:28:37,650:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:37,650:INFO:Checking exceptions
2023-02-14 15:28:37,650:INFO:Importing libraries
2023-02-14 15:28:37,650:INFO:Copying training dataset
2023-02-14 15:28:37,653:INFO:Defining folds
2023-02-14 15:28:37,653:INFO:Declaring metric variables
2023-02-14 15:28:37,657:INFO:Importing untrained model
2023-02-14 15:28:37,664:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 15:28:37,684:INFO:Starting cross validation
2023-02-14 15:28:37,686:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:37,931:INFO:Calculating mean and std
2023-02-14 15:28:37,932:INFO:Creating metrics dataframe
2023-02-14 15:28:37,935:INFO:Uploading results into container
2023-02-14 15:28:37,936:INFO:Uploading model into container now
2023-02-14 15:28:37,936:INFO:_master_model_container: 18
2023-02-14 15:28:37,936:INFO:_display_container: 2
2023-02-14 15:28:37,936:INFO:LGBMRegressor(random_state=1)
2023-02-14 15:28:37,936:INFO:create_model() successfully completed......................................
2023-02-14 15:28:38,038:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:38,039:INFO:Creating metrics dataframe
2023-02-14 15:28:38,054:INFO:Initializing Dummy Regressor
2023-02-14 15:28:38,054:INFO:Total runtime is 0.18302278518676757 minutes
2023-02-14 15:28:38,059:INFO:SubProcess create_model() called ==================================
2023-02-14 15:28:38,059:INFO:Initializing create_model()
2023-02-14 15:28:38,059:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092448640>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:38,060:INFO:Checking exceptions
2023-02-14 15:28:38,060:INFO:Importing libraries
2023-02-14 15:28:38,060:INFO:Copying training dataset
2023-02-14 15:28:38,064:INFO:Defining folds
2023-02-14 15:28:38,064:INFO:Declaring metric variables
2023-02-14 15:28:38,068:INFO:Importing untrained model
2023-02-14 15:28:38,075:INFO:Dummy Regressor Imported successfully
2023-02-14 15:28:38,085:INFO:Starting cross validation
2023-02-14 15:28:38,086:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 15:28:38,226:INFO:Calculating mean and std
2023-02-14 15:28:38,227:INFO:Creating metrics dataframe
2023-02-14 15:28:38,228:INFO:Uploading results into container
2023-02-14 15:28:38,229:INFO:Uploading model into container now
2023-02-14 15:28:38,229:INFO:_master_model_container: 19
2023-02-14 15:28:38,229:INFO:_display_container: 2
2023-02-14 15:28:38,229:INFO:DummyRegressor()
2023-02-14 15:28:38,229:INFO:create_model() successfully completed......................................
2023-02-14 15:28:38,334:INFO:SubProcess create_model() end ==================================
2023-02-14 15:28:38,334:INFO:Creating metrics dataframe
2023-02-14 15:28:38,359:INFO:Initializing create_model()
2023-02-14 15:28:38,359:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021091C659D0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 15:28:38,359:INFO:Checking exceptions
2023-02-14 15:28:38,362:INFO:Importing libraries
2023-02-14 15:28:38,362:INFO:Copying training dataset
2023-02-14 15:28:38,364:INFO:Defining folds
2023-02-14 15:28:38,364:INFO:Declaring metric variables
2023-02-14 15:28:38,364:INFO:Importing untrained model
2023-02-14 15:28:38,364:INFO:Declaring custom model
2023-02-14 15:28:38,365:INFO:Bayesian Ridge Imported successfully
2023-02-14 15:28:38,365:INFO:Cross validation set to False
2023-02-14 15:28:38,365:INFO:Fitting Model
2023-02-14 15:28:38,397:INFO:BayesianRidge()
2023-02-14 15:28:38,397:INFO:create_model() successfully completed......................................
2023-02-14 15:28:38,538:INFO:_master_model_container: 19
2023-02-14 15:28:38,540:INFO:_display_container: 2
2023-02-14 15:28:38,541:INFO:BayesianRidge()
2023-02-14 15:28:38,541:INFO:compare_models() successfully completed......................................
2023-02-14 18:51:10,599:INFO:PyCaret RegressionExperiment
2023-02-14 18:51:10,599:INFO:Logging name: reg-default-name
2023-02-14 18:51:10,599:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 18:51:10,599:INFO:version 3.0.0.rc8
2023-02-14 18:51:10,599:INFO:Initializing setup()
2023-02-14 18:51:10,599:INFO:self.USI: 27f8
2023-02-14 18:51:10,599:INFO:self._variable_keys: {'n_jobs_param', 'seed', 'exp_name_log', 'idx', 'pipeline', 'y_train', 'logging_param', 'USI', 'gpu_n_jobs_param', 'y', 'gpu_param', 'X', 'memory', 'fold_groups_param', 'X_train', 'X_test', 'html_param', '_available_plots', 'data', 'exp_id', 'log_plots_param', '_ml_usecase', 'y_test', 'target_param', 'fold_generator', 'transform_target_param', 'fold_shuffle_param'}
2023-02-14 18:51:10,599:INFO:Checking environment
2023-02-14 18:51:10,599:INFO:python_version: 3.9.13
2023-02-14 18:51:10,600:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 18:51:10,600:INFO:machine: AMD64
2023-02-14 18:51:10,600:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 18:51:10,608:INFO:Memory: svmem(total=16805040128, available=5746651136, percent=65.8, used=11058388992, free=5746651136)
2023-02-14 18:51:10,608:INFO:Physical Core: 4
2023-02-14 18:51:10,608:INFO:Logical Core: 8
2023-02-14 18:51:10,608:INFO:Checking libraries
2023-02-14 18:51:10,608:INFO:System:
2023-02-14 18:51:10,608:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 18:51:10,608:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 18:51:10,609:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 18:51:10,609:INFO:PyCaret required dependencies:
2023-02-14 18:51:10,609:INFO:                 pip: 23.0
2023-02-14 18:51:10,609:INFO:          setuptools: 58.1.0
2023-02-14 18:51:10,609:INFO:             pycaret: 3.0.0rc8
2023-02-14 18:51:10,609:INFO:             IPython: 8.7.0
2023-02-14 18:51:10,609:INFO:          ipywidgets: 8.0.4
2023-02-14 18:51:10,609:INFO:                tqdm: 4.64.1
2023-02-14 18:51:10,609:INFO:               numpy: 1.22.1
2023-02-14 18:51:10,609:INFO:              pandas: 1.5.2
2023-02-14 18:51:10,609:INFO:              jinja2: 3.1.2
2023-02-14 18:51:10,609:INFO:               scipy: 1.5.4
2023-02-14 18:51:10,609:INFO:              joblib: 1.2.0
2023-02-14 18:51:10,609:INFO:             sklearn: 1.1.3
2023-02-14 18:51:10,609:INFO:                pyod: 1.0.7
2023-02-14 18:51:10,609:INFO:            imblearn: 0.10.1
2023-02-14 18:51:10,609:INFO:   category_encoders: 2.6.0
2023-02-14 18:51:10,609:INFO:            lightgbm: 3.3.4
2023-02-14 18:51:10,609:INFO:               numba: 0.56.4
2023-02-14 18:51:10,609:INFO:            requests: 2.28.1
2023-02-14 18:51:10,609:INFO:          matplotlib: 3.6.2
2023-02-14 18:51:10,609:INFO:          scikitplot: 0.3.7
2023-02-14 18:51:10,609:INFO:         yellowbrick: 1.5
2023-02-14 18:51:10,610:INFO:              plotly: 5.11.0
2023-02-14 18:51:10,610:INFO:             kaleido: 0.2.1
2023-02-14 18:51:10,610:INFO:         statsmodels: 0.13.5
2023-02-14 18:51:10,610:INFO:              sktime: 0.15.1
2023-02-14 18:51:10,610:INFO:               tbats: 1.1.2
2023-02-14 18:51:10,610:INFO:            pmdarima: 2.0.2
2023-02-14 18:51:10,610:INFO:              psutil: 5.9.4
2023-02-14 18:51:10,610:INFO:PyCaret optional dependencies:
2023-02-14 18:51:10,610:INFO:                shap: 0.41.0
2023-02-14 18:51:10,610:INFO:           interpret: 0.3.0
2023-02-14 18:51:10,610:INFO:                umap: Not installed
2023-02-14 18:51:10,610:INFO:    pandas_profiling: 3.6.2
2023-02-14 18:51:10,610:INFO:  explainerdashboard: Not installed
2023-02-14 18:51:10,610:INFO:             autoviz: Not installed
2023-02-14 18:51:10,610:INFO:           fairlearn: Not installed
2023-02-14 18:51:10,610:INFO:             xgboost: 1.7.3
2023-02-14 18:51:10,610:INFO:            catboost: Not installed
2023-02-14 18:51:10,610:INFO:              kmodes: Not installed
2023-02-14 18:51:10,610:INFO:             mlxtend: Not installed
2023-02-14 18:51:10,610:INFO:       statsforecast: Not installed
2023-02-14 18:51:10,610:INFO:        tune_sklearn: Not installed
2023-02-14 18:51:10,610:INFO:                 ray: Not installed
2023-02-14 18:51:10,611:INFO:            hyperopt: Not installed
2023-02-14 18:51:10,611:INFO:              optuna: Not installed
2023-02-14 18:51:10,611:INFO:               skopt: Not installed
2023-02-14 18:51:10,611:INFO:              mlflow: Not installed
2023-02-14 18:51:10,611:INFO:              gradio: Not installed
2023-02-14 18:51:10,611:INFO:             fastapi: Not installed
2023-02-14 18:51:10,611:INFO:             uvicorn: Not installed
2023-02-14 18:51:10,611:INFO:              m2cgen: Not installed
2023-02-14 18:51:10,611:INFO:           evidently: Not installed
2023-02-14 18:51:10,611:INFO:                nltk: 3.8
2023-02-14 18:51:10,611:INFO:            pyLDAvis: Not installed
2023-02-14 18:51:10,611:INFO:              gensim: Not installed
2023-02-14 18:51:10,611:INFO:               spacy: Not installed
2023-02-14 18:51:10,611:INFO:           wordcloud: 1.8.2.2
2023-02-14 18:51:10,611:INFO:            textblob: Not installed
2023-02-14 18:51:10,611:INFO:               fugue: Not installed
2023-02-14 18:51:10,611:INFO:           streamlit: 1.16.0
2023-02-14 18:51:10,611:INFO:             prophet: Not installed
2023-02-14 18:51:10,611:INFO:None
2023-02-14 18:51:10,611:INFO:Set up data.
2023-02-14 18:51:10,617:INFO:Set up train/test split.
2023-02-14 18:51:10,621:INFO:Set up index.
2023-02-14 18:51:10,621:INFO:Set up folding strategy.
2023-02-14 18:51:10,621:INFO:Assigning column types.
2023-02-14 18:51:10,625:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 18:51:10,625:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,631:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,636:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,692:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,734:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,736:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:10,739:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:10,740:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,744:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,749:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,798:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,834:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,834:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:10,837:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:10,837:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 18:51:10,841:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,844:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,888:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,930:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,930:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:10,932:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:10,938:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,943:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 18:51:10,989:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,029:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,030:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:11,032:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:11,032:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 18:51:11,039:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,089:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,127:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,128:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:11,130:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:11,138:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,184:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,219:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,219:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:11,221:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:11,221:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 18:51:11,271:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,306:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,306:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:11,308:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:11,363:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,411:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,411:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:11,415:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:11,415:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 18:51:11,476:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,522:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:11,526:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:11,620:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 18:51:11,695:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:11,698:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:11,698:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 18:51:11,800:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:11,803:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:11,919:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:11,921:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:11,924:INFO:Preparing preprocessing pipeline...
2023-02-14 18:51:11,925:INFO:Set up column name cleaning.
2023-02-14 18:51:11,925:INFO:Set up simple imputation.
2023-02-14 18:51:11,948:INFO:Finished creating preprocessing pipeline.
2023-02-14 18:51:11,954:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 18:51:11,954:INFO:Creating final display dataframe.
2023-02-14 18:51:12,099:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              27f8
2023-02-14 18:51:12,252:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:12,256:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:12,358:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 18:51:12,361:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 18:51:12,362:INFO:setup() successfully completed in 1.76s...............
2023-02-14 18:51:12,363:INFO:Initializing compare_models()
2023-02-14 18:51:12,363:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 18:51:12,363:INFO:Checking exceptions
2023-02-14 18:51:12,364:INFO:Preparing display monitor
2023-02-14 18:51:12,390:INFO:Initializing Linear Regression
2023-02-14 18:51:12,390:INFO:Total runtime is 0.0 minutes
2023-02-14 18:51:12,393:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:12,394:INFO:Initializing create_model()
2023-02-14 18:51:12,394:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:12,394:INFO:Checking exceptions
2023-02-14 18:51:12,394:INFO:Importing libraries
2023-02-14 18:51:12,394:INFO:Copying training dataset
2023-02-14 18:51:12,396:INFO:Defining folds
2023-02-14 18:51:12,397:INFO:Declaring metric variables
2023-02-14 18:51:12,401:INFO:Importing untrained model
2023-02-14 18:51:12,405:INFO:Linear Regression Imported successfully
2023-02-14 18:51:12,414:INFO:Starting cross validation
2023-02-14 18:51:12,415:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:17,489:INFO:Calculating mean and std
2023-02-14 18:51:17,490:INFO:Creating metrics dataframe
2023-02-14 18:51:17,493:INFO:Uploading results into container
2023-02-14 18:51:17,494:INFO:Uploading model into container now
2023-02-14 18:51:17,494:INFO:_master_model_container: 1
2023-02-14 18:51:17,495:INFO:_display_container: 2
2023-02-14 18:51:17,495:INFO:LinearRegression(n_jobs=-1)
2023-02-14 18:51:17,495:INFO:create_model() successfully completed......................................
2023-02-14 18:51:17,668:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:17,668:INFO:Creating metrics dataframe
2023-02-14 18:51:17,674:INFO:Initializing Lasso Regression
2023-02-14 18:51:17,674:INFO:Total runtime is 0.08807385365168253 minutes
2023-02-14 18:51:17,677:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:17,677:INFO:Initializing create_model()
2023-02-14 18:51:17,678:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:17,678:INFO:Checking exceptions
2023-02-14 18:51:17,678:INFO:Importing libraries
2023-02-14 18:51:17,678:INFO:Copying training dataset
2023-02-14 18:51:17,682:INFO:Defining folds
2023-02-14 18:51:17,682:INFO:Declaring metric variables
2023-02-14 18:51:17,686:INFO:Importing untrained model
2023-02-14 18:51:17,691:INFO:Lasso Regression Imported successfully
2023-02-14 18:51:17,728:INFO:Starting cross validation
2023-02-14 18:51:17,729:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:17,848:INFO:Calculating mean and std
2023-02-14 18:51:17,849:INFO:Creating metrics dataframe
2023-02-14 18:51:17,852:INFO:Uploading results into container
2023-02-14 18:51:17,852:INFO:Uploading model into container now
2023-02-14 18:51:17,853:INFO:_master_model_container: 2
2023-02-14 18:51:17,853:INFO:_display_container: 2
2023-02-14 18:51:17,853:INFO:Lasso(random_state=1)
2023-02-14 18:51:17,853:INFO:create_model() successfully completed......................................
2023-02-14 18:51:17,946:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:17,946:INFO:Creating metrics dataframe
2023-02-14 18:51:17,954:INFO:Initializing Ridge Regression
2023-02-14 18:51:17,954:INFO:Total runtime is 0.09273430903752644 minutes
2023-02-14 18:51:17,957:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:17,957:INFO:Initializing create_model()
2023-02-14 18:51:17,958:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:17,958:INFO:Checking exceptions
2023-02-14 18:51:17,958:INFO:Importing libraries
2023-02-14 18:51:17,958:INFO:Copying training dataset
2023-02-14 18:51:17,960:INFO:Defining folds
2023-02-14 18:51:17,961:INFO:Declaring metric variables
2023-02-14 18:51:17,966:INFO:Importing untrained model
2023-02-14 18:51:17,968:INFO:Ridge Regression Imported successfully
2023-02-14 18:51:17,975:INFO:Starting cross validation
2023-02-14 18:51:17,978:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:18,104:INFO:Calculating mean and std
2023-02-14 18:51:18,105:INFO:Creating metrics dataframe
2023-02-14 18:51:18,108:INFO:Uploading results into container
2023-02-14 18:51:18,108:INFO:Uploading model into container now
2023-02-14 18:51:18,110:INFO:_master_model_container: 3
2023-02-14 18:51:18,110:INFO:_display_container: 2
2023-02-14 18:51:18,110:INFO:Ridge(random_state=1)
2023-02-14 18:51:18,110:INFO:create_model() successfully completed......................................
2023-02-14 18:51:18,203:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:18,203:INFO:Creating metrics dataframe
2023-02-14 18:51:18,209:INFO:Initializing Elastic Net
2023-02-14 18:51:18,211:INFO:Total runtime is 0.09701386292775471 minutes
2023-02-14 18:51:18,214:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:18,214:INFO:Initializing create_model()
2023-02-14 18:51:18,214:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:18,215:INFO:Checking exceptions
2023-02-14 18:51:18,215:INFO:Importing libraries
2023-02-14 18:51:18,215:INFO:Copying training dataset
2023-02-14 18:51:18,217:INFO:Defining folds
2023-02-14 18:51:18,218:INFO:Declaring metric variables
2023-02-14 18:51:18,221:INFO:Importing untrained model
2023-02-14 18:51:18,225:INFO:Elastic Net Imported successfully
2023-02-14 18:51:18,233:INFO:Starting cross validation
2023-02-14 18:51:18,234:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:18,357:INFO:Calculating mean and std
2023-02-14 18:51:18,358:INFO:Creating metrics dataframe
2023-02-14 18:51:18,361:INFO:Uploading results into container
2023-02-14 18:51:18,362:INFO:Uploading model into container now
2023-02-14 18:51:18,362:INFO:_master_model_container: 4
2023-02-14 18:51:18,363:INFO:_display_container: 2
2023-02-14 18:51:18,363:INFO:ElasticNet(random_state=1)
2023-02-14 18:51:18,363:INFO:create_model() successfully completed......................................
2023-02-14 18:51:18,459:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:18,460:INFO:Creating metrics dataframe
2023-02-14 18:51:18,468:INFO:Initializing Least Angle Regression
2023-02-14 18:51:18,468:INFO:Total runtime is 0.10129956007003783 minutes
2023-02-14 18:51:18,472:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:18,472:INFO:Initializing create_model()
2023-02-14 18:51:18,472:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:18,472:INFO:Checking exceptions
2023-02-14 18:51:18,472:INFO:Importing libraries
2023-02-14 18:51:18,472:INFO:Copying training dataset
2023-02-14 18:51:18,475:INFO:Defining folds
2023-02-14 18:51:18,476:INFO:Declaring metric variables
2023-02-14 18:51:18,480:INFO:Importing untrained model
2023-02-14 18:51:18,483:INFO:Least Angle Regression Imported successfully
2023-02-14 18:51:18,491:INFO:Starting cross validation
2023-02-14 18:51:18,492:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:18,530:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:18,537:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:18,549:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:18,557:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:18,567:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:18,576:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:18,586:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:18,595:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:18,601:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:18,610:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:18,622:INFO:Calculating mean and std
2023-02-14 18:51:18,623:INFO:Creating metrics dataframe
2023-02-14 18:51:18,625:INFO:Uploading results into container
2023-02-14 18:51:18,625:INFO:Uploading model into container now
2023-02-14 18:51:18,625:INFO:_master_model_container: 5
2023-02-14 18:51:18,625:INFO:_display_container: 2
2023-02-14 18:51:18,625:INFO:Lars(random_state=1)
2023-02-14 18:51:18,625:INFO:create_model() successfully completed......................................
2023-02-14 18:51:18,720:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:18,720:INFO:Creating metrics dataframe
2023-02-14 18:51:18,730:INFO:Initializing Lasso Least Angle Regression
2023-02-14 18:51:18,730:INFO:Total runtime is 0.10566953420639037 minutes
2023-02-14 18:51:18,734:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:18,734:INFO:Initializing create_model()
2023-02-14 18:51:18,735:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:18,735:INFO:Checking exceptions
2023-02-14 18:51:18,735:INFO:Importing libraries
2023-02-14 18:51:18,735:INFO:Copying training dataset
2023-02-14 18:51:18,738:INFO:Defining folds
2023-02-14 18:51:18,738:INFO:Declaring metric variables
2023-02-14 18:51:18,741:INFO:Importing untrained model
2023-02-14 18:51:18,747:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 18:51:18,753:INFO:Starting cross validation
2023-02-14 18:51:18,755:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:18,788:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 18:51:18,796:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 18:51:18,805:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 18:51:18,813:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 18:51:18,823:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 18:51:18,829:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 18:51:18,838:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 18:51:18,844:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 18:51:18,851:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 18:51:18,858:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 18:51:18,870:INFO:Calculating mean and std
2023-02-14 18:51:18,871:INFO:Creating metrics dataframe
2023-02-14 18:51:18,873:INFO:Uploading results into container
2023-02-14 18:51:18,874:INFO:Uploading model into container now
2023-02-14 18:51:18,874:INFO:_master_model_container: 6
2023-02-14 18:51:18,874:INFO:_display_container: 2
2023-02-14 18:51:18,875:INFO:LassoLars(random_state=1)
2023-02-14 18:51:18,875:INFO:create_model() successfully completed......................................
2023-02-14 18:51:18,968:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:18,968:INFO:Creating metrics dataframe
2023-02-14 18:51:18,982:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 18:51:18,982:INFO:Total runtime is 0.10986580451329549 minutes
2023-02-14 18:51:18,985:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:18,985:INFO:Initializing create_model()
2023-02-14 18:51:18,985:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:18,985:INFO:Checking exceptions
2023-02-14 18:51:18,985:INFO:Importing libraries
2023-02-14 18:51:18,986:INFO:Copying training dataset
2023-02-14 18:51:18,989:INFO:Defining folds
2023-02-14 18:51:18,989:INFO:Declaring metric variables
2023-02-14 18:51:18,993:INFO:Importing untrained model
2023-02-14 18:51:18,998:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 18:51:19,004:INFO:Starting cross validation
2023-02-14 18:51:19,005:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:19,058:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:19,069:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:19,078:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:19,086:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:19,090:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:19,099:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:19,111:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:19,116:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:19,124:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:19,130:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 18:51:19,141:INFO:Calculating mean and std
2023-02-14 18:51:19,142:INFO:Creating metrics dataframe
2023-02-14 18:51:19,145:INFO:Uploading results into container
2023-02-14 18:51:19,145:INFO:Uploading model into container now
2023-02-14 18:51:19,145:INFO:_master_model_container: 7
2023-02-14 18:51:19,145:INFO:_display_container: 2
2023-02-14 18:51:19,146:INFO:OrthogonalMatchingPursuit()
2023-02-14 18:51:19,146:INFO:create_model() successfully completed......................................
2023-02-14 18:51:19,236:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:19,237:INFO:Creating metrics dataframe
2023-02-14 18:51:19,247:INFO:Initializing Bayesian Ridge
2023-02-14 18:51:19,247:INFO:Total runtime is 0.11427654027938842 minutes
2023-02-14 18:51:19,249:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:19,249:INFO:Initializing create_model()
2023-02-14 18:51:19,249:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:19,250:INFO:Checking exceptions
2023-02-14 18:51:19,250:INFO:Importing libraries
2023-02-14 18:51:19,250:INFO:Copying training dataset
2023-02-14 18:51:19,253:INFO:Defining folds
2023-02-14 18:51:19,253:INFO:Declaring metric variables
2023-02-14 18:51:19,258:INFO:Importing untrained model
2023-02-14 18:51:19,262:INFO:Bayesian Ridge Imported successfully
2023-02-14 18:51:19,268:INFO:Starting cross validation
2023-02-14 18:51:19,269:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:19,390:INFO:Calculating mean and std
2023-02-14 18:51:19,392:INFO:Creating metrics dataframe
2023-02-14 18:51:19,396:INFO:Uploading results into container
2023-02-14 18:51:19,396:INFO:Uploading model into container now
2023-02-14 18:51:19,397:INFO:_master_model_container: 8
2023-02-14 18:51:19,397:INFO:_display_container: 2
2023-02-14 18:51:19,397:INFO:BayesianRidge()
2023-02-14 18:51:19,397:INFO:create_model() successfully completed......................................
2023-02-14 18:51:19,494:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:19,494:INFO:Creating metrics dataframe
2023-02-14 18:51:19,502:INFO:Initializing Passive Aggressive Regressor
2023-02-14 18:51:19,502:INFO:Total runtime is 0.11853169997533163 minutes
2023-02-14 18:51:19,504:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:19,504:INFO:Initializing create_model()
2023-02-14 18:51:19,505:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:19,505:INFO:Checking exceptions
2023-02-14 18:51:19,505:INFO:Importing libraries
2023-02-14 18:51:19,505:INFO:Copying training dataset
2023-02-14 18:51:19,508:INFO:Defining folds
2023-02-14 18:51:19,508:INFO:Declaring metric variables
2023-02-14 18:51:19,513:INFO:Importing untrained model
2023-02-14 18:51:19,516:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 18:51:19,524:INFO:Starting cross validation
2023-02-14 18:51:19,525:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:19,649:INFO:Calculating mean and std
2023-02-14 18:51:19,650:INFO:Creating metrics dataframe
2023-02-14 18:51:19,652:INFO:Uploading results into container
2023-02-14 18:51:19,652:INFO:Uploading model into container now
2023-02-14 18:51:19,652:INFO:_master_model_container: 9
2023-02-14 18:51:19,652:INFO:_display_container: 2
2023-02-14 18:51:19,653:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-14 18:51:19,653:INFO:create_model() successfully completed......................................
2023-02-14 18:51:19,746:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:19,746:INFO:Creating metrics dataframe
2023-02-14 18:51:19,756:INFO:Initializing Huber Regressor
2023-02-14 18:51:19,756:INFO:Total runtime is 0.12277068694432576 minutes
2023-02-14 18:51:19,760:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:19,761:INFO:Initializing create_model()
2023-02-14 18:51:19,762:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:19,762:INFO:Checking exceptions
2023-02-14 18:51:19,762:INFO:Importing libraries
2023-02-14 18:51:19,762:INFO:Copying training dataset
2023-02-14 18:51:19,765:INFO:Defining folds
2023-02-14 18:51:19,765:INFO:Declaring metric variables
2023-02-14 18:51:19,768:INFO:Importing untrained model
2023-02-14 18:51:19,773:INFO:Huber Regressor Imported successfully
2023-02-14 18:51:19,781:INFO:Starting cross validation
2023-02-14 18:51:19,783:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:19,835:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 18:51:19,849:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 18:51:19,860:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 18:51:19,865:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 18:51:19,879:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 18:51:19,888:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 18:51:19,897:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 18:51:19,905:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 18:51:19,907:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 18:51:19,915:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 18:51:19,927:INFO:Calculating mean and std
2023-02-14 18:51:19,928:INFO:Creating metrics dataframe
2023-02-14 18:51:19,931:INFO:Uploading results into container
2023-02-14 18:51:19,931:INFO:Uploading model into container now
2023-02-14 18:51:19,931:INFO:_master_model_container: 10
2023-02-14 18:51:19,931:INFO:_display_container: 2
2023-02-14 18:51:19,931:INFO:HuberRegressor()
2023-02-14 18:51:19,931:INFO:create_model() successfully completed......................................
2023-02-14 18:51:20,023:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:20,023:INFO:Creating metrics dataframe
2023-02-14 18:51:20,031:INFO:Initializing K Neighbors Regressor
2023-02-14 18:51:20,031:INFO:Total runtime is 0.12735016345977782 minutes
2023-02-14 18:51:20,034:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:20,034:INFO:Initializing create_model()
2023-02-14 18:51:20,034:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:20,034:INFO:Checking exceptions
2023-02-14 18:51:20,034:INFO:Importing libraries
2023-02-14 18:51:20,034:INFO:Copying training dataset
2023-02-14 18:51:20,039:INFO:Defining folds
2023-02-14 18:51:20,039:INFO:Declaring metric variables
2023-02-14 18:51:20,042:INFO:Importing untrained model
2023-02-14 18:51:20,047:INFO:K Neighbors Regressor Imported successfully
2023-02-14 18:51:20,053:INFO:Starting cross validation
2023-02-14 18:51:20,054:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:20,186:INFO:Calculating mean and std
2023-02-14 18:51:20,187:INFO:Creating metrics dataframe
2023-02-14 18:51:20,189:INFO:Uploading results into container
2023-02-14 18:51:20,189:INFO:Uploading model into container now
2023-02-14 18:51:20,190:INFO:_master_model_container: 11
2023-02-14 18:51:20,190:INFO:_display_container: 2
2023-02-14 18:51:20,190:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 18:51:20,190:INFO:create_model() successfully completed......................................
2023-02-14 18:51:20,283:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:20,283:INFO:Creating metrics dataframe
2023-02-14 18:51:20,291:INFO:Initializing Decision Tree Regressor
2023-02-14 18:51:20,291:INFO:Total runtime is 0.1316865841547648 minutes
2023-02-14 18:51:20,297:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:20,297:INFO:Initializing create_model()
2023-02-14 18:51:20,297:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:20,297:INFO:Checking exceptions
2023-02-14 18:51:20,297:INFO:Importing libraries
2023-02-14 18:51:20,297:INFO:Copying training dataset
2023-02-14 18:51:20,300:INFO:Defining folds
2023-02-14 18:51:20,300:INFO:Declaring metric variables
2023-02-14 18:51:20,304:INFO:Importing untrained model
2023-02-14 18:51:20,310:INFO:Decision Tree Regressor Imported successfully
2023-02-14 18:51:20,324:INFO:Starting cross validation
2023-02-14 18:51:20,326:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:20,481:INFO:Calculating mean and std
2023-02-14 18:51:20,482:INFO:Creating metrics dataframe
2023-02-14 18:51:20,485:INFO:Uploading results into container
2023-02-14 18:51:20,485:INFO:Uploading model into container now
2023-02-14 18:51:20,485:INFO:_master_model_container: 12
2023-02-14 18:51:20,485:INFO:_display_container: 2
2023-02-14 18:51:20,486:INFO:DecisionTreeRegressor(random_state=1)
2023-02-14 18:51:20,486:INFO:create_model() successfully completed......................................
2023-02-14 18:51:20,579:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:20,579:INFO:Creating metrics dataframe
2023-02-14 18:51:20,588:INFO:Initializing Random Forest Regressor
2023-02-14 18:51:20,588:INFO:Total runtime is 0.13664076328277588 minutes
2023-02-14 18:51:20,591:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:20,591:INFO:Initializing create_model()
2023-02-14 18:51:20,591:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:20,591:INFO:Checking exceptions
2023-02-14 18:51:20,591:INFO:Importing libraries
2023-02-14 18:51:20,592:INFO:Copying training dataset
2023-02-14 18:51:20,595:INFO:Defining folds
2023-02-14 18:51:20,596:INFO:Declaring metric variables
2023-02-14 18:51:20,601:INFO:Importing untrained model
2023-02-14 18:51:20,604:INFO:Random Forest Regressor Imported successfully
2023-02-14 18:51:20,612:INFO:Starting cross validation
2023-02-14 18:51:20,613:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:21,030:INFO:Calculating mean and std
2023-02-14 18:51:21,030:INFO:Creating metrics dataframe
2023-02-14 18:51:21,033:INFO:Uploading results into container
2023-02-14 18:51:21,034:INFO:Uploading model into container now
2023-02-14 18:51:21,034:INFO:_master_model_container: 13
2023-02-14 18:51:21,034:INFO:_display_container: 2
2023-02-14 18:51:21,035:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-14 18:51:21,035:INFO:create_model() successfully completed......................................
2023-02-14 18:51:21,127:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:21,128:INFO:Creating metrics dataframe
2023-02-14 18:51:21,138:INFO:Initializing Extra Trees Regressor
2023-02-14 18:51:21,140:INFO:Total runtime is 0.14583632548650105 minutes
2023-02-14 18:51:21,145:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:21,145:INFO:Initializing create_model()
2023-02-14 18:51:21,145:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:21,145:INFO:Checking exceptions
2023-02-14 18:51:21,145:INFO:Importing libraries
2023-02-14 18:51:21,146:INFO:Copying training dataset
2023-02-14 18:51:21,148:INFO:Defining folds
2023-02-14 18:51:21,148:INFO:Declaring metric variables
2023-02-14 18:51:21,150:INFO:Importing untrained model
2023-02-14 18:51:21,155:INFO:Extra Trees Regressor Imported successfully
2023-02-14 18:51:21,163:INFO:Starting cross validation
2023-02-14 18:51:21,164:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:21,499:INFO:Calculating mean and std
2023-02-14 18:51:21,500:INFO:Creating metrics dataframe
2023-02-14 18:51:21,502:INFO:Uploading results into container
2023-02-14 18:51:21,502:INFO:Uploading model into container now
2023-02-14 18:51:21,503:INFO:_master_model_container: 14
2023-02-14 18:51:21,503:INFO:_display_container: 2
2023-02-14 18:51:21,503:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-14 18:51:21,503:INFO:create_model() successfully completed......................................
2023-02-14 18:51:21,597:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:21,597:INFO:Creating metrics dataframe
2023-02-14 18:51:21,604:INFO:Initializing AdaBoost Regressor
2023-02-14 18:51:21,604:INFO:Total runtime is 0.1535760005315145 minutes
2023-02-14 18:51:21,607:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:21,608:INFO:Initializing create_model()
2023-02-14 18:51:21,608:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:21,608:INFO:Checking exceptions
2023-02-14 18:51:21,608:INFO:Importing libraries
2023-02-14 18:51:21,608:INFO:Copying training dataset
2023-02-14 18:51:21,612:INFO:Defining folds
2023-02-14 18:51:21,612:INFO:Declaring metric variables
2023-02-14 18:51:21,614:INFO:Importing untrained model
2023-02-14 18:51:21,619:INFO:AdaBoost Regressor Imported successfully
2023-02-14 18:51:21,627:INFO:Starting cross validation
2023-02-14 18:51:21,628:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:21,842:INFO:Calculating mean and std
2023-02-14 18:51:21,843:INFO:Creating metrics dataframe
2023-02-14 18:51:21,845:INFO:Uploading results into container
2023-02-14 18:51:21,847:INFO:Uploading model into container now
2023-02-14 18:51:21,847:INFO:_master_model_container: 15
2023-02-14 18:51:21,847:INFO:_display_container: 2
2023-02-14 18:51:21,848:INFO:AdaBoostRegressor(random_state=1)
2023-02-14 18:51:21,848:INFO:create_model() successfully completed......................................
2023-02-14 18:51:21,943:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:21,943:INFO:Creating metrics dataframe
2023-02-14 18:51:21,952:INFO:Initializing Gradient Boosting Regressor
2023-02-14 18:51:21,953:INFO:Total runtime is 0.15938628911972047 minutes
2023-02-14 18:51:21,957:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:21,957:INFO:Initializing create_model()
2023-02-14 18:51:21,957:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:21,958:INFO:Checking exceptions
2023-02-14 18:51:21,958:INFO:Importing libraries
2023-02-14 18:51:21,958:INFO:Copying training dataset
2023-02-14 18:51:21,961:INFO:Defining folds
2023-02-14 18:51:21,961:INFO:Declaring metric variables
2023-02-14 18:51:21,966:INFO:Importing untrained model
2023-02-14 18:51:21,972:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 18:51:21,980:INFO:Starting cross validation
2023-02-14 18:51:21,981:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:22,152:INFO:Calculating mean and std
2023-02-14 18:51:22,153:INFO:Creating metrics dataframe
2023-02-14 18:51:22,156:INFO:Uploading results into container
2023-02-14 18:51:22,156:INFO:Uploading model into container now
2023-02-14 18:51:22,158:INFO:_master_model_container: 16
2023-02-14 18:51:22,158:INFO:_display_container: 2
2023-02-14 18:51:22,158:INFO:GradientBoostingRegressor(random_state=1)
2023-02-14 18:51:22,158:INFO:create_model() successfully completed......................................
2023-02-14 18:51:22,250:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:22,250:INFO:Creating metrics dataframe
2023-02-14 18:51:22,261:INFO:Initializing Extreme Gradient Boosting
2023-02-14 18:51:22,261:INFO:Total runtime is 0.16452195644378664 minutes
2023-02-14 18:51:22,264:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:22,265:INFO:Initializing create_model()
2023-02-14 18:51:22,265:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:22,265:INFO:Checking exceptions
2023-02-14 18:51:22,265:INFO:Importing libraries
2023-02-14 18:51:22,265:INFO:Copying training dataset
2023-02-14 18:51:22,269:INFO:Defining folds
2023-02-14 18:51:22,269:INFO:Declaring metric variables
2023-02-14 18:51:22,274:INFO:Importing untrained model
2023-02-14 18:51:22,278:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 18:51:22,284:INFO:Starting cross validation
2023-02-14 18:51:22,285:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:22,509:INFO:Calculating mean and std
2023-02-14 18:51:22,510:INFO:Creating metrics dataframe
2023-02-14 18:51:22,513:INFO:Uploading results into container
2023-02-14 18:51:22,513:INFO:Uploading model into container now
2023-02-14 18:51:22,513:INFO:_master_model_container: 17
2023-02-14 18:51:22,513:INFO:_display_container: 2
2023-02-14 18:51:22,514:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-14 18:51:22,514:INFO:create_model() successfully completed......................................
2023-02-14 18:51:22,607:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:22,607:INFO:Creating metrics dataframe
2023-02-14 18:51:22,618:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 18:51:22,619:INFO:Total runtime is 0.17048405806223554 minutes
2023-02-14 18:51:22,621:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:22,621:INFO:Initializing create_model()
2023-02-14 18:51:22,621:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:22,623:INFO:Checking exceptions
2023-02-14 18:51:22,623:INFO:Importing libraries
2023-02-14 18:51:22,623:INFO:Copying training dataset
2023-02-14 18:51:22,626:INFO:Defining folds
2023-02-14 18:51:22,627:INFO:Declaring metric variables
2023-02-14 18:51:22,630:INFO:Importing untrained model
2023-02-14 18:51:22,635:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 18:51:22,642:INFO:Starting cross validation
2023-02-14 18:51:22,643:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:22,821:INFO:Calculating mean and std
2023-02-14 18:51:22,822:INFO:Creating metrics dataframe
2023-02-14 18:51:22,826:INFO:Uploading results into container
2023-02-14 18:51:22,827:INFO:Uploading model into container now
2023-02-14 18:51:22,827:INFO:_master_model_container: 18
2023-02-14 18:51:22,827:INFO:_display_container: 2
2023-02-14 18:51:22,827:INFO:LGBMRegressor(random_state=1)
2023-02-14 18:51:22,827:INFO:create_model() successfully completed......................................
2023-02-14 18:51:22,917:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:22,917:INFO:Creating metrics dataframe
2023-02-14 18:51:22,928:INFO:Initializing Dummy Regressor
2023-02-14 18:51:22,928:INFO:Total runtime is 0.1756292263666789 minutes
2023-02-14 18:51:22,932:INFO:SubProcess create_model() called ==================================
2023-02-14 18:51:22,933:INFO:Initializing create_model()
2023-02-14 18:51:22,933:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210925753A0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:22,933:INFO:Checking exceptions
2023-02-14 18:51:22,933:INFO:Importing libraries
2023-02-14 18:51:22,933:INFO:Copying training dataset
2023-02-14 18:51:22,936:INFO:Defining folds
2023-02-14 18:51:22,937:INFO:Declaring metric variables
2023-02-14 18:51:22,942:INFO:Importing untrained model
2023-02-14 18:51:22,946:INFO:Dummy Regressor Imported successfully
2023-02-14 18:51:22,951:INFO:Starting cross validation
2023-02-14 18:51:22,953:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 18:51:23,078:INFO:Calculating mean and std
2023-02-14 18:51:23,079:INFO:Creating metrics dataframe
2023-02-14 18:51:23,080:INFO:Uploading results into container
2023-02-14 18:51:23,082:INFO:Uploading model into container now
2023-02-14 18:51:23,082:INFO:_master_model_container: 19
2023-02-14 18:51:23,082:INFO:_display_container: 2
2023-02-14 18:51:23,082:INFO:DummyRegressor()
2023-02-14 18:51:23,082:INFO:create_model() successfully completed......................................
2023-02-14 18:51:23,175:INFO:SubProcess create_model() end ==================================
2023-02-14 18:51:23,175:INFO:Creating metrics dataframe
2023-02-14 18:51:23,199:INFO:Initializing create_model()
2023-02-14 18:51:23,199:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210922A7370>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 18:51:23,199:INFO:Checking exceptions
2023-02-14 18:51:23,201:INFO:Importing libraries
2023-02-14 18:51:23,201:INFO:Copying training dataset
2023-02-14 18:51:23,203:INFO:Defining folds
2023-02-14 18:51:23,203:INFO:Declaring metric variables
2023-02-14 18:51:23,204:INFO:Importing untrained model
2023-02-14 18:51:23,204:INFO:Declaring custom model
2023-02-14 18:51:23,204:INFO:Bayesian Ridge Imported successfully
2023-02-14 18:51:23,204:INFO:Cross validation set to False
2023-02-14 18:51:23,204:INFO:Fitting Model
2023-02-14 18:51:23,218:INFO:BayesianRidge()
2023-02-14 18:51:23,219:INFO:create_model() successfully completed......................................
2023-02-14 18:51:23,345:INFO:_master_model_container: 19
2023-02-14 18:51:23,345:INFO:_display_container: 2
2023-02-14 18:51:23,346:INFO:BayesianRidge()
2023-02-14 18:51:23,346:INFO:compare_models() successfully completed......................................
2023-02-14 19:32:57,614:INFO:PyCaret RegressionExperiment
2023-02-14 19:32:57,615:INFO:Logging name: reg-default-name
2023-02-14 19:32:57,615:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 19:32:57,615:INFO:version 3.0.0.rc8
2023-02-14 19:32:57,615:INFO:Initializing setup()
2023-02-14 19:32:57,615:INFO:self.USI: 40cb
2023-02-14 19:32:57,615:INFO:self._variable_keys: {'n_jobs_param', 'seed', 'exp_name_log', 'idx', 'pipeline', 'y_train', 'logging_param', 'USI', 'gpu_n_jobs_param', 'y', 'gpu_param', 'X', 'memory', 'fold_groups_param', 'X_train', 'X_test', 'html_param', '_available_plots', 'data', 'exp_id', 'log_plots_param', '_ml_usecase', 'y_test', 'target_param', 'fold_generator', 'transform_target_param', 'fold_shuffle_param'}
2023-02-14 19:32:57,615:INFO:Checking environment
2023-02-14 19:32:57,615:INFO:python_version: 3.9.13
2023-02-14 19:32:57,615:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 19:32:57,616:INFO:machine: AMD64
2023-02-14 19:32:57,616:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 19:32:57,622:INFO:Memory: svmem(total=16805040128, available=4387897344, percent=73.9, used=12417142784, free=4387897344)
2023-02-14 19:32:57,622:INFO:Physical Core: 4
2023-02-14 19:32:57,622:INFO:Logical Core: 8
2023-02-14 19:32:57,622:INFO:Checking libraries
2023-02-14 19:32:57,622:INFO:System:
2023-02-14 19:32:57,622:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 19:32:57,622:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 19:32:57,622:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 19:32:57,622:INFO:PyCaret required dependencies:
2023-02-14 19:32:57,623:INFO:                 pip: 23.0
2023-02-14 19:32:57,623:INFO:          setuptools: 58.1.0
2023-02-14 19:32:57,623:INFO:             pycaret: 3.0.0rc8
2023-02-14 19:32:57,624:INFO:             IPython: 8.7.0
2023-02-14 19:32:57,624:INFO:          ipywidgets: 8.0.4
2023-02-14 19:32:57,624:INFO:                tqdm: 4.64.1
2023-02-14 19:32:57,624:INFO:               numpy: 1.22.1
2023-02-14 19:32:57,625:INFO:              pandas: 1.5.2
2023-02-14 19:32:57,625:INFO:              jinja2: 3.1.2
2023-02-14 19:32:57,625:INFO:               scipy: 1.5.4
2023-02-14 19:32:57,625:INFO:              joblib: 1.2.0
2023-02-14 19:32:57,625:INFO:             sklearn: 1.1.3
2023-02-14 19:32:57,625:INFO:                pyod: 1.0.7
2023-02-14 19:32:57,626:INFO:            imblearn: 0.10.1
2023-02-14 19:32:57,626:INFO:   category_encoders: 2.6.0
2023-02-14 19:32:57,626:INFO:            lightgbm: 3.3.4
2023-02-14 19:32:57,626:INFO:               numba: 0.56.4
2023-02-14 19:32:57,626:INFO:            requests: 2.28.1
2023-02-14 19:32:57,626:INFO:          matplotlib: 3.6.2
2023-02-14 19:32:57,626:INFO:          scikitplot: 0.3.7
2023-02-14 19:32:57,626:INFO:         yellowbrick: 1.5
2023-02-14 19:32:57,626:INFO:              plotly: 5.11.0
2023-02-14 19:32:57,627:INFO:             kaleido: 0.2.1
2023-02-14 19:32:57,627:INFO:         statsmodels: 0.13.5
2023-02-14 19:32:57,627:INFO:              sktime: 0.15.1
2023-02-14 19:32:57,627:INFO:               tbats: 1.1.2
2023-02-14 19:32:57,627:INFO:            pmdarima: 2.0.2
2023-02-14 19:32:57,627:INFO:              psutil: 5.9.4
2023-02-14 19:32:57,627:INFO:PyCaret optional dependencies:
2023-02-14 19:32:57,627:INFO:                shap: 0.41.0
2023-02-14 19:32:57,627:INFO:           interpret: 0.3.0
2023-02-14 19:32:57,627:INFO:                umap: Not installed
2023-02-14 19:32:57,627:INFO:    pandas_profiling: 3.6.2
2023-02-14 19:32:57,627:INFO:  explainerdashboard: Not installed
2023-02-14 19:32:57,627:INFO:             autoviz: Not installed
2023-02-14 19:32:57,627:INFO:           fairlearn: Not installed
2023-02-14 19:32:57,627:INFO:             xgboost: 1.7.3
2023-02-14 19:32:57,628:INFO:            catboost: Not installed
2023-02-14 19:32:57,628:INFO:              kmodes: Not installed
2023-02-14 19:32:57,628:INFO:             mlxtend: Not installed
2023-02-14 19:32:57,628:INFO:       statsforecast: Not installed
2023-02-14 19:32:57,628:INFO:        tune_sklearn: Not installed
2023-02-14 19:32:57,628:INFO:                 ray: Not installed
2023-02-14 19:32:57,628:INFO:            hyperopt: Not installed
2023-02-14 19:32:57,628:INFO:              optuna: Not installed
2023-02-14 19:32:57,628:INFO:               skopt: Not installed
2023-02-14 19:32:57,628:INFO:              mlflow: Not installed
2023-02-14 19:32:57,628:INFO:              gradio: Not installed
2023-02-14 19:32:57,628:INFO:             fastapi: Not installed
2023-02-14 19:32:57,628:INFO:             uvicorn: Not installed
2023-02-14 19:32:57,628:INFO:              m2cgen: Not installed
2023-02-14 19:32:57,628:INFO:           evidently: Not installed
2023-02-14 19:32:57,628:INFO:                nltk: 3.8
2023-02-14 19:32:57,629:INFO:            pyLDAvis: Not installed
2023-02-14 19:32:57,629:INFO:              gensim: Not installed
2023-02-14 19:32:57,629:INFO:               spacy: Not installed
2023-02-14 19:32:57,629:INFO:           wordcloud: 1.8.2.2
2023-02-14 19:32:57,629:INFO:            textblob: Not installed
2023-02-14 19:32:57,629:INFO:               fugue: Not installed
2023-02-14 19:32:57,629:INFO:           streamlit: 1.16.0
2023-02-14 19:32:57,629:INFO:             prophet: Not installed
2023-02-14 19:32:57,629:INFO:None
2023-02-14 19:32:57,629:INFO:Set up data.
2023-02-14 19:32:57,636:INFO:Set up train/test split.
2023-02-14 19:32:57,638:INFO:Set up index.
2023-02-14 19:32:57,638:INFO:Set up folding strategy.
2023-02-14 19:32:57,638:INFO:Assigning column types.
2023-02-14 19:32:57,641:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 19:32:57,641:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,648:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,654:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,710:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,742:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,743:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:57,746:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:57,746:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,750:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,754:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,800:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,833:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,833:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:57,836:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:57,837:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 19:32:57,842:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,846:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,890:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,926:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,926:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:57,929:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:57,934:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,937:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:32:57,982:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,019:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,020:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:58,023:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:58,023:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 19:32:58,033:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,080:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,119:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,119:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:58,121:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:58,128:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,177:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,215:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,216:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:58,218:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:58,218:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 19:32:58,271:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,305:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,305:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:58,307:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:58,358:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,392:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,392:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:58,396:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:58,396:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 19:32:58,447:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,486:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:58,488:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:58,540:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:32:58,579:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:58,581:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:58,582:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 19:32:58,710:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:58,712:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:58,797:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:58,799:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:58,801:INFO:Preparing preprocessing pipeline...
2023-02-14 19:32:58,801:INFO:Set up column name cleaning.
2023-02-14 19:32:58,801:INFO:Set up simple imputation.
2023-02-14 19:32:58,816:INFO:Finished creating preprocessing pipeline.
2023-02-14 19:32:58,819:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 19:32:58,819:INFO:Creating final display dataframe.
2023-02-14 19:32:58,925:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              40cb
2023-02-14 19:32:59,036:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:59,039:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:59,161:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:32:59,164:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:32:59,164:INFO:setup() successfully completed in 1.55s...............
2023-02-14 19:32:59,166:INFO:Initializing compare_models()
2023-02-14 19:32:59,166:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 19:32:59,166:INFO:Checking exceptions
2023-02-14 19:32:59,166:INFO:Preparing display monitor
2023-02-14 19:32:59,193:INFO:Initializing Linear Regression
2023-02-14 19:32:59,194:INFO:Total runtime is 1.6669432322184246e-05 minutes
2023-02-14 19:32:59,196:INFO:SubProcess create_model() called ==================================
2023-02-14 19:32:59,197:INFO:Initializing create_model()
2023-02-14 19:32:59,197:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:32:59,197:INFO:Checking exceptions
2023-02-14 19:32:59,197:INFO:Importing libraries
2023-02-14 19:32:59,197:INFO:Copying training dataset
2023-02-14 19:32:59,200:INFO:Defining folds
2023-02-14 19:32:59,200:INFO:Declaring metric variables
2023-02-14 19:32:59,202:INFO:Importing untrained model
2023-02-14 19:32:59,205:INFO:Linear Regression Imported successfully
2023-02-14 19:32:59,214:INFO:Starting cross validation
2023-02-14 19:32:59,216:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:03,421:INFO:Calculating mean and std
2023-02-14 19:33:03,424:INFO:Creating metrics dataframe
2023-02-14 19:33:03,428:INFO:Uploading results into container
2023-02-14 19:33:03,428:INFO:Uploading model into container now
2023-02-14 19:33:03,429:INFO:_master_model_container: 1
2023-02-14 19:33:03,429:INFO:_display_container: 2
2023-02-14 19:33:03,429:INFO:LinearRegression(n_jobs=-1)
2023-02-14 19:33:03,429:INFO:create_model() successfully completed......................................
2023-02-14 19:33:03,576:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:03,577:INFO:Creating metrics dataframe
2023-02-14 19:33:03,584:INFO:Initializing Lasso Regression
2023-02-14 19:33:03,584:INFO:Total runtime is 0.07318135102589926 minutes
2023-02-14 19:33:03,588:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:03,589:INFO:Initializing create_model()
2023-02-14 19:33:03,589:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:03,589:INFO:Checking exceptions
2023-02-14 19:33:03,589:INFO:Importing libraries
2023-02-14 19:33:03,589:INFO:Copying training dataset
2023-02-14 19:33:03,593:INFO:Defining folds
2023-02-14 19:33:03,593:INFO:Declaring metric variables
2023-02-14 19:33:03,598:INFO:Importing untrained model
2023-02-14 19:33:03,602:INFO:Lasso Regression Imported successfully
2023-02-14 19:33:03,611:INFO:Starting cross validation
2023-02-14 19:33:03,612:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:03,746:INFO:Calculating mean and std
2023-02-14 19:33:03,747:INFO:Creating metrics dataframe
2023-02-14 19:33:03,750:INFO:Uploading results into container
2023-02-14 19:33:03,750:INFO:Uploading model into container now
2023-02-14 19:33:03,751:INFO:_master_model_container: 2
2023-02-14 19:33:03,751:INFO:_display_container: 2
2023-02-14 19:33:03,752:INFO:Lasso(random_state=1)
2023-02-14 19:33:03,752:INFO:create_model() successfully completed......................................
2023-02-14 19:33:03,906:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:03,906:INFO:Creating metrics dataframe
2023-02-14 19:33:03,914:INFO:Initializing Ridge Regression
2023-02-14 19:33:03,914:INFO:Total runtime is 0.07869441509246827 minutes
2023-02-14 19:33:03,916:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:03,917:INFO:Initializing create_model()
2023-02-14 19:33:03,917:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:03,917:INFO:Checking exceptions
2023-02-14 19:33:03,917:INFO:Importing libraries
2023-02-14 19:33:03,917:INFO:Copying training dataset
2023-02-14 19:33:03,922:INFO:Defining folds
2023-02-14 19:33:03,922:INFO:Declaring metric variables
2023-02-14 19:33:03,925:INFO:Importing untrained model
2023-02-14 19:33:03,928:INFO:Ridge Regression Imported successfully
2023-02-14 19:33:03,935:INFO:Starting cross validation
2023-02-14 19:33:03,936:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:04,075:INFO:Calculating mean and std
2023-02-14 19:33:04,075:INFO:Creating metrics dataframe
2023-02-14 19:33:04,078:INFO:Uploading results into container
2023-02-14 19:33:04,078:INFO:Uploading model into container now
2023-02-14 19:33:04,078:INFO:_master_model_container: 3
2023-02-14 19:33:04,078:INFO:_display_container: 2
2023-02-14 19:33:04,079:INFO:Ridge(random_state=1)
2023-02-14 19:33:04,079:INFO:create_model() successfully completed......................................
2023-02-14 19:33:04,191:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:04,192:INFO:Creating metrics dataframe
2023-02-14 19:33:04,203:INFO:Initializing Elastic Net
2023-02-14 19:33:04,203:INFO:Total runtime is 0.08351105451583864 minutes
2023-02-14 19:33:04,208:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:04,208:INFO:Initializing create_model()
2023-02-14 19:33:04,208:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:04,208:INFO:Checking exceptions
2023-02-14 19:33:04,209:INFO:Importing libraries
2023-02-14 19:33:04,209:INFO:Copying training dataset
2023-02-14 19:33:04,211:INFO:Defining folds
2023-02-14 19:33:04,212:INFO:Declaring metric variables
2023-02-14 19:33:04,215:INFO:Importing untrained model
2023-02-14 19:33:04,222:INFO:Elastic Net Imported successfully
2023-02-14 19:33:04,230:INFO:Starting cross validation
2023-02-14 19:33:04,231:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:04,384:INFO:Calculating mean and std
2023-02-14 19:33:04,385:INFO:Creating metrics dataframe
2023-02-14 19:33:04,388:INFO:Uploading results into container
2023-02-14 19:33:04,389:INFO:Uploading model into container now
2023-02-14 19:33:04,389:INFO:_master_model_container: 4
2023-02-14 19:33:04,389:INFO:_display_container: 2
2023-02-14 19:33:04,390:INFO:ElasticNet(random_state=1)
2023-02-14 19:33:04,390:INFO:create_model() successfully completed......................................
2023-02-14 19:33:04,500:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:04,500:INFO:Creating metrics dataframe
2023-02-14 19:33:04,510:INFO:Initializing Least Angle Regression
2023-02-14 19:33:04,510:INFO:Total runtime is 0.0886205554008484 minutes
2023-02-14 19:33:04,513:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:04,513:INFO:Initializing create_model()
2023-02-14 19:33:04,513:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:04,513:INFO:Checking exceptions
2023-02-14 19:33:04,513:INFO:Importing libraries
2023-02-14 19:33:04,513:INFO:Copying training dataset
2023-02-14 19:33:04,518:INFO:Defining folds
2023-02-14 19:33:04,518:INFO:Declaring metric variables
2023-02-14 19:33:04,522:INFO:Importing untrained model
2023-02-14 19:33:04,526:INFO:Least Angle Regression Imported successfully
2023-02-14 19:33:04,536:INFO:Starting cross validation
2023-02-14 19:33:04,537:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:04,640:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:04,658:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:04,668:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:04,679:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:04,691:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:04,698:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:04,708:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:04,712:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:04,718:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:04,726:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:04,738:INFO:Calculating mean and std
2023-02-14 19:33:04,739:INFO:Creating metrics dataframe
2023-02-14 19:33:04,742:INFO:Uploading results into container
2023-02-14 19:33:04,742:INFO:Uploading model into container now
2023-02-14 19:33:04,742:INFO:_master_model_container: 5
2023-02-14 19:33:04,742:INFO:_display_container: 2
2023-02-14 19:33:04,742:INFO:Lars(random_state=1)
2023-02-14 19:33:04,743:INFO:create_model() successfully completed......................................
2023-02-14 19:33:04,848:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:04,848:INFO:Creating metrics dataframe
2023-02-14 19:33:04,858:INFO:Initializing Lasso Least Angle Regression
2023-02-14 19:33:04,858:INFO:Total runtime is 0.09443008502324424 minutes
2023-02-14 19:33:04,861:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:04,861:INFO:Initializing create_model()
2023-02-14 19:33:04,861:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:04,861:INFO:Checking exceptions
2023-02-14 19:33:04,861:INFO:Importing libraries
2023-02-14 19:33:04,862:INFO:Copying training dataset
2023-02-14 19:33:04,864:INFO:Defining folds
2023-02-14 19:33:04,864:INFO:Declaring metric variables
2023-02-14 19:33:04,869:INFO:Importing untrained model
2023-02-14 19:33:04,874:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 19:33:04,879:INFO:Starting cross validation
2023-02-14 19:33:04,881:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:04,920:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:33:04,931:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:33:04,939:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:33:04,948:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:33:04,955:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:33:04,965:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:33:04,973:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:33:04,980:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:33:04,989:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:33:04,997:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:33:05,009:INFO:Calculating mean and std
2023-02-14 19:33:05,010:INFO:Creating metrics dataframe
2023-02-14 19:33:05,013:INFO:Uploading results into container
2023-02-14 19:33:05,013:INFO:Uploading model into container now
2023-02-14 19:33:05,014:INFO:_master_model_container: 6
2023-02-14 19:33:05,014:INFO:_display_container: 2
2023-02-14 19:33:05,014:INFO:LassoLars(random_state=1)
2023-02-14 19:33:05,014:INFO:create_model() successfully completed......................................
2023-02-14 19:33:05,117:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:05,117:INFO:Creating metrics dataframe
2023-02-14 19:33:05,126:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 19:33:05,127:INFO:Total runtime is 0.09890688260396323 minutes
2023-02-14 19:33:05,131:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:05,131:INFO:Initializing create_model()
2023-02-14 19:33:05,131:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:05,131:INFO:Checking exceptions
2023-02-14 19:33:05,131:INFO:Importing libraries
2023-02-14 19:33:05,131:INFO:Copying training dataset
2023-02-14 19:33:05,133:INFO:Defining folds
2023-02-14 19:33:05,134:INFO:Declaring metric variables
2023-02-14 19:33:05,138:INFO:Importing untrained model
2023-02-14 19:33:05,143:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 19:33:05,151:INFO:Starting cross validation
2023-02-14 19:33:05,152:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:05,191:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:05,200:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:05,208:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:05,218:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:05,227:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:05,237:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:05,246:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:05,254:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:05,262:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:05,269:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:33:05,280:INFO:Calculating mean and std
2023-02-14 19:33:05,281:INFO:Creating metrics dataframe
2023-02-14 19:33:05,286:INFO:Uploading results into container
2023-02-14 19:33:05,286:INFO:Uploading model into container now
2023-02-14 19:33:05,286:INFO:_master_model_container: 7
2023-02-14 19:33:05,287:INFO:_display_container: 2
2023-02-14 19:33:05,287:INFO:OrthogonalMatchingPursuit()
2023-02-14 19:33:05,287:INFO:create_model() successfully completed......................................
2023-02-14 19:33:05,395:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:05,395:INFO:Creating metrics dataframe
2023-02-14 19:33:05,404:INFO:Initializing Bayesian Ridge
2023-02-14 19:33:05,404:INFO:Total runtime is 0.10351861715316774 minutes
2023-02-14 19:33:05,407:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:05,407:INFO:Initializing create_model()
2023-02-14 19:33:05,408:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:05,408:INFO:Checking exceptions
2023-02-14 19:33:05,408:INFO:Importing libraries
2023-02-14 19:33:05,408:INFO:Copying training dataset
2023-02-14 19:33:05,411:INFO:Defining folds
2023-02-14 19:33:05,411:INFO:Declaring metric variables
2023-02-14 19:33:05,415:INFO:Importing untrained model
2023-02-14 19:33:05,420:INFO:Bayesian Ridge Imported successfully
2023-02-14 19:33:05,427:INFO:Starting cross validation
2023-02-14 19:33:05,428:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:05,554:INFO:Calculating mean and std
2023-02-14 19:33:05,555:INFO:Creating metrics dataframe
2023-02-14 19:33:05,558:INFO:Uploading results into container
2023-02-14 19:33:05,559:INFO:Uploading model into container now
2023-02-14 19:33:05,559:INFO:_master_model_container: 8
2023-02-14 19:33:05,559:INFO:_display_container: 2
2023-02-14 19:33:05,559:INFO:BayesianRidge()
2023-02-14 19:33:05,561:INFO:create_model() successfully completed......................................
2023-02-14 19:33:05,670:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:05,670:INFO:Creating metrics dataframe
2023-02-14 19:33:05,679:INFO:Initializing Passive Aggressive Regressor
2023-02-14 19:33:05,679:INFO:Total runtime is 0.10809889237085979 minutes
2023-02-14 19:33:05,679:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:05,679:INFO:Initializing create_model()
2023-02-14 19:33:05,679:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:05,679:INFO:Checking exceptions
2023-02-14 19:33:05,679:INFO:Importing libraries
2023-02-14 19:33:05,679:INFO:Copying training dataset
2023-02-14 19:33:05,687:INFO:Defining folds
2023-02-14 19:33:05,687:INFO:Declaring metric variables
2023-02-14 19:33:05,687:INFO:Importing untrained model
2023-02-14 19:33:05,695:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 19:33:05,700:INFO:Starting cross validation
2023-02-14 19:33:05,704:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:05,886:INFO:Calculating mean and std
2023-02-14 19:33:05,886:INFO:Creating metrics dataframe
2023-02-14 19:33:05,886:INFO:Uploading results into container
2023-02-14 19:33:05,886:INFO:Uploading model into container now
2023-02-14 19:33:05,886:INFO:_master_model_container: 9
2023-02-14 19:33:05,886:INFO:_display_container: 2
2023-02-14 19:33:05,886:INFO:PassiveAggressiveRegressor(random_state=1)
2023-02-14 19:33:05,886:INFO:create_model() successfully completed......................................
2023-02-14 19:33:06,002:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:06,002:INFO:Creating metrics dataframe
2023-02-14 19:33:06,011:INFO:Initializing Huber Regressor
2023-02-14 19:33:06,011:INFO:Total runtime is 0.11363174915313722 minutes
2023-02-14 19:33:06,013:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:06,013:INFO:Initializing create_model()
2023-02-14 19:33:06,013:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:06,013:INFO:Checking exceptions
2023-02-14 19:33:06,013:INFO:Importing libraries
2023-02-14 19:33:06,013:INFO:Copying training dataset
2023-02-14 19:33:06,017:INFO:Defining folds
2023-02-14 19:33:06,017:INFO:Declaring metric variables
2023-02-14 19:33:06,017:INFO:Importing untrained model
2023-02-14 19:33:06,017:INFO:Huber Regressor Imported successfully
2023-02-14 19:33:06,026:INFO:Starting cross validation
2023-02-14 19:33:06,026:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:06,090:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:33:06,106:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:33:06,106:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:33:06,124:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:33:06,132:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:33:06,149:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:33:06,155:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:33:06,169:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:33:06,171:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:33:06,185:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:33:06,194:INFO:Calculating mean and std
2023-02-14 19:33:06,196:INFO:Creating metrics dataframe
2023-02-14 19:33:06,197:INFO:Uploading results into container
2023-02-14 19:33:06,197:INFO:Uploading model into container now
2023-02-14 19:33:06,200:INFO:_master_model_container: 10
2023-02-14 19:33:06,200:INFO:_display_container: 2
2023-02-14 19:33:06,200:INFO:HuberRegressor()
2023-02-14 19:33:06,200:INFO:create_model() successfully completed......................................
2023-02-14 19:33:06,302:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:06,302:INFO:Creating metrics dataframe
2023-02-14 19:33:06,311:INFO:Initializing K Neighbors Regressor
2023-02-14 19:33:06,311:INFO:Total runtime is 0.11863884131113689 minutes
2023-02-14 19:33:06,315:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:06,316:INFO:Initializing create_model()
2023-02-14 19:33:06,316:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:06,316:INFO:Checking exceptions
2023-02-14 19:33:06,316:INFO:Importing libraries
2023-02-14 19:33:06,316:INFO:Copying training dataset
2023-02-14 19:33:06,317:INFO:Defining folds
2023-02-14 19:33:06,317:INFO:Declaring metric variables
2023-02-14 19:33:06,323:INFO:Importing untrained model
2023-02-14 19:33:06,324:INFO:K Neighbors Regressor Imported successfully
2023-02-14 19:33:06,328:INFO:Starting cross validation
2023-02-14 19:33:06,328:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:06,476:INFO:Calculating mean and std
2023-02-14 19:33:06,476:INFO:Creating metrics dataframe
2023-02-14 19:33:06,476:INFO:Uploading results into container
2023-02-14 19:33:06,476:INFO:Uploading model into container now
2023-02-14 19:33:06,476:INFO:_master_model_container: 11
2023-02-14 19:33:06,476:INFO:_display_container: 2
2023-02-14 19:33:06,476:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 19:33:06,476:INFO:create_model() successfully completed......................................
2023-02-14 19:33:06,583:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:06,583:INFO:Creating metrics dataframe
2023-02-14 19:33:06,588:INFO:Initializing Decision Tree Regressor
2023-02-14 19:33:06,588:INFO:Total runtime is 0.12324757178624472 minutes
2023-02-14 19:33:06,596:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:06,596:INFO:Initializing create_model()
2023-02-14 19:33:06,596:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:06,597:INFO:Checking exceptions
2023-02-14 19:33:06,597:INFO:Importing libraries
2023-02-14 19:33:06,597:INFO:Copying training dataset
2023-02-14 19:33:06,601:INFO:Defining folds
2023-02-14 19:33:06,602:INFO:Declaring metric variables
2023-02-14 19:33:06,602:INFO:Importing untrained model
2023-02-14 19:33:06,607:INFO:Decision Tree Regressor Imported successfully
2023-02-14 19:33:06,616:INFO:Starting cross validation
2023-02-14 19:33:06,616:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:06,744:INFO:Calculating mean and std
2023-02-14 19:33:06,744:INFO:Creating metrics dataframe
2023-02-14 19:33:06,753:INFO:Uploading results into container
2023-02-14 19:33:06,753:INFO:Uploading model into container now
2023-02-14 19:33:06,753:INFO:_master_model_container: 12
2023-02-14 19:33:06,753:INFO:_display_container: 2
2023-02-14 19:33:06,753:INFO:DecisionTreeRegressor(random_state=1)
2023-02-14 19:33:06,753:INFO:create_model() successfully completed......................................
2023-02-14 19:33:06,853:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:06,853:INFO:Creating metrics dataframe
2023-02-14 19:33:06,869:INFO:Initializing Random Forest Regressor
2023-02-14 19:33:06,869:INFO:Total runtime is 0.12793621222178142 minutes
2023-02-14 19:33:06,869:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:06,869:INFO:Initializing create_model()
2023-02-14 19:33:06,869:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:06,869:INFO:Checking exceptions
2023-02-14 19:33:06,869:INFO:Importing libraries
2023-02-14 19:33:06,869:INFO:Copying training dataset
2023-02-14 19:33:06,876:INFO:Defining folds
2023-02-14 19:33:06,876:INFO:Declaring metric variables
2023-02-14 19:33:06,877:INFO:Importing untrained model
2023-02-14 19:33:06,883:INFO:Random Forest Regressor Imported successfully
2023-02-14 19:33:06,899:INFO:Starting cross validation
2023-02-14 19:33:06,899:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:07,358:INFO:Calculating mean and std
2023-02-14 19:33:07,358:INFO:Creating metrics dataframe
2023-02-14 19:33:07,358:INFO:Uploading results into container
2023-02-14 19:33:07,358:INFO:Uploading model into container now
2023-02-14 19:33:07,358:INFO:_master_model_container: 13
2023-02-14 19:33:07,358:INFO:_display_container: 2
2023-02-14 19:33:07,358:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-02-14 19:33:07,358:INFO:create_model() successfully completed......................................
2023-02-14 19:33:07,477:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:07,477:INFO:Creating metrics dataframe
2023-02-14 19:33:07,483:INFO:Initializing Extra Trees Regressor
2023-02-14 19:33:07,483:INFO:Total runtime is 0.1381654143333435 minutes
2023-02-14 19:33:07,483:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:07,499:INFO:Initializing create_model()
2023-02-14 19:33:07,499:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:07,499:INFO:Checking exceptions
2023-02-14 19:33:07,499:INFO:Importing libraries
2023-02-14 19:33:07,499:INFO:Copying training dataset
2023-02-14 19:33:07,503:INFO:Defining folds
2023-02-14 19:33:07,503:INFO:Declaring metric variables
2023-02-14 19:33:07,505:INFO:Importing untrained model
2023-02-14 19:33:07,510:INFO:Extra Trees Regressor Imported successfully
2023-02-14 19:33:07,517:INFO:Starting cross validation
2023-02-14 19:33:07,517:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:07,889:INFO:Calculating mean and std
2023-02-14 19:33:07,889:INFO:Creating metrics dataframe
2023-02-14 19:33:07,889:INFO:Uploading results into container
2023-02-14 19:33:07,894:INFO:Uploading model into container now
2023-02-14 19:33:07,894:INFO:_master_model_container: 14
2023-02-14 19:33:07,894:INFO:_display_container: 2
2023-02-14 19:33:07,894:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-02-14 19:33:07,894:INFO:create_model() successfully completed......................................
2023-02-14 19:33:08,000:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:08,000:INFO:Creating metrics dataframe
2023-02-14 19:33:08,007:INFO:Initializing AdaBoost Regressor
2023-02-14 19:33:08,007:INFO:Total runtime is 0.146905779838562 minutes
2023-02-14 19:33:08,016:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:08,016:INFO:Initializing create_model()
2023-02-14 19:33:08,016:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:08,016:INFO:Checking exceptions
2023-02-14 19:33:08,016:INFO:Importing libraries
2023-02-14 19:33:08,016:INFO:Copying training dataset
2023-02-14 19:33:08,016:INFO:Defining folds
2023-02-14 19:33:08,016:INFO:Declaring metric variables
2023-02-14 19:33:08,024:INFO:Importing untrained model
2023-02-14 19:33:08,028:INFO:AdaBoost Regressor Imported successfully
2023-02-14 19:33:08,037:INFO:Starting cross validation
2023-02-14 19:33:08,037:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:08,258:INFO:Calculating mean and std
2023-02-14 19:33:08,258:INFO:Creating metrics dataframe
2023-02-14 19:33:08,258:INFO:Uploading results into container
2023-02-14 19:33:08,258:INFO:Uploading model into container now
2023-02-14 19:33:08,258:INFO:_master_model_container: 15
2023-02-14 19:33:08,258:INFO:_display_container: 2
2023-02-14 19:33:08,258:INFO:AdaBoostRegressor(random_state=1)
2023-02-14 19:33:08,258:INFO:create_model() successfully completed......................................
2023-02-14 19:33:08,372:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:08,372:INFO:Creating metrics dataframe
2023-02-14 19:33:08,387:INFO:Initializing Gradient Boosting Regressor
2023-02-14 19:33:08,387:INFO:Total runtime is 0.1532323996225993 minutes
2023-02-14 19:33:08,387:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:08,393:INFO:Initializing create_model()
2023-02-14 19:33:08,393:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:08,393:INFO:Checking exceptions
2023-02-14 19:33:08,393:INFO:Importing libraries
2023-02-14 19:33:08,393:INFO:Copying training dataset
2023-02-14 19:33:08,396:INFO:Defining folds
2023-02-14 19:33:08,398:INFO:Declaring metric variables
2023-02-14 19:33:08,402:INFO:Importing untrained model
2023-02-14 19:33:08,402:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 19:33:08,410:INFO:Starting cross validation
2023-02-14 19:33:08,410:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:08,599:INFO:Calculating mean and std
2023-02-14 19:33:08,599:INFO:Creating metrics dataframe
2023-02-14 19:33:08,609:INFO:Uploading results into container
2023-02-14 19:33:08,610:INFO:Uploading model into container now
2023-02-14 19:33:08,611:INFO:_master_model_container: 16
2023-02-14 19:33:08,611:INFO:_display_container: 2
2023-02-14 19:33:08,611:INFO:GradientBoostingRegressor(random_state=1)
2023-02-14 19:33:08,611:INFO:create_model() successfully completed......................................
2023-02-14 19:33:08,717:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:08,717:INFO:Creating metrics dataframe
2023-02-14 19:33:08,720:INFO:Initializing Extreme Gradient Boosting
2023-02-14 19:33:08,720:INFO:Total runtime is 0.15878297487894696 minutes
2023-02-14 19:33:08,720:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:08,720:INFO:Initializing create_model()
2023-02-14 19:33:08,720:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:08,720:INFO:Checking exceptions
2023-02-14 19:33:08,720:INFO:Importing libraries
2023-02-14 19:33:08,720:INFO:Copying training dataset
2023-02-14 19:33:08,736:INFO:Defining folds
2023-02-14 19:33:08,736:INFO:Declaring metric variables
2023-02-14 19:33:08,736:INFO:Importing untrained model
2023-02-14 19:33:08,742:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 19:33:08,753:INFO:Starting cross validation
2023-02-14 19:33:08,753:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:09,020:INFO:Calculating mean and std
2023-02-14 19:33:09,020:INFO:Creating metrics dataframe
2023-02-14 19:33:09,020:INFO:Uploading results into container
2023-02-14 19:33:09,020:INFO:Uploading model into container now
2023-02-14 19:33:09,020:INFO:_master_model_container: 17
2023-02-14 19:33:09,020:INFO:_display_container: 2
2023-02-14 19:33:09,020:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1, ...)
2023-02-14 19:33:09,020:INFO:create_model() successfully completed......................................
2023-02-14 19:33:09,129:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:09,129:INFO:Creating metrics dataframe
2023-02-14 19:33:09,145:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 19:33:09,145:INFO:Total runtime is 0.16587543884913128 minutes
2023-02-14 19:33:09,151:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:09,151:INFO:Initializing create_model()
2023-02-14 19:33:09,151:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:09,151:INFO:Checking exceptions
2023-02-14 19:33:09,151:INFO:Importing libraries
2023-02-14 19:33:09,151:INFO:Copying training dataset
2023-02-14 19:33:09,155:INFO:Defining folds
2023-02-14 19:33:09,155:INFO:Declaring metric variables
2023-02-14 19:33:09,156:INFO:Importing untrained model
2023-02-14 19:33:09,162:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 19:33:09,167:INFO:Starting cross validation
2023-02-14 19:33:09,167:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:09,351:INFO:Calculating mean and std
2023-02-14 19:33:09,353:INFO:Creating metrics dataframe
2023-02-14 19:33:09,353:INFO:Uploading results into container
2023-02-14 19:33:09,353:INFO:Uploading model into container now
2023-02-14 19:33:09,353:INFO:_master_model_container: 18
2023-02-14 19:33:09,353:INFO:_display_container: 2
2023-02-14 19:33:09,353:INFO:LGBMRegressor(random_state=1)
2023-02-14 19:33:09,353:INFO:create_model() successfully completed......................................
2023-02-14 19:33:09,447:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:09,447:INFO:Creating metrics dataframe
2023-02-14 19:33:09,463:INFO:Initializing Dummy Regressor
2023-02-14 19:33:09,463:INFO:Total runtime is 0.1711640477180481 minutes
2023-02-14 19:33:09,463:INFO:SubProcess create_model() called ==================================
2023-02-14 19:33:09,463:INFO:Initializing create_model()
2023-02-14 19:33:09,463:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109246A130>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:09,463:INFO:Checking exceptions
2023-02-14 19:33:09,463:INFO:Importing libraries
2023-02-14 19:33:09,463:INFO:Copying training dataset
2023-02-14 19:33:09,475:INFO:Defining folds
2023-02-14 19:33:09,475:INFO:Declaring metric variables
2023-02-14 19:33:09,479:INFO:Importing untrained model
2023-02-14 19:33:09,483:INFO:Dummy Regressor Imported successfully
2023-02-14 19:33:09,488:INFO:Starting cross validation
2023-02-14 19:33:09,491:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:33:09,623:INFO:Calculating mean and std
2023-02-14 19:33:09,623:INFO:Creating metrics dataframe
2023-02-14 19:33:09,623:INFO:Uploading results into container
2023-02-14 19:33:09,623:INFO:Uploading model into container now
2023-02-14 19:33:09,623:INFO:_master_model_container: 19
2023-02-14 19:33:09,623:INFO:_display_container: 2
2023-02-14 19:33:09,623:INFO:DummyRegressor()
2023-02-14 19:33:09,623:INFO:create_model() successfully completed......................................
2023-02-14 19:33:09,735:INFO:SubProcess create_model() end ==================================
2023-02-14 19:33:09,735:INFO:Creating metrics dataframe
2023-02-14 19:33:09,765:INFO:Initializing create_model()
2023-02-14 19:33:09,765:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210977AA640>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:33:09,765:INFO:Checking exceptions
2023-02-14 19:33:09,765:INFO:Importing libraries
2023-02-14 19:33:09,765:INFO:Copying training dataset
2023-02-14 19:33:09,765:INFO:Defining folds
2023-02-14 19:33:09,765:INFO:Declaring metric variables
2023-02-14 19:33:09,765:INFO:Importing untrained model
2023-02-14 19:33:09,765:INFO:Declaring custom model
2023-02-14 19:33:09,765:INFO:Bayesian Ridge Imported successfully
2023-02-14 19:33:09,765:INFO:Cross validation set to False
2023-02-14 19:33:09,765:INFO:Fitting Model
2023-02-14 19:33:09,790:INFO:BayesianRidge()
2023-02-14 19:33:09,790:INFO:create_model() successfully completed......................................
2023-02-14 19:33:09,943:INFO:_master_model_container: 19
2023-02-14 19:33:09,943:INFO:_display_container: 2
2023-02-14 19:33:09,944:INFO:BayesianRidge()
2023-02-14 19:33:09,944:INFO:compare_models() successfully completed......................................
2023-02-14 19:38:10,693:INFO:PyCaret RegressionExperiment
2023-02-14 19:38:10,693:INFO:Logging name: reg-default-name
2023-02-14 19:38:10,693:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 19:38:10,693:INFO:version 3.0.0.rc8
2023-02-14 19:38:10,693:INFO:Initializing setup()
2023-02-14 19:38:10,694:INFO:self.USI: 36b8
2023-02-14 19:38:10,694:INFO:self._variable_keys: {'n_jobs_param', 'seed', 'exp_name_log', 'idx', 'pipeline', 'y_train', 'logging_param', 'USI', 'gpu_n_jobs_param', 'y', 'gpu_param', 'X', 'memory', 'fold_groups_param', 'X_train', 'X_test', 'html_param', '_available_plots', 'data', 'exp_id', 'log_plots_param', '_ml_usecase', 'y_test', 'target_param', 'fold_generator', 'transform_target_param', 'fold_shuffle_param'}
2023-02-14 19:38:10,694:INFO:Checking environment
2023-02-14 19:38:10,694:INFO:python_version: 3.9.13
2023-02-14 19:38:10,694:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 19:38:10,694:INFO:machine: AMD64
2023-02-14 19:38:10,694:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 19:38:10,701:INFO:Memory: svmem(total=16805040128, available=4240072704, percent=74.8, used=12564967424, free=4240072704)
2023-02-14 19:38:10,701:INFO:Physical Core: 4
2023-02-14 19:38:10,701:INFO:Logical Core: 8
2023-02-14 19:38:10,702:INFO:Checking libraries
2023-02-14 19:38:10,702:INFO:System:
2023-02-14 19:38:10,702:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 19:38:10,702:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 19:38:10,702:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 19:38:10,702:INFO:PyCaret required dependencies:
2023-02-14 19:38:10,702:INFO:                 pip: 23.0
2023-02-14 19:38:10,702:INFO:          setuptools: 58.1.0
2023-02-14 19:38:10,702:INFO:             pycaret: 3.0.0rc8
2023-02-14 19:38:10,703:INFO:             IPython: 8.7.0
2023-02-14 19:38:10,703:INFO:          ipywidgets: 8.0.4
2023-02-14 19:38:10,703:INFO:                tqdm: 4.64.1
2023-02-14 19:38:10,703:INFO:               numpy: 1.22.1
2023-02-14 19:38:10,703:INFO:              pandas: 1.5.2
2023-02-14 19:38:10,703:INFO:              jinja2: 3.1.2
2023-02-14 19:38:10,703:INFO:               scipy: 1.5.4
2023-02-14 19:38:10,703:INFO:              joblib: 1.2.0
2023-02-14 19:38:10,703:INFO:             sklearn: 1.1.3
2023-02-14 19:38:10,703:INFO:                pyod: 1.0.7
2023-02-14 19:38:10,703:INFO:            imblearn: 0.10.1
2023-02-14 19:38:10,703:INFO:   category_encoders: 2.6.0
2023-02-14 19:38:10,703:INFO:            lightgbm: 3.3.4
2023-02-14 19:38:10,703:INFO:               numba: 0.56.4
2023-02-14 19:38:10,703:INFO:            requests: 2.28.1
2023-02-14 19:38:10,703:INFO:          matplotlib: 3.6.2
2023-02-14 19:38:10,703:INFO:          scikitplot: 0.3.7
2023-02-14 19:38:10,703:INFO:         yellowbrick: 1.5
2023-02-14 19:38:10,703:INFO:              plotly: 5.11.0
2023-02-14 19:38:10,703:INFO:             kaleido: 0.2.1
2023-02-14 19:38:10,703:INFO:         statsmodels: 0.13.5
2023-02-14 19:38:10,703:INFO:              sktime: 0.15.1
2023-02-14 19:38:10,704:INFO:               tbats: 1.1.2
2023-02-14 19:38:10,704:INFO:            pmdarima: 2.0.2
2023-02-14 19:38:10,704:INFO:              psutil: 5.9.4
2023-02-14 19:38:10,704:INFO:PyCaret optional dependencies:
2023-02-14 19:38:10,704:INFO:                shap: 0.41.0
2023-02-14 19:38:10,704:INFO:           interpret: 0.3.0
2023-02-14 19:38:10,704:INFO:                umap: Not installed
2023-02-14 19:38:10,704:INFO:    pandas_profiling: 3.6.2
2023-02-14 19:38:10,704:INFO:  explainerdashboard: Not installed
2023-02-14 19:38:10,704:INFO:             autoviz: Not installed
2023-02-14 19:38:10,704:INFO:           fairlearn: Not installed
2023-02-14 19:38:10,704:INFO:             xgboost: 1.7.3
2023-02-14 19:38:10,704:INFO:            catboost: Not installed
2023-02-14 19:38:10,704:INFO:              kmodes: Not installed
2023-02-14 19:38:10,704:INFO:             mlxtend: Not installed
2023-02-14 19:38:10,704:INFO:       statsforecast: Not installed
2023-02-14 19:38:10,704:INFO:        tune_sklearn: Not installed
2023-02-14 19:38:10,704:INFO:                 ray: Not installed
2023-02-14 19:38:10,704:INFO:            hyperopt: Not installed
2023-02-14 19:38:10,705:INFO:              optuna: Not installed
2023-02-14 19:38:10,705:INFO:               skopt: Not installed
2023-02-14 19:38:10,705:INFO:              mlflow: Not installed
2023-02-14 19:38:10,705:INFO:              gradio: Not installed
2023-02-14 19:38:10,705:INFO:             fastapi: Not installed
2023-02-14 19:38:10,705:INFO:             uvicorn: Not installed
2023-02-14 19:38:10,705:INFO:              m2cgen: Not installed
2023-02-14 19:38:10,705:INFO:           evidently: Not installed
2023-02-14 19:38:10,705:INFO:                nltk: 3.8
2023-02-14 19:38:10,705:INFO:            pyLDAvis: Not installed
2023-02-14 19:38:10,705:INFO:              gensim: Not installed
2023-02-14 19:38:10,705:INFO:               spacy: Not installed
2023-02-14 19:38:10,705:INFO:           wordcloud: 1.8.2.2
2023-02-14 19:38:10,705:INFO:            textblob: Not installed
2023-02-14 19:38:10,705:INFO:               fugue: Not installed
2023-02-14 19:38:10,705:INFO:           streamlit: 1.16.0
2023-02-14 19:38:10,705:INFO:             prophet: Not installed
2023-02-14 19:38:10,705:INFO:None
2023-02-14 19:38:10,705:INFO:Set up data.
2023-02-14 19:38:10,711:INFO:Set up train/test split.
2023-02-14 19:38:10,712:INFO:Set up index.
2023-02-14 19:38:10,712:INFO:Set up folding strategy.
2023-02-14 19:38:10,712:INFO:Assigning column types.
2023-02-14 19:38:10,716:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 19:38:10,716:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 19:38:10,724:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:38:10,732:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:10,785:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:10,842:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:10,843:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:10,848:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:10,850:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 19:38:10,859:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:38:10,867:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:10,937:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:10,968:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:10,969:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:10,972:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:10,972:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 19:38:10,975:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:38:10,978:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,028:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,064:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,065:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:11,067:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:11,071:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,074:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,122:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,169:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,169:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:11,172:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:11,172:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 19:38:11,181:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,230:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,265:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,266:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:11,270:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:11,279:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,325:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,362:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,362:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:11,364:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:11,364:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 19:38:11,415:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,452:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,452:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:11,455:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:11,511:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,548:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,551:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:11,553:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:11,553:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 19:38:11,606:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,640:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:11,642:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:11,695:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:11,784:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:11,787:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:11,787:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 19:38:11,888:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:11,890:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:11,990:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:11,992:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:11,993:INFO:Preparing preprocessing pipeline...
2023-02-14 19:38:11,994:INFO:Set up column name cleaning.
2023-02-14 19:38:11,994:INFO:Set up simple imputation.
2023-02-14 19:38:12,047:INFO:Finished creating preprocessing pipeline.
2023-02-14 19:38:12,051:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 19:38:12,051:INFO:Creating final display dataframe.
2023-02-14 19:38:12,259:INFO:Setup _display_container:                     Description             Value
0                    Session id                 9
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              36b8
2023-02-14 19:38:12,387:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:12,389:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:12,485:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:12,487:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:12,487:INFO:setup() successfully completed in 1.79s...............
2023-02-14 19:38:12,487:INFO:Initializing compare_models()
2023-02-14 19:38:12,487:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 19:38:12,487:INFO:Checking exceptions
2023-02-14 19:38:12,488:INFO:Preparing display monitor
2023-02-14 19:38:12,513:INFO:Initializing Linear Regression
2023-02-14 19:38:12,513:INFO:Total runtime is 0.0 minutes
2023-02-14 19:38:12,517:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:12,517:INFO:Initializing create_model()
2023-02-14 19:38:12,517:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:12,518:INFO:Checking exceptions
2023-02-14 19:38:12,518:INFO:Importing libraries
2023-02-14 19:38:12,518:INFO:Copying training dataset
2023-02-14 19:38:12,520:INFO:Defining folds
2023-02-14 19:38:12,520:INFO:Declaring metric variables
2023-02-14 19:38:12,524:INFO:Importing untrained model
2023-02-14 19:38:12,527:INFO:Linear Regression Imported successfully
2023-02-14 19:38:12,535:INFO:Starting cross validation
2023-02-14 19:38:12,536:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:17,497:INFO:Calculating mean and std
2023-02-14 19:38:17,498:INFO:Creating metrics dataframe
2023-02-14 19:38:17,501:INFO:Uploading results into container
2023-02-14 19:38:17,501:INFO:Uploading model into container now
2023-02-14 19:38:17,502:INFO:_master_model_container: 1
2023-02-14 19:38:17,502:INFO:_display_container: 2
2023-02-14 19:38:17,502:INFO:LinearRegression(n_jobs=-1)
2023-02-14 19:38:17,502:INFO:create_model() successfully completed......................................
2023-02-14 19:38:17,622:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:17,622:INFO:Creating metrics dataframe
2023-02-14 19:38:17,630:INFO:Initializing Lasso Regression
2023-02-14 19:38:17,630:INFO:Total runtime is 0.0852960467338562 minutes
2023-02-14 19:38:17,634:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:17,634:INFO:Initializing create_model()
2023-02-14 19:38:17,635:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:17,635:INFO:Checking exceptions
2023-02-14 19:38:17,635:INFO:Importing libraries
2023-02-14 19:38:17,635:INFO:Copying training dataset
2023-02-14 19:38:17,639:INFO:Defining folds
2023-02-14 19:38:17,639:INFO:Declaring metric variables
2023-02-14 19:38:17,642:INFO:Importing untrained model
2023-02-14 19:38:17,648:INFO:Lasso Regression Imported successfully
2023-02-14 19:38:17,655:INFO:Starting cross validation
2023-02-14 19:38:17,656:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:17,777:INFO:Calculating mean and std
2023-02-14 19:38:17,778:INFO:Creating metrics dataframe
2023-02-14 19:38:17,780:INFO:Uploading results into container
2023-02-14 19:38:17,781:INFO:Uploading model into container now
2023-02-14 19:38:17,781:INFO:_master_model_container: 2
2023-02-14 19:38:17,781:INFO:_display_container: 2
2023-02-14 19:38:17,781:INFO:Lasso(random_state=9)
2023-02-14 19:38:17,781:INFO:create_model() successfully completed......................................
2023-02-14 19:38:17,883:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:17,883:INFO:Creating metrics dataframe
2023-02-14 19:38:17,893:INFO:Initializing Ridge Regression
2023-02-14 19:38:17,893:INFO:Total runtime is 0.08966995477676391 minutes
2023-02-14 19:38:17,898:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:17,898:INFO:Initializing create_model()
2023-02-14 19:38:17,898:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:17,898:INFO:Checking exceptions
2023-02-14 19:38:17,899:INFO:Importing libraries
2023-02-14 19:38:17,899:INFO:Copying training dataset
2023-02-14 19:38:17,902:INFO:Defining folds
2023-02-14 19:38:17,903:INFO:Declaring metric variables
2023-02-14 19:38:17,907:INFO:Importing untrained model
2023-02-14 19:38:17,912:INFO:Ridge Regression Imported successfully
2023-02-14 19:38:17,920:INFO:Starting cross validation
2023-02-14 19:38:17,921:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:18,048:INFO:Calculating mean and std
2023-02-14 19:38:18,049:INFO:Creating metrics dataframe
2023-02-14 19:38:18,051:INFO:Uploading results into container
2023-02-14 19:38:18,052:INFO:Uploading model into container now
2023-02-14 19:38:18,052:INFO:_master_model_container: 3
2023-02-14 19:38:18,052:INFO:_display_container: 2
2023-02-14 19:38:18,052:INFO:Ridge(random_state=9)
2023-02-14 19:38:18,052:INFO:create_model() successfully completed......................................
2023-02-14 19:38:18,153:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:18,153:INFO:Creating metrics dataframe
2023-02-14 19:38:18,162:INFO:Initializing Elastic Net
2023-02-14 19:38:18,162:INFO:Total runtime is 0.09415003856023152 minutes
2023-02-14 19:38:18,164:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:18,165:INFO:Initializing create_model()
2023-02-14 19:38:18,165:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:18,165:INFO:Checking exceptions
2023-02-14 19:38:18,165:INFO:Importing libraries
2023-02-14 19:38:18,165:INFO:Copying training dataset
2023-02-14 19:38:18,169:INFO:Defining folds
2023-02-14 19:38:18,169:INFO:Declaring metric variables
2023-02-14 19:38:18,175:INFO:Importing untrained model
2023-02-14 19:38:18,178:INFO:Elastic Net Imported successfully
2023-02-14 19:38:18,186:INFO:Starting cross validation
2023-02-14 19:38:18,187:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:18,306:INFO:Calculating mean and std
2023-02-14 19:38:18,307:INFO:Creating metrics dataframe
2023-02-14 19:38:18,310:INFO:Uploading results into container
2023-02-14 19:38:18,310:INFO:Uploading model into container now
2023-02-14 19:38:18,311:INFO:_master_model_container: 4
2023-02-14 19:38:18,311:INFO:_display_container: 2
2023-02-14 19:38:18,311:INFO:ElasticNet(random_state=9)
2023-02-14 19:38:18,311:INFO:create_model() successfully completed......................................
2023-02-14 19:38:18,417:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:18,417:INFO:Creating metrics dataframe
2023-02-14 19:38:18,429:INFO:Initializing Least Angle Regression
2023-02-14 19:38:18,429:INFO:Total runtime is 0.09860171874364217 minutes
2023-02-14 19:38:18,432:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:18,432:INFO:Initializing create_model()
2023-02-14 19:38:18,432:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:18,432:INFO:Checking exceptions
2023-02-14 19:38:18,433:INFO:Importing libraries
2023-02-14 19:38:18,433:INFO:Copying training dataset
2023-02-14 19:38:18,435:INFO:Defining folds
2023-02-14 19:38:18,435:INFO:Declaring metric variables
2023-02-14 19:38:18,438:INFO:Importing untrained model
2023-02-14 19:38:18,443:INFO:Least Angle Regression Imported successfully
2023-02-14 19:38:18,450:INFO:Starting cross validation
2023-02-14 19:38:18,450:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:18,488:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:18,494:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:18,502:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:18,511:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:18,520:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:18,529:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:18,536:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:18,545:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:18,551:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:18,557:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:18,570:INFO:Calculating mean and std
2023-02-14 19:38:18,570:INFO:Creating metrics dataframe
2023-02-14 19:38:18,573:INFO:Uploading results into container
2023-02-14 19:38:18,573:INFO:Uploading model into container now
2023-02-14 19:38:18,574:INFO:_master_model_container: 5
2023-02-14 19:38:18,574:INFO:_display_container: 2
2023-02-14 19:38:18,575:INFO:Lars(random_state=9)
2023-02-14 19:38:18,575:INFO:create_model() successfully completed......................................
2023-02-14 19:38:18,679:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:18,679:INFO:Creating metrics dataframe
2023-02-14 19:38:18,688:INFO:Initializing Lasso Least Angle Regression
2023-02-14 19:38:18,689:INFO:Total runtime is 0.10294635693232218 minutes
2023-02-14 19:38:18,693:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:18,694:INFO:Initializing create_model()
2023-02-14 19:38:18,694:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:18,694:INFO:Checking exceptions
2023-02-14 19:38:18,694:INFO:Importing libraries
2023-02-14 19:38:18,694:INFO:Copying training dataset
2023-02-14 19:38:18,699:INFO:Defining folds
2023-02-14 19:38:18,699:INFO:Declaring metric variables
2023-02-14 19:38:18,703:INFO:Importing untrained model
2023-02-14 19:38:18,707:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 19:38:18,747:INFO:Starting cross validation
2023-02-14 19:38:18,748:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:18,789:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:18,797:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:18,804:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:18,815:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:18,823:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:18,832:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:18,842:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:18,849:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:18,856:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:18,866:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:18,879:INFO:Calculating mean and std
2023-02-14 19:38:18,880:INFO:Creating metrics dataframe
2023-02-14 19:38:18,882:INFO:Uploading results into container
2023-02-14 19:38:18,882:INFO:Uploading model into container now
2023-02-14 19:38:18,882:INFO:_master_model_container: 6
2023-02-14 19:38:18,882:INFO:_display_container: 2
2023-02-14 19:38:18,884:INFO:LassoLars(random_state=9)
2023-02-14 19:38:18,884:INFO:create_model() successfully completed......................................
2023-02-14 19:38:18,986:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:18,986:INFO:Creating metrics dataframe
2023-02-14 19:38:18,996:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 19:38:18,996:INFO:Total runtime is 0.10804918607076008 minutes
2023-02-14 19:38:18,998:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:18,999:INFO:Initializing create_model()
2023-02-14 19:38:18,999:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:18,999:INFO:Checking exceptions
2023-02-14 19:38:18,999:INFO:Importing libraries
2023-02-14 19:38:18,999:INFO:Copying training dataset
2023-02-14 19:38:19,003:INFO:Defining folds
2023-02-14 19:38:19,003:INFO:Declaring metric variables
2023-02-14 19:38:19,008:INFO:Importing untrained model
2023-02-14 19:38:19,013:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 19:38:19,020:INFO:Starting cross validation
2023-02-14 19:38:19,022:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:19,064:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:19,072:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:19,083:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:19,095:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:19,104:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:19,115:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:19,122:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:19,135:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:19,144:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:19,153:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:19,168:INFO:Calculating mean and std
2023-02-14 19:38:19,169:INFO:Creating metrics dataframe
2023-02-14 19:38:19,172:INFO:Uploading results into container
2023-02-14 19:38:19,172:INFO:Uploading model into container now
2023-02-14 19:38:19,173:INFO:_master_model_container: 7
2023-02-14 19:38:19,173:INFO:_display_container: 2
2023-02-14 19:38:19,174:INFO:OrthogonalMatchingPursuit()
2023-02-14 19:38:19,174:INFO:create_model() successfully completed......................................
2023-02-14 19:38:19,285:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:19,285:INFO:Creating metrics dataframe
2023-02-14 19:38:19,293:INFO:Initializing Bayesian Ridge
2023-02-14 19:38:19,294:INFO:Total runtime is 0.11301951011021931 minutes
2023-02-14 19:38:19,298:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:19,298:INFO:Initializing create_model()
2023-02-14 19:38:19,298:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:19,299:INFO:Checking exceptions
2023-02-14 19:38:19,299:INFO:Importing libraries
2023-02-14 19:38:19,299:INFO:Copying training dataset
2023-02-14 19:38:19,301:INFO:Defining folds
2023-02-14 19:38:19,302:INFO:Declaring metric variables
2023-02-14 19:38:19,304:INFO:Importing untrained model
2023-02-14 19:38:19,310:INFO:Bayesian Ridge Imported successfully
2023-02-14 19:38:19,318:INFO:Starting cross validation
2023-02-14 19:38:19,319:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:19,465:INFO:Calculating mean and std
2023-02-14 19:38:19,466:INFO:Creating metrics dataframe
2023-02-14 19:38:19,468:INFO:Uploading results into container
2023-02-14 19:38:19,469:INFO:Uploading model into container now
2023-02-14 19:38:19,470:INFO:_master_model_container: 8
2023-02-14 19:38:19,470:INFO:_display_container: 2
2023-02-14 19:38:19,470:INFO:BayesianRidge()
2023-02-14 19:38:19,470:INFO:create_model() successfully completed......................................
2023-02-14 19:38:19,587:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:19,587:INFO:Creating metrics dataframe
2023-02-14 19:38:19,598:INFO:Initializing Passive Aggressive Regressor
2023-02-14 19:38:19,598:INFO:Total runtime is 0.11808314323425292 minutes
2023-02-14 19:38:19,600:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:19,600:INFO:Initializing create_model()
2023-02-14 19:38:19,601:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:19,601:INFO:Checking exceptions
2023-02-14 19:38:19,601:INFO:Importing libraries
2023-02-14 19:38:19,601:INFO:Copying training dataset
2023-02-14 19:38:19,604:INFO:Defining folds
2023-02-14 19:38:19,604:INFO:Declaring metric variables
2023-02-14 19:38:19,606:INFO:Importing untrained model
2023-02-14 19:38:19,612:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 19:38:19,617:INFO:Starting cross validation
2023-02-14 19:38:19,618:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:19,745:INFO:Calculating mean and std
2023-02-14 19:38:19,746:INFO:Creating metrics dataframe
2023-02-14 19:38:19,748:INFO:Uploading results into container
2023-02-14 19:38:19,749:INFO:Uploading model into container now
2023-02-14 19:38:19,749:INFO:_master_model_container: 9
2023-02-14 19:38:19,749:INFO:_display_container: 2
2023-02-14 19:38:19,749:INFO:PassiveAggressiveRegressor(random_state=9)
2023-02-14 19:38:19,750:INFO:create_model() successfully completed......................................
2023-02-14 19:38:19,856:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:19,856:INFO:Creating metrics dataframe
2023-02-14 19:38:19,866:INFO:Initializing Huber Regressor
2023-02-14 19:38:19,867:INFO:Total runtime is 0.12257519960403442 minutes
2023-02-14 19:38:19,870:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:19,871:INFO:Initializing create_model()
2023-02-14 19:38:19,872:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:19,872:INFO:Checking exceptions
2023-02-14 19:38:19,872:INFO:Importing libraries
2023-02-14 19:38:19,872:INFO:Copying training dataset
2023-02-14 19:38:19,874:INFO:Defining folds
2023-02-14 19:38:19,875:INFO:Declaring metric variables
2023-02-14 19:38:19,881:INFO:Importing untrained model
2023-02-14 19:38:19,892:INFO:Huber Regressor Imported successfully
2023-02-14 19:38:19,913:INFO:Starting cross validation
2023-02-14 19:38:19,914:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:19,980:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:19,986:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:19,992:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:20,011:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:20,018:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:20,038:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:20,058:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:20,066:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:20,077:INFO:Calculating mean and std
2023-02-14 19:38:20,077:INFO:Creating metrics dataframe
2023-02-14 19:38:20,080:INFO:Uploading results into container
2023-02-14 19:38:20,080:INFO:Uploading model into container now
2023-02-14 19:38:20,081:INFO:_master_model_container: 10
2023-02-14 19:38:20,081:INFO:_display_container: 2
2023-02-14 19:38:20,081:INFO:HuberRegressor()
2023-02-14 19:38:20,081:INFO:create_model() successfully completed......................................
2023-02-14 19:38:20,185:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:20,186:INFO:Creating metrics dataframe
2023-02-14 19:38:20,195:INFO:Initializing K Neighbors Regressor
2023-02-14 19:38:20,195:INFO:Total runtime is 0.12804791927337644 minutes
2023-02-14 19:38:20,198:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:20,200:INFO:Initializing create_model()
2023-02-14 19:38:20,200:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:20,200:INFO:Checking exceptions
2023-02-14 19:38:20,200:INFO:Importing libraries
2023-02-14 19:38:20,200:INFO:Copying training dataset
2023-02-14 19:38:20,202:INFO:Defining folds
2023-02-14 19:38:20,202:INFO:Declaring metric variables
2023-02-14 19:38:20,207:INFO:Importing untrained model
2023-02-14 19:38:20,211:INFO:K Neighbors Regressor Imported successfully
2023-02-14 19:38:20,218:INFO:Starting cross validation
2023-02-14 19:38:20,219:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:20,363:INFO:Calculating mean and std
2023-02-14 19:38:20,364:INFO:Creating metrics dataframe
2023-02-14 19:38:20,366:INFO:Uploading results into container
2023-02-14 19:38:20,367:INFO:Uploading model into container now
2023-02-14 19:38:20,367:INFO:_master_model_container: 11
2023-02-14 19:38:20,367:INFO:_display_container: 2
2023-02-14 19:38:20,367:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 19:38:20,367:INFO:create_model() successfully completed......................................
2023-02-14 19:38:20,477:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:20,477:INFO:Creating metrics dataframe
2023-02-14 19:38:20,487:INFO:Initializing Decision Tree Regressor
2023-02-14 19:38:20,489:INFO:Total runtime is 0.13293229341506957 minutes
2023-02-14 19:38:20,492:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:20,492:INFO:Initializing create_model()
2023-02-14 19:38:20,492:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:20,493:INFO:Checking exceptions
2023-02-14 19:38:20,493:INFO:Importing libraries
2023-02-14 19:38:20,493:INFO:Copying training dataset
2023-02-14 19:38:20,496:INFO:Defining folds
2023-02-14 19:38:20,496:INFO:Declaring metric variables
2023-02-14 19:38:20,499:INFO:Importing untrained model
2023-02-14 19:38:20,503:INFO:Decision Tree Regressor Imported successfully
2023-02-14 19:38:20,512:INFO:Starting cross validation
2023-02-14 19:38:20,513:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:20,664:INFO:Calculating mean and std
2023-02-14 19:38:20,665:INFO:Creating metrics dataframe
2023-02-14 19:38:20,668:INFO:Uploading results into container
2023-02-14 19:38:20,668:INFO:Uploading model into container now
2023-02-14 19:38:20,669:INFO:_master_model_container: 12
2023-02-14 19:38:20,669:INFO:_display_container: 2
2023-02-14 19:38:20,669:INFO:DecisionTreeRegressor(random_state=9)
2023-02-14 19:38:20,669:INFO:create_model() successfully completed......................................
2023-02-14 19:38:20,777:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:20,777:INFO:Creating metrics dataframe
2023-02-14 19:38:20,786:INFO:Initializing Random Forest Regressor
2023-02-14 19:38:20,786:INFO:Total runtime is 0.13789479335149127 minutes
2023-02-14 19:38:20,789:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:20,790:INFO:Initializing create_model()
2023-02-14 19:38:20,790:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:20,790:INFO:Checking exceptions
2023-02-14 19:38:20,790:INFO:Importing libraries
2023-02-14 19:38:20,790:INFO:Copying training dataset
2023-02-14 19:38:20,792:INFO:Defining folds
2023-02-14 19:38:20,792:INFO:Declaring metric variables
2023-02-14 19:38:20,795:INFO:Importing untrained model
2023-02-14 19:38:20,800:INFO:Random Forest Regressor Imported successfully
2023-02-14 19:38:20,809:INFO:Starting cross validation
2023-02-14 19:38:20,810:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:21,276:INFO:Calculating mean and std
2023-02-14 19:38:21,278:INFO:Creating metrics dataframe
2023-02-14 19:38:21,280:INFO:Uploading results into container
2023-02-14 19:38:21,281:INFO:Uploading model into container now
2023-02-14 19:38:21,281:INFO:_master_model_container: 13
2023-02-14 19:38:21,281:INFO:_display_container: 2
2023-02-14 19:38:21,281:INFO:RandomForestRegressor(n_jobs=-1, random_state=9)
2023-02-14 19:38:21,282:INFO:create_model() successfully completed......................................
2023-02-14 19:38:21,382:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:21,382:INFO:Creating metrics dataframe
2023-02-14 19:38:21,393:INFO:Initializing Extra Trees Regressor
2023-02-14 19:38:21,394:INFO:Total runtime is 0.148019536336263 minutes
2023-02-14 19:38:21,399:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:21,399:INFO:Initializing create_model()
2023-02-14 19:38:21,400:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:21,400:INFO:Checking exceptions
2023-02-14 19:38:21,400:INFO:Importing libraries
2023-02-14 19:38:21,400:INFO:Copying training dataset
2023-02-14 19:38:21,403:INFO:Defining folds
2023-02-14 19:38:21,403:INFO:Declaring metric variables
2023-02-14 19:38:21,406:INFO:Importing untrained model
2023-02-14 19:38:21,411:INFO:Extra Trees Regressor Imported successfully
2023-02-14 19:38:21,450:INFO:Starting cross validation
2023-02-14 19:38:21,451:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:21,862:INFO:Calculating mean and std
2023-02-14 19:38:21,863:INFO:Creating metrics dataframe
2023-02-14 19:38:21,866:INFO:Uploading results into container
2023-02-14 19:38:21,866:INFO:Uploading model into container now
2023-02-14 19:38:21,867:INFO:_master_model_container: 14
2023-02-14 19:38:21,867:INFO:_display_container: 2
2023-02-14 19:38:21,867:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=9)
2023-02-14 19:38:21,867:INFO:create_model() successfully completed......................................
2023-02-14 19:38:21,971:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:21,981:INFO:Creating metrics dataframe
2023-02-14 19:38:21,993:INFO:Initializing AdaBoost Regressor
2023-02-14 19:38:21,994:INFO:Total runtime is 0.15802686611811317 minutes
2023-02-14 19:38:21,997:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:21,997:INFO:Initializing create_model()
2023-02-14 19:38:21,997:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:21,997:INFO:Checking exceptions
2023-02-14 19:38:21,998:INFO:Importing libraries
2023-02-14 19:38:21,998:INFO:Copying training dataset
2023-02-14 19:38:22,002:INFO:Defining folds
2023-02-14 19:38:22,002:INFO:Declaring metric variables
2023-02-14 19:38:22,009:INFO:Importing untrained model
2023-02-14 19:38:22,018:INFO:AdaBoost Regressor Imported successfully
2023-02-14 19:38:22,033:INFO:Starting cross validation
2023-02-14 19:38:22,035:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:22,284:INFO:Calculating mean and std
2023-02-14 19:38:22,285:INFO:Creating metrics dataframe
2023-02-14 19:38:22,290:INFO:Uploading results into container
2023-02-14 19:38:22,291:INFO:Uploading model into container now
2023-02-14 19:38:22,291:INFO:_master_model_container: 15
2023-02-14 19:38:22,292:INFO:_display_container: 2
2023-02-14 19:38:22,292:INFO:AdaBoostRegressor(random_state=9)
2023-02-14 19:38:22,292:INFO:create_model() successfully completed......................................
2023-02-14 19:38:22,395:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:22,395:INFO:Creating metrics dataframe
2023-02-14 19:38:22,405:INFO:Initializing Gradient Boosting Regressor
2023-02-14 19:38:22,405:INFO:Total runtime is 0.16487485965092974 minutes
2023-02-14 19:38:22,409:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:22,409:INFO:Initializing create_model()
2023-02-14 19:38:22,410:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:22,410:INFO:Checking exceptions
2023-02-14 19:38:22,410:INFO:Importing libraries
2023-02-14 19:38:22,410:INFO:Copying training dataset
2023-02-14 19:38:22,413:INFO:Defining folds
2023-02-14 19:38:22,413:INFO:Declaring metric variables
2023-02-14 19:38:22,416:INFO:Importing untrained model
2023-02-14 19:38:22,419:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 19:38:22,428:INFO:Starting cross validation
2023-02-14 19:38:22,429:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:22,607:INFO:Calculating mean and std
2023-02-14 19:38:22,608:INFO:Creating metrics dataframe
2023-02-14 19:38:22,611:INFO:Uploading results into container
2023-02-14 19:38:22,612:INFO:Uploading model into container now
2023-02-14 19:38:22,612:INFO:_master_model_container: 16
2023-02-14 19:38:22,612:INFO:_display_container: 2
2023-02-14 19:38:22,612:INFO:GradientBoostingRegressor(random_state=9)
2023-02-14 19:38:22,612:INFO:create_model() successfully completed......................................
2023-02-14 19:38:22,734:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:22,735:INFO:Creating metrics dataframe
2023-02-14 19:38:22,756:INFO:Initializing Extreme Gradient Boosting
2023-02-14 19:38:22,756:INFO:Total runtime is 0.1707302689552307 minutes
2023-02-14 19:38:22,760:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:22,761:INFO:Initializing create_model()
2023-02-14 19:38:22,761:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:22,761:INFO:Checking exceptions
2023-02-14 19:38:22,761:INFO:Importing libraries
2023-02-14 19:38:22,761:INFO:Copying training dataset
2023-02-14 19:38:22,765:INFO:Defining folds
2023-02-14 19:38:22,765:INFO:Declaring metric variables
2023-02-14 19:38:22,768:INFO:Importing untrained model
2023-02-14 19:38:22,776:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 19:38:22,785:INFO:Starting cross validation
2023-02-14 19:38:22,785:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:23,081:INFO:Calculating mean and std
2023-02-14 19:38:23,082:INFO:Creating metrics dataframe
2023-02-14 19:38:23,084:INFO:Uploading results into container
2023-02-14 19:38:23,084:INFO:Uploading model into container now
2023-02-14 19:38:23,084:INFO:_master_model_container: 17
2023-02-14 19:38:23,085:INFO:_display_container: 2
2023-02-14 19:38:23,085:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=9, ...)
2023-02-14 19:38:23,086:INFO:create_model() successfully completed......................................
2023-02-14 19:38:23,191:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:23,191:INFO:Creating metrics dataframe
2023-02-14 19:38:23,201:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 19:38:23,201:INFO:Total runtime is 0.17814268271128333 minutes
2023-02-14 19:38:23,207:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:23,207:INFO:Initializing create_model()
2023-02-14 19:38:23,207:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:23,207:INFO:Checking exceptions
2023-02-14 19:38:23,207:INFO:Importing libraries
2023-02-14 19:38:23,207:INFO:Copying training dataset
2023-02-14 19:38:23,211:INFO:Defining folds
2023-02-14 19:38:23,211:INFO:Declaring metric variables
2023-02-14 19:38:23,214:INFO:Importing untrained model
2023-02-14 19:38:23,218:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 19:38:23,227:INFO:Starting cross validation
2023-02-14 19:38:23,228:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:23,424:INFO:Calculating mean and std
2023-02-14 19:38:23,425:INFO:Creating metrics dataframe
2023-02-14 19:38:23,430:INFO:Uploading results into container
2023-02-14 19:38:23,431:INFO:Uploading model into container now
2023-02-14 19:38:23,431:INFO:_master_model_container: 18
2023-02-14 19:38:23,431:INFO:_display_container: 2
2023-02-14 19:38:23,431:INFO:LGBMRegressor(random_state=9)
2023-02-14 19:38:23,432:INFO:create_model() successfully completed......................................
2023-02-14 19:38:23,536:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:23,537:INFO:Creating metrics dataframe
2023-02-14 19:38:23,548:INFO:Initializing Dummy Regressor
2023-02-14 19:38:23,548:INFO:Total runtime is 0.18392854531606034 minutes
2023-02-14 19:38:23,552:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:23,552:INFO:Initializing create_model()
2023-02-14 19:38:23,552:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097D4DF10>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:23,552:INFO:Checking exceptions
2023-02-14 19:38:23,552:INFO:Importing libraries
2023-02-14 19:38:23,552:INFO:Copying training dataset
2023-02-14 19:38:23,557:INFO:Defining folds
2023-02-14 19:38:23,558:INFO:Declaring metric variables
2023-02-14 19:38:23,562:INFO:Importing untrained model
2023-02-14 19:38:23,566:INFO:Dummy Regressor Imported successfully
2023-02-14 19:38:23,575:INFO:Starting cross validation
2023-02-14 19:38:23,576:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:23,717:INFO:Calculating mean and std
2023-02-14 19:38:23,718:INFO:Creating metrics dataframe
2023-02-14 19:38:23,722:INFO:Uploading results into container
2023-02-14 19:38:23,723:INFO:Uploading model into container now
2023-02-14 19:38:23,723:INFO:_master_model_container: 19
2023-02-14 19:38:23,724:INFO:_display_container: 2
2023-02-14 19:38:23,724:INFO:DummyRegressor()
2023-02-14 19:38:23,724:INFO:create_model() successfully completed......................................
2023-02-14 19:38:23,827:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:23,827:INFO:Creating metrics dataframe
2023-02-14 19:38:23,848:INFO:Initializing create_model()
2023-02-14 19:38:23,849:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210973808E0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=9), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:23,849:INFO:Checking exceptions
2023-02-14 19:38:23,851:INFO:Importing libraries
2023-02-14 19:38:23,852:INFO:Copying training dataset
2023-02-14 19:38:23,854:INFO:Defining folds
2023-02-14 19:38:23,854:INFO:Declaring metric variables
2023-02-14 19:38:23,854:INFO:Importing untrained model
2023-02-14 19:38:23,855:INFO:Declaring custom model
2023-02-14 19:38:23,855:INFO:Extra Trees Regressor Imported successfully
2023-02-14 19:38:23,856:INFO:Cross validation set to False
2023-02-14 19:38:23,856:INFO:Fitting Model
2023-02-14 19:38:23,978:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=9)
2023-02-14 19:38:23,978:INFO:create_model() successfully completed......................................
2023-02-14 19:38:24,155:INFO:_master_model_container: 19
2023-02-14 19:38:24,155:INFO:_display_container: 2
2023-02-14 19:38:24,156:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=9)
2023-02-14 19:38:24,156:INFO:compare_models() successfully completed......................................
2023-02-14 19:38:48,228:INFO:PyCaret RegressionExperiment
2023-02-14 19:38:48,228:INFO:Logging name: reg-default-name
2023-02-14 19:38:48,228:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 19:38:48,229:INFO:version 3.0.0.rc8
2023-02-14 19:38:48,229:INFO:Initializing setup()
2023-02-14 19:38:48,229:INFO:self.USI: 1e86
2023-02-14 19:38:48,229:INFO:self._variable_keys: {'n_jobs_param', 'seed', 'exp_name_log', 'idx', 'pipeline', 'y_train', 'logging_param', 'USI', 'gpu_n_jobs_param', 'y', 'gpu_param', 'X', 'memory', 'fold_groups_param', 'X_train', 'X_test', 'html_param', '_available_plots', 'data', 'exp_id', 'log_plots_param', '_ml_usecase', 'y_test', 'target_param', 'fold_generator', 'transform_target_param', 'fold_shuffle_param'}
2023-02-14 19:38:48,229:INFO:Checking environment
2023-02-14 19:38:48,229:INFO:python_version: 3.9.13
2023-02-14 19:38:48,229:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 19:38:48,229:INFO:machine: AMD64
2023-02-14 19:38:48,229:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 19:38:48,235:INFO:Memory: svmem(total=16805040128, available=3648913408, percent=78.3, used=13156126720, free=3648913408)
2023-02-14 19:38:48,235:INFO:Physical Core: 4
2023-02-14 19:38:48,235:INFO:Logical Core: 8
2023-02-14 19:38:48,235:INFO:Checking libraries
2023-02-14 19:38:48,235:INFO:System:
2023-02-14 19:38:48,235:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 19:38:48,235:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 19:38:48,235:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 19:38:48,236:INFO:PyCaret required dependencies:
2023-02-14 19:38:48,236:INFO:                 pip: 23.0
2023-02-14 19:38:48,236:INFO:          setuptools: 58.1.0
2023-02-14 19:38:48,236:INFO:             pycaret: 3.0.0rc8
2023-02-14 19:38:48,236:INFO:             IPython: 8.7.0
2023-02-14 19:38:48,236:INFO:          ipywidgets: 8.0.4
2023-02-14 19:38:48,236:INFO:                tqdm: 4.64.1
2023-02-14 19:38:48,236:INFO:               numpy: 1.22.1
2023-02-14 19:38:48,236:INFO:              pandas: 1.5.2
2023-02-14 19:38:48,236:INFO:              jinja2: 3.1.2
2023-02-14 19:38:48,236:INFO:               scipy: 1.5.4
2023-02-14 19:38:48,236:INFO:              joblib: 1.2.0
2023-02-14 19:38:48,236:INFO:             sklearn: 1.1.3
2023-02-14 19:38:48,236:INFO:                pyod: 1.0.7
2023-02-14 19:38:48,236:INFO:            imblearn: 0.10.1
2023-02-14 19:38:48,236:INFO:   category_encoders: 2.6.0
2023-02-14 19:38:48,236:INFO:            lightgbm: 3.3.4
2023-02-14 19:38:48,236:INFO:               numba: 0.56.4
2023-02-14 19:38:48,236:INFO:            requests: 2.28.1
2023-02-14 19:38:48,236:INFO:          matplotlib: 3.6.2
2023-02-14 19:38:48,236:INFO:          scikitplot: 0.3.7
2023-02-14 19:38:48,236:INFO:         yellowbrick: 1.5
2023-02-14 19:38:48,236:INFO:              plotly: 5.11.0
2023-02-14 19:38:48,236:INFO:             kaleido: 0.2.1
2023-02-14 19:38:48,236:INFO:         statsmodels: 0.13.5
2023-02-14 19:38:48,236:INFO:              sktime: 0.15.1
2023-02-14 19:38:48,236:INFO:               tbats: 1.1.2
2023-02-14 19:38:48,236:INFO:            pmdarima: 2.0.2
2023-02-14 19:38:48,236:INFO:              psutil: 5.9.4
2023-02-14 19:38:48,236:INFO:PyCaret optional dependencies:
2023-02-14 19:38:48,236:INFO:                shap: 0.41.0
2023-02-14 19:38:48,236:INFO:           interpret: 0.3.0
2023-02-14 19:38:48,237:INFO:                umap: Not installed
2023-02-14 19:38:48,237:INFO:    pandas_profiling: 3.6.2
2023-02-14 19:38:48,237:INFO:  explainerdashboard: Not installed
2023-02-14 19:38:48,237:INFO:             autoviz: Not installed
2023-02-14 19:38:48,237:INFO:           fairlearn: Not installed
2023-02-14 19:38:48,237:INFO:             xgboost: 1.7.3
2023-02-14 19:38:48,237:INFO:            catboost: Not installed
2023-02-14 19:38:48,237:INFO:              kmodes: Not installed
2023-02-14 19:38:48,237:INFO:             mlxtend: Not installed
2023-02-14 19:38:48,237:INFO:       statsforecast: Not installed
2023-02-14 19:38:48,237:INFO:        tune_sklearn: Not installed
2023-02-14 19:38:48,237:INFO:                 ray: Not installed
2023-02-14 19:38:48,237:INFO:            hyperopt: Not installed
2023-02-14 19:38:48,237:INFO:              optuna: Not installed
2023-02-14 19:38:48,237:INFO:               skopt: Not installed
2023-02-14 19:38:48,237:INFO:              mlflow: Not installed
2023-02-14 19:38:48,237:INFO:              gradio: Not installed
2023-02-14 19:38:48,237:INFO:             fastapi: Not installed
2023-02-14 19:38:48,237:INFO:             uvicorn: Not installed
2023-02-14 19:38:48,237:INFO:              m2cgen: Not installed
2023-02-14 19:38:48,237:INFO:           evidently: Not installed
2023-02-14 19:38:48,237:INFO:                nltk: 3.8
2023-02-14 19:38:48,237:INFO:            pyLDAvis: Not installed
2023-02-14 19:38:48,237:INFO:              gensim: Not installed
2023-02-14 19:38:48,237:INFO:               spacy: Not installed
2023-02-14 19:38:48,237:INFO:           wordcloud: 1.8.2.2
2023-02-14 19:38:48,237:INFO:            textblob: Not installed
2023-02-14 19:38:48,237:INFO:               fugue: Not installed
2023-02-14 19:38:48,237:INFO:           streamlit: 1.16.0
2023-02-14 19:38:48,237:INFO:             prophet: Not installed
2023-02-14 19:38:48,237:INFO:None
2023-02-14 19:38:48,237:INFO:Set up data.
2023-02-14 19:38:48,242:INFO:Set up train/test split.
2023-02-14 19:38:48,244:INFO:Set up index.
2023-02-14 19:38:48,244:INFO:Set up folding strategy.
2023-02-14 19:38:48,244:INFO:Assigning column types.
2023-02-14 19:38:48,248:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 19:38:48,248:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,252:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,258:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,315:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,350:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,352:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:48,354:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:48,354:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,358:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,361:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,407:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,447:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,448:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:48,451:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:48,451:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 19:38:48,455:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,458:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,508:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,545:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,546:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:48,548:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:48,552:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,559:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,619:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,664:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,665:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:48,668:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:48,668:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 19:38:48,675:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,724:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,764:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,765:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:48,767:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:48,773:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,817:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,857:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,858:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:48,861:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:48,861:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 19:38:48,919:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,960:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:48,960:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:48,964:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:49,024:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:49,060:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 19:38:49,062:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:49,065:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:49,065:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 19:38:49,123:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:49,170:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:49,199:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:49,270:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 19:38:49,320:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:49,322:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:49,323:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 19:38:49,410:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:49,412:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:49,515:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:49,518:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:49,518:INFO:Preparing preprocessing pipeline...
2023-02-14 19:38:49,519:INFO:Set up column name cleaning.
2023-02-14 19:38:49,519:INFO:Set up simple imputation.
2023-02-14 19:38:49,542:INFO:Finished creating preprocessing pipeline.
2023-02-14 19:38:49,545:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 19:38:49,546:INFO:Creating final display dataframe.
2023-02-14 19:38:49,652:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              1e86
2023-02-14 19:38:49,763:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:49,766:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:49,864:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 19:38:49,866:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 19:38:49,867:INFO:setup() successfully completed in 1.64s...............
2023-02-14 19:38:49,867:INFO:Initializing compare_models()
2023-02-14 19:38:49,867:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 19:38:49,867:INFO:Checking exceptions
2023-02-14 19:38:49,868:INFO:Preparing display monitor
2023-02-14 19:38:49,890:INFO:Initializing Linear Regression
2023-02-14 19:38:49,890:INFO:Total runtime is 0.0 minutes
2023-02-14 19:38:49,895:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:49,896:INFO:Initializing create_model()
2023-02-14 19:38:49,896:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:49,896:INFO:Checking exceptions
2023-02-14 19:38:49,896:INFO:Importing libraries
2023-02-14 19:38:49,896:INFO:Copying training dataset
2023-02-14 19:38:49,899:INFO:Defining folds
2023-02-14 19:38:49,899:INFO:Declaring metric variables
2023-02-14 19:38:49,904:INFO:Importing untrained model
2023-02-14 19:38:49,907:INFO:Linear Regression Imported successfully
2023-02-14 19:38:49,917:INFO:Starting cross validation
2023-02-14 19:38:49,918:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:50,056:INFO:Calculating mean and std
2023-02-14 19:38:50,057:INFO:Creating metrics dataframe
2023-02-14 19:38:50,059:INFO:Uploading results into container
2023-02-14 19:38:50,060:INFO:Uploading model into container now
2023-02-14 19:38:50,061:INFO:_master_model_container: 1
2023-02-14 19:38:50,061:INFO:_display_container: 2
2023-02-14 19:38:50,061:INFO:LinearRegression(n_jobs=-1)
2023-02-14 19:38:50,061:INFO:create_model() successfully completed......................................
2023-02-14 19:38:50,170:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:50,170:INFO:Creating metrics dataframe
2023-02-14 19:38:50,179:INFO:Initializing Lasso Regression
2023-02-14 19:38:50,179:INFO:Total runtime is 0.004805850982666016 minutes
2023-02-14 19:38:50,183:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:50,183:INFO:Initializing create_model()
2023-02-14 19:38:50,183:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:50,183:INFO:Checking exceptions
2023-02-14 19:38:50,184:INFO:Importing libraries
2023-02-14 19:38:50,184:INFO:Copying training dataset
2023-02-14 19:38:50,186:INFO:Defining folds
2023-02-14 19:38:50,186:INFO:Declaring metric variables
2023-02-14 19:38:50,189:INFO:Importing untrained model
2023-02-14 19:38:50,191:INFO:Lasso Regression Imported successfully
2023-02-14 19:38:50,201:INFO:Starting cross validation
2023-02-14 19:38:50,202:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:50,347:INFO:Calculating mean and std
2023-02-14 19:38:50,347:INFO:Creating metrics dataframe
2023-02-14 19:38:50,349:INFO:Uploading results into container
2023-02-14 19:38:50,350:INFO:Uploading model into container now
2023-02-14 19:38:50,350:INFO:_master_model_container: 2
2023-02-14 19:38:50,350:INFO:_display_container: 2
2023-02-14 19:38:50,350:INFO:Lasso(random_state=123)
2023-02-14 19:38:50,350:INFO:create_model() successfully completed......................................
2023-02-14 19:38:50,450:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:50,451:INFO:Creating metrics dataframe
2023-02-14 19:38:50,458:INFO:Initializing Ridge Regression
2023-02-14 19:38:50,458:INFO:Total runtime is 0.009454830487569173 minutes
2023-02-14 19:38:50,461:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:50,461:INFO:Initializing create_model()
2023-02-14 19:38:50,462:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:50,462:INFO:Checking exceptions
2023-02-14 19:38:50,462:INFO:Importing libraries
2023-02-14 19:38:50,462:INFO:Copying training dataset
2023-02-14 19:38:50,464:INFO:Defining folds
2023-02-14 19:38:50,464:INFO:Declaring metric variables
2023-02-14 19:38:50,468:INFO:Importing untrained model
2023-02-14 19:38:50,471:INFO:Ridge Regression Imported successfully
2023-02-14 19:38:50,480:INFO:Starting cross validation
2023-02-14 19:38:50,481:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:50,618:INFO:Calculating mean and std
2023-02-14 19:38:50,618:INFO:Creating metrics dataframe
2023-02-14 19:38:50,620:INFO:Uploading results into container
2023-02-14 19:38:50,621:INFO:Uploading model into container now
2023-02-14 19:38:50,621:INFO:_master_model_container: 3
2023-02-14 19:38:50,621:INFO:_display_container: 2
2023-02-14 19:38:50,621:INFO:Ridge(random_state=123)
2023-02-14 19:38:50,621:INFO:create_model() successfully completed......................................
2023-02-14 19:38:50,723:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:50,723:INFO:Creating metrics dataframe
2023-02-14 19:38:50,731:INFO:Initializing Elastic Net
2023-02-14 19:38:50,732:INFO:Total runtime is 0.014034318923950195 minutes
2023-02-14 19:38:50,736:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:50,736:INFO:Initializing create_model()
2023-02-14 19:38:50,736:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:50,736:INFO:Checking exceptions
2023-02-14 19:38:50,736:INFO:Importing libraries
2023-02-14 19:38:50,736:INFO:Copying training dataset
2023-02-14 19:38:50,739:INFO:Defining folds
2023-02-14 19:38:50,739:INFO:Declaring metric variables
2023-02-14 19:38:50,742:INFO:Importing untrained model
2023-02-14 19:38:50,746:INFO:Elastic Net Imported successfully
2023-02-14 19:38:50,753:INFO:Starting cross validation
2023-02-14 19:38:50,754:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:50,889:INFO:Calculating mean and std
2023-02-14 19:38:50,890:INFO:Creating metrics dataframe
2023-02-14 19:38:50,893:INFO:Uploading results into container
2023-02-14 19:38:50,894:INFO:Uploading model into container now
2023-02-14 19:38:50,894:INFO:_master_model_container: 4
2023-02-14 19:38:50,894:INFO:_display_container: 2
2023-02-14 19:38:50,896:INFO:ElasticNet(random_state=123)
2023-02-14 19:38:50,896:INFO:create_model() successfully completed......................................
2023-02-14 19:38:51,013:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:51,013:INFO:Creating metrics dataframe
2023-02-14 19:38:51,020:INFO:Initializing Least Angle Regression
2023-02-14 19:38:51,020:INFO:Total runtime is 0.01882168451944987 minutes
2023-02-14 19:38:51,023:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:51,023:INFO:Initializing create_model()
2023-02-14 19:38:51,023:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:51,023:INFO:Checking exceptions
2023-02-14 19:38:51,023:INFO:Importing libraries
2023-02-14 19:38:51,023:INFO:Copying training dataset
2023-02-14 19:38:51,026:INFO:Defining folds
2023-02-14 19:38:51,027:INFO:Declaring metric variables
2023-02-14 19:38:51,031:INFO:Importing untrained model
2023-02-14 19:38:51,035:INFO:Least Angle Regression Imported successfully
2023-02-14 19:38:51,042:INFO:Starting cross validation
2023-02-14 19:38:51,043:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:51,082:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,098:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,107:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,114:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,124:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,133:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,142:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,153:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,164:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,172:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,184:INFO:Calculating mean and std
2023-02-14 19:38:51,185:INFO:Creating metrics dataframe
2023-02-14 19:38:51,188:INFO:Uploading results into container
2023-02-14 19:38:51,188:INFO:Uploading model into container now
2023-02-14 19:38:51,188:INFO:_master_model_container: 5
2023-02-14 19:38:51,188:INFO:_display_container: 2
2023-02-14 19:38:51,189:INFO:Lars(random_state=123)
2023-02-14 19:38:51,189:INFO:create_model() successfully completed......................................
2023-02-14 19:38:51,296:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:51,297:INFO:Creating metrics dataframe
2023-02-14 19:38:51,306:INFO:Initializing Lasso Least Angle Regression
2023-02-14 19:38:51,306:INFO:Total runtime is 0.02359902064005534 minutes
2023-02-14 19:38:51,309:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:51,309:INFO:Initializing create_model()
2023-02-14 19:38:51,309:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:51,309:INFO:Checking exceptions
2023-02-14 19:38:51,309:INFO:Importing libraries
2023-02-14 19:38:51,309:INFO:Copying training dataset
2023-02-14 19:38:51,315:INFO:Defining folds
2023-02-14 19:38:51,315:INFO:Declaring metric variables
2023-02-14 19:38:51,320:INFO:Importing untrained model
2023-02-14 19:38:51,326:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 19:38:51,334:INFO:Starting cross validation
2023-02-14 19:38:51,335:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:51,378:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:51,389:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:51,399:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:51,408:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:51,415:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:51,427:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:51,434:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:51,441:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:51,451:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:51,460:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 19:38:51,472:INFO:Calculating mean and std
2023-02-14 19:38:51,472:INFO:Creating metrics dataframe
2023-02-14 19:38:51,474:INFO:Uploading results into container
2023-02-14 19:38:51,475:INFO:Uploading model into container now
2023-02-14 19:38:51,476:INFO:_master_model_container: 6
2023-02-14 19:38:51,476:INFO:_display_container: 2
2023-02-14 19:38:51,476:INFO:LassoLars(random_state=123)
2023-02-14 19:38:51,476:INFO:create_model() successfully completed......................................
2023-02-14 19:38:51,585:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:51,585:INFO:Creating metrics dataframe
2023-02-14 19:38:51,597:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 19:38:51,599:INFO:Total runtime is 0.028471676508585612 minutes
2023-02-14 19:38:51,602:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:51,603:INFO:Initializing create_model()
2023-02-14 19:38:51,603:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:51,603:INFO:Checking exceptions
2023-02-14 19:38:51,603:INFO:Importing libraries
2023-02-14 19:38:51,603:INFO:Copying training dataset
2023-02-14 19:38:51,607:INFO:Defining folds
2023-02-14 19:38:51,613:INFO:Declaring metric variables
2023-02-14 19:38:51,622:INFO:Importing untrained model
2023-02-14 19:38:51,628:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 19:38:51,637:INFO:Starting cross validation
2023-02-14 19:38:51,638:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:51,679:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,688:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,698:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,705:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,713:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,720:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,730:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,738:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,747:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,752:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 19:38:51,767:INFO:Calculating mean and std
2023-02-14 19:38:51,768:INFO:Creating metrics dataframe
2023-02-14 19:38:51,771:INFO:Uploading results into container
2023-02-14 19:38:51,772:INFO:Uploading model into container now
2023-02-14 19:38:51,772:INFO:_master_model_container: 7
2023-02-14 19:38:51,772:INFO:_display_container: 2
2023-02-14 19:38:51,772:INFO:OrthogonalMatchingPursuit()
2023-02-14 19:38:51,773:INFO:create_model() successfully completed......................................
2023-02-14 19:38:51,898:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:51,898:INFO:Creating metrics dataframe
2023-02-14 19:38:51,908:INFO:Initializing Bayesian Ridge
2023-02-14 19:38:51,909:INFO:Total runtime is 0.033642311890920006 minutes
2023-02-14 19:38:51,912:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:51,914:INFO:Initializing create_model()
2023-02-14 19:38:51,914:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:51,914:INFO:Checking exceptions
2023-02-14 19:38:51,914:INFO:Importing libraries
2023-02-14 19:38:51,914:INFO:Copying training dataset
2023-02-14 19:38:51,916:INFO:Defining folds
2023-02-14 19:38:51,917:INFO:Declaring metric variables
2023-02-14 19:38:51,922:INFO:Importing untrained model
2023-02-14 19:38:51,926:INFO:Bayesian Ridge Imported successfully
2023-02-14 19:38:51,934:INFO:Starting cross validation
2023-02-14 19:38:51,935:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:52,074:INFO:Calculating mean and std
2023-02-14 19:38:52,075:INFO:Creating metrics dataframe
2023-02-14 19:38:52,078:INFO:Uploading results into container
2023-02-14 19:38:52,079:INFO:Uploading model into container now
2023-02-14 19:38:52,079:INFO:_master_model_container: 8
2023-02-14 19:38:52,079:INFO:_display_container: 2
2023-02-14 19:38:52,079:INFO:BayesianRidge()
2023-02-14 19:38:52,079:INFO:create_model() successfully completed......................................
2023-02-14 19:38:52,183:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:52,183:INFO:Creating metrics dataframe
2023-02-14 19:38:52,194:INFO:Initializing Passive Aggressive Regressor
2023-02-14 19:38:52,196:INFO:Total runtime is 0.038420001665751144 minutes
2023-02-14 19:38:52,199:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:52,200:INFO:Initializing create_model()
2023-02-14 19:38:52,200:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:52,200:INFO:Checking exceptions
2023-02-14 19:38:52,200:INFO:Importing libraries
2023-02-14 19:38:52,200:INFO:Copying training dataset
2023-02-14 19:38:52,203:INFO:Defining folds
2023-02-14 19:38:52,203:INFO:Declaring metric variables
2023-02-14 19:38:52,207:INFO:Importing untrained model
2023-02-14 19:38:52,213:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 19:38:52,221:INFO:Starting cross validation
2023-02-14 19:38:52,222:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:52,350:INFO:Calculating mean and std
2023-02-14 19:38:52,351:INFO:Creating metrics dataframe
2023-02-14 19:38:52,354:INFO:Uploading results into container
2023-02-14 19:38:52,355:INFO:Uploading model into container now
2023-02-14 19:38:52,356:INFO:_master_model_container: 9
2023-02-14 19:38:52,356:INFO:_display_container: 2
2023-02-14 19:38:52,356:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-14 19:38:52,356:INFO:create_model() successfully completed......................................
2023-02-14 19:38:52,484:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:52,484:INFO:Creating metrics dataframe
2023-02-14 19:38:52,492:INFO:Initializing Huber Regressor
2023-02-14 19:38:52,492:INFO:Total runtime is 0.043363924821217856 minutes
2023-02-14 19:38:52,496:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:52,498:INFO:Initializing create_model()
2023-02-14 19:38:52,498:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:52,498:INFO:Checking exceptions
2023-02-14 19:38:52,498:INFO:Importing libraries
2023-02-14 19:38:52,498:INFO:Copying training dataset
2023-02-14 19:38:52,501:INFO:Defining folds
2023-02-14 19:38:52,502:INFO:Declaring metric variables
2023-02-14 19:38:52,505:INFO:Importing untrained model
2023-02-14 19:38:52,511:INFO:Huber Regressor Imported successfully
2023-02-14 19:38:52,517:INFO:Starting cross validation
2023-02-14 19:38:52,518:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:52,576:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:52,583:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:52,592:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:52,618:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:52,631:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:52,644:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:52,649:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:52,667:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 19:38:52,680:INFO:Calculating mean and std
2023-02-14 19:38:52,681:INFO:Creating metrics dataframe
2023-02-14 19:38:52,683:INFO:Uploading results into container
2023-02-14 19:38:52,684:INFO:Uploading model into container now
2023-02-14 19:38:52,684:INFO:_master_model_container: 10
2023-02-14 19:38:52,685:INFO:_display_container: 2
2023-02-14 19:38:52,685:INFO:HuberRegressor()
2023-02-14 19:38:52,685:INFO:create_model() successfully completed......................................
2023-02-14 19:38:52,788:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:52,788:INFO:Creating metrics dataframe
2023-02-14 19:38:52,796:INFO:Initializing K Neighbors Regressor
2023-02-14 19:38:52,796:INFO:Total runtime is 0.048434094587961836 minutes
2023-02-14 19:38:52,800:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:52,800:INFO:Initializing create_model()
2023-02-14 19:38:52,800:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:52,800:INFO:Checking exceptions
2023-02-14 19:38:52,801:INFO:Importing libraries
2023-02-14 19:38:52,801:INFO:Copying training dataset
2023-02-14 19:38:52,804:INFO:Defining folds
2023-02-14 19:38:52,804:INFO:Declaring metric variables
2023-02-14 19:38:52,808:INFO:Importing untrained model
2023-02-14 19:38:52,812:INFO:K Neighbors Regressor Imported successfully
2023-02-14 19:38:52,819:INFO:Starting cross validation
2023-02-14 19:38:52,821:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:53,005:INFO:Calculating mean and std
2023-02-14 19:38:53,006:INFO:Creating metrics dataframe
2023-02-14 19:38:53,009:INFO:Uploading results into container
2023-02-14 19:38:53,010:INFO:Uploading model into container now
2023-02-14 19:38:53,010:INFO:_master_model_container: 11
2023-02-14 19:38:53,011:INFO:_display_container: 2
2023-02-14 19:38:53,011:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 19:38:53,011:INFO:create_model() successfully completed......................................
2023-02-14 19:38:53,119:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:53,119:INFO:Creating metrics dataframe
2023-02-14 19:38:53,128:INFO:Initializing Decision Tree Regressor
2023-02-14 19:38:53,128:INFO:Total runtime is 0.053966987133026126 minutes
2023-02-14 19:38:53,132:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:53,132:INFO:Initializing create_model()
2023-02-14 19:38:53,133:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:53,133:INFO:Checking exceptions
2023-02-14 19:38:53,133:INFO:Importing libraries
2023-02-14 19:38:53,133:INFO:Copying training dataset
2023-02-14 19:38:53,136:INFO:Defining folds
2023-02-14 19:38:53,136:INFO:Declaring metric variables
2023-02-14 19:38:53,139:INFO:Importing untrained model
2023-02-14 19:38:53,144:INFO:Decision Tree Regressor Imported successfully
2023-02-14 19:38:53,153:INFO:Starting cross validation
2023-02-14 19:38:53,154:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:53,308:INFO:Calculating mean and std
2023-02-14 19:38:53,309:INFO:Creating metrics dataframe
2023-02-14 19:38:53,312:INFO:Uploading results into container
2023-02-14 19:38:53,313:INFO:Uploading model into container now
2023-02-14 19:38:53,313:INFO:_master_model_container: 12
2023-02-14 19:38:53,314:INFO:_display_container: 2
2023-02-14 19:38:53,314:INFO:DecisionTreeRegressor(random_state=123)
2023-02-14 19:38:53,314:INFO:create_model() successfully completed......................................
2023-02-14 19:38:53,418:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:53,418:INFO:Creating metrics dataframe
2023-02-14 19:38:53,426:INFO:Initializing Random Forest Regressor
2023-02-14 19:38:53,426:INFO:Total runtime is 0.05893249114354452 minutes
2023-02-14 19:38:53,430:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:53,430:INFO:Initializing create_model()
2023-02-14 19:38:53,430:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:53,431:INFO:Checking exceptions
2023-02-14 19:38:53,431:INFO:Importing libraries
2023-02-14 19:38:53,431:INFO:Copying training dataset
2023-02-14 19:38:53,434:INFO:Defining folds
2023-02-14 19:38:53,434:INFO:Declaring metric variables
2023-02-14 19:38:53,437:INFO:Importing untrained model
2023-02-14 19:38:53,442:INFO:Random Forest Regressor Imported successfully
2023-02-14 19:38:53,449:INFO:Starting cross validation
2023-02-14 19:38:53,450:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:53,914:INFO:Calculating mean and std
2023-02-14 19:38:53,916:INFO:Creating metrics dataframe
2023-02-14 19:38:53,918:INFO:Uploading results into container
2023-02-14 19:38:53,919:INFO:Uploading model into container now
2023-02-14 19:38:53,919:INFO:_master_model_container: 13
2023-02-14 19:38:53,919:INFO:_display_container: 2
2023-02-14 19:38:53,919:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-14 19:38:53,920:INFO:create_model() successfully completed......................................
2023-02-14 19:38:54,042:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:54,042:INFO:Creating metrics dataframe
2023-02-14 19:38:54,050:INFO:Initializing Extra Trees Regressor
2023-02-14 19:38:54,051:INFO:Total runtime is 0.06933829387029013 minutes
2023-02-14 19:38:54,054:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:54,054:INFO:Initializing create_model()
2023-02-14 19:38:54,055:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:54,055:INFO:Checking exceptions
2023-02-14 19:38:54,055:INFO:Importing libraries
2023-02-14 19:38:54,055:INFO:Copying training dataset
2023-02-14 19:38:54,058:INFO:Defining folds
2023-02-14 19:38:54,058:INFO:Declaring metric variables
2023-02-14 19:38:54,062:INFO:Importing untrained model
2023-02-14 19:38:54,066:INFO:Extra Trees Regressor Imported successfully
2023-02-14 19:38:54,072:INFO:Starting cross validation
2023-02-14 19:38:54,074:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:54,479:INFO:Calculating mean and std
2023-02-14 19:38:54,480:INFO:Creating metrics dataframe
2023-02-14 19:38:54,483:INFO:Uploading results into container
2023-02-14 19:38:54,483:INFO:Uploading model into container now
2023-02-14 19:38:54,484:INFO:_master_model_container: 14
2023-02-14 19:38:54,484:INFO:_display_container: 2
2023-02-14 19:38:54,484:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-14 19:38:54,484:INFO:create_model() successfully completed......................................
2023-02-14 19:38:54,585:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:54,585:INFO:Creating metrics dataframe
2023-02-14 19:38:54,595:INFO:Initializing AdaBoost Regressor
2023-02-14 19:38:54,595:INFO:Total runtime is 0.07841567595799764 minutes
2023-02-14 19:38:54,599:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:54,600:INFO:Initializing create_model()
2023-02-14 19:38:54,600:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:54,600:INFO:Checking exceptions
2023-02-14 19:38:54,600:INFO:Importing libraries
2023-02-14 19:38:54,600:INFO:Copying training dataset
2023-02-14 19:38:54,603:INFO:Defining folds
2023-02-14 19:38:54,603:INFO:Declaring metric variables
2023-02-14 19:38:54,605:INFO:Importing untrained model
2023-02-14 19:38:54,611:INFO:AdaBoost Regressor Imported successfully
2023-02-14 19:38:54,619:INFO:Starting cross validation
2023-02-14 19:38:54,620:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:54,837:INFO:Calculating mean and std
2023-02-14 19:38:54,838:INFO:Creating metrics dataframe
2023-02-14 19:38:54,842:INFO:Uploading results into container
2023-02-14 19:38:54,843:INFO:Uploading model into container now
2023-02-14 19:38:54,843:INFO:_master_model_container: 15
2023-02-14 19:38:54,843:INFO:_display_container: 2
2023-02-14 19:38:54,843:INFO:AdaBoostRegressor(random_state=123)
2023-02-14 19:38:54,843:INFO:create_model() successfully completed......................................
2023-02-14 19:38:54,970:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:54,971:INFO:Creating metrics dataframe
2023-02-14 19:38:54,997:INFO:Initializing Gradient Boosting Regressor
2023-02-14 19:38:54,997:INFO:Total runtime is 0.08511872688929241 minutes
2023-02-14 19:38:55,002:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:55,002:INFO:Initializing create_model()
2023-02-14 19:38:55,004:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:55,004:INFO:Checking exceptions
2023-02-14 19:38:55,004:INFO:Importing libraries
2023-02-14 19:38:55,004:INFO:Copying training dataset
2023-02-14 19:38:55,007:INFO:Defining folds
2023-02-14 19:38:55,009:INFO:Declaring metric variables
2023-02-14 19:38:55,022:INFO:Importing untrained model
2023-02-14 19:38:55,029:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 19:38:55,037:INFO:Starting cross validation
2023-02-14 19:38:55,038:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:55,209:INFO:Calculating mean and std
2023-02-14 19:38:55,210:INFO:Creating metrics dataframe
2023-02-14 19:38:55,212:INFO:Uploading results into container
2023-02-14 19:38:55,213:INFO:Uploading model into container now
2023-02-14 19:38:55,213:INFO:_master_model_container: 16
2023-02-14 19:38:55,213:INFO:_display_container: 2
2023-02-14 19:38:55,213:INFO:GradientBoostingRegressor(random_state=123)
2023-02-14 19:38:55,213:INFO:create_model() successfully completed......................................
2023-02-14 19:38:55,332:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:55,333:INFO:Creating metrics dataframe
2023-02-14 19:38:55,347:INFO:Initializing Extreme Gradient Boosting
2023-02-14 19:38:55,347:INFO:Total runtime is 0.09093624353408815 minutes
2023-02-14 19:38:55,351:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:55,351:INFO:Initializing create_model()
2023-02-14 19:38:55,351:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:55,351:INFO:Checking exceptions
2023-02-14 19:38:55,351:INFO:Importing libraries
2023-02-14 19:38:55,352:INFO:Copying training dataset
2023-02-14 19:38:55,354:INFO:Defining folds
2023-02-14 19:38:55,355:INFO:Declaring metric variables
2023-02-14 19:38:55,360:INFO:Importing untrained model
2023-02-14 19:38:55,365:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 19:38:55,372:INFO:Starting cross validation
2023-02-14 19:38:55,373:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:55,561:INFO:Calculating mean and std
2023-02-14 19:38:55,563:INFO:Creating metrics dataframe
2023-02-14 19:38:55,565:INFO:Uploading results into container
2023-02-14 19:38:55,566:INFO:Uploading model into container now
2023-02-14 19:38:55,566:INFO:_master_model_container: 17
2023-02-14 19:38:55,566:INFO:_display_container: 2
2023-02-14 19:38:55,567:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-14 19:38:55,567:INFO:create_model() successfully completed......................................
2023-02-14 19:38:55,674:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:55,676:INFO:Creating metrics dataframe
2023-02-14 19:38:55,689:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 19:38:55,689:INFO:Total runtime is 0.09663878281911216 minutes
2023-02-14 19:38:55,693:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:55,693:INFO:Initializing create_model()
2023-02-14 19:38:55,695:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:55,695:INFO:Checking exceptions
2023-02-14 19:38:55,695:INFO:Importing libraries
2023-02-14 19:38:55,695:INFO:Copying training dataset
2023-02-14 19:38:55,698:INFO:Defining folds
2023-02-14 19:38:55,698:INFO:Declaring metric variables
2023-02-14 19:38:55,701:INFO:Importing untrained model
2023-02-14 19:38:55,706:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 19:38:55,721:INFO:Starting cross validation
2023-02-14 19:38:55,723:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:55,879:INFO:Calculating mean and std
2023-02-14 19:38:55,881:INFO:Creating metrics dataframe
2023-02-14 19:38:55,883:INFO:Uploading results into container
2023-02-14 19:38:55,883:INFO:Uploading model into container now
2023-02-14 19:38:55,884:INFO:_master_model_container: 18
2023-02-14 19:38:55,884:INFO:_display_container: 2
2023-02-14 19:38:55,884:INFO:LGBMRegressor(random_state=123)
2023-02-14 19:38:55,884:INFO:create_model() successfully completed......................................
2023-02-14 19:38:55,987:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:55,987:INFO:Creating metrics dataframe
2023-02-14 19:38:55,997:INFO:Initializing Dummy Regressor
2023-02-14 19:38:55,997:INFO:Total runtime is 0.10177067518234255 minutes
2023-02-14 19:38:56,001:INFO:SubProcess create_model() called ==================================
2023-02-14 19:38:56,002:INFO:Initializing create_model()
2023-02-14 19:38:56,002:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021092466340>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:56,002:INFO:Checking exceptions
2023-02-14 19:38:56,002:INFO:Importing libraries
2023-02-14 19:38:56,002:INFO:Copying training dataset
2023-02-14 19:38:56,005:INFO:Defining folds
2023-02-14 19:38:56,005:INFO:Declaring metric variables
2023-02-14 19:38:56,010:INFO:Importing untrained model
2023-02-14 19:38:56,014:INFO:Dummy Regressor Imported successfully
2023-02-14 19:38:56,021:INFO:Starting cross validation
2023-02-14 19:38:56,023:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 19:38:56,149:INFO:Calculating mean and std
2023-02-14 19:38:56,151:INFO:Creating metrics dataframe
2023-02-14 19:38:56,153:INFO:Uploading results into container
2023-02-14 19:38:56,153:INFO:Uploading model into container now
2023-02-14 19:38:56,154:INFO:_master_model_container: 19
2023-02-14 19:38:56,154:INFO:_display_container: 2
2023-02-14 19:38:56,154:INFO:DummyRegressor()
2023-02-14 19:38:56,154:INFO:create_model() successfully completed......................................
2023-02-14 19:38:56,259:INFO:SubProcess create_model() end ==================================
2023-02-14 19:38:56,259:INFO:Creating metrics dataframe
2023-02-14 19:38:56,285:INFO:Initializing create_model()
2023-02-14 19:38:56,285:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021092831FD0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 19:38:56,285:INFO:Checking exceptions
2023-02-14 19:38:56,287:INFO:Importing libraries
2023-02-14 19:38:56,287:INFO:Copying training dataset
2023-02-14 19:38:56,289:INFO:Defining folds
2023-02-14 19:38:56,289:INFO:Declaring metric variables
2023-02-14 19:38:56,290:INFO:Importing untrained model
2023-02-14 19:38:56,290:INFO:Declaring custom model
2023-02-14 19:38:56,290:INFO:Bayesian Ridge Imported successfully
2023-02-14 19:38:56,291:INFO:Cross validation set to False
2023-02-14 19:38:56,291:INFO:Fitting Model
2023-02-14 19:38:56,316:INFO:BayesianRidge()
2023-02-14 19:38:56,316:INFO:create_model() successfully completed......................................
2023-02-14 19:38:56,472:INFO:_master_model_container: 19
2023-02-14 19:38:56,472:INFO:_display_container: 2
2023-02-14 19:38:56,473:INFO:BayesianRidge()
2023-02-14 19:38:56,473:INFO:compare_models() successfully completed......................................
2023-02-14 20:38:27,682:INFO:PyCaret RegressionExperiment
2023-02-14 20:38:27,682:INFO:Logging name: reg-default-name
2023-02-14 20:38:27,682:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 20:38:27,682:INFO:version 3.0.0.rc8
2023-02-14 20:38:27,682:INFO:Initializing setup()
2023-02-14 20:38:27,682:INFO:self.USI: e9f2
2023-02-14 20:38:27,682:INFO:self._variable_keys: {'n_jobs_param', 'seed', 'exp_name_log', 'idx', 'pipeline', 'y_train', 'logging_param', 'USI', 'gpu_n_jobs_param', 'y', 'gpu_param', 'X', 'memory', 'fold_groups_param', 'X_train', 'X_test', 'html_param', '_available_plots', 'data', 'exp_id', 'log_plots_param', '_ml_usecase', 'y_test', 'target_param', 'fold_generator', 'transform_target_param', 'fold_shuffle_param'}
2023-02-14 20:38:27,682:INFO:Checking environment
2023-02-14 20:38:27,683:INFO:python_version: 3.9.13
2023-02-14 20:38:27,683:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 20:38:27,683:INFO:machine: AMD64
2023-02-14 20:38:27,683:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 20:38:27,688:INFO:Memory: svmem(total=16805040128, available=5649035264, percent=66.4, used=11156004864, free=5649035264)
2023-02-14 20:38:27,688:INFO:Physical Core: 4
2023-02-14 20:38:27,688:INFO:Logical Core: 8
2023-02-14 20:38:27,688:INFO:Checking libraries
2023-02-14 20:38:27,688:INFO:System:
2023-02-14 20:38:27,689:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 20:38:27,689:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 20:38:27,689:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 20:38:27,689:INFO:PyCaret required dependencies:
2023-02-14 20:38:27,689:INFO:                 pip: 23.0
2023-02-14 20:38:27,689:INFO:          setuptools: 58.1.0
2023-02-14 20:38:27,689:INFO:             pycaret: 3.0.0rc8
2023-02-14 20:38:27,689:INFO:             IPython: 8.7.0
2023-02-14 20:38:27,689:INFO:          ipywidgets: 8.0.4
2023-02-14 20:38:27,689:INFO:                tqdm: 4.64.1
2023-02-14 20:38:27,689:INFO:               numpy: 1.22.1
2023-02-14 20:38:27,689:INFO:              pandas: 1.5.2
2023-02-14 20:38:27,689:INFO:              jinja2: 3.1.2
2023-02-14 20:38:27,689:INFO:               scipy: 1.5.4
2023-02-14 20:38:27,689:INFO:              joblib: 1.2.0
2023-02-14 20:38:27,689:INFO:             sklearn: 1.1.3
2023-02-14 20:38:27,689:INFO:                pyod: 1.0.7
2023-02-14 20:38:27,689:INFO:            imblearn: 0.10.1
2023-02-14 20:38:27,689:INFO:   category_encoders: 2.6.0
2023-02-14 20:38:27,689:INFO:            lightgbm: 3.3.4
2023-02-14 20:38:27,689:INFO:               numba: 0.56.4
2023-02-14 20:38:27,689:INFO:            requests: 2.28.1
2023-02-14 20:38:27,689:INFO:          matplotlib: 3.6.2
2023-02-14 20:38:27,689:INFO:          scikitplot: 0.3.7
2023-02-14 20:38:27,689:INFO:         yellowbrick: 1.5
2023-02-14 20:38:27,689:INFO:              plotly: 5.11.0
2023-02-14 20:38:27,689:INFO:             kaleido: 0.2.1
2023-02-14 20:38:27,689:INFO:         statsmodels: 0.13.5
2023-02-14 20:38:27,689:INFO:              sktime: 0.15.1
2023-02-14 20:38:27,689:INFO:               tbats: 1.1.2
2023-02-14 20:38:27,690:INFO:            pmdarima: 2.0.2
2023-02-14 20:38:27,690:INFO:              psutil: 5.9.4
2023-02-14 20:38:27,690:INFO:PyCaret optional dependencies:
2023-02-14 20:38:27,690:INFO:                shap: 0.41.0
2023-02-14 20:38:27,690:INFO:           interpret: 0.3.0
2023-02-14 20:38:27,690:INFO:                umap: Not installed
2023-02-14 20:38:27,690:INFO:    pandas_profiling: 3.6.2
2023-02-14 20:38:27,690:INFO:  explainerdashboard: Not installed
2023-02-14 20:38:27,690:INFO:             autoviz: Not installed
2023-02-14 20:38:27,690:INFO:           fairlearn: Not installed
2023-02-14 20:38:27,690:INFO:             xgboost: 1.7.3
2023-02-14 20:38:27,690:INFO:            catboost: Not installed
2023-02-14 20:38:27,690:INFO:              kmodes: Not installed
2023-02-14 20:38:27,690:INFO:             mlxtend: Not installed
2023-02-14 20:38:27,690:INFO:       statsforecast: Not installed
2023-02-14 20:38:27,690:INFO:        tune_sklearn: Not installed
2023-02-14 20:38:27,690:INFO:                 ray: Not installed
2023-02-14 20:38:27,690:INFO:            hyperopt: Not installed
2023-02-14 20:38:27,690:INFO:              optuna: Not installed
2023-02-14 20:38:27,690:INFO:               skopt: Not installed
2023-02-14 20:38:27,690:INFO:              mlflow: Not installed
2023-02-14 20:38:27,690:INFO:              gradio: Not installed
2023-02-14 20:38:27,690:INFO:             fastapi: Not installed
2023-02-14 20:38:27,690:INFO:             uvicorn: Not installed
2023-02-14 20:38:27,690:INFO:              m2cgen: Not installed
2023-02-14 20:38:27,690:INFO:           evidently: Not installed
2023-02-14 20:38:27,690:INFO:                nltk: 3.8
2023-02-14 20:38:27,690:INFO:            pyLDAvis: Not installed
2023-02-14 20:38:27,690:INFO:              gensim: Not installed
2023-02-14 20:38:27,690:INFO:               spacy: Not installed
2023-02-14 20:38:27,691:INFO:           wordcloud: 1.8.2.2
2023-02-14 20:38:27,691:INFO:            textblob: Not installed
2023-02-14 20:38:27,691:INFO:               fugue: Not installed
2023-02-14 20:38:27,691:INFO:           streamlit: 1.16.0
2023-02-14 20:38:27,691:INFO:             prophet: Not installed
2023-02-14 20:38:27,691:INFO:None
2023-02-14 20:38:27,691:INFO:Set up data.
2023-02-14 20:38:27,697:INFO:Set up train/test split.
2023-02-14 20:38:27,700:INFO:Set up index.
2023-02-14 20:38:27,700:INFO:Set up folding strategy.
2023-02-14 20:38:27,700:INFO:Assigning column types.
2023-02-14 20:38:27,703:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 20:38:27,703:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,707:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,711:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,759:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,793:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,794:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:27,796:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:27,797:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,800:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,803:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,857:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,894:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,895:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:27,897:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:27,897:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 20:38:27,901:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,904:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:38:27,954:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,004:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,005:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:28,010:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:28,020:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,024:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,077:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,110:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,110:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:28,112:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:28,112:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 20:38:28,119:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,160:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,192:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,193:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:28,195:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:28,202:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,248:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,285:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,285:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:28,287:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:28,287:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 20:38:28,340:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,376:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,377:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:28,378:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:28,426:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,459:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,460:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:28,461:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:28,462:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 20:38:28,513:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,546:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:28,548:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:28,606:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:38:28,639:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:28,641:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:28,641:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 20:38:28,741:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:28,744:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:28,828:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:28,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:28,831:INFO:Preparing preprocessing pipeline...
2023-02-14 20:38:28,832:INFO:Set up column name cleaning.
2023-02-14 20:38:28,832:INFO:Set up simple imputation.
2023-02-14 20:38:28,846:INFO:Finished creating preprocessing pipeline.
2023-02-14 20:38:28,850:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 20:38:28,850:INFO:Creating final display dataframe.
2023-02-14 20:38:28,959:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              e9f2
2023-02-14 20:38:29,070:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:29,074:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:29,161:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:38:29,169:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:38:29,170:INFO:setup() successfully completed in 1.49s...............
2023-02-14 20:38:29,171:INFO:Initializing compare_models()
2023-02-14 20:38:29,171:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 20:38:29,171:INFO:Checking exceptions
2023-02-14 20:38:29,172:INFO:Preparing display monitor
2023-02-14 20:38:29,199:INFO:Initializing Linear Regression
2023-02-14 20:38:29,199:INFO:Total runtime is 0.0 minutes
2023-02-14 20:38:29,204:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:29,205:INFO:Initializing create_model()
2023-02-14 20:38:29,205:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:29,205:INFO:Checking exceptions
2023-02-14 20:38:29,205:INFO:Importing libraries
2023-02-14 20:38:29,205:INFO:Copying training dataset
2023-02-14 20:38:29,208:INFO:Defining folds
2023-02-14 20:38:29,208:INFO:Declaring metric variables
2023-02-14 20:38:29,212:INFO:Importing untrained model
2023-02-14 20:38:29,228:INFO:Linear Regression Imported successfully
2023-02-14 20:38:29,241:INFO:Starting cross validation
2023-02-14 20:38:29,251:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:34,332:INFO:Calculating mean and std
2023-02-14 20:38:34,333:INFO:Creating metrics dataframe
2023-02-14 20:38:34,337:INFO:Uploading results into container
2023-02-14 20:38:34,338:INFO:Uploading model into container now
2023-02-14 20:38:34,338:INFO:_master_model_container: 1
2023-02-14 20:38:34,339:INFO:_display_container: 2
2023-02-14 20:38:34,339:INFO:LinearRegression(n_jobs=-1)
2023-02-14 20:38:34,339:INFO:create_model() successfully completed......................................
2023-02-14 20:38:34,524:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:34,524:INFO:Creating metrics dataframe
2023-02-14 20:38:34,528:INFO:Initializing Lasso Regression
2023-02-14 20:38:34,528:INFO:Total runtime is 0.08881725470225016 minutes
2023-02-14 20:38:34,535:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:34,535:INFO:Initializing create_model()
2023-02-14 20:38:34,535:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:34,536:INFO:Checking exceptions
2023-02-14 20:38:34,536:INFO:Importing libraries
2023-02-14 20:38:34,536:INFO:Copying training dataset
2023-02-14 20:38:34,538:INFO:Defining folds
2023-02-14 20:38:34,539:INFO:Declaring metric variables
2023-02-14 20:38:34,543:INFO:Importing untrained model
2023-02-14 20:38:34,547:INFO:Lasso Regression Imported successfully
2023-02-14 20:38:34,555:INFO:Starting cross validation
2023-02-14 20:38:34,557:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:34,688:INFO:Calculating mean and std
2023-02-14 20:38:34,689:INFO:Creating metrics dataframe
2023-02-14 20:38:34,692:INFO:Uploading results into container
2023-02-14 20:38:34,692:INFO:Uploading model into container now
2023-02-14 20:38:34,692:INFO:_master_model_container: 2
2023-02-14 20:38:34,692:INFO:_display_container: 2
2023-02-14 20:38:34,692:INFO:Lasso(random_state=123)
2023-02-14 20:38:34,692:INFO:create_model() successfully completed......................................
2023-02-14 20:38:34,827:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:34,827:INFO:Creating metrics dataframe
2023-02-14 20:38:34,836:INFO:Initializing Ridge Regression
2023-02-14 20:38:34,836:INFO:Total runtime is 0.0939435601234436 minutes
2023-02-14 20:38:34,840:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:34,840:INFO:Initializing create_model()
2023-02-14 20:38:34,840:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:34,840:INFO:Checking exceptions
2023-02-14 20:38:34,840:INFO:Importing libraries
2023-02-14 20:38:34,840:INFO:Copying training dataset
2023-02-14 20:38:34,843:INFO:Defining folds
2023-02-14 20:38:34,843:INFO:Declaring metric variables
2023-02-14 20:38:34,846:INFO:Importing untrained model
2023-02-14 20:38:34,853:INFO:Ridge Regression Imported successfully
2023-02-14 20:38:34,860:INFO:Starting cross validation
2023-02-14 20:38:34,861:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:34,994:INFO:Calculating mean and std
2023-02-14 20:38:34,994:INFO:Creating metrics dataframe
2023-02-14 20:38:34,998:INFO:Uploading results into container
2023-02-14 20:38:34,998:INFO:Uploading model into container now
2023-02-14 20:38:34,998:INFO:_master_model_container: 3
2023-02-14 20:38:34,998:INFO:_display_container: 2
2023-02-14 20:38:34,999:INFO:Ridge(random_state=123)
2023-02-14 20:38:34,999:INFO:create_model() successfully completed......................................
2023-02-14 20:38:35,107:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:35,107:INFO:Creating metrics dataframe
2023-02-14 20:38:35,117:INFO:Initializing Elastic Net
2023-02-14 20:38:35,118:INFO:Total runtime is 0.09865036805470784 minutes
2023-02-14 20:38:35,121:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:35,121:INFO:Initializing create_model()
2023-02-14 20:38:35,121:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:35,121:INFO:Checking exceptions
2023-02-14 20:38:35,121:INFO:Importing libraries
2023-02-14 20:38:35,121:INFO:Copying training dataset
2023-02-14 20:38:35,124:INFO:Defining folds
2023-02-14 20:38:35,124:INFO:Declaring metric variables
2023-02-14 20:38:35,127:INFO:Importing untrained model
2023-02-14 20:38:35,134:INFO:Elastic Net Imported successfully
2023-02-14 20:38:35,142:INFO:Starting cross validation
2023-02-14 20:38:35,143:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:35,288:INFO:Calculating mean and std
2023-02-14 20:38:35,288:INFO:Creating metrics dataframe
2023-02-14 20:38:35,291:INFO:Uploading results into container
2023-02-14 20:38:35,291:INFO:Uploading model into container now
2023-02-14 20:38:35,292:INFO:_master_model_container: 4
2023-02-14 20:38:35,292:INFO:_display_container: 2
2023-02-14 20:38:35,292:INFO:ElasticNet(random_state=123)
2023-02-14 20:38:35,292:INFO:create_model() successfully completed......................................
2023-02-14 20:38:35,402:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:35,402:INFO:Creating metrics dataframe
2023-02-14 20:38:35,409:INFO:Initializing Least Angle Regression
2023-02-14 20:38:35,409:INFO:Total runtime is 0.10350489219029743 minutes
2023-02-14 20:38:35,414:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:35,414:INFO:Initializing create_model()
2023-02-14 20:38:35,414:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:35,415:INFO:Checking exceptions
2023-02-14 20:38:35,415:INFO:Importing libraries
2023-02-14 20:38:35,415:INFO:Copying training dataset
2023-02-14 20:38:35,418:INFO:Defining folds
2023-02-14 20:38:35,418:INFO:Declaring metric variables
2023-02-14 20:38:35,421:INFO:Importing untrained model
2023-02-14 20:38:35,426:INFO:Least Angle Regression Imported successfully
2023-02-14 20:38:35,434:INFO:Starting cross validation
2023-02-14 20:38:35,435:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:35,502:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:35,511:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:35,522:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:35,530:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:35,541:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:35,550:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:35,563:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:35,571:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:35,581:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:35,588:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:35,601:INFO:Calculating mean and std
2023-02-14 20:38:35,603:INFO:Creating metrics dataframe
2023-02-14 20:38:35,606:INFO:Uploading results into container
2023-02-14 20:38:35,606:INFO:Uploading model into container now
2023-02-14 20:38:35,607:INFO:_master_model_container: 5
2023-02-14 20:38:35,607:INFO:_display_container: 2
2023-02-14 20:38:35,607:INFO:Lars(random_state=123)
2023-02-14 20:38:35,607:INFO:create_model() successfully completed......................................
2023-02-14 20:38:35,717:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:35,717:INFO:Creating metrics dataframe
2023-02-14 20:38:35,717:INFO:Initializing Lasso Least Angle Regression
2023-02-14 20:38:35,717:INFO:Total runtime is 0.10862895250320433 minutes
2023-02-14 20:38:35,732:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:35,732:INFO:Initializing create_model()
2023-02-14 20:38:35,733:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:35,733:INFO:Checking exceptions
2023-02-14 20:38:35,733:INFO:Importing libraries
2023-02-14 20:38:35,733:INFO:Copying training dataset
2023-02-14 20:38:35,736:INFO:Defining folds
2023-02-14 20:38:35,736:INFO:Declaring metric variables
2023-02-14 20:38:35,739:INFO:Importing untrained model
2023-02-14 20:38:35,743:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 20:38:35,750:INFO:Starting cross validation
2023-02-14 20:38:35,752:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:35,787:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:38:35,796:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:38:35,803:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:38:35,813:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:38:35,823:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:38:35,833:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:38:35,841:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:38:35,854:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:38:35,858:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:38:35,866:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:38:35,879:INFO:Calculating mean and std
2023-02-14 20:38:35,880:INFO:Creating metrics dataframe
2023-02-14 20:38:35,885:INFO:Uploading results into container
2023-02-14 20:38:35,886:INFO:Uploading model into container now
2023-02-14 20:38:35,886:INFO:_master_model_container: 6
2023-02-14 20:38:35,887:INFO:_display_container: 2
2023-02-14 20:38:35,887:INFO:LassoLars(random_state=123)
2023-02-14 20:38:35,887:INFO:create_model() successfully completed......................................
2023-02-14 20:38:36,006:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:36,006:INFO:Creating metrics dataframe
2023-02-14 20:38:36,015:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 20:38:36,015:INFO:Total runtime is 0.11360070705413816 minutes
2023-02-14 20:38:36,019:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:36,019:INFO:Initializing create_model()
2023-02-14 20:38:36,020:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:36,020:INFO:Checking exceptions
2023-02-14 20:38:36,020:INFO:Importing libraries
2023-02-14 20:38:36,020:INFO:Copying training dataset
2023-02-14 20:38:36,022:INFO:Defining folds
2023-02-14 20:38:36,022:INFO:Declaring metric variables
2023-02-14 20:38:36,025:INFO:Importing untrained model
2023-02-14 20:38:36,030:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 20:38:36,038:INFO:Starting cross validation
2023-02-14 20:38:36,039:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:36,074:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:36,081:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:36,090:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:36,100:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:36,105:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:36,115:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:36,123:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:36,132:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:36,142:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:36,148:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:38:36,159:INFO:Calculating mean and std
2023-02-14 20:38:36,160:INFO:Creating metrics dataframe
2023-02-14 20:38:36,164:INFO:Uploading results into container
2023-02-14 20:38:36,164:INFO:Uploading model into container now
2023-02-14 20:38:36,164:INFO:_master_model_container: 7
2023-02-14 20:38:36,165:INFO:_display_container: 2
2023-02-14 20:38:36,165:INFO:OrthogonalMatchingPursuit()
2023-02-14 20:38:36,165:INFO:create_model() successfully completed......................................
2023-02-14 20:38:36,302:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:36,302:INFO:Creating metrics dataframe
2023-02-14 20:38:36,309:INFO:Initializing Bayesian Ridge
2023-02-14 20:38:36,309:INFO:Total runtime is 0.11850104331970213 minutes
2023-02-14 20:38:36,313:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:36,313:INFO:Initializing create_model()
2023-02-14 20:38:36,315:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:36,315:INFO:Checking exceptions
2023-02-14 20:38:36,315:INFO:Importing libraries
2023-02-14 20:38:36,315:INFO:Copying training dataset
2023-02-14 20:38:36,318:INFO:Defining folds
2023-02-14 20:38:36,318:INFO:Declaring metric variables
2023-02-14 20:38:36,321:INFO:Importing untrained model
2023-02-14 20:38:36,324:INFO:Bayesian Ridge Imported successfully
2023-02-14 20:38:36,335:INFO:Starting cross validation
2023-02-14 20:38:36,336:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:36,468:INFO:Calculating mean and std
2023-02-14 20:38:36,468:INFO:Creating metrics dataframe
2023-02-14 20:38:36,471:INFO:Uploading results into container
2023-02-14 20:38:36,472:INFO:Uploading model into container now
2023-02-14 20:38:36,472:INFO:_master_model_container: 8
2023-02-14 20:38:36,472:INFO:_display_container: 2
2023-02-14 20:38:36,472:INFO:BayesianRidge()
2023-02-14 20:38:36,473:INFO:create_model() successfully completed......................................
2023-02-14 20:38:36,599:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:36,599:INFO:Creating metrics dataframe
2023-02-14 20:38:36,615:INFO:Initializing Passive Aggressive Regressor
2023-02-14 20:38:36,615:INFO:Total runtime is 0.12360139687856037 minutes
2023-02-14 20:38:36,634:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:36,634:INFO:Initializing create_model()
2023-02-14 20:38:36,635:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:36,635:INFO:Checking exceptions
2023-02-14 20:38:36,635:INFO:Importing libraries
2023-02-14 20:38:36,635:INFO:Copying training dataset
2023-02-14 20:38:36,639:INFO:Defining folds
2023-02-14 20:38:36,639:INFO:Declaring metric variables
2023-02-14 20:38:36,646:INFO:Importing untrained model
2023-02-14 20:38:36,650:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 20:38:36,656:INFO:Starting cross validation
2023-02-14 20:38:36,656:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:36,773:INFO:Calculating mean and std
2023-02-14 20:38:36,773:INFO:Creating metrics dataframe
2023-02-14 20:38:36,776:INFO:Uploading results into container
2023-02-14 20:38:36,776:INFO:Uploading model into container now
2023-02-14 20:38:36,777:INFO:_master_model_container: 9
2023-02-14 20:38:36,777:INFO:_display_container: 2
2023-02-14 20:38:36,777:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-14 20:38:36,777:INFO:create_model() successfully completed......................................
2023-02-14 20:38:36,904:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:36,904:INFO:Creating metrics dataframe
2023-02-14 20:38:36,916:INFO:Initializing Huber Regressor
2023-02-14 20:38:36,917:INFO:Total runtime is 0.1286391456921895 minutes
2023-02-14 20:38:36,920:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:36,920:INFO:Initializing create_model()
2023-02-14 20:38:36,920:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:36,920:INFO:Checking exceptions
2023-02-14 20:38:36,921:INFO:Importing libraries
2023-02-14 20:38:36,921:INFO:Copying training dataset
2023-02-14 20:38:36,924:INFO:Defining folds
2023-02-14 20:38:36,924:INFO:Declaring metric variables
2023-02-14 20:38:36,928:INFO:Importing untrained model
2023-02-14 20:38:36,934:INFO:Huber Regressor Imported successfully
2023-02-14 20:38:36,940:INFO:Starting cross validation
2023-02-14 20:38:36,941:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:37,006:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:38:37,016:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:38:37,029:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:38:37,053:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:38:37,058:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:38:37,067:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:38:37,074:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:38:37,085:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:38:37,096:INFO:Calculating mean and std
2023-02-14 20:38:37,097:INFO:Creating metrics dataframe
2023-02-14 20:38:37,099:INFO:Uploading results into container
2023-02-14 20:38:37,100:INFO:Uploading model into container now
2023-02-14 20:38:37,100:INFO:_master_model_container: 10
2023-02-14 20:38:37,101:INFO:_display_container: 2
2023-02-14 20:38:37,101:INFO:HuberRegressor()
2023-02-14 20:38:37,101:INFO:create_model() successfully completed......................................
2023-02-14 20:38:37,205:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:37,205:INFO:Creating metrics dataframe
2023-02-14 20:38:37,215:INFO:Initializing K Neighbors Regressor
2023-02-14 20:38:37,215:INFO:Total runtime is 0.13359201351801553 minutes
2023-02-14 20:38:37,218:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:37,218:INFO:Initializing create_model()
2023-02-14 20:38:37,218:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:37,218:INFO:Checking exceptions
2023-02-14 20:38:37,219:INFO:Importing libraries
2023-02-14 20:38:37,219:INFO:Copying training dataset
2023-02-14 20:38:37,222:INFO:Defining folds
2023-02-14 20:38:37,222:INFO:Declaring metric variables
2023-02-14 20:38:37,225:INFO:Importing untrained model
2023-02-14 20:38:37,230:INFO:K Neighbors Regressor Imported successfully
2023-02-14 20:38:37,238:INFO:Starting cross validation
2023-02-14 20:38:37,239:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:37,374:INFO:Calculating mean and std
2023-02-14 20:38:37,374:INFO:Creating metrics dataframe
2023-02-14 20:38:37,378:INFO:Uploading results into container
2023-02-14 20:38:37,379:INFO:Uploading model into container now
2023-02-14 20:38:37,379:INFO:_master_model_container: 11
2023-02-14 20:38:37,379:INFO:_display_container: 2
2023-02-14 20:38:37,379:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 20:38:37,379:INFO:create_model() successfully completed......................................
2023-02-14 20:38:37,486:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:37,486:INFO:Creating metrics dataframe
2023-02-14 20:38:37,498:INFO:Initializing Decision Tree Regressor
2023-02-14 20:38:37,498:INFO:Total runtime is 0.13832323948542274 minutes
2023-02-14 20:38:37,501:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:37,501:INFO:Initializing create_model()
2023-02-14 20:38:37,501:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:37,501:INFO:Checking exceptions
2023-02-14 20:38:37,501:INFO:Importing libraries
2023-02-14 20:38:37,502:INFO:Copying training dataset
2023-02-14 20:38:37,505:INFO:Defining folds
2023-02-14 20:38:37,505:INFO:Declaring metric variables
2023-02-14 20:38:37,508:INFO:Importing untrained model
2023-02-14 20:38:37,513:INFO:Decision Tree Regressor Imported successfully
2023-02-14 20:38:37,520:INFO:Starting cross validation
2023-02-14 20:38:37,521:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:37,656:INFO:Calculating mean and std
2023-02-14 20:38:37,657:INFO:Creating metrics dataframe
2023-02-14 20:38:37,660:INFO:Uploading results into container
2023-02-14 20:38:37,660:INFO:Uploading model into container now
2023-02-14 20:38:37,661:INFO:_master_model_container: 12
2023-02-14 20:38:37,661:INFO:_display_container: 2
2023-02-14 20:38:37,662:INFO:DecisionTreeRegressor(random_state=123)
2023-02-14 20:38:37,662:INFO:create_model() successfully completed......................................
2023-02-14 20:38:37,790:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:37,790:INFO:Creating metrics dataframe
2023-02-14 20:38:37,800:INFO:Initializing Random Forest Regressor
2023-02-14 20:38:37,800:INFO:Total runtime is 0.14334344069163002 minutes
2023-02-14 20:38:37,803:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:37,803:INFO:Initializing create_model()
2023-02-14 20:38:37,803:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:37,803:INFO:Checking exceptions
2023-02-14 20:38:37,803:INFO:Importing libraries
2023-02-14 20:38:37,803:INFO:Copying training dataset
2023-02-14 20:38:37,806:INFO:Defining folds
2023-02-14 20:38:37,806:INFO:Declaring metric variables
2023-02-14 20:38:37,810:INFO:Importing untrained model
2023-02-14 20:38:37,816:INFO:Random Forest Regressor Imported successfully
2023-02-14 20:38:37,822:INFO:Starting cross validation
2023-02-14 20:38:37,823:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:38,296:INFO:Calculating mean and std
2023-02-14 20:38:38,297:INFO:Creating metrics dataframe
2023-02-14 20:38:38,301:INFO:Uploading results into container
2023-02-14 20:38:38,301:INFO:Uploading model into container now
2023-02-14 20:38:38,302:INFO:_master_model_container: 13
2023-02-14 20:38:38,302:INFO:_display_container: 2
2023-02-14 20:38:38,302:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-14 20:38:38,302:INFO:create_model() successfully completed......................................
2023-02-14 20:38:38,407:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:38,407:INFO:Creating metrics dataframe
2023-02-14 20:38:38,416:INFO:Initializing Extra Trees Regressor
2023-02-14 20:38:38,417:INFO:Total runtime is 0.15362763802210488 minutes
2023-02-14 20:38:38,420:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:38,421:INFO:Initializing create_model()
2023-02-14 20:38:38,421:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:38,421:INFO:Checking exceptions
2023-02-14 20:38:38,421:INFO:Importing libraries
2023-02-14 20:38:38,421:INFO:Copying training dataset
2023-02-14 20:38:38,426:INFO:Defining folds
2023-02-14 20:38:38,426:INFO:Declaring metric variables
2023-02-14 20:38:38,430:INFO:Importing untrained model
2023-02-14 20:38:38,436:INFO:Extra Trees Regressor Imported successfully
2023-02-14 20:38:38,442:INFO:Starting cross validation
2023-02-14 20:38:38,443:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:38,783:INFO:Calculating mean and std
2023-02-14 20:38:38,784:INFO:Creating metrics dataframe
2023-02-14 20:38:38,786:INFO:Uploading results into container
2023-02-14 20:38:38,787:INFO:Uploading model into container now
2023-02-14 20:38:38,787:INFO:_master_model_container: 14
2023-02-14 20:38:38,787:INFO:_display_container: 2
2023-02-14 20:38:38,788:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-14 20:38:38,788:INFO:create_model() successfully completed......................................
2023-02-14 20:38:38,908:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:38,908:INFO:Creating metrics dataframe
2023-02-14 20:38:38,919:INFO:Initializing AdaBoost Regressor
2023-02-14 20:38:38,919:INFO:Total runtime is 0.1619972825050354 minutes
2023-02-14 20:38:38,922:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:38,922:INFO:Initializing create_model()
2023-02-14 20:38:38,923:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:38,923:INFO:Checking exceptions
2023-02-14 20:38:38,923:INFO:Importing libraries
2023-02-14 20:38:38,923:INFO:Copying training dataset
2023-02-14 20:38:38,926:INFO:Defining folds
2023-02-14 20:38:38,927:INFO:Declaring metric variables
2023-02-14 20:38:38,932:INFO:Importing untrained model
2023-02-14 20:38:38,936:INFO:AdaBoost Regressor Imported successfully
2023-02-14 20:38:38,943:INFO:Starting cross validation
2023-02-14 20:38:38,944:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:39,157:INFO:Calculating mean and std
2023-02-14 20:38:39,159:INFO:Creating metrics dataframe
2023-02-14 20:38:39,162:INFO:Uploading results into container
2023-02-14 20:38:39,162:INFO:Uploading model into container now
2023-02-14 20:38:39,162:INFO:_master_model_container: 15
2023-02-14 20:38:39,162:INFO:_display_container: 2
2023-02-14 20:38:39,163:INFO:AdaBoostRegressor(random_state=123)
2023-02-14 20:38:39,163:INFO:create_model() successfully completed......................................
2023-02-14 20:38:39,283:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:39,283:INFO:Creating metrics dataframe
2023-02-14 20:38:39,295:INFO:Initializing Gradient Boosting Regressor
2023-02-14 20:38:39,296:INFO:Total runtime is 0.1682869752248128 minutes
2023-02-14 20:38:39,300:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:39,300:INFO:Initializing create_model()
2023-02-14 20:38:39,300:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:39,301:INFO:Checking exceptions
2023-02-14 20:38:39,301:INFO:Importing libraries
2023-02-14 20:38:39,301:INFO:Copying training dataset
2023-02-14 20:38:39,304:INFO:Defining folds
2023-02-14 20:38:39,304:INFO:Declaring metric variables
2023-02-14 20:38:39,308:INFO:Importing untrained model
2023-02-14 20:38:39,315:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 20:38:39,323:INFO:Starting cross validation
2023-02-14 20:38:39,324:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:39,513:INFO:Calculating mean and std
2023-02-14 20:38:39,514:INFO:Creating metrics dataframe
2023-02-14 20:38:39,516:INFO:Uploading results into container
2023-02-14 20:38:39,517:INFO:Uploading model into container now
2023-02-14 20:38:39,517:INFO:_master_model_container: 16
2023-02-14 20:38:39,517:INFO:_display_container: 2
2023-02-14 20:38:39,517:INFO:GradientBoostingRegressor(random_state=123)
2023-02-14 20:38:39,518:INFO:create_model() successfully completed......................................
2023-02-14 20:38:39,623:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:39,623:INFO:Creating metrics dataframe
2023-02-14 20:38:39,632:INFO:Initializing Extreme Gradient Boosting
2023-02-14 20:38:39,632:INFO:Total runtime is 0.17388726075490316 minutes
2023-02-14 20:38:39,634:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:39,634:INFO:Initializing create_model()
2023-02-14 20:38:39,634:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:39,634:INFO:Checking exceptions
2023-02-14 20:38:39,634:INFO:Importing libraries
2023-02-14 20:38:39,634:INFO:Copying training dataset
2023-02-14 20:38:39,637:INFO:Defining folds
2023-02-14 20:38:39,637:INFO:Declaring metric variables
2023-02-14 20:38:39,643:INFO:Importing untrained model
2023-02-14 20:38:39,648:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 20:38:39,655:INFO:Starting cross validation
2023-02-14 20:38:39,656:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:39,895:INFO:Calculating mean and std
2023-02-14 20:38:39,896:INFO:Creating metrics dataframe
2023-02-14 20:38:39,899:INFO:Uploading results into container
2023-02-14 20:38:39,899:INFO:Uploading model into container now
2023-02-14 20:38:39,899:INFO:_master_model_container: 17
2023-02-14 20:38:39,900:INFO:_display_container: 2
2023-02-14 20:38:39,900:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-14 20:38:39,901:INFO:create_model() successfully completed......................................
2023-02-14 20:38:40,012:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:40,012:INFO:Creating metrics dataframe
2023-02-14 20:38:40,022:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 20:38:40,022:INFO:Total runtime is 0.18038733005523683 minutes
2023-02-14 20:38:40,026:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:40,028:INFO:Initializing create_model()
2023-02-14 20:38:40,028:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:40,028:INFO:Checking exceptions
2023-02-14 20:38:40,028:INFO:Importing libraries
2023-02-14 20:38:40,028:INFO:Copying training dataset
2023-02-14 20:38:40,031:INFO:Defining folds
2023-02-14 20:38:40,032:INFO:Declaring metric variables
2023-02-14 20:38:40,035:INFO:Importing untrained model
2023-02-14 20:38:40,042:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 20:38:40,048:INFO:Starting cross validation
2023-02-14 20:38:40,049:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:40,230:INFO:Calculating mean and std
2023-02-14 20:38:40,231:INFO:Creating metrics dataframe
2023-02-14 20:38:40,233:INFO:Uploading results into container
2023-02-14 20:38:40,234:INFO:Uploading model into container now
2023-02-14 20:38:40,234:INFO:_master_model_container: 18
2023-02-14 20:38:40,234:INFO:_display_container: 2
2023-02-14 20:38:40,236:INFO:LGBMRegressor(random_state=123)
2023-02-14 20:38:40,236:INFO:create_model() successfully completed......................................
2023-02-14 20:38:40,354:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:40,354:INFO:Creating metrics dataframe
2023-02-14 20:38:40,367:INFO:Initializing Dummy Regressor
2023-02-14 20:38:40,367:INFO:Total runtime is 0.18613688945770265 minutes
2023-02-14 20:38:40,370:INFO:SubProcess create_model() called ==================================
2023-02-14 20:38:40,372:INFO:Initializing create_model()
2023-02-14 20:38:40,372:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021097E98FA0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:40,372:INFO:Checking exceptions
2023-02-14 20:38:40,372:INFO:Importing libraries
2023-02-14 20:38:40,372:INFO:Copying training dataset
2023-02-14 20:38:40,377:INFO:Defining folds
2023-02-14 20:38:40,378:INFO:Declaring metric variables
2023-02-14 20:38:40,383:INFO:Importing untrained model
2023-02-14 20:38:40,387:INFO:Dummy Regressor Imported successfully
2023-02-14 20:38:40,397:INFO:Starting cross validation
2023-02-14 20:38:40,398:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:38:40,527:INFO:Calculating mean and std
2023-02-14 20:38:40,528:INFO:Creating metrics dataframe
2023-02-14 20:38:40,531:INFO:Uploading results into container
2023-02-14 20:38:40,532:INFO:Uploading model into container now
2023-02-14 20:38:40,532:INFO:_master_model_container: 19
2023-02-14 20:38:40,532:INFO:_display_container: 2
2023-02-14 20:38:40,532:INFO:DummyRegressor()
2023-02-14 20:38:40,532:INFO:create_model() successfully completed......................................
2023-02-14 20:38:40,638:INFO:SubProcess create_model() end ==================================
2023-02-14 20:38:40,639:INFO:Creating metrics dataframe
2023-02-14 20:38:40,663:INFO:Initializing create_model()
2023-02-14 20:38:40,663:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210979E3E20>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:38:40,663:INFO:Checking exceptions
2023-02-14 20:38:40,666:INFO:Importing libraries
2023-02-14 20:38:40,666:INFO:Copying training dataset
2023-02-14 20:38:40,667:INFO:Defining folds
2023-02-14 20:38:40,667:INFO:Declaring metric variables
2023-02-14 20:38:40,668:INFO:Importing untrained model
2023-02-14 20:38:40,668:INFO:Declaring custom model
2023-02-14 20:38:40,668:INFO:Bayesian Ridge Imported successfully
2023-02-14 20:38:40,668:INFO:Cross validation set to False
2023-02-14 20:38:40,669:INFO:Fitting Model
2023-02-14 20:38:40,683:INFO:BayesianRidge()
2023-02-14 20:38:40,683:INFO:create_model() successfully completed......................................
2023-02-14 20:38:40,822:INFO:_master_model_container: 19
2023-02-14 20:38:40,822:INFO:_display_container: 2
2023-02-14 20:38:40,822:INFO:BayesianRidge()
2023-02-14 20:38:40,822:INFO:compare_models() successfully completed......................................
2023-02-14 20:52:49,416:INFO:PyCaret RegressionExperiment
2023-02-14 20:52:49,416:INFO:Logging name: reg-default-name
2023-02-14 20:52:49,417:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 20:52:49,417:INFO:version 3.0.0.rc8
2023-02-14 20:52:49,417:INFO:Initializing setup()
2023-02-14 20:52:49,417:INFO:self.USI: a4bc
2023-02-14 20:52:49,417:INFO:self._variable_keys: {'n_jobs_param', 'seed', 'exp_name_log', 'idx', 'pipeline', 'y_train', 'logging_param', 'USI', 'gpu_n_jobs_param', 'y', 'gpu_param', 'X', 'memory', 'fold_groups_param', 'X_train', 'X_test', 'html_param', '_available_plots', 'data', 'exp_id', 'log_plots_param', '_ml_usecase', 'y_test', 'target_param', 'fold_generator', 'transform_target_param', 'fold_shuffle_param'}
2023-02-14 20:52:49,417:INFO:Checking environment
2023-02-14 20:52:49,417:INFO:python_version: 3.9.13
2023-02-14 20:52:49,417:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 20:52:49,417:INFO:machine: AMD64
2023-02-14 20:52:49,417:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 20:52:49,422:INFO:Memory: svmem(total=16805040128, available=5294145536, percent=68.5, used=11510894592, free=5294145536)
2023-02-14 20:52:49,423:INFO:Physical Core: 4
2023-02-14 20:52:49,423:INFO:Logical Core: 8
2023-02-14 20:52:49,423:INFO:Checking libraries
2023-02-14 20:52:49,423:INFO:System:
2023-02-14 20:52:49,423:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 20:52:49,423:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 20:52:49,423:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 20:52:49,423:INFO:PyCaret required dependencies:
2023-02-14 20:52:49,423:INFO:                 pip: 23.0
2023-02-14 20:52:49,423:INFO:          setuptools: 58.1.0
2023-02-14 20:52:49,423:INFO:             pycaret: 3.0.0rc8
2023-02-14 20:52:49,423:INFO:             IPython: 8.7.0
2023-02-14 20:52:49,423:INFO:          ipywidgets: 8.0.4
2023-02-14 20:52:49,423:INFO:                tqdm: 4.64.1
2023-02-14 20:52:49,424:INFO:               numpy: 1.22.1
2023-02-14 20:52:49,424:INFO:              pandas: 1.5.2
2023-02-14 20:52:49,424:INFO:              jinja2: 3.1.2
2023-02-14 20:52:49,424:INFO:               scipy: 1.5.4
2023-02-14 20:52:49,424:INFO:              joblib: 1.2.0
2023-02-14 20:52:49,424:INFO:             sklearn: 1.1.3
2023-02-14 20:52:49,424:INFO:                pyod: 1.0.7
2023-02-14 20:52:49,424:INFO:            imblearn: 0.10.1
2023-02-14 20:52:49,424:INFO:   category_encoders: 2.6.0
2023-02-14 20:52:49,424:INFO:            lightgbm: 3.3.4
2023-02-14 20:52:49,424:INFO:               numba: 0.56.4
2023-02-14 20:52:49,424:INFO:            requests: 2.28.1
2023-02-14 20:52:49,424:INFO:          matplotlib: 3.6.2
2023-02-14 20:52:49,424:INFO:          scikitplot: 0.3.7
2023-02-14 20:52:49,424:INFO:         yellowbrick: 1.5
2023-02-14 20:52:49,424:INFO:              plotly: 5.11.0
2023-02-14 20:52:49,424:INFO:             kaleido: 0.2.1
2023-02-14 20:52:49,424:INFO:         statsmodels: 0.13.5
2023-02-14 20:52:49,424:INFO:              sktime: 0.15.1
2023-02-14 20:52:49,424:INFO:               tbats: 1.1.2
2023-02-14 20:52:49,424:INFO:            pmdarima: 2.0.2
2023-02-14 20:52:49,424:INFO:              psutil: 5.9.4
2023-02-14 20:52:49,424:INFO:PyCaret optional dependencies:
2023-02-14 20:52:49,426:INFO:                shap: 0.41.0
2023-02-14 20:52:49,426:INFO:           interpret: 0.3.0
2023-02-14 20:52:49,426:INFO:                umap: Not installed
2023-02-14 20:52:49,426:INFO:    pandas_profiling: 3.6.2
2023-02-14 20:52:49,426:INFO:  explainerdashboard: Not installed
2023-02-14 20:52:49,426:INFO:             autoviz: Not installed
2023-02-14 20:52:49,426:INFO:           fairlearn: Not installed
2023-02-14 20:52:49,426:INFO:             xgboost: 1.7.3
2023-02-14 20:52:49,426:INFO:            catboost: Not installed
2023-02-14 20:52:49,426:INFO:              kmodes: Not installed
2023-02-14 20:52:49,426:INFO:             mlxtend: Not installed
2023-02-14 20:52:49,426:INFO:       statsforecast: Not installed
2023-02-14 20:52:49,426:INFO:        tune_sklearn: Not installed
2023-02-14 20:52:49,426:INFO:                 ray: Not installed
2023-02-14 20:52:49,426:INFO:            hyperopt: Not installed
2023-02-14 20:52:49,426:INFO:              optuna: Not installed
2023-02-14 20:52:49,426:INFO:               skopt: Not installed
2023-02-14 20:52:49,426:INFO:              mlflow: Not installed
2023-02-14 20:52:49,426:INFO:              gradio: Not installed
2023-02-14 20:52:49,426:INFO:             fastapi: Not installed
2023-02-14 20:52:49,426:INFO:             uvicorn: Not installed
2023-02-14 20:52:49,426:INFO:              m2cgen: Not installed
2023-02-14 20:52:49,426:INFO:           evidently: Not installed
2023-02-14 20:52:49,426:INFO:                nltk: 3.8
2023-02-14 20:52:49,426:INFO:            pyLDAvis: Not installed
2023-02-14 20:52:49,426:INFO:              gensim: Not installed
2023-02-14 20:52:49,426:INFO:               spacy: Not installed
2023-02-14 20:52:49,426:INFO:           wordcloud: 1.8.2.2
2023-02-14 20:52:49,426:INFO:            textblob: Not installed
2023-02-14 20:52:49,426:INFO:               fugue: Not installed
2023-02-14 20:52:49,426:INFO:           streamlit: 1.16.0
2023-02-14 20:52:49,427:INFO:             prophet: Not installed
2023-02-14 20:52:49,427:INFO:None
2023-02-14 20:52:49,427:INFO:Set up data.
2023-02-14 20:52:49,435:INFO:Set up train/test split.
2023-02-14 20:52:49,437:INFO:Set up index.
2023-02-14 20:52:49,437:INFO:Set up folding strategy.
2023-02-14 20:52:49,437:INFO:Assigning column types.
2023-02-14 20:52:49,440:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 20:52:49,441:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,446:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,452:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,494:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,536:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,537:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:49,539:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:49,540:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,545:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,550:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,599:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,644:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,645:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:49,648:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:49,648:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 20:52:49,652:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,656:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,725:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,766:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,767:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:49,771:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:49,777:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,782:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,860:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,899:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,899:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:49,901:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:49,902:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 20:52:49,909:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:52:49,967:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:52:50,011:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:52:50,012:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:50,014:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:50,024:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 20:52:50,074:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:52:50,115:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:52:50,116:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:50,118:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:50,118:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 20:52:50,172:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:52:50,208:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:52:50,208:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:50,210:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:50,284:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:52:50,319:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 20:52:50,320:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:50,322:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:50,322:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 20:52:50,381:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:52:50,425:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:50,428:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:50,484:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 20:52:50,519:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:50,521:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:50,522:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 20:52:50,615:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:50,618:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:50,711:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:50,715:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:50,716:INFO:Preparing preprocessing pipeline...
2023-02-14 20:52:50,716:INFO:Set up column name cleaning.
2023-02-14 20:52:50,717:INFO:Set up simple imputation.
2023-02-14 20:52:50,729:INFO:Finished creating preprocessing pipeline.
2023-02-14 20:52:50,734:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 20:52:50,734:INFO:Creating final display dataframe.
2023-02-14 20:52:50,838:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              a4bc
2023-02-14 20:52:50,947:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:50,950:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:51,045:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 20:52:51,047:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 20:52:51,048:INFO:setup() successfully completed in 1.63s...............
2023-02-14 20:52:51,048:INFO:Initializing compare_models()
2023-02-14 20:52:51,048:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 20:52:51,049:INFO:Checking exceptions
2023-02-14 20:52:51,050:INFO:Preparing display monitor
2023-02-14 20:52:51,106:INFO:Initializing Linear Regression
2023-02-14 20:52:51,106:INFO:Total runtime is 0.0 minutes
2023-02-14 20:52:51,110:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:51,111:INFO:Initializing create_model()
2023-02-14 20:52:51,111:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:51,111:INFO:Checking exceptions
2023-02-14 20:52:51,111:INFO:Importing libraries
2023-02-14 20:52:51,112:INFO:Copying training dataset
2023-02-14 20:52:51,115:INFO:Defining folds
2023-02-14 20:52:51,115:INFO:Declaring metric variables
2023-02-14 20:52:51,119:INFO:Importing untrained model
2023-02-14 20:52:51,122:INFO:Linear Regression Imported successfully
2023-02-14 20:52:51,128:INFO:Starting cross validation
2023-02-14 20:52:51,129:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:54,894:INFO:Calculating mean and std
2023-02-14 20:52:54,894:INFO:Creating metrics dataframe
2023-02-14 20:52:54,894:INFO:Uploading results into container
2023-02-14 20:52:54,894:INFO:Uploading model into container now
2023-02-14 20:52:54,894:INFO:_master_model_container: 1
2023-02-14 20:52:54,894:INFO:_display_container: 2
2023-02-14 20:52:54,894:INFO:LinearRegression(n_jobs=-1)
2023-02-14 20:52:54,894:INFO:create_model() successfully completed......................................
2023-02-14 20:52:55,035:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:55,035:INFO:Creating metrics dataframe
2023-02-14 20:52:55,035:INFO:Initializing Lasso Regression
2023-02-14 20:52:55,035:INFO:Total runtime is 0.06549431482950846 minutes
2023-02-14 20:52:55,045:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:55,045:INFO:Initializing create_model()
2023-02-14 20:52:55,045:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:55,045:INFO:Checking exceptions
2023-02-14 20:52:55,045:INFO:Importing libraries
2023-02-14 20:52:55,045:INFO:Copying training dataset
2023-02-14 20:52:55,047:INFO:Defining folds
2023-02-14 20:52:55,047:INFO:Declaring metric variables
2023-02-14 20:52:55,049:INFO:Importing untrained model
2023-02-14 20:52:55,053:INFO:Lasso Regression Imported successfully
2023-02-14 20:52:55,063:INFO:Starting cross validation
2023-02-14 20:52:55,065:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:55,197:INFO:Calculating mean and std
2023-02-14 20:52:55,197:INFO:Creating metrics dataframe
2023-02-14 20:52:55,208:INFO:Uploading results into container
2023-02-14 20:52:55,209:INFO:Uploading model into container now
2023-02-14 20:52:55,209:INFO:_master_model_container: 2
2023-02-14 20:52:55,209:INFO:_display_container: 2
2023-02-14 20:52:55,209:INFO:Lasso(random_state=123)
2023-02-14 20:52:55,209:INFO:create_model() successfully completed......................................
2023-02-14 20:52:55,320:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:55,320:INFO:Creating metrics dataframe
2023-02-14 20:52:55,320:INFO:Initializing Ridge Regression
2023-02-14 20:52:55,320:INFO:Total runtime is 0.07023488680521647 minutes
2023-02-14 20:52:55,320:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:55,320:INFO:Initializing create_model()
2023-02-14 20:52:55,320:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:55,320:INFO:Checking exceptions
2023-02-14 20:52:55,320:INFO:Importing libraries
2023-02-14 20:52:55,320:INFO:Copying training dataset
2023-02-14 20:52:55,334:INFO:Defining folds
2023-02-14 20:52:55,334:INFO:Declaring metric variables
2023-02-14 20:52:55,334:INFO:Importing untrained model
2023-02-14 20:52:55,341:INFO:Ridge Regression Imported successfully
2023-02-14 20:52:55,354:INFO:Starting cross validation
2023-02-14 20:52:55,354:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:55,496:INFO:Calculating mean and std
2023-02-14 20:52:55,496:INFO:Creating metrics dataframe
2023-02-14 20:52:55,507:INFO:Uploading results into container
2023-02-14 20:52:55,507:INFO:Uploading model into container now
2023-02-14 20:52:55,507:INFO:_master_model_container: 3
2023-02-14 20:52:55,507:INFO:_display_container: 2
2023-02-14 20:52:55,507:INFO:Ridge(random_state=123)
2023-02-14 20:52:55,507:INFO:create_model() successfully completed......................................
2023-02-14 20:52:55,621:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:55,621:INFO:Creating metrics dataframe
2023-02-14 20:52:55,626:INFO:Initializing Elastic Net
2023-02-14 20:52:55,626:INFO:Total runtime is 0.07534131606419882 minutes
2023-02-14 20:52:55,626:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:55,626:INFO:Initializing create_model()
2023-02-14 20:52:55,626:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:55,626:INFO:Checking exceptions
2023-02-14 20:52:55,626:INFO:Importing libraries
2023-02-14 20:52:55,626:INFO:Copying training dataset
2023-02-14 20:52:55,636:INFO:Defining folds
2023-02-14 20:52:55,636:INFO:Declaring metric variables
2023-02-14 20:52:55,637:INFO:Importing untrained model
2023-02-14 20:52:55,644:INFO:Elastic Net Imported successfully
2023-02-14 20:52:55,651:INFO:Starting cross validation
2023-02-14 20:52:55,651:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:55,769:INFO:Calculating mean and std
2023-02-14 20:52:55,769:INFO:Creating metrics dataframe
2023-02-14 20:52:55,778:INFO:Uploading results into container
2023-02-14 20:52:55,778:INFO:Uploading model into container now
2023-02-14 20:52:55,778:INFO:_master_model_container: 4
2023-02-14 20:52:55,778:INFO:_display_container: 2
2023-02-14 20:52:55,778:INFO:ElasticNet(random_state=123)
2023-02-14 20:52:55,778:INFO:create_model() successfully completed......................................
2023-02-14 20:52:55,878:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:55,878:INFO:Creating metrics dataframe
2023-02-14 20:52:55,895:INFO:Initializing Least Angle Regression
2023-02-14 20:52:55,895:INFO:Total runtime is 0.07981679439544678 minutes
2023-02-14 20:52:55,895:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:55,895:INFO:Initializing create_model()
2023-02-14 20:52:55,895:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:55,895:INFO:Checking exceptions
2023-02-14 20:52:55,895:INFO:Importing libraries
2023-02-14 20:52:55,895:INFO:Copying training dataset
2023-02-14 20:52:55,902:INFO:Defining folds
2023-02-14 20:52:55,902:INFO:Declaring metric variables
2023-02-14 20:52:55,905:INFO:Importing untrained model
2023-02-14 20:52:55,911:INFO:Least Angle Regression Imported successfully
2023-02-14 20:52:55,917:INFO:Starting cross validation
2023-02-14 20:52:55,920:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:55,954:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:55,964:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:55,971:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:55,985:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:55,995:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,001:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,012:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,018:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,027:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,033:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,043:INFO:Calculating mean and std
2023-02-14 20:52:56,043:INFO:Creating metrics dataframe
2023-02-14 20:52:56,048:INFO:Uploading results into container
2023-02-14 20:52:56,048:INFO:Uploading model into container now
2023-02-14 20:52:56,048:INFO:_master_model_container: 5
2023-02-14 20:52:56,048:INFO:_display_container: 2
2023-02-14 20:52:56,048:INFO:Lars(random_state=123)
2023-02-14 20:52:56,048:INFO:create_model() successfully completed......................................
2023-02-14 20:52:56,162:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:56,162:INFO:Creating metrics dataframe
2023-02-14 20:52:56,162:INFO:Initializing Lasso Least Angle Regression
2023-02-14 20:52:56,162:INFO:Total runtime is 0.08427335421244304 minutes
2023-02-14 20:52:56,172:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:56,172:INFO:Initializing create_model()
2023-02-14 20:52:56,172:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:56,172:INFO:Checking exceptions
2023-02-14 20:52:56,172:INFO:Importing libraries
2023-02-14 20:52:56,172:INFO:Copying training dataset
2023-02-14 20:52:56,176:INFO:Defining folds
2023-02-14 20:52:56,176:INFO:Declaring metric variables
2023-02-14 20:52:56,178:INFO:Importing untrained model
2023-02-14 20:52:56,181:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 20:52:56,189:INFO:Starting cross validation
2023-02-14 20:52:56,189:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:56,223:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:52:56,232:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:52:56,241:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:52:56,248:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:52:56,257:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:52:56,269:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:52:56,277:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:52:56,286:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:52:56,295:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:52:56,303:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 20:52:56,310:INFO:Calculating mean and std
2023-02-14 20:52:56,310:INFO:Creating metrics dataframe
2023-02-14 20:52:56,310:INFO:Uploading results into container
2023-02-14 20:52:56,310:INFO:Uploading model into container now
2023-02-14 20:52:56,310:INFO:_master_model_container: 6
2023-02-14 20:52:56,310:INFO:_display_container: 2
2023-02-14 20:52:56,318:INFO:LassoLars(random_state=123)
2023-02-14 20:52:56,318:INFO:create_model() successfully completed......................................
2023-02-14 20:52:56,425:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:56,425:INFO:Creating metrics dataframe
2023-02-14 20:52:56,429:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 20:52:56,429:INFO:Total runtime is 0.08872558275858562 minutes
2023-02-14 20:52:56,429:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:56,429:INFO:Initializing create_model()
2023-02-14 20:52:56,429:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:56,429:INFO:Checking exceptions
2023-02-14 20:52:56,429:INFO:Importing libraries
2023-02-14 20:52:56,429:INFO:Copying training dataset
2023-02-14 20:52:56,429:INFO:Defining folds
2023-02-14 20:52:56,429:INFO:Declaring metric variables
2023-02-14 20:52:56,445:INFO:Importing untrained model
2023-02-14 20:52:56,448:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 20:52:56,457:INFO:Starting cross validation
2023-02-14 20:52:56,457:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:56,495:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,503:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,507:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,518:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,528:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,535:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,545:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,554:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,555:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,572:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 20:52:56,579:INFO:Calculating mean and std
2023-02-14 20:52:56,579:INFO:Creating metrics dataframe
2023-02-14 20:52:56,589:INFO:Uploading results into container
2023-02-14 20:52:56,590:INFO:Uploading model into container now
2023-02-14 20:52:56,590:INFO:_master_model_container: 7
2023-02-14 20:52:56,590:INFO:_display_container: 2
2023-02-14 20:52:56,590:INFO:OrthogonalMatchingPursuit()
2023-02-14 20:52:56,590:INFO:create_model() successfully completed......................................
2023-02-14 20:52:56,697:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:56,697:INFO:Creating metrics dataframe
2023-02-14 20:52:56,697:INFO:Initializing Bayesian Ridge
2023-02-14 20:52:56,697:INFO:Total runtime is 0.09319116274515789 minutes
2023-02-14 20:52:56,697:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:56,713:INFO:Initializing create_model()
2023-02-14 20:52:56,713:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:56,713:INFO:Checking exceptions
2023-02-14 20:52:56,713:INFO:Importing libraries
2023-02-14 20:52:56,713:INFO:Copying training dataset
2023-02-14 20:52:56,717:INFO:Defining folds
2023-02-14 20:52:56,717:INFO:Declaring metric variables
2023-02-14 20:52:56,717:INFO:Importing untrained model
2023-02-14 20:52:56,724:INFO:Bayesian Ridge Imported successfully
2023-02-14 20:52:56,732:INFO:Starting cross validation
2023-02-14 20:52:56,732:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:56,858:INFO:Calculating mean and std
2023-02-14 20:52:56,858:INFO:Creating metrics dataframe
2023-02-14 20:52:56,858:INFO:Uploading results into container
2023-02-14 20:52:56,858:INFO:Uploading model into container now
2023-02-14 20:52:56,858:INFO:_master_model_container: 8
2023-02-14 20:52:56,858:INFO:_display_container: 2
2023-02-14 20:52:56,858:INFO:BayesianRidge()
2023-02-14 20:52:56,858:INFO:create_model() successfully completed......................................
2023-02-14 20:52:56,976:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:56,976:INFO:Creating metrics dataframe
2023-02-14 20:52:56,986:INFO:Initializing Passive Aggressive Regressor
2023-02-14 20:52:56,986:INFO:Total runtime is 0.09800552527109783 minutes
2023-02-14 20:52:56,992:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:56,994:INFO:Initializing create_model()
2023-02-14 20:52:56,994:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:56,994:INFO:Checking exceptions
2023-02-14 20:52:56,994:INFO:Importing libraries
2023-02-14 20:52:56,994:INFO:Copying training dataset
2023-02-14 20:52:56,997:INFO:Defining folds
2023-02-14 20:52:56,997:INFO:Declaring metric variables
2023-02-14 20:52:57,000:INFO:Importing untrained model
2023-02-14 20:52:57,004:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 20:52:57,011:INFO:Starting cross validation
2023-02-14 20:52:57,011:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:57,143:INFO:Calculating mean and std
2023-02-14 20:52:57,143:INFO:Creating metrics dataframe
2023-02-14 20:52:57,151:INFO:Uploading results into container
2023-02-14 20:52:57,151:INFO:Uploading model into container now
2023-02-14 20:52:57,151:INFO:_master_model_container: 9
2023-02-14 20:52:57,151:INFO:_display_container: 2
2023-02-14 20:52:57,151:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-14 20:52:57,151:INFO:create_model() successfully completed......................................
2023-02-14 20:52:57,256:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:57,256:INFO:Creating metrics dataframe
2023-02-14 20:52:57,271:INFO:Initializing Huber Regressor
2023-02-14 20:52:57,271:INFO:Total runtime is 0.10276054938634238 minutes
2023-02-14 20:52:57,277:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:57,277:INFO:Initializing create_model()
2023-02-14 20:52:57,277:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:57,277:INFO:Checking exceptions
2023-02-14 20:52:57,277:INFO:Importing libraries
2023-02-14 20:52:57,277:INFO:Copying training dataset
2023-02-14 20:52:57,281:INFO:Defining folds
2023-02-14 20:52:57,281:INFO:Declaring metric variables
2023-02-14 20:52:57,286:INFO:Importing untrained model
2023-02-14 20:52:57,289:INFO:Huber Regressor Imported successfully
2023-02-14 20:52:57,296:INFO:Starting cross validation
2023-02-14 20:52:57,296:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:57,356:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:52:57,356:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:52:57,365:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:52:57,396:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:52:57,406:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:52:57,420:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:52:57,426:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:52:57,432:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 20:52:57,445:INFO:Calculating mean and std
2023-02-14 20:52:57,445:INFO:Creating metrics dataframe
2023-02-14 20:52:57,445:INFO:Uploading results into container
2023-02-14 20:52:57,445:INFO:Uploading model into container now
2023-02-14 20:52:57,445:INFO:_master_model_container: 10
2023-02-14 20:52:57,445:INFO:_display_container: 2
2023-02-14 20:52:57,445:INFO:HuberRegressor()
2023-02-14 20:52:57,445:INFO:create_model() successfully completed......................................
2023-02-14 20:52:57,588:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:57,588:INFO:Creating metrics dataframe
2023-02-14 20:52:57,591:INFO:Initializing K Neighbors Regressor
2023-02-14 20:52:57,591:INFO:Total runtime is 0.10808635552724204 minutes
2023-02-14 20:52:57,591:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:57,591:INFO:Initializing create_model()
2023-02-14 20:52:57,591:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:57,591:INFO:Checking exceptions
2023-02-14 20:52:57,603:INFO:Importing libraries
2023-02-14 20:52:57,603:INFO:Copying training dataset
2023-02-14 20:52:57,604:INFO:Defining folds
2023-02-14 20:52:57,604:INFO:Declaring metric variables
2023-02-14 20:52:57,610:INFO:Importing untrained model
2023-02-14 20:52:57,614:INFO:K Neighbors Regressor Imported successfully
2023-02-14 20:52:57,620:INFO:Starting cross validation
2023-02-14 20:52:57,620:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:57,771:INFO:Calculating mean and std
2023-02-14 20:52:57,771:INFO:Creating metrics dataframe
2023-02-14 20:52:57,777:INFO:Uploading results into container
2023-02-14 20:52:57,777:INFO:Uploading model into container now
2023-02-14 20:52:57,777:INFO:_master_model_container: 11
2023-02-14 20:52:57,777:INFO:_display_container: 2
2023-02-14 20:52:57,777:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 20:52:57,777:INFO:create_model() successfully completed......................................
2023-02-14 20:52:57,891:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:57,891:INFO:Creating metrics dataframe
2023-02-14 20:52:57,892:INFO:Initializing Decision Tree Regressor
2023-02-14 20:52:57,892:INFO:Total runtime is 0.11310254335403444 minutes
2023-02-14 20:52:57,892:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:57,905:INFO:Initializing create_model()
2023-02-14 20:52:57,905:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:57,905:INFO:Checking exceptions
2023-02-14 20:52:57,905:INFO:Importing libraries
2023-02-14 20:52:57,905:INFO:Copying training dataset
2023-02-14 20:52:57,908:INFO:Defining folds
2023-02-14 20:52:57,908:INFO:Declaring metric variables
2023-02-14 20:52:57,914:INFO:Importing untrained model
2023-02-14 20:52:57,915:INFO:Decision Tree Regressor Imported successfully
2023-02-14 20:52:57,923:INFO:Starting cross validation
2023-02-14 20:52:57,926:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:58,049:INFO:Calculating mean and std
2023-02-14 20:52:58,049:INFO:Creating metrics dataframe
2023-02-14 20:52:58,054:INFO:Uploading results into container
2023-02-14 20:52:58,054:INFO:Uploading model into container now
2023-02-14 20:52:58,054:INFO:_master_model_container: 12
2023-02-14 20:52:58,055:INFO:_display_container: 2
2023-02-14 20:52:58,055:INFO:DecisionTreeRegressor(random_state=123)
2023-02-14 20:52:58,055:INFO:create_model() successfully completed......................................
2023-02-14 20:52:58,160:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:58,160:INFO:Creating metrics dataframe
2023-02-14 20:52:58,176:INFO:Initializing Random Forest Regressor
2023-02-14 20:52:58,176:INFO:Total runtime is 0.11783377726872764 minutes
2023-02-14 20:52:58,182:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:58,182:INFO:Initializing create_model()
2023-02-14 20:52:58,182:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:58,182:INFO:Checking exceptions
2023-02-14 20:52:58,182:INFO:Importing libraries
2023-02-14 20:52:58,182:INFO:Copying training dataset
2023-02-14 20:52:58,182:INFO:Defining folds
2023-02-14 20:52:58,182:INFO:Declaring metric variables
2023-02-14 20:52:58,190:INFO:Importing untrained model
2023-02-14 20:52:58,194:INFO:Random Forest Regressor Imported successfully
2023-02-14 20:52:58,203:INFO:Starting cross validation
2023-02-14 20:52:58,203:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:58,624:INFO:Calculating mean and std
2023-02-14 20:52:58,624:INFO:Creating metrics dataframe
2023-02-14 20:52:58,624:INFO:Uploading results into container
2023-02-14 20:52:58,624:INFO:Uploading model into container now
2023-02-14 20:52:58,624:INFO:_master_model_container: 13
2023-02-14 20:52:58,624:INFO:_display_container: 2
2023-02-14 20:52:58,624:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-14 20:52:58,624:INFO:create_model() successfully completed......................................
2023-02-14 20:52:58,727:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:58,737:INFO:Creating metrics dataframe
2023-02-14 20:52:58,744:INFO:Initializing Extra Trees Regressor
2023-02-14 20:52:58,744:INFO:Total runtime is 0.12730231682459514 minutes
2023-02-14 20:52:58,749:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:58,749:INFO:Initializing create_model()
2023-02-14 20:52:58,749:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:58,749:INFO:Checking exceptions
2023-02-14 20:52:58,749:INFO:Importing libraries
2023-02-14 20:52:58,749:INFO:Copying training dataset
2023-02-14 20:52:58,753:INFO:Defining folds
2023-02-14 20:52:58,753:INFO:Declaring metric variables
2023-02-14 20:52:58,757:INFO:Importing untrained model
2023-02-14 20:52:58,760:INFO:Extra Trees Regressor Imported successfully
2023-02-14 20:52:58,767:INFO:Starting cross validation
2023-02-14 20:52:58,767:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:59,119:INFO:Calculating mean and std
2023-02-14 20:52:59,119:INFO:Creating metrics dataframe
2023-02-14 20:52:59,121:INFO:Uploading results into container
2023-02-14 20:52:59,121:INFO:Uploading model into container now
2023-02-14 20:52:59,121:INFO:_master_model_container: 14
2023-02-14 20:52:59,121:INFO:_display_container: 2
2023-02-14 20:52:59,121:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-14 20:52:59,121:INFO:create_model() successfully completed......................................
2023-02-14 20:52:59,232:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:59,232:INFO:Creating metrics dataframe
2023-02-14 20:52:59,232:INFO:Initializing AdaBoost Regressor
2023-02-14 20:52:59,232:INFO:Total runtime is 0.13543750047683717 minutes
2023-02-14 20:52:59,249:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:59,250:INFO:Initializing create_model()
2023-02-14 20:52:59,250:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:59,251:INFO:Checking exceptions
2023-02-14 20:52:59,251:INFO:Importing libraries
2023-02-14 20:52:59,251:INFO:Copying training dataset
2023-02-14 20:52:59,253:INFO:Defining folds
2023-02-14 20:52:59,253:INFO:Declaring metric variables
2023-02-14 20:52:59,256:INFO:Importing untrained model
2023-02-14 20:52:59,261:INFO:AdaBoost Regressor Imported successfully
2023-02-14 20:52:59,268:INFO:Starting cross validation
2023-02-14 20:52:59,268:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:59,533:INFO:Calculating mean and std
2023-02-14 20:52:59,533:INFO:Creating metrics dataframe
2023-02-14 20:52:59,533:INFO:Uploading results into container
2023-02-14 20:52:59,533:INFO:Uploading model into container now
2023-02-14 20:52:59,533:INFO:_master_model_container: 15
2023-02-14 20:52:59,533:INFO:_display_container: 2
2023-02-14 20:52:59,533:INFO:AdaBoostRegressor(random_state=123)
2023-02-14 20:52:59,533:INFO:create_model() successfully completed......................................
2023-02-14 20:52:59,645:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:59,645:INFO:Creating metrics dataframe
2023-02-14 20:52:59,656:INFO:Initializing Gradient Boosting Regressor
2023-02-14 20:52:59,656:INFO:Total runtime is 0.14250605901082358 minutes
2023-02-14 20:52:59,662:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:59,662:INFO:Initializing create_model()
2023-02-14 20:52:59,662:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:59,662:INFO:Checking exceptions
2023-02-14 20:52:59,662:INFO:Importing libraries
2023-02-14 20:52:59,662:INFO:Copying training dataset
2023-02-14 20:52:59,665:INFO:Defining folds
2023-02-14 20:52:59,665:INFO:Declaring metric variables
2023-02-14 20:52:59,665:INFO:Importing untrained model
2023-02-14 20:52:59,673:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 20:52:59,680:INFO:Starting cross validation
2023-02-14 20:52:59,680:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:52:59,841:INFO:Calculating mean and std
2023-02-14 20:52:59,850:INFO:Creating metrics dataframe
2023-02-14 20:52:59,850:INFO:Uploading results into container
2023-02-14 20:52:59,850:INFO:Uploading model into container now
2023-02-14 20:52:59,850:INFO:_master_model_container: 16
2023-02-14 20:52:59,850:INFO:_display_container: 2
2023-02-14 20:52:59,850:INFO:GradientBoostingRegressor(random_state=123)
2023-02-14 20:52:59,850:INFO:create_model() successfully completed......................................
2023-02-14 20:52:59,963:INFO:SubProcess create_model() end ==================================
2023-02-14 20:52:59,965:INFO:Creating metrics dataframe
2023-02-14 20:52:59,974:INFO:Initializing Extreme Gradient Boosting
2023-02-14 20:52:59,974:INFO:Total runtime is 0.14779926538467408 minutes
2023-02-14 20:52:59,975:INFO:SubProcess create_model() called ==================================
2023-02-14 20:52:59,975:INFO:Initializing create_model()
2023-02-14 20:52:59,975:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:52:59,975:INFO:Checking exceptions
2023-02-14 20:52:59,975:INFO:Importing libraries
2023-02-14 20:52:59,975:INFO:Copying training dataset
2023-02-14 20:52:59,981:INFO:Defining folds
2023-02-14 20:52:59,981:INFO:Declaring metric variables
2023-02-14 20:52:59,981:INFO:Importing untrained model
2023-02-14 20:52:59,990:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 20:52:59,995:INFO:Starting cross validation
2023-02-14 20:52:59,995:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:53:00,217:INFO:Calculating mean and std
2023-02-14 20:53:00,231:INFO:Creating metrics dataframe
2023-02-14 20:53:00,231:INFO:Uploading results into container
2023-02-14 20:53:00,231:INFO:Uploading model into container now
2023-02-14 20:53:00,231:INFO:_master_model_container: 17
2023-02-14 20:53:00,231:INFO:_display_container: 2
2023-02-14 20:53:00,231:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-14 20:53:00,231:INFO:create_model() successfully completed......................................
2023-02-14 20:53:00,342:INFO:SubProcess create_model() end ==================================
2023-02-14 20:53:00,342:INFO:Creating metrics dataframe
2023-02-14 20:53:00,360:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 20:53:00,360:INFO:Total runtime is 0.15424191554387412 minutes
2023-02-14 20:53:00,375:INFO:SubProcess create_model() called ==================================
2023-02-14 20:53:00,375:INFO:Initializing create_model()
2023-02-14 20:53:00,376:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:53:00,376:INFO:Checking exceptions
2023-02-14 20:53:00,376:INFO:Importing libraries
2023-02-14 20:53:00,376:INFO:Copying training dataset
2023-02-14 20:53:00,377:INFO:Defining folds
2023-02-14 20:53:00,377:INFO:Declaring metric variables
2023-02-14 20:53:00,381:INFO:Importing untrained model
2023-02-14 20:53:00,381:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 20:53:00,392:INFO:Starting cross validation
2023-02-14 20:53:00,392:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:53:00,580:INFO:Calculating mean and std
2023-02-14 20:53:00,580:INFO:Creating metrics dataframe
2023-02-14 20:53:00,595:INFO:Uploading results into container
2023-02-14 20:53:00,596:INFO:Uploading model into container now
2023-02-14 20:53:00,596:INFO:_master_model_container: 18
2023-02-14 20:53:00,596:INFO:_display_container: 2
2023-02-14 20:53:00,596:INFO:LGBMRegressor(random_state=123)
2023-02-14 20:53:00,596:INFO:create_model() successfully completed......................................
2023-02-14 20:53:00,707:INFO:SubProcess create_model() end ==================================
2023-02-14 20:53:00,707:INFO:Creating metrics dataframe
2023-02-14 20:53:00,725:INFO:Initializing Dummy Regressor
2023-02-14 20:53:00,725:INFO:Total runtime is 0.16032687822977704 minutes
2023-02-14 20:53:00,725:INFO:SubProcess create_model() called ==================================
2023-02-14 20:53:00,733:INFO:Initializing create_model()
2023-02-14 20:53:00,733:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002109883F3D0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:53:00,733:INFO:Checking exceptions
2023-02-14 20:53:00,733:INFO:Importing libraries
2023-02-14 20:53:00,733:INFO:Copying training dataset
2023-02-14 20:53:00,737:INFO:Defining folds
2023-02-14 20:53:00,737:INFO:Declaring metric variables
2023-02-14 20:53:00,738:INFO:Importing untrained model
2023-02-14 20:53:00,747:INFO:Dummy Regressor Imported successfully
2023-02-14 20:53:00,753:INFO:Starting cross validation
2023-02-14 20:53:00,753:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 20:53:00,882:INFO:Calculating mean and std
2023-02-14 20:53:00,882:INFO:Creating metrics dataframe
2023-02-14 20:53:00,886:INFO:Uploading results into container
2023-02-14 20:53:00,890:INFO:Uploading model into container now
2023-02-14 20:53:00,890:INFO:_master_model_container: 19
2023-02-14 20:53:00,890:INFO:_display_container: 2
2023-02-14 20:53:00,890:INFO:DummyRegressor()
2023-02-14 20:53:00,890:INFO:create_model() successfully completed......................................
2023-02-14 20:53:00,992:INFO:SubProcess create_model() end ==================================
2023-02-14 20:53:00,992:INFO:Creating metrics dataframe
2023-02-14 20:53:01,024:INFO:Initializing create_model()
2023-02-14 20:53:01,028:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210978A4D00>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 20:53:01,028:INFO:Checking exceptions
2023-02-14 20:53:01,029:INFO:Importing libraries
2023-02-14 20:53:01,031:INFO:Copying training dataset
2023-02-14 20:53:01,031:INFO:Defining folds
2023-02-14 20:53:01,031:INFO:Declaring metric variables
2023-02-14 20:53:01,031:INFO:Importing untrained model
2023-02-14 20:53:01,031:INFO:Declaring custom model
2023-02-14 20:53:01,031:INFO:Bayesian Ridge Imported successfully
2023-02-14 20:53:01,031:INFO:Cross validation set to False
2023-02-14 20:53:01,031:INFO:Fitting Model
2023-02-14 20:53:01,048:INFO:BayesianRidge()
2023-02-14 20:53:01,048:INFO:create_model() successfully completed......................................
2023-02-14 20:53:01,234:INFO:_master_model_container: 19
2023-02-14 20:53:01,234:INFO:_display_container: 2
2023-02-14 20:53:01,245:INFO:BayesianRidge()
2023-02-14 20:53:01,245:INFO:compare_models() successfully completed......................................
2023-02-14 23:20:18,725:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:20:18,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:20:18,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:20:18,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:20:19,202:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-14 23:21:32,166:INFO:PyCaret RegressionExperiment
2023-02-14 23:21:32,166:INFO:Logging name: reg-default-name
2023-02-14 23:21:32,166:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 23:21:32,166:INFO:version 3.0.0.rc8
2023-02-14 23:21:32,166:INFO:Initializing setup()
2023-02-14 23:21:32,166:INFO:self.USI: 9c4b
2023-02-14 23:21:32,166:INFO:self._variable_keys: {'fold_groups_param', 'y_train', 'transform_target_param', 'memory', 'n_jobs_param', 'log_plots_param', 'X_test', 'y', 'exp_id', 'X_train', 'target_param', 'USI', 'X', 'fold_generator', 'html_param', 'exp_name_log', 'logging_param', 'data', 'y_test', 'fold_shuffle_param', '_ml_usecase', '_available_plots', 'seed', 'pipeline', 'gpu_param', 'idx', 'gpu_n_jobs_param'}
2023-02-14 23:21:32,166:INFO:Checking environment
2023-02-14 23:21:32,167:INFO:python_version: 3.9.13
2023-02-14 23:21:32,167:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 23:21:32,167:INFO:machine: AMD64
2023-02-14 23:21:32,167:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 23:21:32,174:INFO:Memory: svmem(total=16805040128, available=4352274432, percent=74.1, used=12452765696, free=4352274432)
2023-02-14 23:21:32,174:INFO:Physical Core: 4
2023-02-14 23:21:32,174:INFO:Logical Core: 8
2023-02-14 23:21:32,174:INFO:Checking libraries
2023-02-14 23:21:32,174:INFO:System:
2023-02-14 23:21:32,175:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 23:21:32,175:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 23:21:32,175:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 23:21:32,175:INFO:PyCaret required dependencies:
2023-02-14 23:21:32,175:INFO:                 pip: 23.0
2023-02-14 23:21:32,175:INFO:          setuptools: 58.1.0
2023-02-14 23:21:32,175:INFO:             pycaret: 3.0.0rc8
2023-02-14 23:21:32,175:INFO:             IPython: 8.7.0
2023-02-14 23:21:32,175:INFO:          ipywidgets: 8.0.4
2023-02-14 23:21:32,175:INFO:                tqdm: 4.64.1
2023-02-14 23:21:32,175:INFO:               numpy: 1.22.1
2023-02-14 23:21:32,175:INFO:              pandas: 1.5.2
2023-02-14 23:21:32,175:INFO:              jinja2: 3.1.2
2023-02-14 23:21:32,175:INFO:               scipy: 1.5.4
2023-02-14 23:21:32,175:INFO:              joblib: 1.2.0
2023-02-14 23:21:32,175:INFO:             sklearn: 1.1.3
2023-02-14 23:21:32,175:INFO:                pyod: 1.0.7
2023-02-14 23:21:32,175:INFO:            imblearn: 0.10.1
2023-02-14 23:21:32,175:INFO:   category_encoders: 2.6.0
2023-02-14 23:21:32,175:INFO:            lightgbm: 3.3.4
2023-02-14 23:21:32,175:INFO:               numba: 0.56.4
2023-02-14 23:21:32,176:INFO:            requests: 2.28.1
2023-02-14 23:21:32,176:INFO:          matplotlib: 3.6.2
2023-02-14 23:21:32,176:INFO:          scikitplot: 0.3.7
2023-02-14 23:21:32,176:INFO:         yellowbrick: 1.5
2023-02-14 23:21:32,176:INFO:              plotly: 5.11.0
2023-02-14 23:21:32,176:INFO:             kaleido: 0.2.1
2023-02-14 23:21:32,176:INFO:         statsmodels: 0.13.5
2023-02-14 23:21:32,176:INFO:              sktime: 0.15.1
2023-02-14 23:21:32,176:INFO:               tbats: 1.1.2
2023-02-14 23:21:32,176:INFO:            pmdarima: 2.0.2
2023-02-14 23:21:32,176:INFO:              psutil: 5.9.4
2023-02-14 23:21:32,176:INFO:PyCaret optional dependencies:
2023-02-14 23:21:32,193:INFO:                shap: 0.41.0
2023-02-14 23:21:32,193:INFO:           interpret: 0.3.0
2023-02-14 23:21:32,193:INFO:                umap: Not installed
2023-02-14 23:21:32,193:INFO:    pandas_profiling: 3.6.2
2023-02-14 23:21:32,193:INFO:  explainerdashboard: Not installed
2023-02-14 23:21:32,193:INFO:             autoviz: Not installed
2023-02-14 23:21:32,193:INFO:           fairlearn: Not installed
2023-02-14 23:21:32,193:INFO:             xgboost: 1.7.3
2023-02-14 23:21:32,193:INFO:            catboost: Not installed
2023-02-14 23:21:32,194:INFO:              kmodes: Not installed
2023-02-14 23:21:32,194:INFO:             mlxtend: Not installed
2023-02-14 23:21:32,194:INFO:       statsforecast: Not installed
2023-02-14 23:21:32,194:INFO:        tune_sklearn: Not installed
2023-02-14 23:21:32,194:INFO:                 ray: Not installed
2023-02-14 23:21:32,194:INFO:            hyperopt: Not installed
2023-02-14 23:21:32,194:INFO:              optuna: Not installed
2023-02-14 23:21:32,194:INFO:               skopt: Not installed
2023-02-14 23:21:32,194:INFO:              mlflow: Not installed
2023-02-14 23:21:32,194:INFO:              gradio: Not installed
2023-02-14 23:21:32,194:INFO:             fastapi: Not installed
2023-02-14 23:21:32,194:INFO:             uvicorn: Not installed
2023-02-14 23:21:32,194:INFO:              m2cgen: Not installed
2023-02-14 23:21:32,194:INFO:           evidently: Not installed
2023-02-14 23:21:32,194:INFO:                nltk: 3.8
2023-02-14 23:21:32,194:INFO:            pyLDAvis: Not installed
2023-02-14 23:21:32,194:INFO:              gensim: Not installed
2023-02-14 23:21:32,194:INFO:               spacy: Not installed
2023-02-14 23:21:32,194:INFO:           wordcloud: 1.8.2.2
2023-02-14 23:21:32,194:INFO:            textblob: Not installed
2023-02-14 23:21:32,194:INFO:               fugue: Not installed
2023-02-14 23:21:32,194:INFO:           streamlit: 1.16.0
2023-02-14 23:21:32,194:INFO:             prophet: Not installed
2023-02-14 23:21:32,194:INFO:None
2023-02-14 23:21:32,194:INFO:Set up data.
2023-02-14 23:21:32,200:INFO:Set up train/test split.
2023-02-14 23:21:32,203:INFO:Set up index.
2023-02-14 23:21:32,203:INFO:Set up folding strategy.
2023-02-14 23:21:32,203:INFO:Assigning column types.
2023-02-14 23:21:32,205:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 23:21:32,205:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,209:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,217:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,291:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,347:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,348:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:32,442:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:32,442:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,447:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,454:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,524:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,580:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,580:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:32,582:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:32,583:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 23:21:32,587:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,591:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,648:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,695:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,696:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:32,699:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:32,705:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,708:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,767:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,823:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,823:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:32,825:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:32,825:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 23:21:32,833:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,881:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,924:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,926:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:32,928:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:32,938:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:21:32,987:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:21:33,024:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:21:33,025:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:33,027:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:33,027:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 23:21:33,083:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:21:33,118:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:21:33,119:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:33,121:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:33,178:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:21:33,230:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:21:33,232:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:33,235:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:33,235:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 23:21:33,287:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:21:33,328:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:33,331:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:33,396:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:21:33,439:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:33,441:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:33,441:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 23:21:33,534:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:33,536:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:33,627:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:33,631:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:33,632:INFO:Preparing preprocessing pipeline...
2023-02-14 23:21:33,632:INFO:Set up column name cleaning.
2023-02-14 23:21:33,633:INFO:Set up simple imputation.
2023-02-14 23:21:33,695:INFO:Finished creating preprocessing pipeline.
2023-02-14 23:21:33,701:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 23:21:33,701:INFO:Creating final display dataframe.
2023-02-14 23:21:33,820:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              9c4b
2023-02-14 23:21:33,939:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:33,942:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:34,057:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:21:34,059:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:21:34,059:INFO:setup() successfully completed in 1.89s...............
2023-02-14 23:21:34,060:INFO:Initializing compare_models()
2023-02-14 23:21:34,060:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 23:21:34,060:INFO:Checking exceptions
2023-02-14 23:21:34,061:INFO:Preparing display monitor
2023-02-14 23:21:34,089:INFO:Initializing Linear Regression
2023-02-14 23:21:34,090:INFO:Total runtime is 1.6697247823079427e-05 minutes
2023-02-14 23:21:34,093:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:34,093:INFO:Initializing create_model()
2023-02-14 23:21:34,093:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:34,093:INFO:Checking exceptions
2023-02-14 23:21:34,093:INFO:Importing libraries
2023-02-14 23:21:34,093:INFO:Copying training dataset
2023-02-14 23:21:34,096:INFO:Defining folds
2023-02-14 23:21:34,096:INFO:Declaring metric variables
2023-02-14 23:21:34,101:INFO:Importing untrained model
2023-02-14 23:21:34,104:INFO:Linear Regression Imported successfully
2023-02-14 23:21:34,112:INFO:Starting cross validation
2023-02-14 23:21:34,120:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:39,653:INFO:Calculating mean and std
2023-02-14 23:21:39,655:INFO:Creating metrics dataframe
2023-02-14 23:21:39,662:INFO:Uploading results into container
2023-02-14 23:21:39,663:INFO:Uploading model into container now
2023-02-14 23:21:39,663:INFO:_master_model_container: 1
2023-02-14 23:21:39,663:INFO:_display_container: 2
2023-02-14 23:21:39,663:INFO:LinearRegression(n_jobs=-1)
2023-02-14 23:21:39,663:INFO:create_model() successfully completed......................................
2023-02-14 23:21:39,761:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:39,761:INFO:Creating metrics dataframe
2023-02-14 23:21:39,769:INFO:Initializing Lasso Regression
2023-02-14 23:21:39,770:INFO:Total runtime is 0.09467703104019165 minutes
2023-02-14 23:21:39,772:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:39,774:INFO:Initializing create_model()
2023-02-14 23:21:39,774:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:39,774:INFO:Checking exceptions
2023-02-14 23:21:39,774:INFO:Importing libraries
2023-02-14 23:21:39,774:INFO:Copying training dataset
2023-02-14 23:21:39,778:INFO:Defining folds
2023-02-14 23:21:39,778:INFO:Declaring metric variables
2023-02-14 23:21:39,782:INFO:Importing untrained model
2023-02-14 23:21:39,786:INFO:Lasso Regression Imported successfully
2023-02-14 23:21:39,794:INFO:Starting cross validation
2023-02-14 23:21:39,795:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:39,937:INFO:Calculating mean and std
2023-02-14 23:21:39,938:INFO:Creating metrics dataframe
2023-02-14 23:21:39,941:INFO:Uploading results into container
2023-02-14 23:21:39,941:INFO:Uploading model into container now
2023-02-14 23:21:39,942:INFO:_master_model_container: 2
2023-02-14 23:21:39,942:INFO:_display_container: 2
2023-02-14 23:21:39,942:INFO:Lasso(random_state=123)
2023-02-14 23:21:39,942:INFO:create_model() successfully completed......................................
2023-02-14 23:21:40,026:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:40,026:INFO:Creating metrics dataframe
2023-02-14 23:21:40,034:INFO:Initializing Ridge Regression
2023-02-14 23:21:40,034:INFO:Total runtime is 0.09908095598220826 minutes
2023-02-14 23:21:40,038:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:40,038:INFO:Initializing create_model()
2023-02-14 23:21:40,038:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:40,038:INFO:Checking exceptions
2023-02-14 23:21:40,038:INFO:Importing libraries
2023-02-14 23:21:40,038:INFO:Copying training dataset
2023-02-14 23:21:40,040:INFO:Defining folds
2023-02-14 23:21:40,041:INFO:Declaring metric variables
2023-02-14 23:21:40,045:INFO:Importing untrained model
2023-02-14 23:21:40,048:INFO:Ridge Regression Imported successfully
2023-02-14 23:21:40,056:INFO:Starting cross validation
2023-02-14 23:21:40,057:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:40,183:INFO:Calculating mean and std
2023-02-14 23:21:40,184:INFO:Creating metrics dataframe
2023-02-14 23:21:40,186:INFO:Uploading results into container
2023-02-14 23:21:40,187:INFO:Uploading model into container now
2023-02-14 23:21:40,187:INFO:_master_model_container: 3
2023-02-14 23:21:40,187:INFO:_display_container: 2
2023-02-14 23:21:40,187:INFO:Ridge(random_state=123)
2023-02-14 23:21:40,187:INFO:create_model() successfully completed......................................
2023-02-14 23:21:40,273:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:40,274:INFO:Creating metrics dataframe
2023-02-14 23:21:40,281:INFO:Initializing Elastic Net
2023-02-14 23:21:40,281:INFO:Total runtime is 0.1032039761543274 minutes
2023-02-14 23:21:40,285:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:40,286:INFO:Initializing create_model()
2023-02-14 23:21:40,286:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:40,286:INFO:Checking exceptions
2023-02-14 23:21:40,286:INFO:Importing libraries
2023-02-14 23:21:40,286:INFO:Copying training dataset
2023-02-14 23:21:40,291:INFO:Defining folds
2023-02-14 23:21:40,291:INFO:Declaring metric variables
2023-02-14 23:21:40,294:INFO:Importing untrained model
2023-02-14 23:21:40,299:INFO:Elastic Net Imported successfully
2023-02-14 23:21:40,306:INFO:Starting cross validation
2023-02-14 23:21:40,308:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:40,432:INFO:Calculating mean and std
2023-02-14 23:21:40,433:INFO:Creating metrics dataframe
2023-02-14 23:21:40,435:INFO:Uploading results into container
2023-02-14 23:21:40,436:INFO:Uploading model into container now
2023-02-14 23:21:40,436:INFO:_master_model_container: 4
2023-02-14 23:21:40,436:INFO:_display_container: 2
2023-02-14 23:21:40,436:INFO:ElasticNet(random_state=123)
2023-02-14 23:21:40,436:INFO:create_model() successfully completed......................................
2023-02-14 23:21:40,532:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:40,532:INFO:Creating metrics dataframe
2023-02-14 23:21:40,542:INFO:Initializing Least Angle Regression
2023-02-14 23:21:40,542:INFO:Total runtime is 0.10754053990046183 minutes
2023-02-14 23:21:40,547:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:40,547:INFO:Initializing create_model()
2023-02-14 23:21:40,547:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:40,547:INFO:Checking exceptions
2023-02-14 23:21:40,547:INFO:Importing libraries
2023-02-14 23:21:40,547:INFO:Copying training dataset
2023-02-14 23:21:40,549:INFO:Defining folds
2023-02-14 23:21:40,549:INFO:Declaring metric variables
2023-02-14 23:21:40,552:INFO:Importing untrained model
2023-02-14 23:21:40,556:INFO:Least Angle Regression Imported successfully
2023-02-14 23:21:40,563:INFO:Starting cross validation
2023-02-14 23:21:40,564:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:40,602:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:40,612:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:40,620:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:40,629:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:40,642:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:40,649:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:40,658:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:40,668:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:40,675:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:40,681:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:40,695:INFO:Calculating mean and std
2023-02-14 23:21:40,695:INFO:Creating metrics dataframe
2023-02-14 23:21:40,698:INFO:Uploading results into container
2023-02-14 23:21:40,698:INFO:Uploading model into container now
2023-02-14 23:21:40,698:INFO:_master_model_container: 5
2023-02-14 23:21:40,698:INFO:_display_container: 2
2023-02-14 23:21:40,699:INFO:Lars(random_state=123)
2023-02-14 23:21:40,699:INFO:create_model() successfully completed......................................
2023-02-14 23:21:40,785:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:40,786:INFO:Creating metrics dataframe
2023-02-14 23:21:40,797:INFO:Initializing Lasso Least Angle Regression
2023-02-14 23:21:40,798:INFO:Total runtime is 0.1118150273958842 minutes
2023-02-14 23:21:40,801:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:40,801:INFO:Initializing create_model()
2023-02-14 23:21:40,801:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:40,801:INFO:Checking exceptions
2023-02-14 23:21:40,801:INFO:Importing libraries
2023-02-14 23:21:40,801:INFO:Copying training dataset
2023-02-14 23:21:40,801:INFO:Defining folds
2023-02-14 23:21:40,801:INFO:Declaring metric variables
2023-02-14 23:21:40,807:INFO:Importing untrained model
2023-02-14 23:21:40,812:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 23:21:40,817:INFO:Starting cross validation
2023-02-14 23:21:40,820:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:40,852:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:21:40,862:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:21:40,869:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:21:40,876:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:21:40,887:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:21:40,896:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:21:40,904:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:21:40,910:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:21:40,919:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:21:40,929:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:21:40,940:INFO:Calculating mean and std
2023-02-14 23:21:40,941:INFO:Creating metrics dataframe
2023-02-14 23:21:40,943:INFO:Uploading results into container
2023-02-14 23:21:40,944:INFO:Uploading model into container now
2023-02-14 23:21:40,944:INFO:_master_model_container: 6
2023-02-14 23:21:40,945:INFO:_display_container: 2
2023-02-14 23:21:40,945:INFO:LassoLars(random_state=123)
2023-02-14 23:21:40,945:INFO:create_model() successfully completed......................................
2023-02-14 23:21:41,032:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:41,032:INFO:Creating metrics dataframe
2023-02-14 23:21:41,042:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 23:21:41,042:INFO:Total runtime is 0.11587068637212118 minutes
2023-02-14 23:21:41,045:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:41,046:INFO:Initializing create_model()
2023-02-14 23:21:41,046:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:41,046:INFO:Checking exceptions
2023-02-14 23:21:41,046:INFO:Importing libraries
2023-02-14 23:21:41,046:INFO:Copying training dataset
2023-02-14 23:21:41,048:INFO:Defining folds
2023-02-14 23:21:41,049:INFO:Declaring metric variables
2023-02-14 23:21:41,052:INFO:Importing untrained model
2023-02-14 23:21:41,058:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 23:21:41,064:INFO:Starting cross validation
2023-02-14 23:21:41,065:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:41,099:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:41,107:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:41,115:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:41,123:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:41,131:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:41,141:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:41,148:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:41,158:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:41,166:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:41,175:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:21:41,187:INFO:Calculating mean and std
2023-02-14 23:21:41,187:INFO:Creating metrics dataframe
2023-02-14 23:21:41,191:INFO:Uploading results into container
2023-02-14 23:21:41,192:INFO:Uploading model into container now
2023-02-14 23:21:41,192:INFO:_master_model_container: 7
2023-02-14 23:21:41,192:INFO:_display_container: 2
2023-02-14 23:21:41,192:INFO:OrthogonalMatchingPursuit()
2023-02-14 23:21:41,192:INFO:create_model() successfully completed......................................
2023-02-14 23:21:41,287:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:41,287:INFO:Creating metrics dataframe
2023-02-14 23:21:41,299:INFO:Initializing Bayesian Ridge
2023-02-14 23:21:41,299:INFO:Total runtime is 0.12017056544621786 minutes
2023-02-14 23:21:41,305:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:41,305:INFO:Initializing create_model()
2023-02-14 23:21:41,305:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:41,305:INFO:Checking exceptions
2023-02-14 23:21:41,305:INFO:Importing libraries
2023-02-14 23:21:41,305:INFO:Copying training dataset
2023-02-14 23:21:41,310:INFO:Defining folds
2023-02-14 23:21:41,311:INFO:Declaring metric variables
2023-02-14 23:21:41,314:INFO:Importing untrained model
2023-02-14 23:21:41,318:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:21:41,324:INFO:Starting cross validation
2023-02-14 23:21:41,326:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:41,510:INFO:Calculating mean and std
2023-02-14 23:21:41,511:INFO:Creating metrics dataframe
2023-02-14 23:21:41,514:INFO:Uploading results into container
2023-02-14 23:21:41,514:INFO:Uploading model into container now
2023-02-14 23:21:41,515:INFO:_master_model_container: 8
2023-02-14 23:21:41,515:INFO:_display_container: 2
2023-02-14 23:21:41,515:INFO:BayesianRidge()
2023-02-14 23:21:41,515:INFO:create_model() successfully completed......................................
2023-02-14 23:21:41,603:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:41,603:INFO:Creating metrics dataframe
2023-02-14 23:21:41,612:INFO:Initializing Passive Aggressive Regressor
2023-02-14 23:21:41,612:INFO:Total runtime is 0.12537337144215902 minutes
2023-02-14 23:21:41,615:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:41,616:INFO:Initializing create_model()
2023-02-14 23:21:41,616:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:41,616:INFO:Checking exceptions
2023-02-14 23:21:41,616:INFO:Importing libraries
2023-02-14 23:21:41,616:INFO:Copying training dataset
2023-02-14 23:21:41,619:INFO:Defining folds
2023-02-14 23:21:41,619:INFO:Declaring metric variables
2023-02-14 23:21:41,624:INFO:Importing untrained model
2023-02-14 23:21:41,627:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 23:21:41,634:INFO:Starting cross validation
2023-02-14 23:21:41,635:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:41,763:INFO:Calculating mean and std
2023-02-14 23:21:41,763:INFO:Creating metrics dataframe
2023-02-14 23:21:41,766:INFO:Uploading results into container
2023-02-14 23:21:41,767:INFO:Uploading model into container now
2023-02-14 23:21:41,767:INFO:_master_model_container: 9
2023-02-14 23:21:41,767:INFO:_display_container: 2
2023-02-14 23:21:41,768:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-14 23:21:41,768:INFO:create_model() successfully completed......................................
2023-02-14 23:21:41,855:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:41,856:INFO:Creating metrics dataframe
2023-02-14 23:21:41,865:INFO:Initializing Huber Regressor
2023-02-14 23:21:41,866:INFO:Total runtime is 0.12961762348810832 minutes
2023-02-14 23:21:41,870:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:41,871:INFO:Initializing create_model()
2023-02-14 23:21:41,871:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:41,871:INFO:Checking exceptions
2023-02-14 23:21:41,871:INFO:Importing libraries
2023-02-14 23:21:41,871:INFO:Copying training dataset
2023-02-14 23:21:41,874:INFO:Defining folds
2023-02-14 23:21:41,874:INFO:Declaring metric variables
2023-02-14 23:21:41,881:INFO:Importing untrained model
2023-02-14 23:21:41,885:INFO:Huber Regressor Imported successfully
2023-02-14 23:21:41,893:INFO:Starting cross validation
2023-02-14 23:21:41,894:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:41,954:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:21:41,962:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:21:41,967:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:21:41,996:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:21:41,999:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:21:42,008:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:21:42,018:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:21:42,031:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:21:42,043:INFO:Calculating mean and std
2023-02-14 23:21:42,044:INFO:Creating metrics dataframe
2023-02-14 23:21:42,046:INFO:Uploading results into container
2023-02-14 23:21:42,046:INFO:Uploading model into container now
2023-02-14 23:21:42,047:INFO:_master_model_container: 10
2023-02-14 23:21:42,047:INFO:_display_container: 2
2023-02-14 23:21:42,047:INFO:HuberRegressor()
2023-02-14 23:21:42,047:INFO:create_model() successfully completed......................................
2023-02-14 23:21:42,131:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:42,131:INFO:Creating metrics dataframe
2023-02-14 23:21:42,142:INFO:Initializing K Neighbors Regressor
2023-02-14 23:21:42,142:INFO:Total runtime is 0.13420478502909342 minutes
2023-02-14 23:21:42,146:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:42,146:INFO:Initializing create_model()
2023-02-14 23:21:42,146:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:42,147:INFO:Checking exceptions
2023-02-14 23:21:42,147:INFO:Importing libraries
2023-02-14 23:21:42,147:INFO:Copying training dataset
2023-02-14 23:21:42,150:INFO:Defining folds
2023-02-14 23:21:42,150:INFO:Declaring metric variables
2023-02-14 23:21:42,153:INFO:Importing untrained model
2023-02-14 23:21:42,158:INFO:K Neighbors Regressor Imported successfully
2023-02-14 23:21:42,166:INFO:Starting cross validation
2023-02-14 23:21:42,167:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:42,300:INFO:Calculating mean and std
2023-02-14 23:21:42,301:INFO:Creating metrics dataframe
2023-02-14 23:21:42,304:INFO:Uploading results into container
2023-02-14 23:21:42,305:INFO:Uploading model into container now
2023-02-14 23:21:42,306:INFO:_master_model_container: 11
2023-02-14 23:21:42,306:INFO:_display_container: 2
2023-02-14 23:21:42,306:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 23:21:42,307:INFO:create_model() successfully completed......................................
2023-02-14 23:21:42,390:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:42,390:INFO:Creating metrics dataframe
2023-02-14 23:21:42,401:INFO:Initializing Decision Tree Regressor
2023-02-14 23:21:42,401:INFO:Total runtime is 0.13853023052215574 minutes
2023-02-14 23:21:42,406:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:42,406:INFO:Initializing create_model()
2023-02-14 23:21:42,406:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:42,407:INFO:Checking exceptions
2023-02-14 23:21:42,407:INFO:Importing libraries
2023-02-14 23:21:42,407:INFO:Copying training dataset
2023-02-14 23:21:42,410:INFO:Defining folds
2023-02-14 23:21:42,410:INFO:Declaring metric variables
2023-02-14 23:21:42,413:INFO:Importing untrained model
2023-02-14 23:21:42,416:INFO:Decision Tree Regressor Imported successfully
2023-02-14 23:21:42,424:INFO:Starting cross validation
2023-02-14 23:21:42,425:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:42,540:INFO:Calculating mean and std
2023-02-14 23:21:42,540:INFO:Creating metrics dataframe
2023-02-14 23:21:42,540:INFO:Uploading results into container
2023-02-14 23:21:42,540:INFO:Uploading model into container now
2023-02-14 23:21:42,540:INFO:_master_model_container: 12
2023-02-14 23:21:42,540:INFO:_display_container: 2
2023-02-14 23:21:42,540:INFO:DecisionTreeRegressor(random_state=123)
2023-02-14 23:21:42,540:INFO:create_model() successfully completed......................................
2023-02-14 23:21:42,638:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:42,639:INFO:Creating metrics dataframe
2023-02-14 23:21:42,650:INFO:Initializing Random Forest Regressor
2023-02-14 23:21:42,651:INFO:Total runtime is 0.14269767602284747 minutes
2023-02-14 23:21:42,657:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:42,657:INFO:Initializing create_model()
2023-02-14 23:21:42,657:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:42,657:INFO:Checking exceptions
2023-02-14 23:21:42,657:INFO:Importing libraries
2023-02-14 23:21:42,657:INFO:Copying training dataset
2023-02-14 23:21:42,661:INFO:Defining folds
2023-02-14 23:21:42,661:INFO:Declaring metric variables
2023-02-14 23:21:42,664:INFO:Importing untrained model
2023-02-14 23:21:42,668:INFO:Random Forest Regressor Imported successfully
2023-02-14 23:21:42,677:INFO:Starting cross validation
2023-02-14 23:21:42,678:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:43,093:INFO:Calculating mean and std
2023-02-14 23:21:43,094:INFO:Creating metrics dataframe
2023-02-14 23:21:43,096:INFO:Uploading results into container
2023-02-14 23:21:43,096:INFO:Uploading model into container now
2023-02-14 23:21:43,097:INFO:_master_model_container: 13
2023-02-14 23:21:43,097:INFO:_display_container: 2
2023-02-14 23:21:43,097:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-14 23:21:43,097:INFO:create_model() successfully completed......................................
2023-02-14 23:21:43,185:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:43,185:INFO:Creating metrics dataframe
2023-02-14 23:21:43,199:INFO:Initializing Extra Trees Regressor
2023-02-14 23:21:43,199:INFO:Total runtime is 0.1518214186032613 minutes
2023-02-14 23:21:43,203:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:43,204:INFO:Initializing create_model()
2023-02-14 23:21:43,204:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:43,204:INFO:Checking exceptions
2023-02-14 23:21:43,204:INFO:Importing libraries
2023-02-14 23:21:43,204:INFO:Copying training dataset
2023-02-14 23:21:43,208:INFO:Defining folds
2023-02-14 23:21:43,208:INFO:Declaring metric variables
2023-02-14 23:21:43,212:INFO:Importing untrained model
2023-02-14 23:21:43,217:INFO:Extra Trees Regressor Imported successfully
2023-02-14 23:21:43,225:INFO:Starting cross validation
2023-02-14 23:21:43,226:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:43,593:INFO:Calculating mean and std
2023-02-14 23:21:43,594:INFO:Creating metrics dataframe
2023-02-14 23:21:43,596:INFO:Uploading results into container
2023-02-14 23:21:43,597:INFO:Uploading model into container now
2023-02-14 23:21:43,597:INFO:_master_model_container: 14
2023-02-14 23:21:43,597:INFO:_display_container: 2
2023-02-14 23:21:43,598:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-14 23:21:43,598:INFO:create_model() successfully completed......................................
2023-02-14 23:21:43,684:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:43,684:INFO:Creating metrics dataframe
2023-02-14 23:21:43,697:INFO:Initializing AdaBoost Regressor
2023-02-14 23:21:43,698:INFO:Total runtime is 0.16014710664749143 minutes
2023-02-14 23:21:43,701:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:43,701:INFO:Initializing create_model()
2023-02-14 23:21:43,701:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:43,701:INFO:Checking exceptions
2023-02-14 23:21:43,701:INFO:Importing libraries
2023-02-14 23:21:43,702:INFO:Copying training dataset
2023-02-14 23:21:43,706:INFO:Defining folds
2023-02-14 23:21:43,706:INFO:Declaring metric variables
2023-02-14 23:21:43,710:INFO:Importing untrained model
2023-02-14 23:21:43,714:INFO:AdaBoost Regressor Imported successfully
2023-02-14 23:21:43,723:INFO:Starting cross validation
2023-02-14 23:21:43,724:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:43,928:INFO:Calculating mean and std
2023-02-14 23:21:43,929:INFO:Creating metrics dataframe
2023-02-14 23:21:43,932:INFO:Uploading results into container
2023-02-14 23:21:43,933:INFO:Uploading model into container now
2023-02-14 23:21:43,933:INFO:_master_model_container: 15
2023-02-14 23:21:43,933:INFO:_display_container: 2
2023-02-14 23:21:43,933:INFO:AdaBoostRegressor(random_state=123)
2023-02-14 23:21:43,933:INFO:create_model() successfully completed......................................
2023-02-14 23:21:44,020:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:44,021:INFO:Creating metrics dataframe
2023-02-14 23:21:44,030:INFO:Initializing Gradient Boosting Regressor
2023-02-14 23:21:44,030:INFO:Total runtime is 0.16567999521891275 minutes
2023-02-14 23:21:44,033:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:44,033:INFO:Initializing create_model()
2023-02-14 23:21:44,034:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:44,034:INFO:Checking exceptions
2023-02-14 23:21:44,034:INFO:Importing libraries
2023-02-14 23:21:44,034:INFO:Copying training dataset
2023-02-14 23:21:44,038:INFO:Defining folds
2023-02-14 23:21:44,038:INFO:Declaring metric variables
2023-02-14 23:21:44,041:INFO:Importing untrained model
2023-02-14 23:21:44,047:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 23:21:44,055:INFO:Starting cross validation
2023-02-14 23:21:44,056:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:44,230:INFO:Calculating mean and std
2023-02-14 23:21:44,231:INFO:Creating metrics dataframe
2023-02-14 23:21:44,234:INFO:Uploading results into container
2023-02-14 23:21:44,234:INFO:Uploading model into container now
2023-02-14 23:21:44,234:INFO:_master_model_container: 16
2023-02-14 23:21:44,234:INFO:_display_container: 2
2023-02-14 23:21:44,234:INFO:GradientBoostingRegressor(random_state=123)
2023-02-14 23:21:44,234:INFO:create_model() successfully completed......................................
2023-02-14 23:21:44,322:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:44,322:INFO:Creating metrics dataframe
2023-02-14 23:21:44,332:INFO:Initializing Extreme Gradient Boosting
2023-02-14 23:21:44,332:INFO:Total runtime is 0.1707095185915629 minutes
2023-02-14 23:21:44,336:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:44,337:INFO:Initializing create_model()
2023-02-14 23:21:44,337:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:44,337:INFO:Checking exceptions
2023-02-14 23:21:44,337:INFO:Importing libraries
2023-02-14 23:21:44,337:INFO:Copying training dataset
2023-02-14 23:21:44,340:INFO:Defining folds
2023-02-14 23:21:44,340:INFO:Declaring metric variables
2023-02-14 23:21:44,344:INFO:Importing untrained model
2023-02-14 23:21:44,348:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 23:21:44,354:INFO:Starting cross validation
2023-02-14 23:21:44,356:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:44,587:INFO:Calculating mean and std
2023-02-14 23:21:44,589:INFO:Creating metrics dataframe
2023-02-14 23:21:44,591:INFO:Uploading results into container
2023-02-14 23:21:44,591:INFO:Uploading model into container now
2023-02-14 23:21:44,592:INFO:_master_model_container: 17
2023-02-14 23:21:44,592:INFO:_display_container: 2
2023-02-14 23:21:44,592:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-14 23:21:44,592:INFO:create_model() successfully completed......................................
2023-02-14 23:21:44,677:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:44,677:INFO:Creating metrics dataframe
2023-02-14 23:21:44,689:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 23:21:44,689:INFO:Total runtime is 0.1766624053319295 minutes
2023-02-14 23:21:44,692:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:44,692:INFO:Initializing create_model()
2023-02-14 23:21:44,692:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:44,693:INFO:Checking exceptions
2023-02-14 23:21:44,693:INFO:Importing libraries
2023-02-14 23:21:44,693:INFO:Copying training dataset
2023-02-14 23:21:44,695:INFO:Defining folds
2023-02-14 23:21:44,696:INFO:Declaring metric variables
2023-02-14 23:21:44,700:INFO:Importing untrained model
2023-02-14 23:21:44,705:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 23:21:44,711:INFO:Starting cross validation
2023-02-14 23:21:44,712:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:44,899:INFO:Calculating mean and std
2023-02-14 23:21:44,900:INFO:Creating metrics dataframe
2023-02-14 23:21:44,903:INFO:Uploading results into container
2023-02-14 23:21:44,903:INFO:Uploading model into container now
2023-02-14 23:21:44,904:INFO:_master_model_container: 18
2023-02-14 23:21:44,904:INFO:_display_container: 2
2023-02-14 23:21:44,904:INFO:LGBMRegressor(random_state=123)
2023-02-14 23:21:44,904:INFO:create_model() successfully completed......................................
2023-02-14 23:21:44,995:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:44,995:INFO:Creating metrics dataframe
2023-02-14 23:21:45,007:INFO:Initializing Dummy Regressor
2023-02-14 23:21:45,007:INFO:Total runtime is 0.1819628596305847 minutes
2023-02-14 23:21:45,010:INFO:SubProcess create_model() called ==================================
2023-02-14 23:21:45,010:INFO:Initializing create_model()
2023-02-14 23:21:45,010:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CEA6EEA1C0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:45,010:INFO:Checking exceptions
2023-02-14 23:21:45,011:INFO:Importing libraries
2023-02-14 23:21:45,011:INFO:Copying training dataset
2023-02-14 23:21:45,014:INFO:Defining folds
2023-02-14 23:21:45,014:INFO:Declaring metric variables
2023-02-14 23:21:45,019:INFO:Importing untrained model
2023-02-14 23:21:45,024:INFO:Dummy Regressor Imported successfully
2023-02-14 23:21:45,033:INFO:Starting cross validation
2023-02-14 23:21:45,034:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:21:45,164:INFO:Calculating mean and std
2023-02-14 23:21:45,165:INFO:Creating metrics dataframe
2023-02-14 23:21:45,167:INFO:Uploading results into container
2023-02-14 23:21:45,169:INFO:Uploading model into container now
2023-02-14 23:21:45,170:INFO:_master_model_container: 19
2023-02-14 23:21:45,170:INFO:_display_container: 2
2023-02-14 23:21:45,170:INFO:DummyRegressor()
2023-02-14 23:21:45,170:INFO:create_model() successfully completed......................................
2023-02-14 23:21:45,255:INFO:SubProcess create_model() end ==================================
2023-02-14 23:21:45,255:INFO:Creating metrics dataframe
2023-02-14 23:21:45,275:INFO:Initializing create_model()
2023-02-14 23:21:45,275:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CEA60643A0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:21:45,276:INFO:Checking exceptions
2023-02-14 23:21:45,279:INFO:Importing libraries
2023-02-14 23:21:45,279:INFO:Copying training dataset
2023-02-14 23:21:45,281:INFO:Defining folds
2023-02-14 23:21:45,281:INFO:Declaring metric variables
2023-02-14 23:21:45,281:INFO:Importing untrained model
2023-02-14 23:21:45,281:INFO:Declaring custom model
2023-02-14 23:21:45,282:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:21:45,282:INFO:Cross validation set to False
2023-02-14 23:21:45,282:INFO:Fitting Model
2023-02-14 23:21:45,296:INFO:BayesianRidge()
2023-02-14 23:21:45,296:INFO:create_model() successfully completed......................................
2023-02-14 23:21:45,420:INFO:_master_model_container: 19
2023-02-14 23:21:45,421:INFO:_display_container: 2
2023-02-14 23:21:45,421:INFO:BayesianRidge()
2023-02-14 23:21:45,421:INFO:compare_models() successfully completed......................................
2023-02-14 23:26:09,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:26:09,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:26:09,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:26:09,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:26:10,051:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-14 23:26:38,664:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:26:38,664:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:26:38,664:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:26:38,664:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-14 23:26:39,169:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-14 23:26:44,620:INFO:PyCaret RegressionExperiment
2023-02-14 23:26:44,620:INFO:Logging name: reg-default-name
2023-02-14 23:26:44,620:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 23:26:44,620:INFO:version 3.0.0.rc8
2023-02-14 23:26:44,620:INFO:Initializing setup()
2023-02-14 23:26:44,620:INFO:self.USI: cb88
2023-02-14 23:26:44,620:INFO:self._variable_keys: {'data', 'transform_target_param', 'logging_param', 'fold_generator', 'X_test', 'y', 'exp_name_log', 'pipeline', 'n_jobs_param', 'exp_id', 'log_plots_param', 'X_train', 'y_test', 'html_param', 'gpu_param', '_ml_usecase', 'X', 'seed', 'target_param', 'memory', 'gpu_n_jobs_param', 'USI', 'idx', 'fold_groups_param', 'fold_shuffle_param', '_available_plots', 'y_train'}
2023-02-14 23:26:44,620:INFO:Checking environment
2023-02-14 23:26:44,620:INFO:python_version: 3.9.13
2023-02-14 23:26:44,620:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 23:26:44,620:INFO:machine: AMD64
2023-02-14 23:26:44,621:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 23:26:44,627:INFO:Memory: svmem(total=16805040128, available=5056933888, percent=69.9, used=11748106240, free=5056933888)
2023-02-14 23:26:44,627:INFO:Physical Core: 4
2023-02-14 23:26:44,627:INFO:Logical Core: 8
2023-02-14 23:26:44,627:INFO:Checking libraries
2023-02-14 23:26:44,627:INFO:System:
2023-02-14 23:26:44,628:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 23:26:44,628:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 23:26:44,628:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 23:26:44,628:INFO:PyCaret required dependencies:
2023-02-14 23:26:44,628:INFO:                 pip: 23.0
2023-02-14 23:26:44,628:INFO:          setuptools: 58.1.0
2023-02-14 23:26:44,628:INFO:             pycaret: 3.0.0rc8
2023-02-14 23:26:44,628:INFO:             IPython: 8.7.0
2023-02-14 23:26:44,628:INFO:          ipywidgets: 8.0.4
2023-02-14 23:26:44,628:INFO:                tqdm: 4.64.1
2023-02-14 23:26:44,628:INFO:               numpy: 1.22.1
2023-02-14 23:26:44,628:INFO:              pandas: 1.5.2
2023-02-14 23:26:44,628:INFO:              jinja2: 3.1.2
2023-02-14 23:26:44,628:INFO:               scipy: 1.5.4
2023-02-14 23:26:44,628:INFO:              joblib: 1.2.0
2023-02-14 23:26:44,628:INFO:             sklearn: 1.1.3
2023-02-14 23:26:44,628:INFO:                pyod: 1.0.7
2023-02-14 23:26:44,628:INFO:            imblearn: 0.10.1
2023-02-14 23:26:44,628:INFO:   category_encoders: 2.6.0
2023-02-14 23:26:44,628:INFO:            lightgbm: 3.3.4
2023-02-14 23:26:44,629:INFO:               numba: 0.56.4
2023-02-14 23:26:44,629:INFO:            requests: 2.28.1
2023-02-14 23:26:44,629:INFO:          matplotlib: 3.6.2
2023-02-14 23:26:44,629:INFO:          scikitplot: 0.3.7
2023-02-14 23:26:44,629:INFO:         yellowbrick: 1.5
2023-02-14 23:26:44,629:INFO:              plotly: 5.11.0
2023-02-14 23:26:44,629:INFO:             kaleido: 0.2.1
2023-02-14 23:26:44,629:INFO:         statsmodels: 0.13.5
2023-02-14 23:26:44,629:INFO:              sktime: 0.15.1
2023-02-14 23:26:44,629:INFO:               tbats: 1.1.2
2023-02-14 23:26:44,629:INFO:            pmdarima: 2.0.2
2023-02-14 23:26:44,629:INFO:              psutil: 5.9.4
2023-02-14 23:26:44,629:INFO:PyCaret optional dependencies:
2023-02-14 23:26:44,648:INFO:                shap: 0.41.0
2023-02-14 23:26:44,648:INFO:           interpret: 0.3.0
2023-02-14 23:26:44,648:INFO:                umap: Not installed
2023-02-14 23:26:44,648:INFO:    pandas_profiling: 3.6.2
2023-02-14 23:26:44,648:INFO:  explainerdashboard: Not installed
2023-02-14 23:26:44,648:INFO:             autoviz: Not installed
2023-02-14 23:26:44,648:INFO:           fairlearn: Not installed
2023-02-14 23:26:44,648:INFO:             xgboost: 1.7.3
2023-02-14 23:26:44,648:INFO:            catboost: Not installed
2023-02-14 23:26:44,648:INFO:              kmodes: Not installed
2023-02-14 23:26:44,649:INFO:             mlxtend: Not installed
2023-02-14 23:26:44,649:INFO:       statsforecast: Not installed
2023-02-14 23:26:44,649:INFO:        tune_sklearn: Not installed
2023-02-14 23:26:44,649:INFO:                 ray: Not installed
2023-02-14 23:26:44,649:INFO:            hyperopt: Not installed
2023-02-14 23:26:44,649:INFO:              optuna: Not installed
2023-02-14 23:26:44,649:INFO:               skopt: Not installed
2023-02-14 23:26:44,649:INFO:              mlflow: Not installed
2023-02-14 23:26:44,649:INFO:              gradio: Not installed
2023-02-14 23:26:44,649:INFO:             fastapi: Not installed
2023-02-14 23:26:44,649:INFO:             uvicorn: Not installed
2023-02-14 23:26:44,649:INFO:              m2cgen: Not installed
2023-02-14 23:26:44,649:INFO:           evidently: Not installed
2023-02-14 23:26:44,649:INFO:                nltk: 3.8
2023-02-14 23:26:44,649:INFO:            pyLDAvis: Not installed
2023-02-14 23:26:44,649:INFO:              gensim: Not installed
2023-02-14 23:26:44,649:INFO:               spacy: Not installed
2023-02-14 23:26:44,649:INFO:           wordcloud: 1.8.2.2
2023-02-14 23:26:44,649:INFO:            textblob: Not installed
2023-02-14 23:26:44,649:INFO:               fugue: Not installed
2023-02-14 23:26:44,649:INFO:           streamlit: 1.16.0
2023-02-14 23:26:44,649:INFO:             prophet: Not installed
2023-02-14 23:26:44,649:INFO:None
2023-02-14 23:26:44,649:INFO:Set up data.
2023-02-14 23:26:44,656:INFO:Set up train/test split.
2023-02-14 23:26:44,660:INFO:Set up index.
2023-02-14 23:26:44,660:INFO:Set up folding strategy.
2023-02-14 23:26:44,660:INFO:Assigning column types.
2023-02-14 23:26:44,663:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 23:26:44,663:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,669:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,674:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,731:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,771:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,772:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:44,825:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:44,826:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,830:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,832:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,875:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,912:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,912:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:44,915:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:44,915:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 23:26:44,921:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,925:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:26:44,972:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,009:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,010:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:45,013:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:45,016:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,019:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,068:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,107:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,108:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:45,110:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:45,110:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 23:26:45,119:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,169:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,207:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,207:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:45,209:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:45,216:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,260:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,297:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,297:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:45,300:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:45,301:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 23:26:45,353:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,390:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,391:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:45,394:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:45,450:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,490:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,491:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:45,493:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:45,493:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 23:26:45,547:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,587:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:45,590:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:45,664:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:26:45,710:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:45,713:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:45,713:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 23:26:45,810:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:45,813:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:45,912:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:45,914:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:45,915:INFO:Preparing preprocessing pipeline...
2023-02-14 23:26:45,915:INFO:Set up column name cleaning.
2023-02-14 23:26:45,916:INFO:Set up simple imputation.
2023-02-14 23:26:45,932:INFO:Finished creating preprocessing pipeline.
2023-02-14 23:26:45,936:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 23:26:45,936:INFO:Creating final display dataframe.
2023-02-14 23:26:46,055:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              cb88
2023-02-14 23:26:46,174:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:46,177:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:46,322:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:26:46,326:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:26:46,327:INFO:setup() successfully completed in 1.71s...............
2023-02-14 23:26:46,327:INFO:Initializing compare_models()
2023-02-14 23:26:46,327:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 23:26:46,327:INFO:Checking exceptions
2023-02-14 23:26:46,329:INFO:Preparing display monitor
2023-02-14 23:26:46,354:INFO:Initializing Linear Regression
2023-02-14 23:26:46,354:INFO:Total runtime is 0.0 minutes
2023-02-14 23:26:46,359:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:46,359:INFO:Initializing create_model()
2023-02-14 23:26:46,359:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:46,359:INFO:Checking exceptions
2023-02-14 23:26:46,359:INFO:Importing libraries
2023-02-14 23:26:46,360:INFO:Copying training dataset
2023-02-14 23:26:46,361:INFO:Defining folds
2023-02-14 23:26:46,363:INFO:Declaring metric variables
2023-02-14 23:26:46,365:INFO:Importing untrained model
2023-02-14 23:26:46,367:INFO:Linear Regression Imported successfully
2023-02-14 23:26:46,376:INFO:Starting cross validation
2023-02-14 23:26:46,381:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:50,388:INFO:Calculating mean and std
2023-02-14 23:26:50,389:INFO:Creating metrics dataframe
2023-02-14 23:26:50,392:INFO:Uploading results into container
2023-02-14 23:26:50,393:INFO:Uploading model into container now
2023-02-14 23:26:50,393:INFO:_master_model_container: 1
2023-02-14 23:26:50,393:INFO:_display_container: 2
2023-02-14 23:26:50,393:INFO:LinearRegression(n_jobs=-1)
2023-02-14 23:26:50,394:INFO:create_model() successfully completed......................................
2023-02-14 23:26:50,484:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:50,485:INFO:Creating metrics dataframe
2023-02-14 23:26:50,493:INFO:Initializing Lasso Regression
2023-02-14 23:26:50,493:INFO:Total runtime is 0.0689790407816569 minutes
2023-02-14 23:26:50,497:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:50,497:INFO:Initializing create_model()
2023-02-14 23:26:50,497:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:50,497:INFO:Checking exceptions
2023-02-14 23:26:50,497:INFO:Importing libraries
2023-02-14 23:26:50,497:INFO:Copying training dataset
2023-02-14 23:26:50,501:INFO:Defining folds
2023-02-14 23:26:50,501:INFO:Declaring metric variables
2023-02-14 23:26:50,505:INFO:Importing untrained model
2023-02-14 23:26:50,511:INFO:Lasso Regression Imported successfully
2023-02-14 23:26:50,519:INFO:Starting cross validation
2023-02-14 23:26:50,520:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:50,648:INFO:Calculating mean and std
2023-02-14 23:26:50,651:INFO:Creating metrics dataframe
2023-02-14 23:26:50,653:INFO:Uploading results into container
2023-02-14 23:26:50,654:INFO:Uploading model into container now
2023-02-14 23:26:50,655:INFO:_master_model_container: 2
2023-02-14 23:26:50,655:INFO:_display_container: 2
2023-02-14 23:26:50,655:INFO:Lasso(random_state=123)
2023-02-14 23:26:50,655:INFO:create_model() successfully completed......................................
2023-02-14 23:26:50,737:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:50,737:INFO:Creating metrics dataframe
2023-02-14 23:26:50,743:INFO:Initializing Ridge Regression
2023-02-14 23:26:50,743:INFO:Total runtime is 0.07314101854960123 minutes
2023-02-14 23:26:50,747:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:50,747:INFO:Initializing create_model()
2023-02-14 23:26:50,747:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:50,747:INFO:Checking exceptions
2023-02-14 23:26:50,747:INFO:Importing libraries
2023-02-14 23:26:50,747:INFO:Copying training dataset
2023-02-14 23:26:50,750:INFO:Defining folds
2023-02-14 23:26:50,750:INFO:Declaring metric variables
2023-02-14 23:26:50,754:INFO:Importing untrained model
2023-02-14 23:26:50,756:INFO:Ridge Regression Imported successfully
2023-02-14 23:26:50,766:INFO:Starting cross validation
2023-02-14 23:26:50,767:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:50,928:INFO:Calculating mean and std
2023-02-14 23:26:50,929:INFO:Creating metrics dataframe
2023-02-14 23:26:50,931:INFO:Uploading results into container
2023-02-14 23:26:50,931:INFO:Uploading model into container now
2023-02-14 23:26:50,933:INFO:_master_model_container: 3
2023-02-14 23:26:50,933:INFO:_display_container: 2
2023-02-14 23:26:50,934:INFO:Ridge(random_state=123)
2023-02-14 23:26:50,934:INFO:create_model() successfully completed......................................
2023-02-14 23:26:51,014:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:51,014:INFO:Creating metrics dataframe
2023-02-14 23:26:51,023:INFO:Initializing Elastic Net
2023-02-14 23:26:51,024:INFO:Total runtime is 0.07782093286514281 minutes
2023-02-14 23:26:51,026:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:51,026:INFO:Initializing create_model()
2023-02-14 23:26:51,027:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:51,027:INFO:Checking exceptions
2023-02-14 23:26:51,027:INFO:Importing libraries
2023-02-14 23:26:51,027:INFO:Copying training dataset
2023-02-14 23:26:51,028:INFO:Defining folds
2023-02-14 23:26:51,028:INFO:Declaring metric variables
2023-02-14 23:26:51,031:INFO:Importing untrained model
2023-02-14 23:26:51,035:INFO:Elastic Net Imported successfully
2023-02-14 23:26:51,043:INFO:Starting cross validation
2023-02-14 23:26:51,044:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:51,164:INFO:Calculating mean and std
2023-02-14 23:26:51,164:INFO:Creating metrics dataframe
2023-02-14 23:26:51,170:INFO:Uploading results into container
2023-02-14 23:26:51,170:INFO:Uploading model into container now
2023-02-14 23:26:51,171:INFO:_master_model_container: 4
2023-02-14 23:26:51,171:INFO:_display_container: 2
2023-02-14 23:26:51,171:INFO:ElasticNet(random_state=123)
2023-02-14 23:26:51,171:INFO:create_model() successfully completed......................................
2023-02-14 23:26:51,254:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:51,254:INFO:Creating metrics dataframe
2023-02-14 23:26:51,261:INFO:Initializing Least Angle Regression
2023-02-14 23:26:51,261:INFO:Total runtime is 0.08177114725112915 minutes
2023-02-14 23:26:51,265:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:51,265:INFO:Initializing create_model()
2023-02-14 23:26:51,265:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:51,265:INFO:Checking exceptions
2023-02-14 23:26:51,265:INFO:Importing libraries
2023-02-14 23:26:51,265:INFO:Copying training dataset
2023-02-14 23:26:51,269:INFO:Defining folds
2023-02-14 23:26:51,269:INFO:Declaring metric variables
2023-02-14 23:26:51,272:INFO:Importing untrained model
2023-02-14 23:26:51,275:INFO:Least Angle Regression Imported successfully
2023-02-14 23:26:51,285:INFO:Starting cross validation
2023-02-14 23:26:51,286:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:51,324:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,332:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,341:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,351:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,359:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,364:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,375:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,385:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,387:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,394:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,408:INFO:Calculating mean and std
2023-02-14 23:26:51,408:INFO:Creating metrics dataframe
2023-02-14 23:26:51,411:INFO:Uploading results into container
2023-02-14 23:26:51,411:INFO:Uploading model into container now
2023-02-14 23:26:51,411:INFO:_master_model_container: 5
2023-02-14 23:26:51,411:INFO:_display_container: 2
2023-02-14 23:26:51,412:INFO:Lars(random_state=123)
2023-02-14 23:26:51,412:INFO:create_model() successfully completed......................................
2023-02-14 23:26:51,492:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:51,492:INFO:Creating metrics dataframe
2023-02-14 23:26:51,502:INFO:Initializing Lasso Least Angle Regression
2023-02-14 23:26:51,502:INFO:Total runtime is 0.08579734563827514 minutes
2023-02-14 23:26:51,505:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:51,506:INFO:Initializing create_model()
2023-02-14 23:26:51,506:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:51,506:INFO:Checking exceptions
2023-02-14 23:26:51,506:INFO:Importing libraries
2023-02-14 23:26:51,506:INFO:Copying training dataset
2023-02-14 23:26:51,509:INFO:Defining folds
2023-02-14 23:26:51,509:INFO:Declaring metric variables
2023-02-14 23:26:51,511:INFO:Importing untrained model
2023-02-14 23:26:51,513:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 23:26:51,523:INFO:Starting cross validation
2023-02-14 23:26:51,524:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:51,564:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:26:51,573:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:26:51,580:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:26:51,587:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:26:51,596:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:26:51,607:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:26:51,615:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:26:51,622:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:26:51,634:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:26:51,638:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:26:51,651:INFO:Calculating mean and std
2023-02-14 23:26:51,651:INFO:Creating metrics dataframe
2023-02-14 23:26:51,654:INFO:Uploading results into container
2023-02-14 23:26:51,655:INFO:Uploading model into container now
2023-02-14 23:26:51,656:INFO:_master_model_container: 6
2023-02-14 23:26:51,656:INFO:_display_container: 2
2023-02-14 23:26:51,656:INFO:LassoLars(random_state=123)
2023-02-14 23:26:51,656:INFO:create_model() successfully completed......................................
2023-02-14 23:26:51,737:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:51,737:INFO:Creating metrics dataframe
2023-02-14 23:26:51,745:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 23:26:51,745:INFO:Total runtime is 0.08984519243240356 minutes
2023-02-14 23:26:51,748:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:51,748:INFO:Initializing create_model()
2023-02-14 23:26:51,748:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:51,748:INFO:Checking exceptions
2023-02-14 23:26:51,748:INFO:Importing libraries
2023-02-14 23:26:51,749:INFO:Copying training dataset
2023-02-14 23:26:51,752:INFO:Defining folds
2023-02-14 23:26:51,752:INFO:Declaring metric variables
2023-02-14 23:26:51,757:INFO:Importing untrained model
2023-02-14 23:26:51,759:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 23:26:51,767:INFO:Starting cross validation
2023-02-14 23:26:51,768:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:51,804:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,811:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,822:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,826:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,837:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,844:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,853:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,863:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,870:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,875:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:26:51,888:INFO:Calculating mean and std
2023-02-14 23:26:51,889:INFO:Creating metrics dataframe
2023-02-14 23:26:51,891:INFO:Uploading results into container
2023-02-14 23:26:51,892:INFO:Uploading model into container now
2023-02-14 23:26:51,892:INFO:_master_model_container: 7
2023-02-14 23:26:51,892:INFO:_display_container: 2
2023-02-14 23:26:51,892:INFO:OrthogonalMatchingPursuit()
2023-02-14 23:26:51,892:INFO:create_model() successfully completed......................................
2023-02-14 23:26:51,977:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:51,977:INFO:Creating metrics dataframe
2023-02-14 23:26:51,987:INFO:Initializing Bayesian Ridge
2023-02-14 23:26:51,988:INFO:Total runtime is 0.0938939611117045 minutes
2023-02-14 23:26:51,991:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:51,991:INFO:Initializing create_model()
2023-02-14 23:26:51,991:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:51,991:INFO:Checking exceptions
2023-02-14 23:26:51,992:INFO:Importing libraries
2023-02-14 23:26:51,992:INFO:Copying training dataset
2023-02-14 23:26:51,993:INFO:Defining folds
2023-02-14 23:26:51,993:INFO:Declaring metric variables
2023-02-14 23:26:51,996:INFO:Importing untrained model
2023-02-14 23:26:52,000:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:26:52,008:INFO:Starting cross validation
2023-02-14 23:26:52,008:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:52,130:INFO:Calculating mean and std
2023-02-14 23:26:52,130:INFO:Creating metrics dataframe
2023-02-14 23:26:52,134:INFO:Uploading results into container
2023-02-14 23:26:52,135:INFO:Uploading model into container now
2023-02-14 23:26:52,135:INFO:_master_model_container: 8
2023-02-14 23:26:52,135:INFO:_display_container: 2
2023-02-14 23:26:52,136:INFO:BayesianRidge()
2023-02-14 23:26:52,136:INFO:create_model() successfully completed......................................
2023-02-14 23:26:52,216:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:52,216:INFO:Creating metrics dataframe
2023-02-14 23:26:52,226:INFO:Initializing Passive Aggressive Regressor
2023-02-14 23:26:52,226:INFO:Total runtime is 0.09785311619440715 minutes
2023-02-14 23:26:52,229:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:52,229:INFO:Initializing create_model()
2023-02-14 23:26:52,229:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:52,229:INFO:Checking exceptions
2023-02-14 23:26:52,229:INFO:Importing libraries
2023-02-14 23:26:52,229:INFO:Copying training dataset
2023-02-14 23:26:52,231:INFO:Defining folds
2023-02-14 23:26:52,231:INFO:Declaring metric variables
2023-02-14 23:26:52,236:INFO:Importing untrained model
2023-02-14 23:26:52,240:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 23:26:52,248:INFO:Starting cross validation
2023-02-14 23:26:52,250:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:52,370:INFO:Calculating mean and std
2023-02-14 23:26:52,370:INFO:Creating metrics dataframe
2023-02-14 23:26:52,373:INFO:Uploading results into container
2023-02-14 23:26:52,373:INFO:Uploading model into container now
2023-02-14 23:26:52,374:INFO:_master_model_container: 9
2023-02-14 23:26:52,374:INFO:_display_container: 2
2023-02-14 23:26:52,374:INFO:PassiveAggressiveRegressor(random_state=123)
2023-02-14 23:26:52,374:INFO:create_model() successfully completed......................................
2023-02-14 23:26:52,457:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:52,457:INFO:Creating metrics dataframe
2023-02-14 23:26:52,469:INFO:Initializing Huber Regressor
2023-02-14 23:26:52,469:INFO:Total runtime is 0.10190991163253785 minutes
2023-02-14 23:26:52,474:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:52,474:INFO:Initializing create_model()
2023-02-14 23:26:52,474:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:52,474:INFO:Checking exceptions
2023-02-14 23:26:52,474:INFO:Importing libraries
2023-02-14 23:26:52,474:INFO:Copying training dataset
2023-02-14 23:26:52,477:INFO:Defining folds
2023-02-14 23:26:52,477:INFO:Declaring metric variables
2023-02-14 23:26:52,482:INFO:Importing untrained model
2023-02-14 23:26:52,487:INFO:Huber Regressor Imported successfully
2023-02-14 23:26:52,501:INFO:Starting cross validation
2023-02-14 23:26:52,502:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:52,568:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:26:52,573:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:26:52,588:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:26:52,606:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:26:52,623:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:26:52,629:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:26:52,637:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:26:52,646:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:26:52,657:INFO:Calculating mean and std
2023-02-14 23:26:52,657:INFO:Creating metrics dataframe
2023-02-14 23:26:52,660:INFO:Uploading results into container
2023-02-14 23:26:52,660:INFO:Uploading model into container now
2023-02-14 23:26:52,661:INFO:_master_model_container: 10
2023-02-14 23:26:52,661:INFO:_display_container: 2
2023-02-14 23:26:52,661:INFO:HuberRegressor()
2023-02-14 23:26:52,661:INFO:create_model() successfully completed......................................
2023-02-14 23:26:52,742:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:52,742:INFO:Creating metrics dataframe
2023-02-14 23:26:52,751:INFO:Initializing K Neighbors Regressor
2023-02-14 23:26:52,751:INFO:Total runtime is 0.10660430192947389 minutes
2023-02-14 23:26:52,754:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:52,755:INFO:Initializing create_model()
2023-02-14 23:26:52,755:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:52,755:INFO:Checking exceptions
2023-02-14 23:26:52,755:INFO:Importing libraries
2023-02-14 23:26:52,755:INFO:Copying training dataset
2023-02-14 23:26:52,757:INFO:Defining folds
2023-02-14 23:26:52,757:INFO:Declaring metric variables
2023-02-14 23:26:52,760:INFO:Importing untrained model
2023-02-14 23:26:52,763:INFO:K Neighbors Regressor Imported successfully
2023-02-14 23:26:52,774:INFO:Starting cross validation
2023-02-14 23:26:52,775:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:52,916:INFO:Calculating mean and std
2023-02-14 23:26:52,917:INFO:Creating metrics dataframe
2023-02-14 23:26:52,919:INFO:Uploading results into container
2023-02-14 23:26:52,920:INFO:Uploading model into container now
2023-02-14 23:26:52,920:INFO:_master_model_container: 11
2023-02-14 23:26:52,921:INFO:_display_container: 2
2023-02-14 23:26:52,921:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 23:26:52,921:INFO:create_model() successfully completed......................................
2023-02-14 23:26:53,003:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:53,004:INFO:Creating metrics dataframe
2023-02-14 23:26:53,014:INFO:Initializing Decision Tree Regressor
2023-02-14 23:26:53,014:INFO:Total runtime is 0.11098992029825847 minutes
2023-02-14 23:26:53,019:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:53,019:INFO:Initializing create_model()
2023-02-14 23:26:53,019:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:53,020:INFO:Checking exceptions
2023-02-14 23:26:53,020:INFO:Importing libraries
2023-02-14 23:26:53,020:INFO:Copying training dataset
2023-02-14 23:26:53,022:INFO:Defining folds
2023-02-14 23:26:53,022:INFO:Declaring metric variables
2023-02-14 23:26:53,025:INFO:Importing untrained model
2023-02-14 23:26:53,027:INFO:Decision Tree Regressor Imported successfully
2023-02-14 23:26:53,037:INFO:Starting cross validation
2023-02-14 23:26:53,038:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:53,162:INFO:Calculating mean and std
2023-02-14 23:26:53,162:INFO:Creating metrics dataframe
2023-02-14 23:26:53,167:INFO:Uploading results into container
2023-02-14 23:26:53,168:INFO:Uploading model into container now
2023-02-14 23:26:53,168:INFO:_master_model_container: 12
2023-02-14 23:26:53,168:INFO:_display_container: 2
2023-02-14 23:26:53,169:INFO:DecisionTreeRegressor(random_state=123)
2023-02-14 23:26:53,169:INFO:create_model() successfully completed......................................
2023-02-14 23:26:53,253:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:53,253:INFO:Creating metrics dataframe
2023-02-14 23:26:53,261:INFO:Initializing Random Forest Regressor
2023-02-14 23:26:53,261:INFO:Total runtime is 0.11510763963063558 minutes
2023-02-14 23:26:53,266:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:53,267:INFO:Initializing create_model()
2023-02-14 23:26:53,267:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:53,267:INFO:Checking exceptions
2023-02-14 23:26:53,267:INFO:Importing libraries
2023-02-14 23:26:53,267:INFO:Copying training dataset
2023-02-14 23:26:53,269:INFO:Defining folds
2023-02-14 23:26:53,269:INFO:Declaring metric variables
2023-02-14 23:26:53,271:INFO:Importing untrained model
2023-02-14 23:26:53,275:INFO:Random Forest Regressor Imported successfully
2023-02-14 23:26:53,284:INFO:Starting cross validation
2023-02-14 23:26:53,285:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:53,712:INFO:Calculating mean and std
2023-02-14 23:26:53,714:INFO:Creating metrics dataframe
2023-02-14 23:26:53,717:INFO:Uploading results into container
2023-02-14 23:26:53,718:INFO:Uploading model into container now
2023-02-14 23:26:53,718:INFO:_master_model_container: 13
2023-02-14 23:26:53,718:INFO:_display_container: 2
2023-02-14 23:26:53,718:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-02-14 23:26:53,719:INFO:create_model() successfully completed......................................
2023-02-14 23:26:53,800:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:53,800:INFO:Creating metrics dataframe
2023-02-14 23:26:53,809:INFO:Initializing Extra Trees Regressor
2023-02-14 23:26:53,809:INFO:Total runtime is 0.124244757493337 minutes
2023-02-14 23:26:53,812:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:53,812:INFO:Initializing create_model()
2023-02-14 23:26:53,813:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:53,813:INFO:Checking exceptions
2023-02-14 23:26:53,813:INFO:Importing libraries
2023-02-14 23:26:53,813:INFO:Copying training dataset
2023-02-14 23:26:53,817:INFO:Defining folds
2023-02-14 23:26:53,817:INFO:Declaring metric variables
2023-02-14 23:26:53,820:INFO:Importing untrained model
2023-02-14 23:26:53,823:INFO:Extra Trees Regressor Imported successfully
2023-02-14 23:26:53,831:INFO:Starting cross validation
2023-02-14 23:26:53,832:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:54,171:INFO:Calculating mean and std
2023-02-14 23:26:54,172:INFO:Creating metrics dataframe
2023-02-14 23:26:54,174:INFO:Uploading results into container
2023-02-14 23:26:54,175:INFO:Uploading model into container now
2023-02-14 23:26:54,175:INFO:_master_model_container: 14
2023-02-14 23:26:54,175:INFO:_display_container: 2
2023-02-14 23:26:54,176:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-02-14 23:26:54,176:INFO:create_model() successfully completed......................................
2023-02-14 23:26:54,257:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:54,257:INFO:Creating metrics dataframe
2023-02-14 23:26:54,269:INFO:Initializing AdaBoost Regressor
2023-02-14 23:26:54,270:INFO:Total runtime is 0.13193249702453613 minutes
2023-02-14 23:26:54,273:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:54,273:INFO:Initializing create_model()
2023-02-14 23:26:54,273:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:54,273:INFO:Checking exceptions
2023-02-14 23:26:54,274:INFO:Importing libraries
2023-02-14 23:26:54,274:INFO:Copying training dataset
2023-02-14 23:26:54,276:INFO:Defining folds
2023-02-14 23:26:54,276:INFO:Declaring metric variables
2023-02-14 23:26:54,280:INFO:Importing untrained model
2023-02-14 23:26:54,285:INFO:AdaBoost Regressor Imported successfully
2023-02-14 23:26:54,295:INFO:Starting cross validation
2023-02-14 23:26:54,296:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:54,521:INFO:Calculating mean and std
2023-02-14 23:26:54,522:INFO:Creating metrics dataframe
2023-02-14 23:26:54,524:INFO:Uploading results into container
2023-02-14 23:26:54,525:INFO:Uploading model into container now
2023-02-14 23:26:54,525:INFO:_master_model_container: 15
2023-02-14 23:26:54,525:INFO:_display_container: 2
2023-02-14 23:26:54,525:INFO:AdaBoostRegressor(random_state=123)
2023-02-14 23:26:54,525:INFO:create_model() successfully completed......................................
2023-02-14 23:26:54,607:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:54,607:INFO:Creating metrics dataframe
2023-02-14 23:26:54,620:INFO:Initializing Gradient Boosting Regressor
2023-02-14 23:26:54,620:INFO:Total runtime is 0.13776237964630128 minutes
2023-02-14 23:26:54,624:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:54,624:INFO:Initializing create_model()
2023-02-14 23:26:54,624:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:54,624:INFO:Checking exceptions
2023-02-14 23:26:54,624:INFO:Importing libraries
2023-02-14 23:26:54,625:INFO:Copying training dataset
2023-02-14 23:26:54,628:INFO:Defining folds
2023-02-14 23:26:54,628:INFO:Declaring metric variables
2023-02-14 23:26:54,632:INFO:Importing untrained model
2023-02-14 23:26:54,636:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 23:26:54,645:INFO:Starting cross validation
2023-02-14 23:26:54,648:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:54,849:INFO:Calculating mean and std
2023-02-14 23:26:54,849:INFO:Creating metrics dataframe
2023-02-14 23:26:54,852:INFO:Uploading results into container
2023-02-14 23:26:54,853:INFO:Uploading model into container now
2023-02-14 23:26:54,853:INFO:_master_model_container: 16
2023-02-14 23:26:54,853:INFO:_display_container: 2
2023-02-14 23:26:54,853:INFO:GradientBoostingRegressor(random_state=123)
2023-02-14 23:26:54,853:INFO:create_model() successfully completed......................................
2023-02-14 23:26:54,935:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:54,935:INFO:Creating metrics dataframe
2023-02-14 23:26:54,945:INFO:Initializing Extreme Gradient Boosting
2023-02-14 23:26:54,946:INFO:Total runtime is 0.143183437983195 minutes
2023-02-14 23:26:54,949:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:54,950:INFO:Initializing create_model()
2023-02-14 23:26:54,950:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:54,950:INFO:Checking exceptions
2023-02-14 23:26:54,950:INFO:Importing libraries
2023-02-14 23:26:54,950:INFO:Copying training dataset
2023-02-14 23:26:54,954:INFO:Defining folds
2023-02-14 23:26:54,954:INFO:Declaring metric variables
2023-02-14 23:26:54,957:INFO:Importing untrained model
2023-02-14 23:26:54,960:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 23:26:54,970:INFO:Starting cross validation
2023-02-14 23:26:54,971:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:55,181:INFO:Calculating mean and std
2023-02-14 23:26:55,182:INFO:Creating metrics dataframe
2023-02-14 23:26:55,184:INFO:Uploading results into container
2023-02-14 23:26:55,185:INFO:Uploading model into container now
2023-02-14 23:26:55,185:INFO:_master_model_container: 17
2023-02-14 23:26:55,185:INFO:_display_container: 2
2023-02-14 23:26:55,186:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-02-14 23:26:55,186:INFO:create_model() successfully completed......................................
2023-02-14 23:26:55,263:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:55,263:INFO:Creating metrics dataframe
2023-02-14 23:26:55,274:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 23:26:55,274:INFO:Total runtime is 0.14866194725036622 minutes
2023-02-14 23:26:55,277:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:55,277:INFO:Initializing create_model()
2023-02-14 23:26:55,277:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:55,277:INFO:Checking exceptions
2023-02-14 23:26:55,277:INFO:Importing libraries
2023-02-14 23:26:55,277:INFO:Copying training dataset
2023-02-14 23:26:55,281:INFO:Defining folds
2023-02-14 23:26:55,281:INFO:Declaring metric variables
2023-02-14 23:26:55,285:INFO:Importing untrained model
2023-02-14 23:26:55,288:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 23:26:55,295:INFO:Starting cross validation
2023-02-14 23:26:55,296:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:55,472:INFO:Calculating mean and std
2023-02-14 23:26:55,472:INFO:Creating metrics dataframe
2023-02-14 23:26:55,475:INFO:Uploading results into container
2023-02-14 23:26:55,475:INFO:Uploading model into container now
2023-02-14 23:26:55,475:INFO:_master_model_container: 18
2023-02-14 23:26:55,476:INFO:_display_container: 2
2023-02-14 23:26:55,476:INFO:LGBMRegressor(random_state=123)
2023-02-14 23:26:55,476:INFO:create_model() successfully completed......................................
2023-02-14 23:26:55,566:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:55,566:INFO:Creating metrics dataframe
2023-02-14 23:26:55,577:INFO:Initializing Dummy Regressor
2023-02-14 23:26:55,577:INFO:Total runtime is 0.15370288689931233 minutes
2023-02-14 23:26:55,581:INFO:SubProcess create_model() called ==================================
2023-02-14 23:26:55,581:INFO:Initializing create_model()
2023-02-14 23:26:55,582:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114E80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:55,582:INFO:Checking exceptions
2023-02-14 23:26:55,582:INFO:Importing libraries
2023-02-14 23:26:55,582:INFO:Copying training dataset
2023-02-14 23:26:55,585:INFO:Defining folds
2023-02-14 23:26:55,585:INFO:Declaring metric variables
2023-02-14 23:26:55,588:INFO:Importing untrained model
2023-02-14 23:26:55,591:INFO:Dummy Regressor Imported successfully
2023-02-14 23:26:55,599:INFO:Starting cross validation
2023-02-14 23:26:55,601:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:26:55,732:INFO:Calculating mean and std
2023-02-14 23:26:55,732:INFO:Creating metrics dataframe
2023-02-14 23:26:55,735:INFO:Uploading results into container
2023-02-14 23:26:55,735:INFO:Uploading model into container now
2023-02-14 23:26:55,735:INFO:_master_model_container: 19
2023-02-14 23:26:55,735:INFO:_display_container: 2
2023-02-14 23:26:55,735:INFO:DummyRegressor()
2023-02-14 23:26:55,735:INFO:create_model() successfully completed......................................
2023-02-14 23:26:55,818:INFO:SubProcess create_model() end ==================================
2023-02-14 23:26:55,818:INFO:Creating metrics dataframe
2023-02-14 23:26:55,839:INFO:Initializing create_model()
2023-02-14 23:26:55,839:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158928ED30>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:26:55,839:INFO:Checking exceptions
2023-02-14 23:26:55,840:INFO:Importing libraries
2023-02-14 23:26:55,842:INFO:Copying training dataset
2023-02-14 23:26:55,843:INFO:Defining folds
2023-02-14 23:26:55,843:INFO:Declaring metric variables
2023-02-14 23:26:55,843:INFO:Importing untrained model
2023-02-14 23:26:55,843:INFO:Declaring custom model
2023-02-14 23:26:55,844:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:26:55,844:INFO:Cross validation set to False
2023-02-14 23:26:55,844:INFO:Fitting Model
2023-02-14 23:26:55,860:INFO:BayesianRidge()
2023-02-14 23:26:55,860:INFO:create_model() successfully completed......................................
2023-02-14 23:26:55,973:INFO:_master_model_container: 19
2023-02-14 23:26:55,973:INFO:_display_container: 2
2023-02-14 23:26:55,973:INFO:BayesianRidge()
2023-02-14 23:26:55,974:INFO:compare_models() successfully completed......................................
2023-02-14 23:27:14,622:INFO:PyCaret RegressionExperiment
2023-02-14 23:27:14,622:INFO:Logging name: reg-default-name
2023-02-14 23:27:14,622:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 23:27:14,622:INFO:version 3.0.0.rc8
2023-02-14 23:27:14,622:INFO:Initializing setup()
2023-02-14 23:27:14,622:INFO:self.USI: 1b36
2023-02-14 23:27:14,622:INFO:self._variable_keys: {'data', 'transform_target_param', 'logging_param', 'fold_generator', 'X_test', 'y', 'exp_name_log', 'pipeline', 'n_jobs_param', 'exp_id', 'log_plots_param', 'X_train', 'y_test', 'html_param', 'gpu_param', '_ml_usecase', 'X', 'seed', 'target_param', 'memory', 'gpu_n_jobs_param', 'USI', 'idx', 'fold_groups_param', 'fold_shuffle_param', '_available_plots', 'y_train'}
2023-02-14 23:27:14,622:INFO:Checking environment
2023-02-14 23:27:14,623:INFO:python_version: 3.9.13
2023-02-14 23:27:14,623:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 23:27:14,623:INFO:machine: AMD64
2023-02-14 23:27:14,623:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 23:27:14,630:INFO:Memory: svmem(total=16805040128, available=4233842688, percent=74.8, used=12571197440, free=4233842688)
2023-02-14 23:27:14,630:INFO:Physical Core: 4
2023-02-14 23:27:14,630:INFO:Logical Core: 8
2023-02-14 23:27:14,630:INFO:Checking libraries
2023-02-14 23:27:14,630:INFO:System:
2023-02-14 23:27:14,630:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 23:27:14,630:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 23:27:14,630:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 23:27:14,630:INFO:PyCaret required dependencies:
2023-02-14 23:27:14,630:INFO:                 pip: 23.0
2023-02-14 23:27:14,630:INFO:          setuptools: 58.1.0
2023-02-14 23:27:14,630:INFO:             pycaret: 3.0.0rc8
2023-02-14 23:27:14,630:INFO:             IPython: 8.7.0
2023-02-14 23:27:14,630:INFO:          ipywidgets: 8.0.4
2023-02-14 23:27:14,631:INFO:                tqdm: 4.64.1
2023-02-14 23:27:14,631:INFO:               numpy: 1.22.1
2023-02-14 23:27:14,631:INFO:              pandas: 1.5.2
2023-02-14 23:27:14,631:INFO:              jinja2: 3.1.2
2023-02-14 23:27:14,631:INFO:               scipy: 1.5.4
2023-02-14 23:27:14,631:INFO:              joblib: 1.2.0
2023-02-14 23:27:14,631:INFO:             sklearn: 1.1.3
2023-02-14 23:27:14,631:INFO:                pyod: 1.0.7
2023-02-14 23:27:14,631:INFO:            imblearn: 0.10.1
2023-02-14 23:27:14,631:INFO:   category_encoders: 2.6.0
2023-02-14 23:27:14,631:INFO:            lightgbm: 3.3.4
2023-02-14 23:27:14,631:INFO:               numba: 0.56.4
2023-02-14 23:27:14,631:INFO:            requests: 2.28.1
2023-02-14 23:27:14,631:INFO:          matplotlib: 3.6.2
2023-02-14 23:27:14,631:INFO:          scikitplot: 0.3.7
2023-02-14 23:27:14,631:INFO:         yellowbrick: 1.5
2023-02-14 23:27:14,631:INFO:              plotly: 5.11.0
2023-02-14 23:27:14,632:INFO:             kaleido: 0.2.1
2023-02-14 23:27:14,632:INFO:         statsmodels: 0.13.5
2023-02-14 23:27:14,632:INFO:              sktime: 0.15.1
2023-02-14 23:27:14,632:INFO:               tbats: 1.1.2
2023-02-14 23:27:14,632:INFO:            pmdarima: 2.0.2
2023-02-14 23:27:14,632:INFO:              psutil: 5.9.4
2023-02-14 23:27:14,632:INFO:PyCaret optional dependencies:
2023-02-14 23:27:14,632:INFO:                shap: 0.41.0
2023-02-14 23:27:14,632:INFO:           interpret: 0.3.0
2023-02-14 23:27:14,632:INFO:                umap: Not installed
2023-02-14 23:27:14,632:INFO:    pandas_profiling: 3.6.2
2023-02-14 23:27:14,632:INFO:  explainerdashboard: Not installed
2023-02-14 23:27:14,632:INFO:             autoviz: Not installed
2023-02-14 23:27:14,632:INFO:           fairlearn: Not installed
2023-02-14 23:27:14,632:INFO:             xgboost: 1.7.3
2023-02-14 23:27:14,632:INFO:            catboost: Not installed
2023-02-14 23:27:14,632:INFO:              kmodes: Not installed
2023-02-14 23:27:14,632:INFO:             mlxtend: Not installed
2023-02-14 23:27:14,632:INFO:       statsforecast: Not installed
2023-02-14 23:27:14,632:INFO:        tune_sklearn: Not installed
2023-02-14 23:27:14,632:INFO:                 ray: Not installed
2023-02-14 23:27:14,632:INFO:            hyperopt: Not installed
2023-02-14 23:27:14,632:INFO:              optuna: Not installed
2023-02-14 23:27:14,632:INFO:               skopt: Not installed
2023-02-14 23:27:14,632:INFO:              mlflow: Not installed
2023-02-14 23:27:14,632:INFO:              gradio: Not installed
2023-02-14 23:27:14,632:INFO:             fastapi: Not installed
2023-02-14 23:27:14,632:INFO:             uvicorn: Not installed
2023-02-14 23:27:14,632:INFO:              m2cgen: Not installed
2023-02-14 23:27:14,633:INFO:           evidently: Not installed
2023-02-14 23:27:14,633:INFO:                nltk: 3.8
2023-02-14 23:27:14,633:INFO:            pyLDAvis: Not installed
2023-02-14 23:27:14,633:INFO:              gensim: Not installed
2023-02-14 23:27:14,633:INFO:               spacy: Not installed
2023-02-14 23:27:14,633:INFO:           wordcloud: 1.8.2.2
2023-02-14 23:27:14,633:INFO:            textblob: Not installed
2023-02-14 23:27:14,633:INFO:               fugue: Not installed
2023-02-14 23:27:14,633:INFO:           streamlit: 1.16.0
2023-02-14 23:27:14,633:INFO:             prophet: Not installed
2023-02-14 23:27:14,633:INFO:None
2023-02-14 23:27:14,633:INFO:Set up data.
2023-02-14 23:27:14,639:INFO:Set up train/test split.
2023-02-14 23:27:14,640:INFO:Set up index.
2023-02-14 23:27:14,640:INFO:Set up folding strategy.
2023-02-14 23:27:14,640:INFO:Assigning column types.
2023-02-14 23:27:14,645:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 23:27:14,646:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,651:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,656:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,714:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,753:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,754:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:14,756:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:14,757:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,762:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,768:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,828:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,868:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,869:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:14,872:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:14,872:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 23:27:14,877:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,882:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,943:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,988:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:14,989:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:14,991:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:14,995:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,001:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,047:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,085:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,085:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:15,087:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:15,087:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 23:27:15,095:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,162:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,199:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,199:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:15,202:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:15,209:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,270:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,319:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,320:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:15,324:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:15,325:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 23:27:15,384:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,435:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,436:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:15,438:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:15,497:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,539:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,539:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:15,541:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:15,542:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 23:27:15,608:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,673:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:15,681:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:15,795:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:15,833:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:15,836:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:15,836:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 23:27:15,925:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:15,927:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:16,018:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:16,019:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:16,020:INFO:Preparing preprocessing pipeline...
2023-02-14 23:27:16,021:INFO:Set up column name cleaning.
2023-02-14 23:27:16,021:INFO:Set up simple imputation.
2023-02-14 23:27:16,068:INFO:Finished creating preprocessing pipeline.
2023-02-14 23:27:16,072:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 23:27:16,072:INFO:Creating final display dataframe.
2023-02-14 23:27:16,272:INFO:Setup _display_container:                     Description             Value
0                    Session id                12
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              1b36
2023-02-14 23:27:16,387:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:16,389:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:16,485:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:16,486:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:16,487:INFO:setup() successfully completed in 1.87s...............
2023-02-14 23:27:16,487:INFO:Initializing compare_models()
2023-02-14 23:27:16,487:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 23:27:16,487:INFO:Checking exceptions
2023-02-14 23:27:16,488:INFO:Preparing display monitor
2023-02-14 23:27:16,511:INFO:Initializing Linear Regression
2023-02-14 23:27:16,512:INFO:Total runtime is 2.3555755615234374e-05 minutes
2023-02-14 23:27:16,515:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:16,516:INFO:Initializing create_model()
2023-02-14 23:27:16,516:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:16,516:INFO:Checking exceptions
2023-02-14 23:27:16,516:INFO:Importing libraries
2023-02-14 23:27:16,516:INFO:Copying training dataset
2023-02-14 23:27:16,518:INFO:Defining folds
2023-02-14 23:27:16,518:INFO:Declaring metric variables
2023-02-14 23:27:16,520:INFO:Importing untrained model
2023-02-14 23:27:16,524:INFO:Linear Regression Imported successfully
2023-02-14 23:27:16,533:INFO:Starting cross validation
2023-02-14 23:27:16,534:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:16,901:INFO:Calculating mean and std
2023-02-14 23:27:16,902:INFO:Creating metrics dataframe
2023-02-14 23:27:16,904:INFO:Uploading results into container
2023-02-14 23:27:16,904:INFO:Uploading model into container now
2023-02-14 23:27:16,905:INFO:_master_model_container: 1
2023-02-14 23:27:16,905:INFO:_display_container: 2
2023-02-14 23:27:16,905:INFO:LinearRegression(n_jobs=-1)
2023-02-14 23:27:16,905:INFO:create_model() successfully completed......................................
2023-02-14 23:27:16,997:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:16,997:INFO:Creating metrics dataframe
2023-02-14 23:27:16,997:INFO:Initializing Lasso Regression
2023-02-14 23:27:16,997:INFO:Total runtime is 0.00811234712600708 minutes
2023-02-14 23:27:16,997:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:16,997:INFO:Initializing create_model()
2023-02-14 23:27:16,997:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:16,997:INFO:Checking exceptions
2023-02-14 23:27:16,997:INFO:Importing libraries
2023-02-14 23:27:16,997:INFO:Copying training dataset
2023-02-14 23:27:17,008:INFO:Defining folds
2023-02-14 23:27:17,009:INFO:Declaring metric variables
2023-02-14 23:27:17,013:INFO:Importing untrained model
2023-02-14 23:27:17,016:INFO:Lasso Regression Imported successfully
2023-02-14 23:27:17,025:INFO:Starting cross validation
2023-02-14 23:27:17,026:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:17,163:INFO:Calculating mean and std
2023-02-14 23:27:17,163:INFO:Creating metrics dataframe
2023-02-14 23:27:17,166:INFO:Uploading results into container
2023-02-14 23:27:17,167:INFO:Uploading model into container now
2023-02-14 23:27:17,167:INFO:_master_model_container: 2
2023-02-14 23:27:17,167:INFO:_display_container: 2
2023-02-14 23:27:17,167:INFO:Lasso(random_state=12)
2023-02-14 23:27:17,167:INFO:create_model() successfully completed......................................
2023-02-14 23:27:17,250:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:17,251:INFO:Creating metrics dataframe
2023-02-14 23:27:17,256:INFO:Initializing Ridge Regression
2023-02-14 23:27:17,256:INFO:Total runtime is 0.012426002820332845 minutes
2023-02-14 23:27:17,262:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:17,262:INFO:Initializing create_model()
2023-02-14 23:27:17,262:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:17,262:INFO:Checking exceptions
2023-02-14 23:27:17,262:INFO:Importing libraries
2023-02-14 23:27:17,263:INFO:Copying training dataset
2023-02-14 23:27:17,266:INFO:Defining folds
2023-02-14 23:27:17,266:INFO:Declaring metric variables
2023-02-14 23:27:17,275:INFO:Importing untrained model
2023-02-14 23:27:17,280:INFO:Ridge Regression Imported successfully
2023-02-14 23:27:17,285:INFO:Starting cross validation
2023-02-14 23:27:17,287:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:17,449:INFO:Calculating mean and std
2023-02-14 23:27:17,450:INFO:Creating metrics dataframe
2023-02-14 23:27:17,452:INFO:Uploading results into container
2023-02-14 23:27:17,452:INFO:Uploading model into container now
2023-02-14 23:27:17,452:INFO:_master_model_container: 3
2023-02-14 23:27:17,452:INFO:_display_container: 2
2023-02-14 23:27:17,453:INFO:Ridge(random_state=12)
2023-02-14 23:27:17,453:INFO:create_model() successfully completed......................................
2023-02-14 23:27:17,536:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:17,536:INFO:Creating metrics dataframe
2023-02-14 23:27:17,543:INFO:Initializing Elastic Net
2023-02-14 23:27:17,543:INFO:Total runtime is 0.01720418135325114 minutes
2023-02-14 23:27:17,546:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:17,546:INFO:Initializing create_model()
2023-02-14 23:27:17,546:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:17,546:INFO:Checking exceptions
2023-02-14 23:27:17,546:INFO:Importing libraries
2023-02-14 23:27:17,546:INFO:Copying training dataset
2023-02-14 23:27:17,550:INFO:Defining folds
2023-02-14 23:27:17,550:INFO:Declaring metric variables
2023-02-14 23:27:17,554:INFO:Importing untrained model
2023-02-14 23:27:17,556:INFO:Elastic Net Imported successfully
2023-02-14 23:27:17,564:INFO:Starting cross validation
2023-02-14 23:27:17,566:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:17,698:INFO:Calculating mean and std
2023-02-14 23:27:17,699:INFO:Creating metrics dataframe
2023-02-14 23:27:17,704:INFO:Uploading results into container
2023-02-14 23:27:17,705:INFO:Uploading model into container now
2023-02-14 23:27:17,705:INFO:_master_model_container: 4
2023-02-14 23:27:17,705:INFO:_display_container: 2
2023-02-14 23:27:17,705:INFO:ElasticNet(random_state=12)
2023-02-14 23:27:17,705:INFO:create_model() successfully completed......................................
2023-02-14 23:27:17,789:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:17,789:INFO:Creating metrics dataframe
2023-02-14 23:27:17,802:INFO:Initializing Least Angle Regression
2023-02-14 23:27:17,802:INFO:Total runtime is 0.021521576245625812 minutes
2023-02-14 23:27:17,806:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:17,806:INFO:Initializing create_model()
2023-02-14 23:27:17,806:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:17,806:INFO:Checking exceptions
2023-02-14 23:27:17,806:INFO:Importing libraries
2023-02-14 23:27:17,806:INFO:Copying training dataset
2023-02-14 23:27:17,809:INFO:Defining folds
2023-02-14 23:27:17,809:INFO:Declaring metric variables
2023-02-14 23:27:17,813:INFO:Importing untrained model
2023-02-14 23:27:17,817:INFO:Least Angle Regression Imported successfully
2023-02-14 23:27:17,824:INFO:Starting cross validation
2023-02-14 23:27:17,825:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:17,864:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:17,873:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:17,883:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:17,892:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:17,902:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:17,910:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:17,919:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:17,929:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:17,936:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:17,947:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:17,958:INFO:Calculating mean and std
2023-02-14 23:27:17,960:INFO:Creating metrics dataframe
2023-02-14 23:27:17,963:INFO:Uploading results into container
2023-02-14 23:27:17,963:INFO:Uploading model into container now
2023-02-14 23:27:17,964:INFO:_master_model_container: 5
2023-02-14 23:27:17,964:INFO:_display_container: 2
2023-02-14 23:27:17,964:INFO:Lars(random_state=12)
2023-02-14 23:27:17,964:INFO:create_model() successfully completed......................................
2023-02-14 23:27:18,052:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:18,052:INFO:Creating metrics dataframe
2023-02-14 23:27:18,059:INFO:Initializing Lasso Least Angle Regression
2023-02-14 23:27:18,059:INFO:Total runtime is 0.025810257593790686 minutes
2023-02-14 23:27:18,063:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:18,064:INFO:Initializing create_model()
2023-02-14 23:27:18,064:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:18,064:INFO:Checking exceptions
2023-02-14 23:27:18,064:INFO:Importing libraries
2023-02-14 23:27:18,064:INFO:Copying training dataset
2023-02-14 23:27:18,066:INFO:Defining folds
2023-02-14 23:27:18,067:INFO:Declaring metric variables
2023-02-14 23:27:18,070:INFO:Importing untrained model
2023-02-14 23:27:18,074:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 23:27:18,082:INFO:Starting cross validation
2023-02-14 23:27:18,083:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:18,118:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:18,124:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:18,134:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:18,145:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:18,154:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:18,163:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:18,172:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:18,183:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:18,189:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:18,196:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:18,207:INFO:Calculating mean and std
2023-02-14 23:27:18,209:INFO:Creating metrics dataframe
2023-02-14 23:27:18,211:INFO:Uploading results into container
2023-02-14 23:27:18,212:INFO:Uploading model into container now
2023-02-14 23:27:18,212:INFO:_master_model_container: 6
2023-02-14 23:27:18,212:INFO:_display_container: 2
2023-02-14 23:27:18,212:INFO:LassoLars(random_state=12)
2023-02-14 23:27:18,212:INFO:create_model() successfully completed......................................
2023-02-14 23:27:18,299:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:18,299:INFO:Creating metrics dataframe
2023-02-14 23:27:18,310:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 23:27:18,311:INFO:Total runtime is 0.030007894833882647 minutes
2023-02-14 23:27:18,315:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:18,315:INFO:Initializing create_model()
2023-02-14 23:27:18,315:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:18,315:INFO:Checking exceptions
2023-02-14 23:27:18,315:INFO:Importing libraries
2023-02-14 23:27:18,315:INFO:Copying training dataset
2023-02-14 23:27:18,317:INFO:Defining folds
2023-02-14 23:27:18,317:INFO:Declaring metric variables
2023-02-14 23:27:18,321:INFO:Importing untrained model
2023-02-14 23:27:18,327:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 23:27:18,334:INFO:Starting cross validation
2023-02-14 23:27:18,336:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:18,374:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:18,383:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:18,390:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:18,402:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:18,412:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:18,419:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:18,428:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:18,437:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:18,448:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:18,452:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:18,465:INFO:Calculating mean and std
2023-02-14 23:27:18,466:INFO:Creating metrics dataframe
2023-02-14 23:27:18,469:INFO:Uploading results into container
2023-02-14 23:27:18,469:INFO:Uploading model into container now
2023-02-14 23:27:18,469:INFO:_master_model_container: 7
2023-02-14 23:27:18,469:INFO:_display_container: 2
2023-02-14 23:27:18,469:INFO:OrthogonalMatchingPursuit()
2023-02-14 23:27:18,469:INFO:create_model() successfully completed......................................
2023-02-14 23:27:18,556:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:18,556:INFO:Creating metrics dataframe
2023-02-14 23:27:18,566:INFO:Initializing Bayesian Ridge
2023-02-14 23:27:18,566:INFO:Total runtime is 0.03424743811289469 minutes
2023-02-14 23:27:18,569:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:18,569:INFO:Initializing create_model()
2023-02-14 23:27:18,569:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:18,569:INFO:Checking exceptions
2023-02-14 23:27:18,569:INFO:Importing libraries
2023-02-14 23:27:18,569:INFO:Copying training dataset
2023-02-14 23:27:18,571:INFO:Defining folds
2023-02-14 23:27:18,571:INFO:Declaring metric variables
2023-02-14 23:27:18,578:INFO:Importing untrained model
2023-02-14 23:27:18,580:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:27:18,588:INFO:Starting cross validation
2023-02-14 23:27:18,589:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:18,714:INFO:Calculating mean and std
2023-02-14 23:27:18,715:INFO:Creating metrics dataframe
2023-02-14 23:27:18,718:INFO:Uploading results into container
2023-02-14 23:27:18,718:INFO:Uploading model into container now
2023-02-14 23:27:18,718:INFO:_master_model_container: 8
2023-02-14 23:27:18,718:INFO:_display_container: 2
2023-02-14 23:27:18,718:INFO:BayesianRidge()
2023-02-14 23:27:18,718:INFO:create_model() successfully completed......................................
2023-02-14 23:27:18,806:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:18,807:INFO:Creating metrics dataframe
2023-02-14 23:27:18,817:INFO:Initializing Passive Aggressive Regressor
2023-02-14 23:27:18,817:INFO:Total runtime is 0.038441391785939534 minutes
2023-02-14 23:27:18,822:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:18,822:INFO:Initializing create_model()
2023-02-14 23:27:18,823:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:18,823:INFO:Checking exceptions
2023-02-14 23:27:18,823:INFO:Importing libraries
2023-02-14 23:27:18,823:INFO:Copying training dataset
2023-02-14 23:27:18,826:INFO:Defining folds
2023-02-14 23:27:18,826:INFO:Declaring metric variables
2023-02-14 23:27:18,831:INFO:Importing untrained model
2023-02-14 23:27:18,835:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 23:27:18,845:INFO:Starting cross validation
2023-02-14 23:27:18,846:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:18,975:INFO:Calculating mean and std
2023-02-14 23:27:18,977:INFO:Creating metrics dataframe
2023-02-14 23:27:18,979:INFO:Uploading results into container
2023-02-14 23:27:18,979:INFO:Uploading model into container now
2023-02-14 23:27:18,979:INFO:_master_model_container: 9
2023-02-14 23:27:18,979:INFO:_display_container: 2
2023-02-14 23:27:18,979:INFO:PassiveAggressiveRegressor(random_state=12)
2023-02-14 23:27:18,979:INFO:create_model() successfully completed......................................
2023-02-14 23:27:19,069:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:19,069:INFO:Creating metrics dataframe
2023-02-14 23:27:19,079:INFO:Initializing Huber Regressor
2023-02-14 23:27:19,079:INFO:Total runtime is 0.04279767274856568 minutes
2023-02-14 23:27:19,083:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:19,083:INFO:Initializing create_model()
2023-02-14 23:27:19,083:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:19,083:INFO:Checking exceptions
2023-02-14 23:27:19,083:INFO:Importing libraries
2023-02-14 23:27:19,083:INFO:Copying training dataset
2023-02-14 23:27:19,087:INFO:Defining folds
2023-02-14 23:27:19,087:INFO:Declaring metric variables
2023-02-14 23:27:19,090:INFO:Importing untrained model
2023-02-14 23:27:19,094:INFO:Huber Regressor Imported successfully
2023-02-14 23:27:19,103:INFO:Starting cross validation
2023-02-14 23:27:19,104:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:19,204:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:19,207:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:19,222:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:19,233:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:19,241:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:19,253:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:19,261:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:19,272:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:19,282:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:19,283:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:19,294:INFO:Calculating mean and std
2023-02-14 23:27:19,295:INFO:Creating metrics dataframe
2023-02-14 23:27:19,298:INFO:Uploading results into container
2023-02-14 23:27:19,298:INFO:Uploading model into container now
2023-02-14 23:27:19,298:INFO:_master_model_container: 10
2023-02-14 23:27:19,299:INFO:_display_container: 2
2023-02-14 23:27:19,299:INFO:HuberRegressor()
2023-02-14 23:27:19,299:INFO:create_model() successfully completed......................................
2023-02-14 23:27:19,385:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:19,385:INFO:Creating metrics dataframe
2023-02-14 23:27:19,394:INFO:Initializing K Neighbors Regressor
2023-02-14 23:27:19,394:INFO:Total runtime is 0.048051385084788005 minutes
2023-02-14 23:27:19,396:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:19,396:INFO:Initializing create_model()
2023-02-14 23:27:19,396:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:19,396:INFO:Checking exceptions
2023-02-14 23:27:19,396:INFO:Importing libraries
2023-02-14 23:27:19,396:INFO:Copying training dataset
2023-02-14 23:27:19,399:INFO:Defining folds
2023-02-14 23:27:19,399:INFO:Declaring metric variables
2023-02-14 23:27:19,402:INFO:Importing untrained model
2023-02-14 23:27:19,407:INFO:K Neighbors Regressor Imported successfully
2023-02-14 23:27:19,415:INFO:Starting cross validation
2023-02-14 23:27:19,416:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:19,562:INFO:Calculating mean and std
2023-02-14 23:27:19,562:INFO:Creating metrics dataframe
2023-02-14 23:27:19,565:INFO:Uploading results into container
2023-02-14 23:27:19,565:INFO:Uploading model into container now
2023-02-14 23:27:19,566:INFO:_master_model_container: 11
2023-02-14 23:27:19,566:INFO:_display_container: 2
2023-02-14 23:27:19,566:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 23:27:19,566:INFO:create_model() successfully completed......................................
2023-02-14 23:27:19,650:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:19,650:INFO:Creating metrics dataframe
2023-02-14 23:27:19,658:INFO:Initializing Decision Tree Regressor
2023-02-14 23:27:19,658:INFO:Total runtime is 0.05245843331019084 minutes
2023-02-14 23:27:19,662:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:19,663:INFO:Initializing create_model()
2023-02-14 23:27:19,663:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:19,663:INFO:Checking exceptions
2023-02-14 23:27:19,663:INFO:Importing libraries
2023-02-14 23:27:19,663:INFO:Copying training dataset
2023-02-14 23:27:19,666:INFO:Defining folds
2023-02-14 23:27:19,666:INFO:Declaring metric variables
2023-02-14 23:27:19,671:INFO:Importing untrained model
2023-02-14 23:27:19,675:INFO:Decision Tree Regressor Imported successfully
2023-02-14 23:27:19,682:INFO:Starting cross validation
2023-02-14 23:27:19,683:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:19,816:INFO:Calculating mean and std
2023-02-14 23:27:19,817:INFO:Creating metrics dataframe
2023-02-14 23:27:19,819:INFO:Uploading results into container
2023-02-14 23:27:19,819:INFO:Uploading model into container now
2023-02-14 23:27:19,820:INFO:_master_model_container: 12
2023-02-14 23:27:19,820:INFO:_display_container: 2
2023-02-14 23:27:19,820:INFO:DecisionTreeRegressor(random_state=12)
2023-02-14 23:27:19,820:INFO:create_model() successfully completed......................................
2023-02-14 23:27:19,902:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:19,904:INFO:Creating metrics dataframe
2023-02-14 23:27:19,914:INFO:Initializing Random Forest Regressor
2023-02-14 23:27:19,914:INFO:Total runtime is 0.05672828753789266 minutes
2023-02-14 23:27:19,917:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:19,917:INFO:Initializing create_model()
2023-02-14 23:27:19,917:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:19,917:INFO:Checking exceptions
2023-02-14 23:27:19,917:INFO:Importing libraries
2023-02-14 23:27:19,918:INFO:Copying training dataset
2023-02-14 23:27:19,920:INFO:Defining folds
2023-02-14 23:27:19,920:INFO:Declaring metric variables
2023-02-14 23:27:19,925:INFO:Importing untrained model
2023-02-14 23:27:19,929:INFO:Random Forest Regressor Imported successfully
2023-02-14 23:27:19,936:INFO:Starting cross validation
2023-02-14 23:27:19,938:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:20,359:INFO:Calculating mean and std
2023-02-14 23:27:20,359:INFO:Creating metrics dataframe
2023-02-14 23:27:20,362:INFO:Uploading results into container
2023-02-14 23:27:20,363:INFO:Uploading model into container now
2023-02-14 23:27:20,363:INFO:_master_model_container: 13
2023-02-14 23:27:20,363:INFO:_display_container: 2
2023-02-14 23:27:20,364:INFO:RandomForestRegressor(n_jobs=-1, random_state=12)
2023-02-14 23:27:20,364:INFO:create_model() successfully completed......................................
2023-02-14 23:27:20,447:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:20,447:INFO:Creating metrics dataframe
2023-02-14 23:27:20,454:INFO:Initializing Extra Trees Regressor
2023-02-14 23:27:20,456:INFO:Total runtime is 0.06575137774149577 minutes
2023-02-14 23:27:20,460:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:20,460:INFO:Initializing create_model()
2023-02-14 23:27:20,460:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:20,460:INFO:Checking exceptions
2023-02-14 23:27:20,460:INFO:Importing libraries
2023-02-14 23:27:20,460:INFO:Copying training dataset
2023-02-14 23:27:20,464:INFO:Defining folds
2023-02-14 23:27:20,464:INFO:Declaring metric variables
2023-02-14 23:27:20,467:INFO:Importing untrained model
2023-02-14 23:27:20,471:INFO:Extra Trees Regressor Imported successfully
2023-02-14 23:27:20,479:INFO:Starting cross validation
2023-02-14 23:27:20,480:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:20,834:INFO:Calculating mean and std
2023-02-14 23:27:20,835:INFO:Creating metrics dataframe
2023-02-14 23:27:20,836:INFO:Uploading results into container
2023-02-14 23:27:20,839:INFO:Uploading model into container now
2023-02-14 23:27:20,840:INFO:_master_model_container: 14
2023-02-14 23:27:20,840:INFO:_display_container: 2
2023-02-14 23:27:20,840:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=12)
2023-02-14 23:27:20,840:INFO:create_model() successfully completed......................................
2023-02-14 23:27:20,924:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:20,924:INFO:Creating metrics dataframe
2023-02-14 23:27:20,933:INFO:Initializing AdaBoost Regressor
2023-02-14 23:27:20,933:INFO:Total runtime is 0.07369955380757649 minutes
2023-02-14 23:27:20,935:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:20,936:INFO:Initializing create_model()
2023-02-14 23:27:20,936:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:20,936:INFO:Checking exceptions
2023-02-14 23:27:20,936:INFO:Importing libraries
2023-02-14 23:27:20,936:INFO:Copying training dataset
2023-02-14 23:27:20,939:INFO:Defining folds
2023-02-14 23:27:20,939:INFO:Declaring metric variables
2023-02-14 23:27:20,944:INFO:Importing untrained model
2023-02-14 23:27:20,947:INFO:AdaBoost Regressor Imported successfully
2023-02-14 23:27:20,953:INFO:Starting cross validation
2023-02-14 23:27:20,954:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:21,165:INFO:Calculating mean and std
2023-02-14 23:27:21,166:INFO:Creating metrics dataframe
2023-02-14 23:27:21,168:INFO:Uploading results into container
2023-02-14 23:27:21,168:INFO:Uploading model into container now
2023-02-14 23:27:21,168:INFO:_master_model_container: 15
2023-02-14 23:27:21,168:INFO:_display_container: 2
2023-02-14 23:27:21,170:INFO:AdaBoostRegressor(random_state=12)
2023-02-14 23:27:21,170:INFO:create_model() successfully completed......................................
2023-02-14 23:27:21,255:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:21,255:INFO:Creating metrics dataframe
2023-02-14 23:27:21,266:INFO:Initializing Gradient Boosting Regressor
2023-02-14 23:27:21,266:INFO:Total runtime is 0.07926129500071208 minutes
2023-02-14 23:27:21,270:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:21,271:INFO:Initializing create_model()
2023-02-14 23:27:21,271:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:21,271:INFO:Checking exceptions
2023-02-14 23:27:21,271:INFO:Importing libraries
2023-02-14 23:27:21,271:INFO:Copying training dataset
2023-02-14 23:27:21,274:INFO:Defining folds
2023-02-14 23:27:21,274:INFO:Declaring metric variables
2023-02-14 23:27:21,277:INFO:Importing untrained model
2023-02-14 23:27:21,282:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 23:27:21,290:INFO:Starting cross validation
2023-02-14 23:27:21,291:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:21,475:INFO:Calculating mean and std
2023-02-14 23:27:21,476:INFO:Creating metrics dataframe
2023-02-14 23:27:21,479:INFO:Uploading results into container
2023-02-14 23:27:21,479:INFO:Uploading model into container now
2023-02-14 23:27:21,479:INFO:_master_model_container: 16
2023-02-14 23:27:21,479:INFO:_display_container: 2
2023-02-14 23:27:21,480:INFO:GradientBoostingRegressor(random_state=12)
2023-02-14 23:27:21,480:INFO:create_model() successfully completed......................................
2023-02-14 23:27:21,564:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:21,564:INFO:Creating metrics dataframe
2023-02-14 23:27:21,575:INFO:Initializing Extreme Gradient Boosting
2023-02-14 23:27:21,575:INFO:Total runtime is 0.08439887364705403 minutes
2023-02-14 23:27:21,579:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:21,579:INFO:Initializing create_model()
2023-02-14 23:27:21,579:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:21,579:INFO:Checking exceptions
2023-02-14 23:27:21,579:INFO:Importing libraries
2023-02-14 23:27:21,579:INFO:Copying training dataset
2023-02-14 23:27:21,583:INFO:Defining folds
2023-02-14 23:27:21,583:INFO:Declaring metric variables
2023-02-14 23:27:21,587:INFO:Importing untrained model
2023-02-14 23:27:21,593:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 23:27:21,606:INFO:Starting cross validation
2023-02-14 23:27:21,607:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:21,810:INFO:Calculating mean and std
2023-02-14 23:27:21,810:INFO:Creating metrics dataframe
2023-02-14 23:27:21,813:INFO:Uploading results into container
2023-02-14 23:27:21,813:INFO:Uploading model into container now
2023-02-14 23:27:21,813:INFO:_master_model_container: 17
2023-02-14 23:27:21,814:INFO:_display_container: 2
2023-02-14 23:27:21,814:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=12, ...)
2023-02-14 23:27:21,814:INFO:create_model() successfully completed......................................
2023-02-14 23:27:21,899:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:21,899:INFO:Creating metrics dataframe
2023-02-14 23:27:21,909:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 23:27:21,909:INFO:Total runtime is 0.08996992111206055 minutes
2023-02-14 23:27:21,913:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:21,913:INFO:Initializing create_model()
2023-02-14 23:27:21,913:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:21,913:INFO:Checking exceptions
2023-02-14 23:27:21,913:INFO:Importing libraries
2023-02-14 23:27:21,913:INFO:Copying training dataset
2023-02-14 23:27:21,916:INFO:Defining folds
2023-02-14 23:27:21,917:INFO:Declaring metric variables
2023-02-14 23:27:21,921:INFO:Importing untrained model
2023-02-14 23:27:21,925:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 23:27:21,933:INFO:Starting cross validation
2023-02-14 23:27:21,934:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:22,080:INFO:Calculating mean and std
2023-02-14 23:27:22,081:INFO:Creating metrics dataframe
2023-02-14 23:27:22,083:INFO:Uploading results into container
2023-02-14 23:27:22,084:INFO:Uploading model into container now
2023-02-14 23:27:22,084:INFO:_master_model_container: 18
2023-02-14 23:27:22,084:INFO:_display_container: 2
2023-02-14 23:27:22,084:INFO:LGBMRegressor(random_state=12)
2023-02-14 23:27:22,084:INFO:create_model() successfully completed......................................
2023-02-14 23:27:22,171:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:22,171:INFO:Creating metrics dataframe
2023-02-14 23:27:22,181:INFO:Initializing Dummy Regressor
2023-02-14 23:27:22,181:INFO:Total runtime is 0.09449784358342489 minutes
2023-02-14 23:27:22,183:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:22,183:INFO:Initializing create_model()
2023-02-14 23:27:22,183:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021585F68A00>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:22,185:INFO:Checking exceptions
2023-02-14 23:27:22,185:INFO:Importing libraries
2023-02-14 23:27:22,185:INFO:Copying training dataset
2023-02-14 23:27:22,188:INFO:Defining folds
2023-02-14 23:27:22,189:INFO:Declaring metric variables
2023-02-14 23:27:22,193:INFO:Importing untrained model
2023-02-14 23:27:22,196:INFO:Dummy Regressor Imported successfully
2023-02-14 23:27:22,203:INFO:Starting cross validation
2023-02-14 23:27:22,206:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:22,335:INFO:Calculating mean and std
2023-02-14 23:27:22,335:INFO:Creating metrics dataframe
2023-02-14 23:27:22,339:INFO:Uploading results into container
2023-02-14 23:27:22,339:INFO:Uploading model into container now
2023-02-14 23:27:22,340:INFO:_master_model_container: 19
2023-02-14 23:27:22,340:INFO:_display_container: 2
2023-02-14 23:27:22,341:INFO:DummyRegressor()
2023-02-14 23:27:22,341:INFO:create_model() successfully completed......................................
2023-02-14 23:27:22,429:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:22,429:INFO:Creating metrics dataframe
2023-02-14 23:27:22,449:INFO:Initializing create_model()
2023-02-14 23:27:22,449:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A00A850>, estimator=KNeighborsRegressor(n_jobs=-1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:22,449:INFO:Checking exceptions
2023-02-14 23:27:22,451:INFO:Importing libraries
2023-02-14 23:27:22,452:INFO:Copying training dataset
2023-02-14 23:27:22,454:INFO:Defining folds
2023-02-14 23:27:22,455:INFO:Declaring metric variables
2023-02-14 23:27:22,456:INFO:Importing untrained model
2023-02-14 23:27:22,456:INFO:Declaring custom model
2023-02-14 23:27:22,456:INFO:K Neighbors Regressor Imported successfully
2023-02-14 23:27:22,456:INFO:Cross validation set to False
2023-02-14 23:27:22,457:INFO:Fitting Model
2023-02-14 23:27:22,485:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 23:27:22,485:INFO:create_model() successfully completed......................................
2023-02-14 23:27:22,604:INFO:_master_model_container: 19
2023-02-14 23:27:22,604:INFO:_display_container: 2
2023-02-14 23:27:22,606:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 23:27:22,606:INFO:compare_models() successfully completed......................................
2023-02-14 23:27:32,650:INFO:PyCaret RegressionExperiment
2023-02-14 23:27:32,650:INFO:Logging name: reg-default-name
2023-02-14 23:27:32,650:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 23:27:32,650:INFO:version 3.0.0.rc8
2023-02-14 23:27:32,650:INFO:Initializing setup()
2023-02-14 23:27:32,650:INFO:self.USI: e0ed
2023-02-14 23:27:32,650:INFO:self._variable_keys: {'data', 'transform_target_param', 'logging_param', 'fold_generator', 'X_test', 'y', 'exp_name_log', 'pipeline', 'n_jobs_param', 'exp_id', 'log_plots_param', 'X_train', 'y_test', 'html_param', 'gpu_param', '_ml_usecase', 'X', 'seed', 'target_param', 'memory', 'gpu_n_jobs_param', 'USI', 'idx', 'fold_groups_param', 'fold_shuffle_param', '_available_plots', 'y_train'}
2023-02-14 23:27:32,650:INFO:Checking environment
2023-02-14 23:27:32,651:INFO:python_version: 3.9.13
2023-02-14 23:27:32,651:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 23:27:32,651:INFO:machine: AMD64
2023-02-14 23:27:32,651:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 23:27:32,661:INFO:Memory: svmem(total=16805040128, available=4230795264, percent=74.8, used=12574244864, free=4230795264)
2023-02-14 23:27:32,661:INFO:Physical Core: 4
2023-02-14 23:27:32,662:INFO:Logical Core: 8
2023-02-14 23:27:32,662:INFO:Checking libraries
2023-02-14 23:27:32,662:INFO:System:
2023-02-14 23:27:32,662:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 23:27:32,662:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 23:27:32,662:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 23:27:32,662:INFO:PyCaret required dependencies:
2023-02-14 23:27:32,662:INFO:                 pip: 23.0
2023-02-14 23:27:32,662:INFO:          setuptools: 58.1.0
2023-02-14 23:27:32,662:INFO:             pycaret: 3.0.0rc8
2023-02-14 23:27:32,662:INFO:             IPython: 8.7.0
2023-02-14 23:27:32,662:INFO:          ipywidgets: 8.0.4
2023-02-14 23:27:32,663:INFO:                tqdm: 4.64.1
2023-02-14 23:27:32,663:INFO:               numpy: 1.22.1
2023-02-14 23:27:32,663:INFO:              pandas: 1.5.2
2023-02-14 23:27:32,663:INFO:              jinja2: 3.1.2
2023-02-14 23:27:32,663:INFO:               scipy: 1.5.4
2023-02-14 23:27:32,663:INFO:              joblib: 1.2.0
2023-02-14 23:27:32,663:INFO:             sklearn: 1.1.3
2023-02-14 23:27:32,663:INFO:                pyod: 1.0.7
2023-02-14 23:27:32,663:INFO:            imblearn: 0.10.1
2023-02-14 23:27:32,663:INFO:   category_encoders: 2.6.0
2023-02-14 23:27:32,663:INFO:            lightgbm: 3.3.4
2023-02-14 23:27:32,663:INFO:               numba: 0.56.4
2023-02-14 23:27:32,663:INFO:            requests: 2.28.1
2023-02-14 23:27:32,663:INFO:          matplotlib: 3.6.2
2023-02-14 23:27:32,663:INFO:          scikitplot: 0.3.7
2023-02-14 23:27:32,663:INFO:         yellowbrick: 1.5
2023-02-14 23:27:32,663:INFO:              plotly: 5.11.0
2023-02-14 23:27:32,663:INFO:             kaleido: 0.2.1
2023-02-14 23:27:32,663:INFO:         statsmodels: 0.13.5
2023-02-14 23:27:32,663:INFO:              sktime: 0.15.1
2023-02-14 23:27:32,663:INFO:               tbats: 1.1.2
2023-02-14 23:27:32,664:INFO:            pmdarima: 2.0.2
2023-02-14 23:27:32,664:INFO:              psutil: 5.9.4
2023-02-14 23:27:32,664:INFO:PyCaret optional dependencies:
2023-02-14 23:27:32,664:INFO:                shap: 0.41.0
2023-02-14 23:27:32,664:INFO:           interpret: 0.3.0
2023-02-14 23:27:32,664:INFO:                umap: Not installed
2023-02-14 23:27:32,664:INFO:    pandas_profiling: 3.6.2
2023-02-14 23:27:32,664:INFO:  explainerdashboard: Not installed
2023-02-14 23:27:32,664:INFO:             autoviz: Not installed
2023-02-14 23:27:32,664:INFO:           fairlearn: Not installed
2023-02-14 23:27:32,664:INFO:             xgboost: 1.7.3
2023-02-14 23:27:32,664:INFO:            catboost: Not installed
2023-02-14 23:27:32,664:INFO:              kmodes: Not installed
2023-02-14 23:27:32,664:INFO:             mlxtend: Not installed
2023-02-14 23:27:32,664:INFO:       statsforecast: Not installed
2023-02-14 23:27:32,664:INFO:        tune_sklearn: Not installed
2023-02-14 23:27:32,664:INFO:                 ray: Not installed
2023-02-14 23:27:32,665:INFO:            hyperopt: Not installed
2023-02-14 23:27:32,665:INFO:              optuna: Not installed
2023-02-14 23:27:32,665:INFO:               skopt: Not installed
2023-02-14 23:27:32,665:INFO:              mlflow: Not installed
2023-02-14 23:27:32,665:INFO:              gradio: Not installed
2023-02-14 23:27:32,665:INFO:             fastapi: Not installed
2023-02-14 23:27:32,665:INFO:             uvicorn: Not installed
2023-02-14 23:27:32,665:INFO:              m2cgen: Not installed
2023-02-14 23:27:32,665:INFO:           evidently: Not installed
2023-02-14 23:27:32,665:INFO:                nltk: 3.8
2023-02-14 23:27:32,665:INFO:            pyLDAvis: Not installed
2023-02-14 23:27:32,665:INFO:              gensim: Not installed
2023-02-14 23:27:32,665:INFO:               spacy: Not installed
2023-02-14 23:27:32,665:INFO:           wordcloud: 1.8.2.2
2023-02-14 23:27:32,665:INFO:            textblob: Not installed
2023-02-14 23:27:32,665:INFO:               fugue: Not installed
2023-02-14 23:27:32,665:INFO:           streamlit: 1.16.0
2023-02-14 23:27:32,665:INFO:             prophet: Not installed
2023-02-14 23:27:32,665:INFO:None
2023-02-14 23:27:32,665:INFO:Set up data.
2023-02-14 23:27:32,670:INFO:Set up train/test split.
2023-02-14 23:27:32,673:INFO:Set up index.
2023-02-14 23:27:32,673:INFO:Set up folding strategy.
2023-02-14 23:27:32,673:INFO:Assigning column types.
2023-02-14 23:27:32,676:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 23:27:32,676:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,683:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,689:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,741:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,778:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,779:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:32,782:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:32,782:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,786:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,789:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,835:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,871:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,872:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:32,876:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:32,877:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 23:27:32,887:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,893:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:32,963:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,002:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,002:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:33,005:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:33,010:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,015:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,061:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,096:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,098:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:33,100:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:33,100:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 23:27:33,108:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,153:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,188:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,188:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:33,190:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:33,198:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,245:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,281:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,281:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:33,283:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:33,284:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 23:27:33,337:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,373:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,373:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:33,375:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:33,429:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,464:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,465:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:33,467:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:33,467:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 23:27:33,519:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,554:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:33,556:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:33,610:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:33,646:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:33,649:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:33,650:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 23:27:33,753:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:33,755:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:33,849:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:33,852:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:33,853:INFO:Preparing preprocessing pipeline...
2023-02-14 23:27:33,854:INFO:Set up column name cleaning.
2023-02-14 23:27:33,854:INFO:Set up simple imputation.
2023-02-14 23:27:33,891:INFO:Finished creating preprocessing pipeline.
2023-02-14 23:27:33,896:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 23:27:33,896:INFO:Creating final display dataframe.
2023-02-14 23:27:34,091:INFO:Setup _display_container:                     Description             Value
0                    Session id                33
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              e0ed
2023-02-14 23:27:34,209:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:34,212:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:34,300:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:34,302:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:34,303:INFO:setup() successfully completed in 1.65s...............
2023-02-14 23:27:34,303:INFO:Initializing compare_models()
2023-02-14 23:27:34,303:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 23:27:34,303:INFO:Checking exceptions
2023-02-14 23:27:34,304:INFO:Preparing display monitor
2023-02-14 23:27:34,328:INFO:Initializing Linear Regression
2023-02-14 23:27:34,328:INFO:Total runtime is 0.0 minutes
2023-02-14 23:27:34,333:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:34,333:INFO:Initializing create_model()
2023-02-14 23:27:34,334:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:34,334:INFO:Checking exceptions
2023-02-14 23:27:34,334:INFO:Importing libraries
2023-02-14 23:27:34,334:INFO:Copying training dataset
2023-02-14 23:27:34,335:INFO:Defining folds
2023-02-14 23:27:34,336:INFO:Declaring metric variables
2023-02-14 23:27:34,338:INFO:Importing untrained model
2023-02-14 23:27:34,341:INFO:Linear Regression Imported successfully
2023-02-14 23:27:34,349:INFO:Starting cross validation
2023-02-14 23:27:34,350:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:34,723:INFO:Calculating mean and std
2023-02-14 23:27:34,725:INFO:Creating metrics dataframe
2023-02-14 23:27:34,728:INFO:Uploading results into container
2023-02-14 23:27:34,728:INFO:Uploading model into container now
2023-02-14 23:27:34,729:INFO:_master_model_container: 1
2023-02-14 23:27:34,729:INFO:_display_container: 2
2023-02-14 23:27:34,729:INFO:LinearRegression(n_jobs=-1)
2023-02-14 23:27:34,729:INFO:create_model() successfully completed......................................
2023-02-14 23:27:34,821:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:34,821:INFO:Creating metrics dataframe
2023-02-14 23:27:34,827:INFO:Initializing Lasso Regression
2023-02-14 23:27:34,827:INFO:Total runtime is 0.008314188321431477 minutes
2023-02-14 23:27:34,831:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:34,831:INFO:Initializing create_model()
2023-02-14 23:27:34,831:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:34,831:INFO:Checking exceptions
2023-02-14 23:27:34,831:INFO:Importing libraries
2023-02-14 23:27:34,831:INFO:Copying training dataset
2023-02-14 23:27:34,834:INFO:Defining folds
2023-02-14 23:27:34,834:INFO:Declaring metric variables
2023-02-14 23:27:34,837:INFO:Importing untrained model
2023-02-14 23:27:34,841:INFO:Lasso Regression Imported successfully
2023-02-14 23:27:34,848:INFO:Starting cross validation
2023-02-14 23:27:34,850:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:35,021:INFO:Calculating mean and std
2023-02-14 23:27:35,021:INFO:Creating metrics dataframe
2023-02-14 23:27:35,024:INFO:Uploading results into container
2023-02-14 23:27:35,024:INFO:Uploading model into container now
2023-02-14 23:27:35,024:INFO:_master_model_container: 2
2023-02-14 23:27:35,024:INFO:_display_container: 2
2023-02-14 23:27:35,024:INFO:Lasso(random_state=33)
2023-02-14 23:27:35,024:INFO:create_model() successfully completed......................................
2023-02-14 23:27:35,107:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:35,107:INFO:Creating metrics dataframe
2023-02-14 23:27:35,116:INFO:Initializing Ridge Regression
2023-02-14 23:27:35,116:INFO:Total runtime is 0.013135397434234617 minutes
2023-02-14 23:27:35,119:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:35,119:INFO:Initializing create_model()
2023-02-14 23:27:35,119:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:35,119:INFO:Checking exceptions
2023-02-14 23:27:35,119:INFO:Importing libraries
2023-02-14 23:27:35,119:INFO:Copying training dataset
2023-02-14 23:27:35,121:INFO:Defining folds
2023-02-14 23:27:35,121:INFO:Declaring metric variables
2023-02-14 23:27:35,124:INFO:Importing untrained model
2023-02-14 23:27:35,129:INFO:Ridge Regression Imported successfully
2023-02-14 23:27:35,136:INFO:Starting cross validation
2023-02-14 23:27:35,138:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:35,268:INFO:Calculating mean and std
2023-02-14 23:27:35,268:INFO:Creating metrics dataframe
2023-02-14 23:27:35,271:INFO:Uploading results into container
2023-02-14 23:27:35,272:INFO:Uploading model into container now
2023-02-14 23:27:35,272:INFO:_master_model_container: 3
2023-02-14 23:27:35,272:INFO:_display_container: 2
2023-02-14 23:27:35,272:INFO:Ridge(random_state=33)
2023-02-14 23:27:35,272:INFO:create_model() successfully completed......................................
2023-02-14 23:27:35,354:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:35,354:INFO:Creating metrics dataframe
2023-02-14 23:27:35,362:INFO:Initializing Elastic Net
2023-02-14 23:27:35,362:INFO:Total runtime is 0.017232942581176754 minutes
2023-02-14 23:27:35,364:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:35,365:INFO:Initializing create_model()
2023-02-14 23:27:35,365:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:35,365:INFO:Checking exceptions
2023-02-14 23:27:35,365:INFO:Importing libraries
2023-02-14 23:27:35,365:INFO:Copying training dataset
2023-02-14 23:27:35,367:INFO:Defining folds
2023-02-14 23:27:35,367:INFO:Declaring metric variables
2023-02-14 23:27:35,370:INFO:Importing untrained model
2023-02-14 23:27:35,374:INFO:Elastic Net Imported successfully
2023-02-14 23:27:35,381:INFO:Starting cross validation
2023-02-14 23:27:35,382:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:35,517:INFO:Calculating mean and std
2023-02-14 23:27:35,518:INFO:Creating metrics dataframe
2023-02-14 23:27:35,520:INFO:Uploading results into container
2023-02-14 23:27:35,520:INFO:Uploading model into container now
2023-02-14 23:27:35,520:INFO:_master_model_container: 4
2023-02-14 23:27:35,520:INFO:_display_container: 2
2023-02-14 23:27:35,520:INFO:ElasticNet(random_state=33)
2023-02-14 23:27:35,520:INFO:create_model() successfully completed......................................
2023-02-14 23:27:35,604:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:35,604:INFO:Creating metrics dataframe
2023-02-14 23:27:35,615:INFO:Initializing Least Angle Regression
2023-02-14 23:27:35,615:INFO:Total runtime is 0.02144810358683268 minutes
2023-02-14 23:27:35,618:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:35,618:INFO:Initializing create_model()
2023-02-14 23:27:35,618:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:35,619:INFO:Checking exceptions
2023-02-14 23:27:35,619:INFO:Importing libraries
2023-02-14 23:27:35,619:INFO:Copying training dataset
2023-02-14 23:27:35,622:INFO:Defining folds
2023-02-14 23:27:35,622:INFO:Declaring metric variables
2023-02-14 23:27:35,627:INFO:Importing untrained model
2023-02-14 23:27:35,631:INFO:Least Angle Regression Imported successfully
2023-02-14 23:27:35,638:INFO:Starting cross validation
2023-02-14 23:27:35,638:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:35,678:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:35,683:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:35,693:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:35,702:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:35,708:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:35,717:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:35,724:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:35,733:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:35,740:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:35,748:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:35,760:INFO:Calculating mean and std
2023-02-14 23:27:35,761:INFO:Creating metrics dataframe
2023-02-14 23:27:35,764:INFO:Uploading results into container
2023-02-14 23:27:35,764:INFO:Uploading model into container now
2023-02-14 23:27:35,765:INFO:_master_model_container: 5
2023-02-14 23:27:35,765:INFO:_display_container: 2
2023-02-14 23:27:35,765:INFO:Lars(random_state=33)
2023-02-14 23:27:35,765:INFO:create_model() successfully completed......................................
2023-02-14 23:27:35,852:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:35,852:INFO:Creating metrics dataframe
2023-02-14 23:27:35,861:INFO:Initializing Lasso Least Angle Regression
2023-02-14 23:27:35,861:INFO:Total runtime is 0.025540967782338456 minutes
2023-02-14 23:27:35,864:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:35,864:INFO:Initializing create_model()
2023-02-14 23:27:35,865:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:35,865:INFO:Checking exceptions
2023-02-14 23:27:35,865:INFO:Importing libraries
2023-02-14 23:27:35,865:INFO:Copying training dataset
2023-02-14 23:27:35,867:INFO:Defining folds
2023-02-14 23:27:35,867:INFO:Declaring metric variables
2023-02-14 23:27:35,871:INFO:Importing untrained model
2023-02-14 23:27:35,876:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 23:27:35,884:INFO:Starting cross validation
2023-02-14 23:27:35,885:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:35,924:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:35,936:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:35,945:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:35,955:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:35,962:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:35,971:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:35,981:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:35,986:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:35,995:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:36,003:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:36,014:INFO:Calculating mean and std
2023-02-14 23:27:36,016:INFO:Creating metrics dataframe
2023-02-14 23:27:36,018:INFO:Uploading results into container
2023-02-14 23:27:36,018:INFO:Uploading model into container now
2023-02-14 23:27:36,018:INFO:_master_model_container: 6
2023-02-14 23:27:36,018:INFO:_display_container: 2
2023-02-14 23:27:36,019:INFO:LassoLars(random_state=33)
2023-02-14 23:27:36,019:INFO:create_model() successfully completed......................................
2023-02-14 23:27:36,101:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:36,101:INFO:Creating metrics dataframe
2023-02-14 23:27:36,110:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 23:27:36,110:INFO:Total runtime is 0.029697128136952713 minutes
2023-02-14 23:27:36,114:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:36,114:INFO:Initializing create_model()
2023-02-14 23:27:36,114:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:36,114:INFO:Checking exceptions
2023-02-14 23:27:36,114:INFO:Importing libraries
2023-02-14 23:27:36,115:INFO:Copying training dataset
2023-02-14 23:27:36,117:INFO:Defining folds
2023-02-14 23:27:36,117:INFO:Declaring metric variables
2023-02-14 23:27:36,122:INFO:Importing untrained model
2023-02-14 23:27:36,126:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 23:27:36,133:INFO:Starting cross validation
2023-02-14 23:27:36,135:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:36,173:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:36,183:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:36,191:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:36,200:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:36,210:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:36,219:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:36,229:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:36,237:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:36,246:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:36,252:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:36,265:INFO:Calculating mean and std
2023-02-14 23:27:36,266:INFO:Creating metrics dataframe
2023-02-14 23:27:36,268:INFO:Uploading results into container
2023-02-14 23:27:36,269:INFO:Uploading model into container now
2023-02-14 23:27:36,269:INFO:_master_model_container: 7
2023-02-14 23:27:36,269:INFO:_display_container: 2
2023-02-14 23:27:36,269:INFO:OrthogonalMatchingPursuit()
2023-02-14 23:27:36,269:INFO:create_model() successfully completed......................................
2023-02-14 23:27:36,355:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:36,355:INFO:Creating metrics dataframe
2023-02-14 23:27:36,367:INFO:Initializing Bayesian Ridge
2023-02-14 23:27:36,367:INFO:Total runtime is 0.033975418408711745 minutes
2023-02-14 23:27:36,370:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:36,370:INFO:Initializing create_model()
2023-02-14 23:27:36,370:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:36,371:INFO:Checking exceptions
2023-02-14 23:27:36,371:INFO:Importing libraries
2023-02-14 23:27:36,371:INFO:Copying training dataset
2023-02-14 23:27:36,374:INFO:Defining folds
2023-02-14 23:27:36,375:INFO:Declaring metric variables
2023-02-14 23:27:36,378:INFO:Importing untrained model
2023-02-14 23:27:36,383:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:27:36,389:INFO:Starting cross validation
2023-02-14 23:27:36,392:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:36,519:INFO:Calculating mean and std
2023-02-14 23:27:36,519:INFO:Creating metrics dataframe
2023-02-14 23:27:36,522:INFO:Uploading results into container
2023-02-14 23:27:36,522:INFO:Uploading model into container now
2023-02-14 23:27:36,522:INFO:_master_model_container: 8
2023-02-14 23:27:36,522:INFO:_display_container: 2
2023-02-14 23:27:36,522:INFO:BayesianRidge()
2023-02-14 23:27:36,522:INFO:create_model() successfully completed......................................
2023-02-14 23:27:36,606:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:36,606:INFO:Creating metrics dataframe
2023-02-14 23:27:36,616:INFO:Initializing Passive Aggressive Regressor
2023-02-14 23:27:36,616:INFO:Total runtime is 0.038136613368988034 minutes
2023-02-14 23:27:36,620:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:36,620:INFO:Initializing create_model()
2023-02-14 23:27:36,620:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:36,620:INFO:Checking exceptions
2023-02-14 23:27:36,620:INFO:Importing libraries
2023-02-14 23:27:36,620:INFO:Copying training dataset
2023-02-14 23:27:36,625:INFO:Defining folds
2023-02-14 23:27:36,625:INFO:Declaring metric variables
2023-02-14 23:27:36,629:INFO:Importing untrained model
2023-02-14 23:27:36,633:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 23:27:36,639:INFO:Starting cross validation
2023-02-14 23:27:36,641:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:36,796:INFO:Calculating mean and std
2023-02-14 23:27:36,797:INFO:Creating metrics dataframe
2023-02-14 23:27:36,800:INFO:Uploading results into container
2023-02-14 23:27:36,801:INFO:Uploading model into container now
2023-02-14 23:27:36,801:INFO:_master_model_container: 9
2023-02-14 23:27:36,801:INFO:_display_container: 2
2023-02-14 23:27:36,802:INFO:PassiveAggressiveRegressor(random_state=33)
2023-02-14 23:27:36,802:INFO:create_model() successfully completed......................................
2023-02-14 23:27:36,890:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:36,890:INFO:Creating metrics dataframe
2023-02-14 23:27:36,900:INFO:Initializing Huber Regressor
2023-02-14 23:27:36,901:INFO:Total runtime is 0.0428618590037028 minutes
2023-02-14 23:27:36,903:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:36,904:INFO:Initializing create_model()
2023-02-14 23:27:36,904:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:36,904:INFO:Checking exceptions
2023-02-14 23:27:36,904:INFO:Importing libraries
2023-02-14 23:27:36,904:INFO:Copying training dataset
2023-02-14 23:27:36,907:INFO:Defining folds
2023-02-14 23:27:36,909:INFO:Declaring metric variables
2023-02-14 23:27:36,913:INFO:Importing untrained model
2023-02-14 23:27:36,917:INFO:Huber Regressor Imported successfully
2023-02-14 23:27:36,925:INFO:Starting cross validation
2023-02-14 23:27:36,926:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:36,980:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:36,990:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:36,998:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:37,006:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:37,019:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:37,029:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:37,039:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:37,054:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:37,062:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:37,071:INFO:Calculating mean and std
2023-02-14 23:27:37,074:INFO:Creating metrics dataframe
2023-02-14 23:27:37,077:INFO:Uploading results into container
2023-02-14 23:27:37,077:INFO:Uploading model into container now
2023-02-14 23:27:37,077:INFO:_master_model_container: 10
2023-02-14 23:27:37,077:INFO:_display_container: 2
2023-02-14 23:27:37,078:INFO:HuberRegressor()
2023-02-14 23:27:37,078:INFO:create_model() successfully completed......................................
2023-02-14 23:27:37,162:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:37,162:INFO:Creating metrics dataframe
2023-02-14 23:27:37,171:INFO:Initializing K Neighbors Regressor
2023-02-14 23:27:37,171:INFO:Total runtime is 0.047383161385854085 minutes
2023-02-14 23:27:37,174:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:37,174:INFO:Initializing create_model()
2023-02-14 23:27:37,175:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:37,175:INFO:Checking exceptions
2023-02-14 23:27:37,175:INFO:Importing libraries
2023-02-14 23:27:37,175:INFO:Copying training dataset
2023-02-14 23:27:37,179:INFO:Defining folds
2023-02-14 23:27:37,179:INFO:Declaring metric variables
2023-02-14 23:27:37,183:INFO:Importing untrained model
2023-02-14 23:27:37,185:INFO:K Neighbors Regressor Imported successfully
2023-02-14 23:27:37,192:INFO:Starting cross validation
2023-02-14 23:27:37,194:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:37,333:INFO:Calculating mean and std
2023-02-14 23:27:37,334:INFO:Creating metrics dataframe
2023-02-14 23:27:37,337:INFO:Uploading results into container
2023-02-14 23:27:37,338:INFO:Uploading model into container now
2023-02-14 23:27:37,338:INFO:_master_model_container: 11
2023-02-14 23:27:37,338:INFO:_display_container: 2
2023-02-14 23:27:37,339:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 23:27:37,339:INFO:create_model() successfully completed......................................
2023-02-14 23:27:37,422:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:37,422:INFO:Creating metrics dataframe
2023-02-14 23:27:37,430:INFO:Initializing Decision Tree Regressor
2023-02-14 23:27:37,430:INFO:Total runtime is 0.05170107285181681 minutes
2023-02-14 23:27:37,433:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:37,433:INFO:Initializing create_model()
2023-02-14 23:27:37,434:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:37,434:INFO:Checking exceptions
2023-02-14 23:27:37,434:INFO:Importing libraries
2023-02-14 23:27:37,434:INFO:Copying training dataset
2023-02-14 23:27:37,438:INFO:Defining folds
2023-02-14 23:27:37,438:INFO:Declaring metric variables
2023-02-14 23:27:37,443:INFO:Importing untrained model
2023-02-14 23:27:37,447:INFO:Decision Tree Regressor Imported successfully
2023-02-14 23:27:37,454:INFO:Starting cross validation
2023-02-14 23:27:37,455:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:37,576:INFO:Calculating mean and std
2023-02-14 23:27:37,577:INFO:Creating metrics dataframe
2023-02-14 23:27:37,579:INFO:Uploading results into container
2023-02-14 23:27:37,581:INFO:Uploading model into container now
2023-02-14 23:27:37,581:INFO:_master_model_container: 12
2023-02-14 23:27:37,582:INFO:_display_container: 2
2023-02-14 23:27:37,582:INFO:DecisionTreeRegressor(random_state=33)
2023-02-14 23:27:37,582:INFO:create_model() successfully completed......................................
2023-02-14 23:27:37,665:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:37,665:INFO:Creating metrics dataframe
2023-02-14 23:27:37,673:INFO:Initializing Random Forest Regressor
2023-02-14 23:27:37,673:INFO:Total runtime is 0.05573885838190715 minutes
2023-02-14 23:27:37,677:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:37,677:INFO:Initializing create_model()
2023-02-14 23:27:37,677:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:37,677:INFO:Checking exceptions
2023-02-14 23:27:37,677:INFO:Importing libraries
2023-02-14 23:27:37,677:INFO:Copying training dataset
2023-02-14 23:27:37,681:INFO:Defining folds
2023-02-14 23:27:37,681:INFO:Declaring metric variables
2023-02-14 23:27:37,685:INFO:Importing untrained model
2023-02-14 23:27:37,688:INFO:Random Forest Regressor Imported successfully
2023-02-14 23:27:37,696:INFO:Starting cross validation
2023-02-14 23:27:37,697:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:38,112:INFO:Calculating mean and std
2023-02-14 23:27:38,113:INFO:Creating metrics dataframe
2023-02-14 23:27:38,116:INFO:Uploading results into container
2023-02-14 23:27:38,116:INFO:Uploading model into container now
2023-02-14 23:27:38,116:INFO:_master_model_container: 13
2023-02-14 23:27:38,116:INFO:_display_container: 2
2023-02-14 23:27:38,117:INFO:RandomForestRegressor(n_jobs=-1, random_state=33)
2023-02-14 23:27:38,117:INFO:create_model() successfully completed......................................
2023-02-14 23:27:38,204:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:38,204:INFO:Creating metrics dataframe
2023-02-14 23:27:38,216:INFO:Initializing Extra Trees Regressor
2023-02-14 23:27:38,216:INFO:Total runtime is 0.06478768587112427 minutes
2023-02-14 23:27:38,218:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:38,218:INFO:Initializing create_model()
2023-02-14 23:27:38,218:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:38,218:INFO:Checking exceptions
2023-02-14 23:27:38,218:INFO:Importing libraries
2023-02-14 23:27:38,219:INFO:Copying training dataset
2023-02-14 23:27:38,222:INFO:Defining folds
2023-02-14 23:27:38,223:INFO:Declaring metric variables
2023-02-14 23:27:38,226:INFO:Importing untrained model
2023-02-14 23:27:38,230:INFO:Extra Trees Regressor Imported successfully
2023-02-14 23:27:38,237:INFO:Starting cross validation
2023-02-14 23:27:38,239:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:38,587:INFO:Calculating mean and std
2023-02-14 23:27:38,590:INFO:Creating metrics dataframe
2023-02-14 23:27:38,592:INFO:Uploading results into container
2023-02-14 23:27:38,593:INFO:Uploading model into container now
2023-02-14 23:27:38,593:INFO:_master_model_container: 14
2023-02-14 23:27:38,593:INFO:_display_container: 2
2023-02-14 23:27:38,593:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=33)
2023-02-14 23:27:38,593:INFO:create_model() successfully completed......................................
2023-02-14 23:27:38,678:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:38,678:INFO:Creating metrics dataframe
2023-02-14 23:27:38,686:INFO:Initializing AdaBoost Regressor
2023-02-14 23:27:38,686:INFO:Total runtime is 0.07262835105260212 minutes
2023-02-14 23:27:38,691:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:38,691:INFO:Initializing create_model()
2023-02-14 23:27:38,691:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:38,691:INFO:Checking exceptions
2023-02-14 23:27:38,692:INFO:Importing libraries
2023-02-14 23:27:38,692:INFO:Copying training dataset
2023-02-14 23:27:38,694:INFO:Defining folds
2023-02-14 23:27:38,694:INFO:Declaring metric variables
2023-02-14 23:27:38,697:INFO:Importing untrained model
2023-02-14 23:27:38,701:INFO:AdaBoost Regressor Imported successfully
2023-02-14 23:27:38,708:INFO:Starting cross validation
2023-02-14 23:27:38,708:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:38,917:INFO:Calculating mean and std
2023-02-14 23:27:38,918:INFO:Creating metrics dataframe
2023-02-14 23:27:38,919:INFO:Uploading results into container
2023-02-14 23:27:38,919:INFO:Uploading model into container now
2023-02-14 23:27:38,919:INFO:_master_model_container: 15
2023-02-14 23:27:38,922:INFO:_display_container: 2
2023-02-14 23:27:38,922:INFO:AdaBoostRegressor(random_state=33)
2023-02-14 23:27:38,922:INFO:create_model() successfully completed......................................
2023-02-14 23:27:39,005:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:39,005:INFO:Creating metrics dataframe
2023-02-14 23:27:39,016:INFO:Initializing Gradient Boosting Regressor
2023-02-14 23:27:39,016:INFO:Total runtime is 0.07813244660695393 minutes
2023-02-14 23:27:39,019:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:39,019:INFO:Initializing create_model()
2023-02-14 23:27:39,019:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:39,019:INFO:Checking exceptions
2023-02-14 23:27:39,019:INFO:Importing libraries
2023-02-14 23:27:39,019:INFO:Copying training dataset
2023-02-14 23:27:39,023:INFO:Defining folds
2023-02-14 23:27:39,024:INFO:Declaring metric variables
2023-02-14 23:27:39,027:INFO:Importing untrained model
2023-02-14 23:27:39,032:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 23:27:39,043:INFO:Starting cross validation
2023-02-14 23:27:39,044:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:39,240:INFO:Calculating mean and std
2023-02-14 23:27:39,241:INFO:Creating metrics dataframe
2023-02-14 23:27:39,245:INFO:Uploading results into container
2023-02-14 23:27:39,245:INFO:Uploading model into container now
2023-02-14 23:27:39,246:INFO:_master_model_container: 16
2023-02-14 23:27:39,246:INFO:_display_container: 2
2023-02-14 23:27:39,246:INFO:GradientBoostingRegressor(random_state=33)
2023-02-14 23:27:39,246:INFO:create_model() successfully completed......................................
2023-02-14 23:27:39,328:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:39,328:INFO:Creating metrics dataframe
2023-02-14 23:27:39,341:INFO:Initializing Extreme Gradient Boosting
2023-02-14 23:27:39,341:INFO:Total runtime is 0.08354948759078978 minutes
2023-02-14 23:27:39,346:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:39,346:INFO:Initializing create_model()
2023-02-14 23:27:39,346:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:39,346:INFO:Checking exceptions
2023-02-14 23:27:39,346:INFO:Importing libraries
2023-02-14 23:27:39,346:INFO:Copying training dataset
2023-02-14 23:27:39,350:INFO:Defining folds
2023-02-14 23:27:39,350:INFO:Declaring metric variables
2023-02-14 23:27:39,353:INFO:Importing untrained model
2023-02-14 23:27:39,359:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 23:27:39,366:INFO:Starting cross validation
2023-02-14 23:27:39,367:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:39,549:INFO:Calculating mean and std
2023-02-14 23:27:39,550:INFO:Creating metrics dataframe
2023-02-14 23:27:39,552:INFO:Uploading results into container
2023-02-14 23:27:39,553:INFO:Uploading model into container now
2023-02-14 23:27:39,553:INFO:_master_model_container: 17
2023-02-14 23:27:39,554:INFO:_display_container: 2
2023-02-14 23:27:39,554:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=33, ...)
2023-02-14 23:27:39,554:INFO:create_model() successfully completed......................................
2023-02-14 23:27:39,642:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:39,642:INFO:Creating metrics dataframe
2023-02-14 23:27:39,651:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 23:27:39,651:INFO:Total runtime is 0.0887105107307434 minutes
2023-02-14 23:27:39,654:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:39,654:INFO:Initializing create_model()
2023-02-14 23:27:39,655:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:39,655:INFO:Checking exceptions
2023-02-14 23:27:39,655:INFO:Importing libraries
2023-02-14 23:27:39,655:INFO:Copying training dataset
2023-02-14 23:27:39,658:INFO:Defining folds
2023-02-14 23:27:39,658:INFO:Declaring metric variables
2023-02-14 23:27:39,663:INFO:Importing untrained model
2023-02-14 23:27:39,666:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 23:27:39,674:INFO:Starting cross validation
2023-02-14 23:27:39,675:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:39,815:INFO:Calculating mean and std
2023-02-14 23:27:39,816:INFO:Creating metrics dataframe
2023-02-14 23:27:39,818:INFO:Uploading results into container
2023-02-14 23:27:39,818:INFO:Uploading model into container now
2023-02-14 23:27:39,818:INFO:_master_model_container: 18
2023-02-14 23:27:39,818:INFO:_display_container: 2
2023-02-14 23:27:39,818:INFO:LGBMRegressor(random_state=33)
2023-02-14 23:27:39,818:INFO:create_model() successfully completed......................................
2023-02-14 23:27:39,906:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:39,906:INFO:Creating metrics dataframe
2023-02-14 23:27:39,918:INFO:Initializing Dummy Regressor
2023-02-14 23:27:39,918:INFO:Total runtime is 0.09316926399866739 minutes
2023-02-14 23:27:39,923:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:39,923:INFO:Initializing create_model()
2023-02-14 23:27:39,923:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000215631AB5E0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:39,923:INFO:Checking exceptions
2023-02-14 23:27:39,923:INFO:Importing libraries
2023-02-14 23:27:39,923:INFO:Copying training dataset
2023-02-14 23:27:39,927:INFO:Defining folds
2023-02-14 23:27:39,928:INFO:Declaring metric variables
2023-02-14 23:27:39,930:INFO:Importing untrained model
2023-02-14 23:27:39,933:INFO:Dummy Regressor Imported successfully
2023-02-14 23:27:39,941:INFO:Starting cross validation
2023-02-14 23:27:39,943:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:40,067:INFO:Calculating mean and std
2023-02-14 23:27:40,067:INFO:Creating metrics dataframe
2023-02-14 23:27:40,072:INFO:Uploading results into container
2023-02-14 23:27:40,072:INFO:Uploading model into container now
2023-02-14 23:27:40,073:INFO:_master_model_container: 19
2023-02-14 23:27:40,073:INFO:_display_container: 2
2023-02-14 23:27:40,073:INFO:DummyRegressor()
2023-02-14 23:27:40,073:INFO:create_model() successfully completed......................................
2023-02-14 23:27:40,161:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:40,161:INFO:Creating metrics dataframe
2023-02-14 23:27:40,181:INFO:Initializing create_model()
2023-02-14 23:27:40,181:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E854A90>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:40,181:INFO:Checking exceptions
2023-02-14 23:27:40,184:INFO:Importing libraries
2023-02-14 23:27:40,184:INFO:Copying training dataset
2023-02-14 23:27:40,185:INFO:Defining folds
2023-02-14 23:27:40,185:INFO:Declaring metric variables
2023-02-14 23:27:40,186:INFO:Importing untrained model
2023-02-14 23:27:40,186:INFO:Declaring custom model
2023-02-14 23:27:40,186:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:27:40,188:INFO:Cross validation set to False
2023-02-14 23:27:40,188:INFO:Fitting Model
2023-02-14 23:27:40,217:INFO:BayesianRidge()
2023-02-14 23:27:40,217:INFO:create_model() successfully completed......................................
2023-02-14 23:27:40,339:INFO:_master_model_container: 19
2023-02-14 23:27:40,340:INFO:_display_container: 2
2023-02-14 23:27:40,340:INFO:BayesianRidge()
2023-02-14 23:27:40,340:INFO:compare_models() successfully completed......................................
2023-02-14 23:27:48,739:INFO:PyCaret RegressionExperiment
2023-02-14 23:27:48,739:INFO:Logging name: reg-default-name
2023-02-14 23:27:48,739:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 23:27:48,739:INFO:version 3.0.0.rc8
2023-02-14 23:27:48,739:INFO:Initializing setup()
2023-02-14 23:27:48,739:INFO:self.USI: 4a81
2023-02-14 23:27:48,740:INFO:self._variable_keys: {'data', 'transform_target_param', 'logging_param', 'fold_generator', 'X_test', 'y', 'exp_name_log', 'pipeline', 'n_jobs_param', 'exp_id', 'log_plots_param', 'X_train', 'y_test', 'html_param', 'gpu_param', '_ml_usecase', 'X', 'seed', 'target_param', 'memory', 'gpu_n_jobs_param', 'USI', 'idx', 'fold_groups_param', 'fold_shuffle_param', '_available_plots', 'y_train'}
2023-02-14 23:27:48,740:INFO:Checking environment
2023-02-14 23:27:48,740:INFO:python_version: 3.9.13
2023-02-14 23:27:48,740:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 23:27:48,740:INFO:machine: AMD64
2023-02-14 23:27:48,740:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 23:27:48,747:INFO:Memory: svmem(total=16805040128, available=4231147520, percent=74.8, used=12573892608, free=4231147520)
2023-02-14 23:27:48,747:INFO:Physical Core: 4
2023-02-14 23:27:48,748:INFO:Logical Core: 8
2023-02-14 23:27:48,748:INFO:Checking libraries
2023-02-14 23:27:48,748:INFO:System:
2023-02-14 23:27:48,748:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 23:27:48,748:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 23:27:48,748:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 23:27:48,748:INFO:PyCaret required dependencies:
2023-02-14 23:27:48,748:INFO:                 pip: 23.0
2023-02-14 23:27:48,748:INFO:          setuptools: 58.1.0
2023-02-14 23:27:48,748:INFO:             pycaret: 3.0.0rc8
2023-02-14 23:27:48,748:INFO:             IPython: 8.7.0
2023-02-14 23:27:48,748:INFO:          ipywidgets: 8.0.4
2023-02-14 23:27:48,748:INFO:                tqdm: 4.64.1
2023-02-14 23:27:48,748:INFO:               numpy: 1.22.1
2023-02-14 23:27:48,748:INFO:              pandas: 1.5.2
2023-02-14 23:27:48,748:INFO:              jinja2: 3.1.2
2023-02-14 23:27:48,748:INFO:               scipy: 1.5.4
2023-02-14 23:27:48,748:INFO:              joblib: 1.2.0
2023-02-14 23:27:48,748:INFO:             sklearn: 1.1.3
2023-02-14 23:27:48,749:INFO:                pyod: 1.0.7
2023-02-14 23:27:48,749:INFO:            imblearn: 0.10.1
2023-02-14 23:27:48,749:INFO:   category_encoders: 2.6.0
2023-02-14 23:27:48,749:INFO:            lightgbm: 3.3.4
2023-02-14 23:27:48,749:INFO:               numba: 0.56.4
2023-02-14 23:27:48,749:INFO:            requests: 2.28.1
2023-02-14 23:27:48,749:INFO:          matplotlib: 3.6.2
2023-02-14 23:27:48,749:INFO:          scikitplot: 0.3.7
2023-02-14 23:27:48,749:INFO:         yellowbrick: 1.5
2023-02-14 23:27:48,749:INFO:              plotly: 5.11.0
2023-02-14 23:27:48,749:INFO:             kaleido: 0.2.1
2023-02-14 23:27:48,749:INFO:         statsmodels: 0.13.5
2023-02-14 23:27:48,749:INFO:              sktime: 0.15.1
2023-02-14 23:27:48,749:INFO:               tbats: 1.1.2
2023-02-14 23:27:48,749:INFO:            pmdarima: 2.0.2
2023-02-14 23:27:48,749:INFO:              psutil: 5.9.4
2023-02-14 23:27:48,749:INFO:PyCaret optional dependencies:
2023-02-14 23:27:48,749:INFO:                shap: 0.41.0
2023-02-14 23:27:48,750:INFO:           interpret: 0.3.0
2023-02-14 23:27:48,750:INFO:                umap: Not installed
2023-02-14 23:27:48,750:INFO:    pandas_profiling: 3.6.2
2023-02-14 23:27:48,750:INFO:  explainerdashboard: Not installed
2023-02-14 23:27:48,750:INFO:             autoviz: Not installed
2023-02-14 23:27:48,750:INFO:           fairlearn: Not installed
2023-02-14 23:27:48,750:INFO:             xgboost: 1.7.3
2023-02-14 23:27:48,750:INFO:            catboost: Not installed
2023-02-14 23:27:48,750:INFO:              kmodes: Not installed
2023-02-14 23:27:48,750:INFO:             mlxtend: Not installed
2023-02-14 23:27:48,750:INFO:       statsforecast: Not installed
2023-02-14 23:27:48,750:INFO:        tune_sklearn: Not installed
2023-02-14 23:27:48,750:INFO:                 ray: Not installed
2023-02-14 23:27:48,750:INFO:            hyperopt: Not installed
2023-02-14 23:27:48,750:INFO:              optuna: Not installed
2023-02-14 23:27:48,750:INFO:               skopt: Not installed
2023-02-14 23:27:48,750:INFO:              mlflow: Not installed
2023-02-14 23:27:48,750:INFO:              gradio: Not installed
2023-02-14 23:27:48,750:INFO:             fastapi: Not installed
2023-02-14 23:27:48,751:INFO:             uvicorn: Not installed
2023-02-14 23:27:48,751:INFO:              m2cgen: Not installed
2023-02-14 23:27:48,751:INFO:           evidently: Not installed
2023-02-14 23:27:48,751:INFO:                nltk: 3.8
2023-02-14 23:27:48,751:INFO:            pyLDAvis: Not installed
2023-02-14 23:27:48,751:INFO:              gensim: Not installed
2023-02-14 23:27:48,751:INFO:               spacy: Not installed
2023-02-14 23:27:48,751:INFO:           wordcloud: 1.8.2.2
2023-02-14 23:27:48,751:INFO:            textblob: Not installed
2023-02-14 23:27:48,751:INFO:               fugue: Not installed
2023-02-14 23:27:48,751:INFO:           streamlit: 1.16.0
2023-02-14 23:27:48,751:INFO:             prophet: Not installed
2023-02-14 23:27:48,751:INFO:None
2023-02-14 23:27:48,751:INFO:Set up data.
2023-02-14 23:27:48,756:INFO:Set up train/test split.
2023-02-14 23:27:48,760:INFO:Set up index.
2023-02-14 23:27:48,760:INFO:Set up folding strategy.
2023-02-14 23:27:48,760:INFO:Assigning column types.
2023-02-14 23:27:48,764:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 23:27:48,765:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:27:48,770:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:48,776:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:48,844:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:48,891:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:48,893:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:48,897:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:48,897:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:27:48,904:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:48,909:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:48,978:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,023:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,024:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:49,026:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:49,026:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 23:27:49,032:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,037:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,088:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,124:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,125:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:49,127:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:49,130:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,134:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,183:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,218:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,218:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:49,222:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:49,222:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 23:27:49,232:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,279:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,314:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,314:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:49,316:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:49,323:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,367:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,399:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,400:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:49,402:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:49,402:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 23:27:49,453:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,487:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,487:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:49,489:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:49,540:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,579:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,579:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:49,582:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:49,582:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 23:27:49,632:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,670:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:49,672:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:49,734:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:27:49,778:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:49,780:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:49,781:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 23:27:49,873:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:49,875:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:49,963:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:49,964:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:49,965:INFO:Preparing preprocessing pipeline...
2023-02-14 23:27:49,966:INFO:Set up column name cleaning.
2023-02-14 23:27:49,966:INFO:Set up simple imputation.
2023-02-14 23:27:49,988:INFO:Finished creating preprocessing pipeline.
2023-02-14 23:27:49,992:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 23:27:49,992:INFO:Creating final display dataframe.
2023-02-14 23:27:50,113:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              4a81
2023-02-14 23:27:50,217:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:50,218:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:50,312:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:27:50,314:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:27:50,315:INFO:setup() successfully completed in 1.58s...............
2023-02-14 23:27:50,315:INFO:Initializing compare_models()
2023-02-14 23:27:50,315:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 23:27:50,315:INFO:Checking exceptions
2023-02-14 23:27:50,316:INFO:Preparing display monitor
2023-02-14 23:27:50,342:INFO:Initializing Linear Regression
2023-02-14 23:27:50,342:INFO:Total runtime is 0.0 minutes
2023-02-14 23:27:50,347:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:50,347:INFO:Initializing create_model()
2023-02-14 23:27:50,348:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:50,348:INFO:Checking exceptions
2023-02-14 23:27:50,348:INFO:Importing libraries
2023-02-14 23:27:50,348:INFO:Copying training dataset
2023-02-14 23:27:50,350:INFO:Defining folds
2023-02-14 23:27:50,350:INFO:Declaring metric variables
2023-02-14 23:27:50,353:INFO:Importing untrained model
2023-02-14 23:27:50,357:INFO:Linear Regression Imported successfully
2023-02-14 23:27:50,364:INFO:Starting cross validation
2023-02-14 23:27:50,365:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:50,516:INFO:Calculating mean and std
2023-02-14 23:27:50,516:INFO:Creating metrics dataframe
2023-02-14 23:27:50,519:INFO:Uploading results into container
2023-02-14 23:27:50,519:INFO:Uploading model into container now
2023-02-14 23:27:50,520:INFO:_master_model_container: 1
2023-02-14 23:27:50,520:INFO:_display_container: 2
2023-02-14 23:27:50,520:INFO:LinearRegression(n_jobs=-1)
2023-02-14 23:27:50,520:INFO:create_model() successfully completed......................................
2023-02-14 23:27:50,609:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:50,609:INFO:Creating metrics dataframe
2023-02-14 23:27:50,616:INFO:Initializing Lasso Regression
2023-02-14 23:27:50,616:INFO:Total runtime is 0.00456626017888387 minutes
2023-02-14 23:27:50,618:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:50,618:INFO:Initializing create_model()
2023-02-14 23:27:50,618:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:50,619:INFO:Checking exceptions
2023-02-14 23:27:50,619:INFO:Importing libraries
2023-02-14 23:27:50,619:INFO:Copying training dataset
2023-02-14 23:27:50,621:INFO:Defining folds
2023-02-14 23:27:50,621:INFO:Declaring metric variables
2023-02-14 23:27:50,623:INFO:Importing untrained model
2023-02-14 23:27:50,627:INFO:Lasso Regression Imported successfully
2023-02-14 23:27:50,634:INFO:Starting cross validation
2023-02-14 23:27:50,635:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:50,758:INFO:Calculating mean and std
2023-02-14 23:27:50,758:INFO:Creating metrics dataframe
2023-02-14 23:27:50,761:INFO:Uploading results into container
2023-02-14 23:27:50,762:INFO:Uploading model into container now
2023-02-14 23:27:50,762:INFO:_master_model_container: 2
2023-02-14 23:27:50,762:INFO:_display_container: 2
2023-02-14 23:27:50,762:INFO:Lasso(random_state=42)
2023-02-14 23:27:50,762:INFO:create_model() successfully completed......................................
2023-02-14 23:27:50,849:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:50,849:INFO:Creating metrics dataframe
2023-02-14 23:27:50,856:INFO:Initializing Ridge Regression
2023-02-14 23:27:50,856:INFO:Total runtime is 0.008569101492563885 minutes
2023-02-14 23:27:50,858:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:50,858:INFO:Initializing create_model()
2023-02-14 23:27:50,858:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:50,858:INFO:Checking exceptions
2023-02-14 23:27:50,858:INFO:Importing libraries
2023-02-14 23:27:50,858:INFO:Copying training dataset
2023-02-14 23:27:50,864:INFO:Defining folds
2023-02-14 23:27:50,864:INFO:Declaring metric variables
2023-02-14 23:27:50,867:INFO:Importing untrained model
2023-02-14 23:27:50,870:INFO:Ridge Regression Imported successfully
2023-02-14 23:27:50,877:INFO:Starting cross validation
2023-02-14 23:27:50,879:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:51,002:INFO:Calculating mean and std
2023-02-14 23:27:51,002:INFO:Creating metrics dataframe
2023-02-14 23:27:51,005:INFO:Uploading results into container
2023-02-14 23:27:51,005:INFO:Uploading model into container now
2023-02-14 23:27:51,005:INFO:_master_model_container: 3
2023-02-14 23:27:51,005:INFO:_display_container: 2
2023-02-14 23:27:51,006:INFO:Ridge(random_state=42)
2023-02-14 23:27:51,006:INFO:create_model() successfully completed......................................
2023-02-14 23:27:51,116:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:51,116:INFO:Creating metrics dataframe
2023-02-14 23:27:51,122:INFO:Initializing Elastic Net
2023-02-14 23:27:51,122:INFO:Total runtime is 0.013001779715220135 minutes
2023-02-14 23:27:51,126:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:51,127:INFO:Initializing create_model()
2023-02-14 23:27:51,128:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:51,128:INFO:Checking exceptions
2023-02-14 23:27:51,128:INFO:Importing libraries
2023-02-14 23:27:51,128:INFO:Copying training dataset
2023-02-14 23:27:51,130:INFO:Defining folds
2023-02-14 23:27:51,130:INFO:Declaring metric variables
2023-02-14 23:27:51,134:INFO:Importing untrained model
2023-02-14 23:27:51,137:INFO:Elastic Net Imported successfully
2023-02-14 23:27:51,143:INFO:Starting cross validation
2023-02-14 23:27:51,144:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:51,271:INFO:Calculating mean and std
2023-02-14 23:27:51,271:INFO:Creating metrics dataframe
2023-02-14 23:27:51,273:INFO:Uploading results into container
2023-02-14 23:27:51,273:INFO:Uploading model into container now
2023-02-14 23:27:51,274:INFO:_master_model_container: 4
2023-02-14 23:27:51,274:INFO:_display_container: 2
2023-02-14 23:27:51,274:INFO:ElasticNet(random_state=42)
2023-02-14 23:27:51,274:INFO:create_model() successfully completed......................................
2023-02-14 23:27:51,357:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:51,357:INFO:Creating metrics dataframe
2023-02-14 23:27:51,365:INFO:Initializing Least Angle Regression
2023-02-14 23:27:51,365:INFO:Total runtime is 0.017045517762502037 minutes
2023-02-14 23:27:51,367:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:51,367:INFO:Initializing create_model()
2023-02-14 23:27:51,367:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:51,368:INFO:Checking exceptions
2023-02-14 23:27:51,368:INFO:Importing libraries
2023-02-14 23:27:51,368:INFO:Copying training dataset
2023-02-14 23:27:51,370:INFO:Defining folds
2023-02-14 23:27:51,372:INFO:Declaring metric variables
2023-02-14 23:27:51,375:INFO:Importing untrained model
2023-02-14 23:27:51,379:INFO:Least Angle Regression Imported successfully
2023-02-14 23:27:51,387:INFO:Starting cross validation
2023-02-14 23:27:51,388:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:51,427:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,438:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,442:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,452:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,464:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,473:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,482:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,490:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,499:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,505:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,517:INFO:Calculating mean and std
2023-02-14 23:27:51,518:INFO:Creating metrics dataframe
2023-02-14 23:27:51,521:INFO:Uploading results into container
2023-02-14 23:27:51,522:INFO:Uploading model into container now
2023-02-14 23:27:51,522:INFO:_master_model_container: 5
2023-02-14 23:27:51,522:INFO:_display_container: 2
2023-02-14 23:27:51,522:INFO:Lars(random_state=42)
2023-02-14 23:27:51,522:INFO:create_model() successfully completed......................................
2023-02-14 23:27:51,606:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:51,606:INFO:Creating metrics dataframe
2023-02-14 23:27:51,616:INFO:Initializing Lasso Least Angle Regression
2023-02-14 23:27:51,616:INFO:Total runtime is 0.02123015324274699 minutes
2023-02-14 23:27:51,619:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:51,619:INFO:Initializing create_model()
2023-02-14 23:27:51,619:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:51,620:INFO:Checking exceptions
2023-02-14 23:27:51,620:INFO:Importing libraries
2023-02-14 23:27:51,620:INFO:Copying training dataset
2023-02-14 23:27:51,623:INFO:Defining folds
2023-02-14 23:27:51,623:INFO:Declaring metric variables
2023-02-14 23:27:51,627:INFO:Importing untrained model
2023-02-14 23:27:51,631:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 23:27:51,638:INFO:Starting cross validation
2023-02-14 23:27:51,639:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:51,682:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:51,688:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:51,698:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:51,706:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:51,717:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:51,723:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:51,731:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:51,739:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:51,746:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:51,754:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:27:51,765:INFO:Calculating mean and std
2023-02-14 23:27:51,767:INFO:Creating metrics dataframe
2023-02-14 23:27:51,769:INFO:Uploading results into container
2023-02-14 23:27:51,769:INFO:Uploading model into container now
2023-02-14 23:27:51,769:INFO:_master_model_container: 6
2023-02-14 23:27:51,769:INFO:_display_container: 2
2023-02-14 23:27:51,771:INFO:LassoLars(random_state=42)
2023-02-14 23:27:51,771:INFO:create_model() successfully completed......................................
2023-02-14 23:27:51,854:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:51,854:INFO:Creating metrics dataframe
2023-02-14 23:27:51,864:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 23:27:51,865:INFO:Total runtime is 0.0253775159517924 minutes
2023-02-14 23:27:51,868:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:51,868:INFO:Initializing create_model()
2023-02-14 23:27:51,868:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:51,868:INFO:Checking exceptions
2023-02-14 23:27:51,869:INFO:Importing libraries
2023-02-14 23:27:51,869:INFO:Copying training dataset
2023-02-14 23:27:51,871:INFO:Defining folds
2023-02-14 23:27:51,871:INFO:Declaring metric variables
2023-02-14 23:27:51,875:INFO:Importing untrained model
2023-02-14 23:27:51,879:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 23:27:51,888:INFO:Starting cross validation
2023-02-14 23:27:51,889:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:51,930:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,938:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,946:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,956:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,965:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,973:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,984:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:51,993:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:52,000:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:52,007:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:27:52,019:INFO:Calculating mean and std
2023-02-14 23:27:52,021:INFO:Creating metrics dataframe
2023-02-14 23:27:52,025:INFO:Uploading results into container
2023-02-14 23:27:52,025:INFO:Uploading model into container now
2023-02-14 23:27:52,025:INFO:_master_model_container: 7
2023-02-14 23:27:52,025:INFO:_display_container: 2
2023-02-14 23:27:52,025:INFO:OrthogonalMatchingPursuit()
2023-02-14 23:27:52,026:INFO:create_model() successfully completed......................................
2023-02-14 23:27:52,111:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:52,111:INFO:Creating metrics dataframe
2023-02-14 23:27:52,119:INFO:Initializing Bayesian Ridge
2023-02-14 23:27:52,119:INFO:Total runtime is 0.029623850186665857 minutes
2023-02-14 23:27:52,122:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:52,122:INFO:Initializing create_model()
2023-02-14 23:27:52,122:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:52,122:INFO:Checking exceptions
2023-02-14 23:27:52,122:INFO:Importing libraries
2023-02-14 23:27:52,122:INFO:Copying training dataset
2023-02-14 23:27:52,125:INFO:Defining folds
2023-02-14 23:27:52,126:INFO:Declaring metric variables
2023-02-14 23:27:52,131:INFO:Importing untrained model
2023-02-14 23:27:52,134:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:27:52,142:INFO:Starting cross validation
2023-02-14 23:27:52,143:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:52,272:INFO:Calculating mean and std
2023-02-14 23:27:52,274:INFO:Creating metrics dataframe
2023-02-14 23:27:52,276:INFO:Uploading results into container
2023-02-14 23:27:52,277:INFO:Uploading model into container now
2023-02-14 23:27:52,277:INFO:_master_model_container: 8
2023-02-14 23:27:52,277:INFO:_display_container: 2
2023-02-14 23:27:52,278:INFO:BayesianRidge()
2023-02-14 23:27:52,278:INFO:create_model() successfully completed......................................
2023-02-14 23:27:52,362:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:52,362:INFO:Creating metrics dataframe
2023-02-14 23:27:52,370:INFO:Initializing Passive Aggressive Regressor
2023-02-14 23:27:52,370:INFO:Total runtime is 0.03380856116612753 minutes
2023-02-14 23:27:52,375:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:52,375:INFO:Initializing create_model()
2023-02-14 23:27:52,375:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:52,376:INFO:Checking exceptions
2023-02-14 23:27:52,376:INFO:Importing libraries
2023-02-14 23:27:52,376:INFO:Copying training dataset
2023-02-14 23:27:52,379:INFO:Defining folds
2023-02-14 23:27:52,380:INFO:Declaring metric variables
2023-02-14 23:27:52,383:INFO:Importing untrained model
2023-02-14 23:27:52,386:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 23:27:52,395:INFO:Starting cross validation
2023-02-14 23:27:52,396:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:52,522:INFO:Calculating mean and std
2023-02-14 23:27:52,522:INFO:Creating metrics dataframe
2023-02-14 23:27:52,525:INFO:Uploading results into container
2023-02-14 23:27:52,527:INFO:Uploading model into container now
2023-02-14 23:27:52,527:INFO:_master_model_container: 9
2023-02-14 23:27:52,527:INFO:_display_container: 2
2023-02-14 23:27:52,527:INFO:PassiveAggressiveRegressor(random_state=42)
2023-02-14 23:27:52,527:INFO:create_model() successfully completed......................................
2023-02-14 23:27:52,613:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:52,613:INFO:Creating metrics dataframe
2023-02-14 23:27:52,623:INFO:Initializing Huber Regressor
2023-02-14 23:27:52,623:INFO:Total runtime is 0.038016978899637864 minutes
2023-02-14 23:27:52,627:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:52,627:INFO:Initializing create_model()
2023-02-14 23:27:52,627:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:52,627:INFO:Checking exceptions
2023-02-14 23:27:52,627:INFO:Importing libraries
2023-02-14 23:27:52,627:INFO:Copying training dataset
2023-02-14 23:27:52,632:INFO:Defining folds
2023-02-14 23:27:52,632:INFO:Declaring metric variables
2023-02-14 23:27:52,635:INFO:Importing untrained model
2023-02-14 23:27:52,639:INFO:Huber Regressor Imported successfully
2023-02-14 23:27:52,675:INFO:Starting cross validation
2023-02-14 23:27:52,676:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:52,738:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:52,761:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:52,769:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:52,785:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:52,795:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:52,805:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:52,807:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:52,816:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:27:52,827:INFO:Calculating mean and std
2023-02-14 23:27:52,828:INFO:Creating metrics dataframe
2023-02-14 23:27:52,831:INFO:Uploading results into container
2023-02-14 23:27:52,831:INFO:Uploading model into container now
2023-02-14 23:27:52,831:INFO:_master_model_container: 10
2023-02-14 23:27:52,831:INFO:_display_container: 2
2023-02-14 23:27:52,832:INFO:HuberRegressor()
2023-02-14 23:27:52,832:INFO:create_model() successfully completed......................................
2023-02-14 23:27:52,917:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:52,917:INFO:Creating metrics dataframe
2023-02-14 23:27:52,924:INFO:Initializing K Neighbors Regressor
2023-02-14 23:27:52,924:INFO:Total runtime is 0.04303408861160279 minutes
2023-02-14 23:27:52,928:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:52,928:INFO:Initializing create_model()
2023-02-14 23:27:52,928:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:52,929:INFO:Checking exceptions
2023-02-14 23:27:52,929:INFO:Importing libraries
2023-02-14 23:27:52,929:INFO:Copying training dataset
2023-02-14 23:27:52,932:INFO:Defining folds
2023-02-14 23:27:52,933:INFO:Declaring metric variables
2023-02-14 23:27:52,936:INFO:Importing untrained model
2023-02-14 23:27:52,939:INFO:K Neighbors Regressor Imported successfully
2023-02-14 23:27:52,947:INFO:Starting cross validation
2023-02-14 23:27:52,948:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:53,086:INFO:Calculating mean and std
2023-02-14 23:27:53,087:INFO:Creating metrics dataframe
2023-02-14 23:27:53,090:INFO:Uploading results into container
2023-02-14 23:27:53,090:INFO:Uploading model into container now
2023-02-14 23:27:53,090:INFO:_master_model_container: 11
2023-02-14 23:27:53,090:INFO:_display_container: 2
2023-02-14 23:27:53,092:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 23:27:53,092:INFO:create_model() successfully completed......................................
2023-02-14 23:27:53,176:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:53,177:INFO:Creating metrics dataframe
2023-02-14 23:27:53,184:INFO:Initializing Decision Tree Regressor
2023-02-14 23:27:53,184:INFO:Total runtime is 0.047372619311014816 minutes
2023-02-14 23:27:53,187:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:53,187:INFO:Initializing create_model()
2023-02-14 23:27:53,187:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:53,187:INFO:Checking exceptions
2023-02-14 23:27:53,187:INFO:Importing libraries
2023-02-14 23:27:53,187:INFO:Copying training dataset
2023-02-14 23:27:53,191:INFO:Defining folds
2023-02-14 23:27:53,191:INFO:Declaring metric variables
2023-02-14 23:27:53,195:INFO:Importing untrained model
2023-02-14 23:27:53,200:INFO:Decision Tree Regressor Imported successfully
2023-02-14 23:27:53,207:INFO:Starting cross validation
2023-02-14 23:27:53,208:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:53,341:INFO:Calculating mean and std
2023-02-14 23:27:53,341:INFO:Creating metrics dataframe
2023-02-14 23:27:53,345:INFO:Uploading results into container
2023-02-14 23:27:53,345:INFO:Uploading model into container now
2023-02-14 23:27:53,346:INFO:_master_model_container: 12
2023-02-14 23:27:53,346:INFO:_display_container: 2
2023-02-14 23:27:53,346:INFO:DecisionTreeRegressor(random_state=42)
2023-02-14 23:27:53,346:INFO:create_model() successfully completed......................................
2023-02-14 23:27:53,432:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:53,432:INFO:Creating metrics dataframe
2023-02-14 23:27:53,443:INFO:Initializing Random Forest Regressor
2023-02-14 23:27:53,443:INFO:Total runtime is 0.05169087648391724 minutes
2023-02-14 23:27:53,446:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:53,446:INFO:Initializing create_model()
2023-02-14 23:27:53,446:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:53,446:INFO:Checking exceptions
2023-02-14 23:27:53,446:INFO:Importing libraries
2023-02-14 23:27:53,446:INFO:Copying training dataset
2023-02-14 23:27:53,451:INFO:Defining folds
2023-02-14 23:27:53,451:INFO:Declaring metric variables
2023-02-14 23:27:53,455:INFO:Importing untrained model
2023-02-14 23:27:53,459:INFO:Random Forest Regressor Imported successfully
2023-02-14 23:27:53,467:INFO:Starting cross validation
2023-02-14 23:27:53,468:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:53,895:INFO:Calculating mean and std
2023-02-14 23:27:53,896:INFO:Creating metrics dataframe
2023-02-14 23:27:53,898:INFO:Uploading results into container
2023-02-14 23:27:53,899:INFO:Uploading model into container now
2023-02-14 23:27:53,899:INFO:_master_model_container: 13
2023-02-14 23:27:53,899:INFO:_display_container: 2
2023-02-14 23:27:53,900:INFO:RandomForestRegressor(n_jobs=-1, random_state=42)
2023-02-14 23:27:53,900:INFO:create_model() successfully completed......................................
2023-02-14 23:27:53,982:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:53,982:INFO:Creating metrics dataframe
2023-02-14 23:27:53,991:INFO:Initializing Extra Trees Regressor
2023-02-14 23:27:53,991:INFO:Total runtime is 0.06080952485402426 minutes
2023-02-14 23:27:53,995:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:53,996:INFO:Initializing create_model()
2023-02-14 23:27:53,996:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:53,996:INFO:Checking exceptions
2023-02-14 23:27:53,996:INFO:Importing libraries
2023-02-14 23:27:53,996:INFO:Copying training dataset
2023-02-14 23:27:54,000:INFO:Defining folds
2023-02-14 23:27:54,000:INFO:Declaring metric variables
2023-02-14 23:27:54,003:INFO:Importing untrained model
2023-02-14 23:27:54,008:INFO:Extra Trees Regressor Imported successfully
2023-02-14 23:27:54,016:INFO:Starting cross validation
2023-02-14 23:27:54,017:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:54,357:INFO:Calculating mean and std
2023-02-14 23:27:54,357:INFO:Creating metrics dataframe
2023-02-14 23:27:54,360:INFO:Uploading results into container
2023-02-14 23:27:54,361:INFO:Uploading model into container now
2023-02-14 23:27:54,361:INFO:_master_model_container: 14
2023-02-14 23:27:54,361:INFO:_display_container: 2
2023-02-14 23:27:54,361:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=42)
2023-02-14 23:27:54,362:INFO:create_model() successfully completed......................................
2023-02-14 23:27:54,449:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:54,449:INFO:Creating metrics dataframe
2023-02-14 23:27:54,458:INFO:Initializing AdaBoost Regressor
2023-02-14 23:27:54,458:INFO:Total runtime is 0.06859375635782879 minutes
2023-02-14 23:27:54,462:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:54,463:INFO:Initializing create_model()
2023-02-14 23:27:54,463:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:54,463:INFO:Checking exceptions
2023-02-14 23:27:54,463:INFO:Importing libraries
2023-02-14 23:27:54,463:INFO:Copying training dataset
2023-02-14 23:27:54,465:INFO:Defining folds
2023-02-14 23:27:54,465:INFO:Declaring metric variables
2023-02-14 23:27:54,469:INFO:Importing untrained model
2023-02-14 23:27:54,473:INFO:AdaBoost Regressor Imported successfully
2023-02-14 23:27:54,481:INFO:Starting cross validation
2023-02-14 23:27:54,483:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:54,707:INFO:Calculating mean and std
2023-02-14 23:27:54,708:INFO:Creating metrics dataframe
2023-02-14 23:27:54,710:INFO:Uploading results into container
2023-02-14 23:27:54,711:INFO:Uploading model into container now
2023-02-14 23:27:54,711:INFO:_master_model_container: 15
2023-02-14 23:27:54,711:INFO:_display_container: 2
2023-02-14 23:27:54,712:INFO:AdaBoostRegressor(random_state=42)
2023-02-14 23:27:54,712:INFO:create_model() successfully completed......................................
2023-02-14 23:27:54,803:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:54,803:INFO:Creating metrics dataframe
2023-02-14 23:27:54,816:INFO:Initializing Gradient Boosting Regressor
2023-02-14 23:27:54,816:INFO:Total runtime is 0.07456661065419516 minutes
2023-02-14 23:27:54,820:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:54,821:INFO:Initializing create_model()
2023-02-14 23:27:54,821:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:54,821:INFO:Checking exceptions
2023-02-14 23:27:54,821:INFO:Importing libraries
2023-02-14 23:27:54,821:INFO:Copying training dataset
2023-02-14 23:27:54,824:INFO:Defining folds
2023-02-14 23:27:54,825:INFO:Declaring metric variables
2023-02-14 23:27:54,828:INFO:Importing untrained model
2023-02-14 23:27:54,833:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 23:27:54,839:INFO:Starting cross validation
2023-02-14 23:27:54,840:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:55,042:INFO:Calculating mean and std
2023-02-14 23:27:55,042:INFO:Creating metrics dataframe
2023-02-14 23:27:55,045:INFO:Uploading results into container
2023-02-14 23:27:55,046:INFO:Uploading model into container now
2023-02-14 23:27:55,046:INFO:_master_model_container: 16
2023-02-14 23:27:55,046:INFO:_display_container: 2
2023-02-14 23:27:55,046:INFO:GradientBoostingRegressor(random_state=42)
2023-02-14 23:27:55,046:INFO:create_model() successfully completed......................................
2023-02-14 23:27:55,129:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:55,129:INFO:Creating metrics dataframe
2023-02-14 23:27:55,138:INFO:Initializing Extreme Gradient Boosting
2023-02-14 23:27:55,138:INFO:Total runtime is 0.07993242740631104 minutes
2023-02-14 23:27:55,142:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:55,142:INFO:Initializing create_model()
2023-02-14 23:27:55,142:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:55,143:INFO:Checking exceptions
2023-02-14 23:27:55,143:INFO:Importing libraries
2023-02-14 23:27:55,143:INFO:Copying training dataset
2023-02-14 23:27:55,146:INFO:Defining folds
2023-02-14 23:27:55,146:INFO:Declaring metric variables
2023-02-14 23:27:55,150:INFO:Importing untrained model
2023-02-14 23:27:55,154:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 23:27:55,162:INFO:Starting cross validation
2023-02-14 23:27:55,162:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:55,341:INFO:Calculating mean and std
2023-02-14 23:27:55,342:INFO:Creating metrics dataframe
2023-02-14 23:27:55,345:INFO:Uploading results into container
2023-02-14 23:27:55,346:INFO:Uploading model into container now
2023-02-14 23:27:55,346:INFO:_master_model_container: 17
2023-02-14 23:27:55,346:INFO:_display_container: 2
2023-02-14 23:27:55,347:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=42, ...)
2023-02-14 23:27:55,348:INFO:create_model() successfully completed......................................
2023-02-14 23:27:55,432:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:55,432:INFO:Creating metrics dataframe
2023-02-14 23:27:55,441:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 23:27:55,441:INFO:Total runtime is 0.08498589197794597 minutes
2023-02-14 23:27:55,445:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:55,445:INFO:Initializing create_model()
2023-02-14 23:27:55,445:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:55,445:INFO:Checking exceptions
2023-02-14 23:27:55,445:INFO:Importing libraries
2023-02-14 23:27:55,445:INFO:Copying training dataset
2023-02-14 23:27:55,448:INFO:Defining folds
2023-02-14 23:27:55,448:INFO:Declaring metric variables
2023-02-14 23:27:55,451:INFO:Importing untrained model
2023-02-14 23:27:55,457:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 23:27:55,467:INFO:Starting cross validation
2023-02-14 23:27:55,468:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:55,602:INFO:Calculating mean and std
2023-02-14 23:27:55,603:INFO:Creating metrics dataframe
2023-02-14 23:27:55,607:INFO:Uploading results into container
2023-02-14 23:27:55,608:INFO:Uploading model into container now
2023-02-14 23:27:55,608:INFO:_master_model_container: 18
2023-02-14 23:27:55,608:INFO:_display_container: 2
2023-02-14 23:27:55,609:INFO:LGBMRegressor(random_state=42)
2023-02-14 23:27:55,609:INFO:create_model() successfully completed......................................
2023-02-14 23:27:55,693:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:55,693:INFO:Creating metrics dataframe
2023-02-14 23:27:55,702:INFO:Initializing Dummy Regressor
2023-02-14 23:27:55,702:INFO:Total runtime is 0.08933242559432984 minutes
2023-02-14 23:27:55,704:INFO:SubProcess create_model() called ==================================
2023-02-14 23:27:55,704:INFO:Initializing create_model()
2023-02-14 23:27:55,704:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158928EAC0>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:55,705:INFO:Checking exceptions
2023-02-14 23:27:55,705:INFO:Importing libraries
2023-02-14 23:27:55,705:INFO:Copying training dataset
2023-02-14 23:27:55,709:INFO:Defining folds
2023-02-14 23:27:55,710:INFO:Declaring metric variables
2023-02-14 23:27:55,713:INFO:Importing untrained model
2023-02-14 23:27:55,717:INFO:Dummy Regressor Imported successfully
2023-02-14 23:27:55,725:INFO:Starting cross validation
2023-02-14 23:27:55,726:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:27:55,853:INFO:Calculating mean and std
2023-02-14 23:27:55,854:INFO:Creating metrics dataframe
2023-02-14 23:27:55,857:INFO:Uploading results into container
2023-02-14 23:27:55,859:INFO:Uploading model into container now
2023-02-14 23:27:55,859:INFO:_master_model_container: 19
2023-02-14 23:27:55,859:INFO:_display_container: 2
2023-02-14 23:27:55,859:INFO:DummyRegressor()
2023-02-14 23:27:55,859:INFO:create_model() successfully completed......................................
2023-02-14 23:27:55,946:INFO:SubProcess create_model() end ==================================
2023-02-14 23:27:55,946:INFO:Creating metrics dataframe
2023-02-14 23:27:55,965:INFO:Initializing create_model()
2023-02-14 23:27:55,965:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000215892E7370>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:27:55,965:INFO:Checking exceptions
2023-02-14 23:27:55,967:INFO:Importing libraries
2023-02-14 23:27:55,967:INFO:Copying training dataset
2023-02-14 23:27:55,969:INFO:Defining folds
2023-02-14 23:27:55,969:INFO:Declaring metric variables
2023-02-14 23:27:55,969:INFO:Importing untrained model
2023-02-14 23:27:55,970:INFO:Declaring custom model
2023-02-14 23:27:55,970:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:27:55,970:INFO:Cross validation set to False
2023-02-14 23:27:55,970:INFO:Fitting Model
2023-02-14 23:27:55,997:INFO:BayesianRidge()
2023-02-14 23:27:55,997:INFO:create_model() successfully completed......................................
2023-02-14 23:27:56,117:INFO:_master_model_container: 19
2023-02-14 23:27:56,117:INFO:_display_container: 2
2023-02-14 23:27:56,117:INFO:BayesianRidge()
2023-02-14 23:27:56,117:INFO:compare_models() successfully completed......................................
2023-02-14 23:28:06,429:INFO:PyCaret RegressionExperiment
2023-02-14 23:28:06,429:INFO:Logging name: reg-default-name
2023-02-14 23:28:06,430:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 23:28:06,430:INFO:version 3.0.0.rc8
2023-02-14 23:28:06,430:INFO:Initializing setup()
2023-02-14 23:28:06,430:INFO:self.USI: 4bb7
2023-02-14 23:28:06,430:INFO:self._variable_keys: {'data', 'transform_target_param', 'logging_param', 'fold_generator', 'X_test', 'y', 'exp_name_log', 'pipeline', 'n_jobs_param', 'exp_id', 'log_plots_param', 'X_train', 'y_test', 'html_param', 'gpu_param', '_ml_usecase', 'X', 'seed', 'target_param', 'memory', 'gpu_n_jobs_param', 'USI', 'idx', 'fold_groups_param', 'fold_shuffle_param', '_available_plots', 'y_train'}
2023-02-14 23:28:06,430:INFO:Checking environment
2023-02-14 23:28:06,430:INFO:python_version: 3.9.13
2023-02-14 23:28:06,430:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 23:28:06,430:INFO:machine: AMD64
2023-02-14 23:28:06,431:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 23:28:06,437:INFO:Memory: svmem(total=16805040128, available=4217745408, percent=74.9, used=12587294720, free=4217745408)
2023-02-14 23:28:06,437:INFO:Physical Core: 4
2023-02-14 23:28:06,437:INFO:Logical Core: 8
2023-02-14 23:28:06,437:INFO:Checking libraries
2023-02-14 23:28:06,437:INFO:System:
2023-02-14 23:28:06,439:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 23:28:06,439:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 23:28:06,439:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 23:28:06,439:INFO:PyCaret required dependencies:
2023-02-14 23:28:06,439:INFO:                 pip: 23.0
2023-02-14 23:28:06,439:INFO:          setuptools: 58.1.0
2023-02-14 23:28:06,439:INFO:             pycaret: 3.0.0rc8
2023-02-14 23:28:06,439:INFO:             IPython: 8.7.0
2023-02-14 23:28:06,439:INFO:          ipywidgets: 8.0.4
2023-02-14 23:28:06,440:INFO:                tqdm: 4.64.1
2023-02-14 23:28:06,440:INFO:               numpy: 1.22.1
2023-02-14 23:28:06,440:INFO:              pandas: 1.5.2
2023-02-14 23:28:06,440:INFO:              jinja2: 3.1.2
2023-02-14 23:28:06,440:INFO:               scipy: 1.5.4
2023-02-14 23:28:06,440:INFO:              joblib: 1.2.0
2023-02-14 23:28:06,440:INFO:             sklearn: 1.1.3
2023-02-14 23:28:06,440:INFO:                pyod: 1.0.7
2023-02-14 23:28:06,440:INFO:            imblearn: 0.10.1
2023-02-14 23:28:06,440:INFO:   category_encoders: 2.6.0
2023-02-14 23:28:06,440:INFO:            lightgbm: 3.3.4
2023-02-14 23:28:06,440:INFO:               numba: 0.56.4
2023-02-14 23:28:06,440:INFO:            requests: 2.28.1
2023-02-14 23:28:06,440:INFO:          matplotlib: 3.6.2
2023-02-14 23:28:06,440:INFO:          scikitplot: 0.3.7
2023-02-14 23:28:06,440:INFO:         yellowbrick: 1.5
2023-02-14 23:28:06,441:INFO:              plotly: 5.11.0
2023-02-14 23:28:06,441:INFO:             kaleido: 0.2.1
2023-02-14 23:28:06,441:INFO:         statsmodels: 0.13.5
2023-02-14 23:28:06,441:INFO:              sktime: 0.15.1
2023-02-14 23:28:06,441:INFO:               tbats: 1.1.2
2023-02-14 23:28:06,441:INFO:            pmdarima: 2.0.2
2023-02-14 23:28:06,442:INFO:              psutil: 5.9.4
2023-02-14 23:28:06,443:INFO:PyCaret optional dependencies:
2023-02-14 23:28:06,443:INFO:                shap: 0.41.0
2023-02-14 23:28:06,443:INFO:           interpret: 0.3.0
2023-02-14 23:28:06,444:INFO:                umap: Not installed
2023-02-14 23:28:06,444:INFO:    pandas_profiling: 3.6.2
2023-02-14 23:28:06,444:INFO:  explainerdashboard: Not installed
2023-02-14 23:28:06,444:INFO:             autoviz: Not installed
2023-02-14 23:28:06,444:INFO:           fairlearn: Not installed
2023-02-14 23:28:06,444:INFO:             xgboost: 1.7.3
2023-02-14 23:28:06,445:INFO:            catboost: Not installed
2023-02-14 23:28:06,445:INFO:              kmodes: Not installed
2023-02-14 23:28:06,445:INFO:             mlxtend: Not installed
2023-02-14 23:28:06,445:INFO:       statsforecast: Not installed
2023-02-14 23:28:06,445:INFO:        tune_sklearn: Not installed
2023-02-14 23:28:06,445:INFO:                 ray: Not installed
2023-02-14 23:28:06,445:INFO:            hyperopt: Not installed
2023-02-14 23:28:06,445:INFO:              optuna: Not installed
2023-02-14 23:28:06,445:INFO:               skopt: Not installed
2023-02-14 23:28:06,446:INFO:              mlflow: Not installed
2023-02-14 23:28:06,446:INFO:              gradio: Not installed
2023-02-14 23:28:06,446:INFO:             fastapi: Not installed
2023-02-14 23:28:06,446:INFO:             uvicorn: Not installed
2023-02-14 23:28:06,446:INFO:              m2cgen: Not installed
2023-02-14 23:28:06,446:INFO:           evidently: Not installed
2023-02-14 23:28:06,446:INFO:                nltk: 3.8
2023-02-14 23:28:06,446:INFO:            pyLDAvis: Not installed
2023-02-14 23:28:06,446:INFO:              gensim: Not installed
2023-02-14 23:28:06,446:INFO:               spacy: Not installed
2023-02-14 23:28:06,446:INFO:           wordcloud: 1.8.2.2
2023-02-14 23:28:06,447:INFO:            textblob: Not installed
2023-02-14 23:28:06,447:INFO:               fugue: Not installed
2023-02-14 23:28:06,447:INFO:           streamlit: 1.16.0
2023-02-14 23:28:06,447:INFO:             prophet: Not installed
2023-02-14 23:28:06,447:INFO:None
2023-02-14 23:28:06,447:INFO:Set up data.
2023-02-14 23:28:06,453:INFO:Set up train/test split.
2023-02-14 23:28:06,456:INFO:Set up index.
2023-02-14 23:28:06,457:INFO:Set up folding strategy.
2023-02-14 23:28:06,457:INFO:Assigning column types.
2023-02-14 23:28:06,460:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 23:28:06,460:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,468:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,476:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,534:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,590:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,590:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:06,593:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:06,593:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,598:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,601:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,653:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,689:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,690:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:06,692:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:06,692:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 23:28:06,696:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,700:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,743:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,778:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,778:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:06,781:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:06,785:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,788:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,832:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,868:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,868:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:06,870:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:06,870:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 23:28:06,877:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,925:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,958:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:06,958:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:06,960:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:06,969:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:07,013:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:07,048:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:07,050:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:07,051:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:07,051:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 23:28:07,102:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:07,136:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:07,137:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:07,139:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:07,190:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:07,225:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:07,225:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:07,227:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:07,227:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 23:28:07,280:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:07,320:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:07,322:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:07,373:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:07,408:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:07,410:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:07,410:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 23:28:07,528:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:07,531:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:07,622:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:07,624:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:07,625:INFO:Preparing preprocessing pipeline...
2023-02-14 23:28:07,625:INFO:Set up column name cleaning.
2023-02-14 23:28:07,626:INFO:Set up simple imputation.
2023-02-14 23:28:07,662:INFO:Finished creating preprocessing pipeline.
2023-02-14 23:28:07,665:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 23:28:07,665:INFO:Creating final display dataframe.
2023-02-14 23:28:07,856:INFO:Setup _display_container:                     Description             Value
0                    Session id               120
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              4bb7
2023-02-14 23:28:07,955:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:07,959:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:08,056:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:08,059:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:08,059:INFO:setup() successfully completed in 1.63s...............
2023-02-14 23:28:08,060:INFO:Initializing compare_models()
2023-02-14 23:28:08,060:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 23:28:08,060:INFO:Checking exceptions
2023-02-14 23:28:08,062:INFO:Preparing display monitor
2023-02-14 23:28:08,085:INFO:Initializing Linear Regression
2023-02-14 23:28:08,085:INFO:Total runtime is 0.0 minutes
2023-02-14 23:28:08,089:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:08,089:INFO:Initializing create_model()
2023-02-14 23:28:08,089:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:08,089:INFO:Checking exceptions
2023-02-14 23:28:08,089:INFO:Importing libraries
2023-02-14 23:28:08,089:INFO:Copying training dataset
2023-02-14 23:28:08,091:INFO:Defining folds
2023-02-14 23:28:08,091:INFO:Declaring metric variables
2023-02-14 23:28:08,094:INFO:Importing untrained model
2023-02-14 23:28:08,100:INFO:Linear Regression Imported successfully
2023-02-14 23:28:08,107:INFO:Starting cross validation
2023-02-14 23:28:08,108:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:08,533:INFO:Calculating mean and std
2023-02-14 23:28:08,533:INFO:Creating metrics dataframe
2023-02-14 23:28:08,536:INFO:Uploading results into container
2023-02-14 23:28:08,537:INFO:Uploading model into container now
2023-02-14 23:28:08,537:INFO:_master_model_container: 1
2023-02-14 23:28:08,537:INFO:_display_container: 2
2023-02-14 23:28:08,537:INFO:LinearRegression(n_jobs=-1)
2023-02-14 23:28:08,537:INFO:create_model() successfully completed......................................
2023-02-14 23:28:08,630:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:08,631:INFO:Creating metrics dataframe
2023-02-14 23:28:08,639:INFO:Initializing Lasso Regression
2023-02-14 23:28:08,639:INFO:Total runtime is 0.009231209754943848 minutes
2023-02-14 23:28:08,642:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:08,642:INFO:Initializing create_model()
2023-02-14 23:28:08,642:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:08,642:INFO:Checking exceptions
2023-02-14 23:28:08,642:INFO:Importing libraries
2023-02-14 23:28:08,642:INFO:Copying training dataset
2023-02-14 23:28:08,647:INFO:Defining folds
2023-02-14 23:28:08,647:INFO:Declaring metric variables
2023-02-14 23:28:08,650:INFO:Importing untrained model
2023-02-14 23:28:08,654:INFO:Lasso Regression Imported successfully
2023-02-14 23:28:08,662:INFO:Starting cross validation
2023-02-14 23:28:08,664:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:08,806:INFO:Calculating mean and std
2023-02-14 23:28:08,806:INFO:Creating metrics dataframe
2023-02-14 23:28:08,808:INFO:Uploading results into container
2023-02-14 23:28:08,809:INFO:Uploading model into container now
2023-02-14 23:28:08,809:INFO:_master_model_container: 2
2023-02-14 23:28:08,809:INFO:_display_container: 2
2023-02-14 23:28:08,809:INFO:Lasso(random_state=120)
2023-02-14 23:28:08,809:INFO:create_model() successfully completed......................................
2023-02-14 23:28:08,896:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:08,896:INFO:Creating metrics dataframe
2023-02-14 23:28:08,903:INFO:Initializing Ridge Regression
2023-02-14 23:28:08,903:INFO:Total runtime is 0.0136275053024292 minutes
2023-02-14 23:28:08,907:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:08,907:INFO:Initializing create_model()
2023-02-14 23:28:08,907:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:08,907:INFO:Checking exceptions
2023-02-14 23:28:08,907:INFO:Importing libraries
2023-02-14 23:28:08,907:INFO:Copying training dataset
2023-02-14 23:28:08,909:INFO:Defining folds
2023-02-14 23:28:08,909:INFO:Declaring metric variables
2023-02-14 23:28:08,912:INFO:Importing untrained model
2023-02-14 23:28:08,914:INFO:Ridge Regression Imported successfully
2023-02-14 23:28:08,922:INFO:Starting cross validation
2023-02-14 23:28:08,923:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:09,051:INFO:Calculating mean and std
2023-02-14 23:28:09,051:INFO:Creating metrics dataframe
2023-02-14 23:28:09,053:INFO:Uploading results into container
2023-02-14 23:28:09,054:INFO:Uploading model into container now
2023-02-14 23:28:09,054:INFO:_master_model_container: 3
2023-02-14 23:28:09,054:INFO:_display_container: 2
2023-02-14 23:28:09,054:INFO:Ridge(random_state=120)
2023-02-14 23:28:09,054:INFO:create_model() successfully completed......................................
2023-02-14 23:28:09,136:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:09,136:INFO:Creating metrics dataframe
2023-02-14 23:28:09,144:INFO:Initializing Elastic Net
2023-02-14 23:28:09,144:INFO:Total runtime is 0.017644043763478598 minutes
2023-02-14 23:28:09,148:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:09,148:INFO:Initializing create_model()
2023-02-14 23:28:09,148:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:09,148:INFO:Checking exceptions
2023-02-14 23:28:09,148:INFO:Importing libraries
2023-02-14 23:28:09,148:INFO:Copying training dataset
2023-02-14 23:28:09,151:INFO:Defining folds
2023-02-14 23:28:09,151:INFO:Declaring metric variables
2023-02-14 23:28:09,156:INFO:Importing untrained model
2023-02-14 23:28:09,160:INFO:Elastic Net Imported successfully
2023-02-14 23:28:09,168:INFO:Starting cross validation
2023-02-14 23:28:09,168:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:09,295:INFO:Calculating mean and std
2023-02-14 23:28:09,296:INFO:Creating metrics dataframe
2023-02-14 23:28:09,299:INFO:Uploading results into container
2023-02-14 23:28:09,300:INFO:Uploading model into container now
2023-02-14 23:28:09,300:INFO:_master_model_container: 4
2023-02-14 23:28:09,300:INFO:_display_container: 2
2023-02-14 23:28:09,301:INFO:ElasticNet(random_state=120)
2023-02-14 23:28:09,301:INFO:create_model() successfully completed......................................
2023-02-14 23:28:09,386:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:09,386:INFO:Creating metrics dataframe
2023-02-14 23:28:09,394:INFO:Initializing Least Angle Regression
2023-02-14 23:28:09,394:INFO:Total runtime is 0.021808218955993653 minutes
2023-02-14 23:28:09,398:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:09,398:INFO:Initializing create_model()
2023-02-14 23:28:09,399:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:09,399:INFO:Checking exceptions
2023-02-14 23:28:09,399:INFO:Importing libraries
2023-02-14 23:28:09,399:INFO:Copying training dataset
2023-02-14 23:28:09,402:INFO:Defining folds
2023-02-14 23:28:09,402:INFO:Declaring metric variables
2023-02-14 23:28:09,405:INFO:Importing untrained model
2023-02-14 23:28:09,409:INFO:Least Angle Regression Imported successfully
2023-02-14 23:28:09,417:INFO:Starting cross validation
2023-02-14 23:28:09,418:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:09,455:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,463:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,473:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,479:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,492:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,499:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,513:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,518:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,524:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,532:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,544:INFO:Calculating mean and std
2023-02-14 23:28:09,545:INFO:Creating metrics dataframe
2023-02-14 23:28:09,549:INFO:Uploading results into container
2023-02-14 23:28:09,549:INFO:Uploading model into container now
2023-02-14 23:28:09,550:INFO:_master_model_container: 5
2023-02-14 23:28:09,550:INFO:_display_container: 2
2023-02-14 23:28:09,550:INFO:Lars(random_state=120)
2023-02-14 23:28:09,550:INFO:create_model() successfully completed......................................
2023-02-14 23:28:09,635:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:09,635:INFO:Creating metrics dataframe
2023-02-14 23:28:09,643:INFO:Initializing Lasso Least Angle Regression
2023-02-14 23:28:09,645:INFO:Total runtime is 0.02599027156829834 minutes
2023-02-14 23:28:09,648:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:09,648:INFO:Initializing create_model()
2023-02-14 23:28:09,648:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:09,648:INFO:Checking exceptions
2023-02-14 23:28:09,648:INFO:Importing libraries
2023-02-14 23:28:09,648:INFO:Copying training dataset
2023-02-14 23:28:09,651:INFO:Defining folds
2023-02-14 23:28:09,651:INFO:Declaring metric variables
2023-02-14 23:28:09,655:INFO:Importing untrained model
2023-02-14 23:28:09,658:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 23:28:09,666:INFO:Starting cross validation
2023-02-14 23:28:09,667:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:09,704:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:09,714:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:09,724:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:09,728:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:09,740:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:09,749:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:09,756:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:09,765:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:09,772:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:09,778:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:09,789:INFO:Calculating mean and std
2023-02-14 23:28:09,790:INFO:Creating metrics dataframe
2023-02-14 23:28:09,790:INFO:Uploading results into container
2023-02-14 23:28:09,793:INFO:Uploading model into container now
2023-02-14 23:28:09,794:INFO:_master_model_container: 6
2023-02-14 23:28:09,794:INFO:_display_container: 2
2023-02-14 23:28:09,794:INFO:LassoLars(random_state=120)
2023-02-14 23:28:09,794:INFO:create_model() successfully completed......................................
2023-02-14 23:28:09,878:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:09,878:INFO:Creating metrics dataframe
2023-02-14 23:28:09,885:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 23:28:09,886:INFO:Total runtime is 0.030015289783477783 minutes
2023-02-14 23:28:09,890:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:09,890:INFO:Initializing create_model()
2023-02-14 23:28:09,890:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:09,890:INFO:Checking exceptions
2023-02-14 23:28:09,890:INFO:Importing libraries
2023-02-14 23:28:09,891:INFO:Copying training dataset
2023-02-14 23:28:09,895:INFO:Defining folds
2023-02-14 23:28:09,895:INFO:Declaring metric variables
2023-02-14 23:28:09,900:INFO:Importing untrained model
2023-02-14 23:28:09,903:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 23:28:09,910:INFO:Starting cross validation
2023-02-14 23:28:09,911:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:09,948:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,956:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,965:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,971:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,983:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:09,991:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:10,000:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:10,008:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:10,019:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:10,025:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:10,037:INFO:Calculating mean and std
2023-02-14 23:28:10,038:INFO:Creating metrics dataframe
2023-02-14 23:28:10,040:INFO:Uploading results into container
2023-02-14 23:28:10,040:INFO:Uploading model into container now
2023-02-14 23:28:10,040:INFO:_master_model_container: 7
2023-02-14 23:28:10,040:INFO:_display_container: 2
2023-02-14 23:28:10,040:INFO:OrthogonalMatchingPursuit()
2023-02-14 23:28:10,042:INFO:create_model() successfully completed......................................
2023-02-14 23:28:10,126:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:10,126:INFO:Creating metrics dataframe
2023-02-14 23:28:10,137:INFO:Initializing Bayesian Ridge
2023-02-14 23:28:10,137:INFO:Total runtime is 0.034191131591796875 minutes
2023-02-14 23:28:10,141:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:10,141:INFO:Initializing create_model()
2023-02-14 23:28:10,141:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:10,141:INFO:Checking exceptions
2023-02-14 23:28:10,141:INFO:Importing libraries
2023-02-14 23:28:10,141:INFO:Copying training dataset
2023-02-14 23:28:10,144:INFO:Defining folds
2023-02-14 23:28:10,145:INFO:Declaring metric variables
2023-02-14 23:28:10,149:INFO:Importing untrained model
2023-02-14 23:28:10,153:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:28:10,164:INFO:Starting cross validation
2023-02-14 23:28:10,165:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:10,324:INFO:Calculating mean and std
2023-02-14 23:28:10,326:INFO:Creating metrics dataframe
2023-02-14 23:28:10,329:INFO:Uploading results into container
2023-02-14 23:28:10,329:INFO:Uploading model into container now
2023-02-14 23:28:10,330:INFO:_master_model_container: 8
2023-02-14 23:28:10,330:INFO:_display_container: 2
2023-02-14 23:28:10,330:INFO:BayesianRidge()
2023-02-14 23:28:10,330:INFO:create_model() successfully completed......................................
2023-02-14 23:28:10,416:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:10,416:INFO:Creating metrics dataframe
2023-02-14 23:28:10,424:INFO:Initializing Passive Aggressive Regressor
2023-02-14 23:28:10,424:INFO:Total runtime is 0.03897998332977295 minutes
2023-02-14 23:28:10,428:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:10,429:INFO:Initializing create_model()
2023-02-14 23:28:10,429:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:10,429:INFO:Checking exceptions
2023-02-14 23:28:10,429:INFO:Importing libraries
2023-02-14 23:28:10,429:INFO:Copying training dataset
2023-02-14 23:28:10,432:INFO:Defining folds
2023-02-14 23:28:10,432:INFO:Declaring metric variables
2023-02-14 23:28:10,436:INFO:Importing untrained model
2023-02-14 23:28:10,440:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 23:28:10,447:INFO:Starting cross validation
2023-02-14 23:28:10,448:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:10,582:INFO:Calculating mean and std
2023-02-14 23:28:10,582:INFO:Creating metrics dataframe
2023-02-14 23:28:10,586:INFO:Uploading results into container
2023-02-14 23:28:10,587:INFO:Uploading model into container now
2023-02-14 23:28:10,587:INFO:_master_model_container: 9
2023-02-14 23:28:10,587:INFO:_display_container: 2
2023-02-14 23:28:10,587:INFO:PassiveAggressiveRegressor(random_state=120)
2023-02-14 23:28:10,588:INFO:create_model() successfully completed......................................
2023-02-14 23:28:10,675:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:10,675:INFO:Creating metrics dataframe
2023-02-14 23:28:10,684:INFO:Initializing Huber Regressor
2023-02-14 23:28:10,684:INFO:Total runtime is 0.04332003593444824 minutes
2023-02-14 23:28:10,687:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:10,687:INFO:Initializing create_model()
2023-02-14 23:28:10,687:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:10,687:INFO:Checking exceptions
2023-02-14 23:28:10,687:INFO:Importing libraries
2023-02-14 23:28:10,688:INFO:Copying training dataset
2023-02-14 23:28:10,691:INFO:Defining folds
2023-02-14 23:28:10,692:INFO:Declaring metric variables
2023-02-14 23:28:10,697:INFO:Importing untrained model
2023-02-14 23:28:10,700:INFO:Huber Regressor Imported successfully
2023-02-14 23:28:10,710:INFO:Starting cross validation
2023-02-14 23:28:10,711:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:10,772:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:10,788:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:10,796:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:10,820:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:10,846:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:10,853:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:10,856:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:10,867:INFO:Calculating mean and std
2023-02-14 23:28:10,868:INFO:Creating metrics dataframe
2023-02-14 23:28:10,870:INFO:Uploading results into container
2023-02-14 23:28:10,871:INFO:Uploading model into container now
2023-02-14 23:28:10,871:INFO:_master_model_container: 10
2023-02-14 23:28:10,871:INFO:_display_container: 2
2023-02-14 23:28:10,872:INFO:HuberRegressor()
2023-02-14 23:28:10,872:INFO:create_model() successfully completed......................................
2023-02-14 23:28:10,956:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:10,956:INFO:Creating metrics dataframe
2023-02-14 23:28:10,967:INFO:Initializing K Neighbors Regressor
2023-02-14 23:28:10,968:INFO:Total runtime is 0.04804326295852661 minutes
2023-02-14 23:28:10,971:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:10,971:INFO:Initializing create_model()
2023-02-14 23:28:10,971:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:10,971:INFO:Checking exceptions
2023-02-14 23:28:10,971:INFO:Importing libraries
2023-02-14 23:28:10,971:INFO:Copying training dataset
2023-02-14 23:28:10,973:INFO:Defining folds
2023-02-14 23:28:10,974:INFO:Declaring metric variables
2023-02-14 23:28:10,979:INFO:Importing untrained model
2023-02-14 23:28:10,984:INFO:K Neighbors Regressor Imported successfully
2023-02-14 23:28:10,992:INFO:Starting cross validation
2023-02-14 23:28:10,993:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:11,129:INFO:Calculating mean and std
2023-02-14 23:28:11,130:INFO:Creating metrics dataframe
2023-02-14 23:28:11,133:INFO:Uploading results into container
2023-02-14 23:28:11,133:INFO:Uploading model into container now
2023-02-14 23:28:11,134:INFO:_master_model_container: 11
2023-02-14 23:28:11,134:INFO:_display_container: 2
2023-02-14 23:28:11,134:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 23:28:11,134:INFO:create_model() successfully completed......................................
2023-02-14 23:28:11,216:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:11,216:INFO:Creating metrics dataframe
2023-02-14 23:28:11,227:INFO:Initializing Decision Tree Regressor
2023-02-14 23:28:11,228:INFO:Total runtime is 0.05238928794860839 minutes
2023-02-14 23:28:11,233:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:11,233:INFO:Initializing create_model()
2023-02-14 23:28:11,233:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:11,233:INFO:Checking exceptions
2023-02-14 23:28:11,233:INFO:Importing libraries
2023-02-14 23:28:11,233:INFO:Copying training dataset
2023-02-14 23:28:11,236:INFO:Defining folds
2023-02-14 23:28:11,236:INFO:Declaring metric variables
2023-02-14 23:28:11,239:INFO:Importing untrained model
2023-02-14 23:28:11,243:INFO:Decision Tree Regressor Imported successfully
2023-02-14 23:28:11,252:INFO:Starting cross validation
2023-02-14 23:28:11,253:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:11,383:INFO:Calculating mean and std
2023-02-14 23:28:11,385:INFO:Creating metrics dataframe
2023-02-14 23:28:11,387:INFO:Uploading results into container
2023-02-14 23:28:11,387:INFO:Uploading model into container now
2023-02-14 23:28:11,388:INFO:_master_model_container: 12
2023-02-14 23:28:11,388:INFO:_display_container: 2
2023-02-14 23:28:11,388:INFO:DecisionTreeRegressor(random_state=120)
2023-02-14 23:28:11,388:INFO:create_model() successfully completed......................................
2023-02-14 23:28:11,473:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:11,473:INFO:Creating metrics dataframe
2023-02-14 23:28:11,486:INFO:Initializing Random Forest Regressor
2023-02-14 23:28:11,486:INFO:Total runtime is 0.05667768319447835 minutes
2023-02-14 23:28:11,491:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:11,491:INFO:Initializing create_model()
2023-02-14 23:28:11,491:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:11,491:INFO:Checking exceptions
2023-02-14 23:28:11,491:INFO:Importing libraries
2023-02-14 23:28:11,491:INFO:Copying training dataset
2023-02-14 23:28:11,495:INFO:Defining folds
2023-02-14 23:28:11,496:INFO:Declaring metric variables
2023-02-14 23:28:11,498:INFO:Importing untrained model
2023-02-14 23:28:11,502:INFO:Random Forest Regressor Imported successfully
2023-02-14 23:28:11,510:INFO:Starting cross validation
2023-02-14 23:28:11,511:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:11,927:INFO:Calculating mean and std
2023-02-14 23:28:11,928:INFO:Creating metrics dataframe
2023-02-14 23:28:11,930:INFO:Uploading results into container
2023-02-14 23:28:11,930:INFO:Uploading model into container now
2023-02-14 23:28:11,931:INFO:_master_model_container: 13
2023-02-14 23:28:11,931:INFO:_display_container: 2
2023-02-14 23:28:11,931:INFO:RandomForestRegressor(n_jobs=-1, random_state=120)
2023-02-14 23:28:11,931:INFO:create_model() successfully completed......................................
2023-02-14 23:28:12,019:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:12,021:INFO:Creating metrics dataframe
2023-02-14 23:28:12,030:INFO:Initializing Extra Trees Regressor
2023-02-14 23:28:12,030:INFO:Total runtime is 0.06574252446492512 minutes
2023-02-14 23:28:12,033:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:12,033:INFO:Initializing create_model()
2023-02-14 23:28:12,033:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:12,033:INFO:Checking exceptions
2023-02-14 23:28:12,034:INFO:Importing libraries
2023-02-14 23:28:12,034:INFO:Copying training dataset
2023-02-14 23:28:12,037:INFO:Defining folds
2023-02-14 23:28:12,037:INFO:Declaring metric variables
2023-02-14 23:28:12,041:INFO:Importing untrained model
2023-02-14 23:28:12,045:INFO:Extra Trees Regressor Imported successfully
2023-02-14 23:28:12,053:INFO:Starting cross validation
2023-02-14 23:28:12,054:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:12,437:INFO:Calculating mean and std
2023-02-14 23:28:12,438:INFO:Creating metrics dataframe
2023-02-14 23:28:12,440:INFO:Uploading results into container
2023-02-14 23:28:12,442:INFO:Uploading model into container now
2023-02-14 23:28:12,442:INFO:_master_model_container: 14
2023-02-14 23:28:12,442:INFO:_display_container: 2
2023-02-14 23:28:12,442:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=120)
2023-02-14 23:28:12,442:INFO:create_model() successfully completed......................................
2023-02-14 23:28:12,525:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:12,525:INFO:Creating metrics dataframe
2023-02-14 23:28:12,536:INFO:Initializing AdaBoost Regressor
2023-02-14 23:28:12,536:INFO:Total runtime is 0.07418373823165893 minutes
2023-02-14 23:28:12,540:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:12,540:INFO:Initializing create_model()
2023-02-14 23:28:12,540:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:12,540:INFO:Checking exceptions
2023-02-14 23:28:12,540:INFO:Importing libraries
2023-02-14 23:28:12,540:INFO:Copying training dataset
2023-02-14 23:28:12,543:INFO:Defining folds
2023-02-14 23:28:12,543:INFO:Declaring metric variables
2023-02-14 23:28:12,547:INFO:Importing untrained model
2023-02-14 23:28:12,552:INFO:AdaBoost Regressor Imported successfully
2023-02-14 23:28:12,559:INFO:Starting cross validation
2023-02-14 23:28:12,561:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:12,775:INFO:Calculating mean and std
2023-02-14 23:28:12,776:INFO:Creating metrics dataframe
2023-02-14 23:28:12,778:INFO:Uploading results into container
2023-02-14 23:28:12,779:INFO:Uploading model into container now
2023-02-14 23:28:12,779:INFO:_master_model_container: 15
2023-02-14 23:28:12,779:INFO:_display_container: 2
2023-02-14 23:28:12,780:INFO:AdaBoostRegressor(random_state=120)
2023-02-14 23:28:12,780:INFO:create_model() successfully completed......................................
2023-02-14 23:28:12,864:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:12,864:INFO:Creating metrics dataframe
2023-02-14 23:28:12,876:INFO:Initializing Gradient Boosting Regressor
2023-02-14 23:28:12,876:INFO:Total runtime is 0.07984927892684936 minutes
2023-02-14 23:28:12,880:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:12,880:INFO:Initializing create_model()
2023-02-14 23:28:12,880:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:12,880:INFO:Checking exceptions
2023-02-14 23:28:12,881:INFO:Importing libraries
2023-02-14 23:28:12,881:INFO:Copying training dataset
2023-02-14 23:28:12,883:INFO:Defining folds
2023-02-14 23:28:12,883:INFO:Declaring metric variables
2023-02-14 23:28:12,887:INFO:Importing untrained model
2023-02-14 23:28:12,891:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 23:28:12,900:INFO:Starting cross validation
2023-02-14 23:28:12,900:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:13,074:INFO:Calculating mean and std
2023-02-14 23:28:13,076:INFO:Creating metrics dataframe
2023-02-14 23:28:13,079:INFO:Uploading results into container
2023-02-14 23:28:13,080:INFO:Uploading model into container now
2023-02-14 23:28:13,080:INFO:_master_model_container: 16
2023-02-14 23:28:13,080:INFO:_display_container: 2
2023-02-14 23:28:13,081:INFO:GradientBoostingRegressor(random_state=120)
2023-02-14 23:28:13,081:INFO:create_model() successfully completed......................................
2023-02-14 23:28:13,163:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:13,163:INFO:Creating metrics dataframe
2023-02-14 23:28:13,171:INFO:Initializing Extreme Gradient Boosting
2023-02-14 23:28:13,171:INFO:Total runtime is 0.08476072549819945 minutes
2023-02-14 23:28:13,175:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:13,175:INFO:Initializing create_model()
2023-02-14 23:28:13,175:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:13,175:INFO:Checking exceptions
2023-02-14 23:28:13,175:INFO:Importing libraries
2023-02-14 23:28:13,175:INFO:Copying training dataset
2023-02-14 23:28:13,178:INFO:Defining folds
2023-02-14 23:28:13,178:INFO:Declaring metric variables
2023-02-14 23:28:13,181:INFO:Importing untrained model
2023-02-14 23:28:13,186:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 23:28:13,194:INFO:Starting cross validation
2023-02-14 23:28:13,195:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:13,366:INFO:Calculating mean and std
2023-02-14 23:28:13,367:INFO:Creating metrics dataframe
2023-02-14 23:28:13,370:INFO:Uploading results into container
2023-02-14 23:28:13,370:INFO:Uploading model into container now
2023-02-14 23:28:13,370:INFO:_master_model_container: 17
2023-02-14 23:28:13,370:INFO:_display_container: 2
2023-02-14 23:28:13,372:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=120, ...)
2023-02-14 23:28:13,372:INFO:create_model() successfully completed......................................
2023-02-14 23:28:13,455:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:13,455:INFO:Creating metrics dataframe
2023-02-14 23:28:13,464:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 23:28:13,465:INFO:Total runtime is 0.08966818650563557 minutes
2023-02-14 23:28:13,468:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:13,468:INFO:Initializing create_model()
2023-02-14 23:28:13,468:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:13,468:INFO:Checking exceptions
2023-02-14 23:28:13,468:INFO:Importing libraries
2023-02-14 23:28:13,468:INFO:Copying training dataset
2023-02-14 23:28:13,471:INFO:Defining folds
2023-02-14 23:28:13,471:INFO:Declaring metric variables
2023-02-14 23:28:13,475:INFO:Importing untrained model
2023-02-14 23:28:13,480:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 23:28:13,488:INFO:Starting cross validation
2023-02-14 23:28:13,489:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:13,635:INFO:Calculating mean and std
2023-02-14 23:28:13,636:INFO:Creating metrics dataframe
2023-02-14 23:28:13,638:INFO:Uploading results into container
2023-02-14 23:28:13,638:INFO:Uploading model into container now
2023-02-14 23:28:13,638:INFO:_master_model_container: 18
2023-02-14 23:28:13,639:INFO:_display_container: 2
2023-02-14 23:28:13,639:INFO:LGBMRegressor(random_state=120)
2023-02-14 23:28:13,639:INFO:create_model() successfully completed......................................
2023-02-14 23:28:13,723:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:13,723:INFO:Creating metrics dataframe
2023-02-14 23:28:13,733:INFO:Initializing Dummy Regressor
2023-02-14 23:28:13,733:INFO:Total runtime is 0.09413656791051228 minutes
2023-02-14 23:28:13,736:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:13,736:INFO:Initializing create_model()
2023-02-14 23:28:13,736:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589D92790>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:13,736:INFO:Checking exceptions
2023-02-14 23:28:13,736:INFO:Importing libraries
2023-02-14 23:28:13,736:INFO:Copying training dataset
2023-02-14 23:28:13,741:INFO:Defining folds
2023-02-14 23:28:13,742:INFO:Declaring metric variables
2023-02-14 23:28:13,745:INFO:Importing untrained model
2023-02-14 23:28:13,750:INFO:Dummy Regressor Imported successfully
2023-02-14 23:28:13,757:INFO:Starting cross validation
2023-02-14 23:28:13,758:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:13,885:INFO:Calculating mean and std
2023-02-14 23:28:13,886:INFO:Creating metrics dataframe
2023-02-14 23:28:13,889:INFO:Uploading results into container
2023-02-14 23:28:13,891:INFO:Uploading model into container now
2023-02-14 23:28:13,891:INFO:_master_model_container: 19
2023-02-14 23:28:13,891:INFO:_display_container: 2
2023-02-14 23:28:13,891:INFO:DummyRegressor()
2023-02-14 23:28:13,891:INFO:create_model() successfully completed......................................
2023-02-14 23:28:13,977:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:13,977:INFO:Creating metrics dataframe
2023-02-14 23:28:14,000:INFO:Initializing create_model()
2023-02-14 23:28:14,000:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158E92C2B0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:14,000:INFO:Checking exceptions
2023-02-14 23:28:14,002:INFO:Importing libraries
2023-02-14 23:28:14,002:INFO:Copying training dataset
2023-02-14 23:28:14,004:INFO:Defining folds
2023-02-14 23:28:14,004:INFO:Declaring metric variables
2023-02-14 23:28:14,004:INFO:Importing untrained model
2023-02-14 23:28:14,004:INFO:Declaring custom model
2023-02-14 23:28:14,005:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:28:14,006:INFO:Cross validation set to False
2023-02-14 23:28:14,006:INFO:Fitting Model
2023-02-14 23:28:14,031:INFO:BayesianRidge()
2023-02-14 23:28:14,031:INFO:create_model() successfully completed......................................
2023-02-14 23:28:14,150:INFO:_master_model_container: 19
2023-02-14 23:28:14,150:INFO:_display_container: 2
2023-02-14 23:28:14,151:INFO:BayesianRidge()
2023-02-14 23:28:14,151:INFO:compare_models() successfully completed......................................
2023-02-14 23:28:27,332:INFO:PyCaret RegressionExperiment
2023-02-14 23:28:27,332:INFO:Logging name: reg-default-name
2023-02-14 23:28:27,332:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 23:28:27,332:INFO:version 3.0.0.rc8
2023-02-14 23:28:27,332:INFO:Initializing setup()
2023-02-14 23:28:27,332:INFO:self.USI: 04e6
2023-02-14 23:28:27,332:INFO:self._variable_keys: {'data', 'transform_target_param', 'logging_param', 'fold_generator', 'X_test', 'y', 'exp_name_log', 'pipeline', 'n_jobs_param', 'exp_id', 'log_plots_param', 'X_train', 'y_test', 'html_param', 'gpu_param', '_ml_usecase', 'X', 'seed', 'target_param', 'memory', 'gpu_n_jobs_param', 'USI', 'idx', 'fold_groups_param', 'fold_shuffle_param', '_available_plots', 'y_train'}
2023-02-14 23:28:27,332:INFO:Checking environment
2023-02-14 23:28:27,332:INFO:python_version: 3.9.13
2023-02-14 23:28:27,332:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 23:28:27,334:INFO:machine: AMD64
2023-02-14 23:28:27,334:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 23:28:27,339:INFO:Memory: svmem(total=16805040128, available=4307283968, percent=74.4, used=12497756160, free=4307283968)
2023-02-14 23:28:27,339:INFO:Physical Core: 4
2023-02-14 23:28:27,339:INFO:Logical Core: 8
2023-02-14 23:28:27,339:INFO:Checking libraries
2023-02-14 23:28:27,339:INFO:System:
2023-02-14 23:28:27,340:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 23:28:27,340:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 23:28:27,340:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 23:28:27,340:INFO:PyCaret required dependencies:
2023-02-14 23:28:27,340:INFO:                 pip: 23.0
2023-02-14 23:28:27,340:INFO:          setuptools: 58.1.0
2023-02-14 23:28:27,340:INFO:             pycaret: 3.0.0rc8
2023-02-14 23:28:27,340:INFO:             IPython: 8.7.0
2023-02-14 23:28:27,340:INFO:          ipywidgets: 8.0.4
2023-02-14 23:28:27,340:INFO:                tqdm: 4.64.1
2023-02-14 23:28:27,340:INFO:               numpy: 1.22.1
2023-02-14 23:28:27,340:INFO:              pandas: 1.5.2
2023-02-14 23:28:27,340:INFO:              jinja2: 3.1.2
2023-02-14 23:28:27,340:INFO:               scipy: 1.5.4
2023-02-14 23:28:27,340:INFO:              joblib: 1.2.0
2023-02-14 23:28:27,340:INFO:             sklearn: 1.1.3
2023-02-14 23:28:27,340:INFO:                pyod: 1.0.7
2023-02-14 23:28:27,340:INFO:            imblearn: 0.10.1
2023-02-14 23:28:27,340:INFO:   category_encoders: 2.6.0
2023-02-14 23:28:27,340:INFO:            lightgbm: 3.3.4
2023-02-14 23:28:27,340:INFO:               numba: 0.56.4
2023-02-14 23:28:27,341:INFO:            requests: 2.28.1
2023-02-14 23:28:27,341:INFO:          matplotlib: 3.6.2
2023-02-14 23:28:27,341:INFO:          scikitplot: 0.3.7
2023-02-14 23:28:27,341:INFO:         yellowbrick: 1.5
2023-02-14 23:28:27,341:INFO:              plotly: 5.11.0
2023-02-14 23:28:27,341:INFO:             kaleido: 0.2.1
2023-02-14 23:28:27,341:INFO:         statsmodels: 0.13.5
2023-02-14 23:28:27,341:INFO:              sktime: 0.15.1
2023-02-14 23:28:27,341:INFO:               tbats: 1.1.2
2023-02-14 23:28:27,341:INFO:            pmdarima: 2.0.2
2023-02-14 23:28:27,341:INFO:              psutil: 5.9.4
2023-02-14 23:28:27,341:INFO:PyCaret optional dependencies:
2023-02-14 23:28:27,341:INFO:                shap: 0.41.0
2023-02-14 23:28:27,341:INFO:           interpret: 0.3.0
2023-02-14 23:28:27,341:INFO:                umap: Not installed
2023-02-14 23:28:27,341:INFO:    pandas_profiling: 3.6.2
2023-02-14 23:28:27,341:INFO:  explainerdashboard: Not installed
2023-02-14 23:28:27,341:INFO:             autoviz: Not installed
2023-02-14 23:28:27,341:INFO:           fairlearn: Not installed
2023-02-14 23:28:27,341:INFO:             xgboost: 1.7.3
2023-02-14 23:28:27,341:INFO:            catboost: Not installed
2023-02-14 23:28:27,341:INFO:              kmodes: Not installed
2023-02-14 23:28:27,341:INFO:             mlxtend: Not installed
2023-02-14 23:28:27,341:INFO:       statsforecast: Not installed
2023-02-14 23:28:27,341:INFO:        tune_sklearn: Not installed
2023-02-14 23:28:27,341:INFO:                 ray: Not installed
2023-02-14 23:28:27,341:INFO:            hyperopt: Not installed
2023-02-14 23:28:27,341:INFO:              optuna: Not installed
2023-02-14 23:28:27,341:INFO:               skopt: Not installed
2023-02-14 23:28:27,341:INFO:              mlflow: Not installed
2023-02-14 23:28:27,341:INFO:              gradio: Not installed
2023-02-14 23:28:27,341:INFO:             fastapi: Not installed
2023-02-14 23:28:27,341:INFO:             uvicorn: Not installed
2023-02-14 23:28:27,341:INFO:              m2cgen: Not installed
2023-02-14 23:28:27,341:INFO:           evidently: Not installed
2023-02-14 23:28:27,342:INFO:                nltk: 3.8
2023-02-14 23:28:27,342:INFO:            pyLDAvis: Not installed
2023-02-14 23:28:27,342:INFO:              gensim: Not installed
2023-02-14 23:28:27,342:INFO:               spacy: Not installed
2023-02-14 23:28:27,342:INFO:           wordcloud: 1.8.2.2
2023-02-14 23:28:27,342:INFO:            textblob: Not installed
2023-02-14 23:28:27,342:INFO:               fugue: Not installed
2023-02-14 23:28:27,342:INFO:           streamlit: 1.16.0
2023-02-14 23:28:27,342:INFO:             prophet: Not installed
2023-02-14 23:28:27,342:INFO:None
2023-02-14 23:28:27,342:INFO:Set up data.
2023-02-14 23:28:27,349:INFO:Set up train/test split.
2023-02-14 23:28:27,351:INFO:Set up index.
2023-02-14 23:28:27,351:INFO:Set up folding strategy.
2023-02-14 23:28:27,351:INFO:Assigning column types.
2023-02-14 23:28:27,354:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 23:28:27,355:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,359:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,366:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,423:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,481:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,481:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:27,484:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:27,484:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,489:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,495:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,553:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,593:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,594:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:27,596:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:27,597:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 23:28:27,600:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,604:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,656:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,709:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,709:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:27,712:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:27,717:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,721:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,775:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,832:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,833:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:27,835:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:27,835:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 23:28:27,847:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,910:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,945:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,946:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:27,948:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:27,955:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:27,997:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:28,031:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:28,032:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:28,033:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:28,034:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 23:28:28,088:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:28,126:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:28,126:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:28,128:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:28,182:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:28,216:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:28,216:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:28,218:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:28,219:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 23:28:28,268:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:28,302:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:28,304:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:28,367:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:28,422:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:28,424:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:28,426:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 23:28:28,557:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:28,560:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:28,649:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:28,651:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:28,651:INFO:Preparing preprocessing pipeline...
2023-02-14 23:28:28,652:INFO:Set up column name cleaning.
2023-02-14 23:28:28,652:INFO:Set up simple imputation.
2023-02-14 23:28:28,685:INFO:Finished creating preprocessing pipeline.
2023-02-14 23:28:28,687:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 23:28:28,687:INFO:Creating final display dataframe.
2023-02-14 23:28:28,881:INFO:Setup _display_container:                     Description             Value
0                    Session id               110
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              04e6
2023-02-14 23:28:28,987:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:28,990:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:29,087:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:29,089:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:29,089:INFO:setup() successfully completed in 1.76s...............
2023-02-14 23:28:29,089:INFO:Initializing compare_models()
2023-02-14 23:28:29,089:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 23:28:29,089:INFO:Checking exceptions
2023-02-14 23:28:29,091:INFO:Preparing display monitor
2023-02-14 23:28:29,115:INFO:Initializing Linear Regression
2023-02-14 23:28:29,116:INFO:Total runtime is 1.6840298970540366e-05 minutes
2023-02-14 23:28:29,120:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:29,120:INFO:Initializing create_model()
2023-02-14 23:28:29,120:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:29,120:INFO:Checking exceptions
2023-02-14 23:28:29,121:INFO:Importing libraries
2023-02-14 23:28:29,121:INFO:Copying training dataset
2023-02-14 23:28:29,123:INFO:Defining folds
2023-02-14 23:28:29,123:INFO:Declaring metric variables
2023-02-14 23:28:29,128:INFO:Importing untrained model
2023-02-14 23:28:29,131:INFO:Linear Regression Imported successfully
2023-02-14 23:28:29,139:INFO:Starting cross validation
2023-02-14 23:28:29,140:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:29,509:INFO:Calculating mean and std
2023-02-14 23:28:29,510:INFO:Creating metrics dataframe
2023-02-14 23:28:29,512:INFO:Uploading results into container
2023-02-14 23:28:29,512:INFO:Uploading model into container now
2023-02-14 23:28:29,513:INFO:_master_model_container: 1
2023-02-14 23:28:29,513:INFO:_display_container: 2
2023-02-14 23:28:29,513:INFO:LinearRegression(n_jobs=-1)
2023-02-14 23:28:29,513:INFO:create_model() successfully completed......................................
2023-02-14 23:28:29,629:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:29,629:INFO:Creating metrics dataframe
2023-02-14 23:28:29,635:INFO:Initializing Lasso Regression
2023-02-14 23:28:29,635:INFO:Total runtime is 0.008667131265004475 minutes
2023-02-14 23:28:29,639:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:29,639:INFO:Initializing create_model()
2023-02-14 23:28:29,639:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:29,639:INFO:Checking exceptions
2023-02-14 23:28:29,639:INFO:Importing libraries
2023-02-14 23:28:29,639:INFO:Copying training dataset
2023-02-14 23:28:29,641:INFO:Defining folds
2023-02-14 23:28:29,641:INFO:Declaring metric variables
2023-02-14 23:28:29,645:INFO:Importing untrained model
2023-02-14 23:28:29,648:INFO:Lasso Regression Imported successfully
2023-02-14 23:28:29,654:INFO:Starting cross validation
2023-02-14 23:28:29,656:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:29,789:INFO:Calculating mean and std
2023-02-14 23:28:29,790:INFO:Creating metrics dataframe
2023-02-14 23:28:29,792:INFO:Uploading results into container
2023-02-14 23:28:29,792:INFO:Uploading model into container now
2023-02-14 23:28:29,792:INFO:_master_model_container: 2
2023-02-14 23:28:29,793:INFO:_display_container: 2
2023-02-14 23:28:29,793:INFO:Lasso(random_state=110)
2023-02-14 23:28:29,793:INFO:create_model() successfully completed......................................
2023-02-14 23:28:29,877:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:29,877:INFO:Creating metrics dataframe
2023-02-14 23:28:29,884:INFO:Initializing Ridge Regression
2023-02-14 23:28:29,884:INFO:Total runtime is 0.012812062104543049 minutes
2023-02-14 23:28:29,886:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:29,887:INFO:Initializing create_model()
2023-02-14 23:28:29,887:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:29,887:INFO:Checking exceptions
2023-02-14 23:28:29,888:INFO:Importing libraries
2023-02-14 23:28:29,888:INFO:Copying training dataset
2023-02-14 23:28:29,890:INFO:Defining folds
2023-02-14 23:28:29,890:INFO:Declaring metric variables
2023-02-14 23:28:29,894:INFO:Importing untrained model
2023-02-14 23:28:29,897:INFO:Ridge Regression Imported successfully
2023-02-14 23:28:29,904:INFO:Starting cross validation
2023-02-14 23:28:29,907:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:30,037:INFO:Calculating mean and std
2023-02-14 23:28:30,038:INFO:Creating metrics dataframe
2023-02-14 23:28:30,040:INFO:Uploading results into container
2023-02-14 23:28:30,041:INFO:Uploading model into container now
2023-02-14 23:28:30,042:INFO:_master_model_container: 3
2023-02-14 23:28:30,042:INFO:_display_container: 2
2023-02-14 23:28:30,042:INFO:Ridge(random_state=110)
2023-02-14 23:28:30,042:INFO:create_model() successfully completed......................................
2023-02-14 23:28:30,133:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:30,133:INFO:Creating metrics dataframe
2023-02-14 23:28:30,138:INFO:Initializing Elastic Net
2023-02-14 23:28:30,138:INFO:Total runtime is 0.017048386732737224 minutes
2023-02-14 23:28:30,145:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:30,146:INFO:Initializing create_model()
2023-02-14 23:28:30,146:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:30,146:INFO:Checking exceptions
2023-02-14 23:28:30,146:INFO:Importing libraries
2023-02-14 23:28:30,146:INFO:Copying training dataset
2023-02-14 23:28:30,150:INFO:Defining folds
2023-02-14 23:28:30,150:INFO:Declaring metric variables
2023-02-14 23:28:30,153:INFO:Importing untrained model
2023-02-14 23:28:30,158:INFO:Elastic Net Imported successfully
2023-02-14 23:28:30,168:INFO:Starting cross validation
2023-02-14 23:28:30,168:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:30,304:INFO:Calculating mean and std
2023-02-14 23:28:30,305:INFO:Creating metrics dataframe
2023-02-14 23:28:30,307:INFO:Uploading results into container
2023-02-14 23:28:30,308:INFO:Uploading model into container now
2023-02-14 23:28:30,308:INFO:_master_model_container: 4
2023-02-14 23:28:30,308:INFO:_display_container: 2
2023-02-14 23:28:30,308:INFO:ElasticNet(random_state=110)
2023-02-14 23:28:30,308:INFO:create_model() successfully completed......................................
2023-02-14 23:28:30,395:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:30,395:INFO:Creating metrics dataframe
2023-02-14 23:28:30,404:INFO:Initializing Least Angle Regression
2023-02-14 23:28:30,404:INFO:Total runtime is 0.021484132607777914 minutes
2023-02-14 23:28:30,409:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:30,409:INFO:Initializing create_model()
2023-02-14 23:28:30,409:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:30,410:INFO:Checking exceptions
2023-02-14 23:28:30,410:INFO:Importing libraries
2023-02-14 23:28:30,410:INFO:Copying training dataset
2023-02-14 23:28:30,413:INFO:Defining folds
2023-02-14 23:28:30,414:INFO:Declaring metric variables
2023-02-14 23:28:30,417:INFO:Importing untrained model
2023-02-14 23:28:30,420:INFO:Least Angle Regression Imported successfully
2023-02-14 23:28:30,428:INFO:Starting cross validation
2023-02-14 23:28:30,429:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:30,467:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,477:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,486:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,496:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,503:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,514:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,524:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,531:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,539:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,546:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,559:INFO:Calculating mean and std
2023-02-14 23:28:30,560:INFO:Creating metrics dataframe
2023-02-14 23:28:30,563:INFO:Uploading results into container
2023-02-14 23:28:30,563:INFO:Uploading model into container now
2023-02-14 23:28:30,564:INFO:_master_model_container: 5
2023-02-14 23:28:30,564:INFO:_display_container: 2
2023-02-14 23:28:30,564:INFO:Lars(random_state=110)
2023-02-14 23:28:30,564:INFO:create_model() successfully completed......................................
2023-02-14 23:28:30,651:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:30,651:INFO:Creating metrics dataframe
2023-02-14 23:28:30,660:INFO:Initializing Lasso Least Angle Regression
2023-02-14 23:28:30,660:INFO:Total runtime is 0.02573706309000651 minutes
2023-02-14 23:28:30,663:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:30,664:INFO:Initializing create_model()
2023-02-14 23:28:30,664:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:30,664:INFO:Checking exceptions
2023-02-14 23:28:30,664:INFO:Importing libraries
2023-02-14 23:28:30,664:INFO:Copying training dataset
2023-02-14 23:28:30,666:INFO:Defining folds
2023-02-14 23:28:30,666:INFO:Declaring metric variables
2023-02-14 23:28:30,672:INFO:Importing untrained model
2023-02-14 23:28:30,677:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 23:28:30,684:INFO:Starting cross validation
2023-02-14 23:28:30,685:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:30,721:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:30,731:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:30,743:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:30,753:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:30,759:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:30,769:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:30,778:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:30,788:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:30,793:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:30,801:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:30,814:INFO:Calculating mean and std
2023-02-14 23:28:30,815:INFO:Creating metrics dataframe
2023-02-14 23:28:30,817:INFO:Uploading results into container
2023-02-14 23:28:30,817:INFO:Uploading model into container now
2023-02-14 23:28:30,817:INFO:_master_model_container: 6
2023-02-14 23:28:30,817:INFO:_display_container: 2
2023-02-14 23:28:30,818:INFO:LassoLars(random_state=110)
2023-02-14 23:28:30,818:INFO:create_model() successfully completed......................................
2023-02-14 23:28:30,905:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:30,905:INFO:Creating metrics dataframe
2023-02-14 23:28:30,917:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 23:28:30,918:INFO:Total runtime is 0.030042306582132975 minutes
2023-02-14 23:28:30,920:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:30,921:INFO:Initializing create_model()
2023-02-14 23:28:30,921:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:30,921:INFO:Checking exceptions
2023-02-14 23:28:30,921:INFO:Importing libraries
2023-02-14 23:28:30,921:INFO:Copying training dataset
2023-02-14 23:28:30,925:INFO:Defining folds
2023-02-14 23:28:30,925:INFO:Declaring metric variables
2023-02-14 23:28:30,928:INFO:Importing untrained model
2023-02-14 23:28:30,932:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 23:28:30,939:INFO:Starting cross validation
2023-02-14 23:28:30,940:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:30,977:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,985:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:30,995:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:31,003:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:31,011:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:31,021:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:31,032:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:31,038:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:31,049:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:31,055:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:31,068:INFO:Calculating mean and std
2023-02-14 23:28:31,069:INFO:Creating metrics dataframe
2023-02-14 23:28:31,073:INFO:Uploading results into container
2023-02-14 23:28:31,074:INFO:Uploading model into container now
2023-02-14 23:28:31,074:INFO:_master_model_container: 7
2023-02-14 23:28:31,074:INFO:_display_container: 2
2023-02-14 23:28:31,074:INFO:OrthogonalMatchingPursuit()
2023-02-14 23:28:31,074:INFO:create_model() successfully completed......................................
2023-02-14 23:28:31,161:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:31,161:INFO:Creating metrics dataframe
2023-02-14 23:28:31,168:INFO:Initializing Bayesian Ridge
2023-02-14 23:28:31,169:INFO:Total runtime is 0.034222884972890215 minutes
2023-02-14 23:28:31,171:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:31,171:INFO:Initializing create_model()
2023-02-14 23:28:31,171:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:31,172:INFO:Checking exceptions
2023-02-14 23:28:31,172:INFO:Importing libraries
2023-02-14 23:28:31,172:INFO:Copying training dataset
2023-02-14 23:28:31,177:INFO:Defining folds
2023-02-14 23:28:31,177:INFO:Declaring metric variables
2023-02-14 23:28:31,180:INFO:Importing untrained model
2023-02-14 23:28:31,184:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:28:31,191:INFO:Starting cross validation
2023-02-14 23:28:31,196:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:31,364:INFO:Calculating mean and std
2023-02-14 23:28:31,364:INFO:Creating metrics dataframe
2023-02-14 23:28:31,367:INFO:Uploading results into container
2023-02-14 23:28:31,368:INFO:Uploading model into container now
2023-02-14 23:28:31,368:INFO:_master_model_container: 8
2023-02-14 23:28:31,368:INFO:_display_container: 2
2023-02-14 23:28:31,368:INFO:BayesianRidge()
2023-02-14 23:28:31,369:INFO:create_model() successfully completed......................................
2023-02-14 23:28:31,454:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:31,454:INFO:Creating metrics dataframe
2023-02-14 23:28:31,464:INFO:Initializing Passive Aggressive Regressor
2023-02-14 23:28:31,464:INFO:Total runtime is 0.039148406187693274 minutes
2023-02-14 23:28:31,467:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:31,467:INFO:Initializing create_model()
2023-02-14 23:28:31,468:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:31,468:INFO:Checking exceptions
2023-02-14 23:28:31,468:INFO:Importing libraries
2023-02-14 23:28:31,468:INFO:Copying training dataset
2023-02-14 23:28:31,470:INFO:Defining folds
2023-02-14 23:28:31,472:INFO:Declaring metric variables
2023-02-14 23:28:31,477:INFO:Importing untrained model
2023-02-14 23:28:31,480:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 23:28:31,486:INFO:Starting cross validation
2023-02-14 23:28:31,487:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:31,616:INFO:Calculating mean and std
2023-02-14 23:28:31,616:INFO:Creating metrics dataframe
2023-02-14 23:28:31,619:INFO:Uploading results into container
2023-02-14 23:28:31,619:INFO:Uploading model into container now
2023-02-14 23:28:31,619:INFO:_master_model_container: 9
2023-02-14 23:28:31,619:INFO:_display_container: 2
2023-02-14 23:28:31,620:INFO:PassiveAggressiveRegressor(random_state=110)
2023-02-14 23:28:31,620:INFO:create_model() successfully completed......................................
2023-02-14 23:28:31,707:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:31,707:INFO:Creating metrics dataframe
2023-02-14 23:28:31,718:INFO:Initializing Huber Regressor
2023-02-14 23:28:31,718:INFO:Total runtime is 0.0433777650197347 minutes
2023-02-14 23:28:31,721:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:31,721:INFO:Initializing create_model()
2023-02-14 23:28:31,722:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:31,722:INFO:Checking exceptions
2023-02-14 23:28:31,722:INFO:Importing libraries
2023-02-14 23:28:31,722:INFO:Copying training dataset
2023-02-14 23:28:31,727:INFO:Defining folds
2023-02-14 23:28:31,727:INFO:Declaring metric variables
2023-02-14 23:28:31,731:INFO:Importing untrained model
2023-02-14 23:28:31,734:INFO:Huber Regressor Imported successfully
2023-02-14 23:28:31,743:INFO:Starting cross validation
2023-02-14 23:28:31,744:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:31,797:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:31,809:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:31,822:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:31,830:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:31,837:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:31,851:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:31,862:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:31,870:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:31,872:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:31,882:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:31,893:INFO:Calculating mean and std
2023-02-14 23:28:31,894:INFO:Creating metrics dataframe
2023-02-14 23:28:31,898:INFO:Uploading results into container
2023-02-14 23:28:31,898:INFO:Uploading model into container now
2023-02-14 23:28:31,898:INFO:_master_model_container: 10
2023-02-14 23:28:31,898:INFO:_display_container: 2
2023-02-14 23:28:31,899:INFO:HuberRegressor()
2023-02-14 23:28:31,899:INFO:create_model() successfully completed......................................
2023-02-14 23:28:31,982:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:31,983:INFO:Creating metrics dataframe
2023-02-14 23:28:31,992:INFO:Initializing K Neighbors Regressor
2023-02-14 23:28:31,992:INFO:Total runtime is 0.04794044494628906 minutes
2023-02-14 23:28:31,995:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:31,995:INFO:Initializing create_model()
2023-02-14 23:28:31,995:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:31,995:INFO:Checking exceptions
2023-02-14 23:28:31,995:INFO:Importing libraries
2023-02-14 23:28:31,996:INFO:Copying training dataset
2023-02-14 23:28:31,998:INFO:Defining folds
2023-02-14 23:28:31,998:INFO:Declaring metric variables
2023-02-14 23:28:32,001:INFO:Importing untrained model
2023-02-14 23:28:32,004:INFO:K Neighbors Regressor Imported successfully
2023-02-14 23:28:32,012:INFO:Starting cross validation
2023-02-14 23:28:32,013:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:32,148:INFO:Calculating mean and std
2023-02-14 23:28:32,150:INFO:Creating metrics dataframe
2023-02-14 23:28:32,152:INFO:Uploading results into container
2023-02-14 23:28:32,152:INFO:Uploading model into container now
2023-02-14 23:28:32,152:INFO:_master_model_container: 11
2023-02-14 23:28:32,152:INFO:_display_container: 2
2023-02-14 23:28:32,153:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 23:28:32,153:INFO:create_model() successfully completed......................................
2023-02-14 23:28:32,236:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:32,236:INFO:Creating metrics dataframe
2023-02-14 23:28:32,246:INFO:Initializing Decision Tree Regressor
2023-02-14 23:28:32,246:INFO:Total runtime is 0.0521697203318278 minutes
2023-02-14 23:28:32,249:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:32,249:INFO:Initializing create_model()
2023-02-14 23:28:32,249:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:32,249:INFO:Checking exceptions
2023-02-14 23:28:32,249:INFO:Importing libraries
2023-02-14 23:28:32,249:INFO:Copying training dataset
2023-02-14 23:28:32,252:INFO:Defining folds
2023-02-14 23:28:32,252:INFO:Declaring metric variables
2023-02-14 23:28:32,256:INFO:Importing untrained model
2023-02-14 23:28:32,260:INFO:Decision Tree Regressor Imported successfully
2023-02-14 23:28:32,267:INFO:Starting cross validation
2023-02-14 23:28:32,268:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:32,389:INFO:Calculating mean and std
2023-02-14 23:28:32,390:INFO:Creating metrics dataframe
2023-02-14 23:28:32,393:INFO:Uploading results into container
2023-02-14 23:28:32,393:INFO:Uploading model into container now
2023-02-14 23:28:32,393:INFO:_master_model_container: 12
2023-02-14 23:28:32,393:INFO:_display_container: 2
2023-02-14 23:28:32,393:INFO:DecisionTreeRegressor(random_state=110)
2023-02-14 23:28:32,393:INFO:create_model() successfully completed......................................
2023-02-14 23:28:32,493:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:32,493:INFO:Creating metrics dataframe
2023-02-14 23:28:32,500:INFO:Initializing Random Forest Regressor
2023-02-14 23:28:32,501:INFO:Total runtime is 0.05642968813578288 minutes
2023-02-14 23:28:32,505:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:32,506:INFO:Initializing create_model()
2023-02-14 23:28:32,506:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:32,506:INFO:Checking exceptions
2023-02-14 23:28:32,506:INFO:Importing libraries
2023-02-14 23:28:32,506:INFO:Copying training dataset
2023-02-14 23:28:32,508:INFO:Defining folds
2023-02-14 23:28:32,508:INFO:Declaring metric variables
2023-02-14 23:28:32,511:INFO:Importing untrained model
2023-02-14 23:28:32,515:INFO:Random Forest Regressor Imported successfully
2023-02-14 23:28:32,523:INFO:Starting cross validation
2023-02-14 23:28:32,524:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:32,937:INFO:Calculating mean and std
2023-02-14 23:28:32,938:INFO:Creating metrics dataframe
2023-02-14 23:28:32,941:INFO:Uploading results into container
2023-02-14 23:28:32,942:INFO:Uploading model into container now
2023-02-14 23:28:32,942:INFO:_master_model_container: 13
2023-02-14 23:28:32,942:INFO:_display_container: 2
2023-02-14 23:28:32,942:INFO:RandomForestRegressor(n_jobs=-1, random_state=110)
2023-02-14 23:28:32,942:INFO:create_model() successfully completed......................................
2023-02-14 23:28:33,026:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:33,026:INFO:Creating metrics dataframe
2023-02-14 23:28:33,036:INFO:Initializing Extra Trees Regressor
2023-02-14 23:28:33,036:INFO:Total runtime is 0.06533925930658976 minutes
2023-02-14 23:28:33,042:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:33,042:INFO:Initializing create_model()
2023-02-14 23:28:33,042:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:33,043:INFO:Checking exceptions
2023-02-14 23:28:33,043:INFO:Importing libraries
2023-02-14 23:28:33,043:INFO:Copying training dataset
2023-02-14 23:28:33,046:INFO:Defining folds
2023-02-14 23:28:33,046:INFO:Declaring metric variables
2023-02-14 23:28:33,049:INFO:Importing untrained model
2023-02-14 23:28:33,052:INFO:Extra Trees Regressor Imported successfully
2023-02-14 23:28:33,061:INFO:Starting cross validation
2023-02-14 23:28:33,062:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:33,455:INFO:Calculating mean and std
2023-02-14 23:28:33,456:INFO:Creating metrics dataframe
2023-02-14 23:28:33,459:INFO:Uploading results into container
2023-02-14 23:28:33,459:INFO:Uploading model into container now
2023-02-14 23:28:33,460:INFO:_master_model_container: 14
2023-02-14 23:28:33,460:INFO:_display_container: 2
2023-02-14 23:28:33,460:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=110)
2023-02-14 23:28:33,460:INFO:create_model() successfully completed......................................
2023-02-14 23:28:33,542:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:33,542:INFO:Creating metrics dataframe
2023-02-14 23:28:33,551:INFO:Initializing AdaBoost Regressor
2023-02-14 23:28:33,552:INFO:Total runtime is 0.07393058141072592 minutes
2023-02-14 23:28:33,555:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:33,555:INFO:Initializing create_model()
2023-02-14 23:28:33,555:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:33,556:INFO:Checking exceptions
2023-02-14 23:28:33,556:INFO:Importing libraries
2023-02-14 23:28:33,556:INFO:Copying training dataset
2023-02-14 23:28:33,558:INFO:Defining folds
2023-02-14 23:28:33,558:INFO:Declaring metric variables
2023-02-14 23:28:33,561:INFO:Importing untrained model
2023-02-14 23:28:33,566:INFO:AdaBoost Regressor Imported successfully
2023-02-14 23:28:33,573:INFO:Starting cross validation
2023-02-14 23:28:33,574:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:33,783:INFO:Calculating mean and std
2023-02-14 23:28:33,784:INFO:Creating metrics dataframe
2023-02-14 23:28:33,786:INFO:Uploading results into container
2023-02-14 23:28:33,787:INFO:Uploading model into container now
2023-02-14 23:28:33,788:INFO:_master_model_container: 15
2023-02-14 23:28:33,788:INFO:_display_container: 2
2023-02-14 23:28:33,789:INFO:AdaBoostRegressor(random_state=110)
2023-02-14 23:28:33,789:INFO:create_model() successfully completed......................................
2023-02-14 23:28:33,875:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:33,875:INFO:Creating metrics dataframe
2023-02-14 23:28:33,883:INFO:Initializing Gradient Boosting Regressor
2023-02-14 23:28:33,883:INFO:Total runtime is 0.07946316401163737 minutes
2023-02-14 23:28:33,885:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:33,885:INFO:Initializing create_model()
2023-02-14 23:28:33,885:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:33,885:INFO:Checking exceptions
2023-02-14 23:28:33,885:INFO:Importing libraries
2023-02-14 23:28:33,885:INFO:Copying training dataset
2023-02-14 23:28:33,890:INFO:Defining folds
2023-02-14 23:28:33,890:INFO:Declaring metric variables
2023-02-14 23:28:33,895:INFO:Importing untrained model
2023-02-14 23:28:33,899:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 23:28:33,908:INFO:Starting cross validation
2023-02-14 23:28:33,909:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:34,085:INFO:Calculating mean and std
2023-02-14 23:28:34,087:INFO:Creating metrics dataframe
2023-02-14 23:28:34,090:INFO:Uploading results into container
2023-02-14 23:28:34,090:INFO:Uploading model into container now
2023-02-14 23:28:34,090:INFO:_master_model_container: 16
2023-02-14 23:28:34,090:INFO:_display_container: 2
2023-02-14 23:28:34,091:INFO:GradientBoostingRegressor(random_state=110)
2023-02-14 23:28:34,091:INFO:create_model() successfully completed......................................
2023-02-14 23:28:34,177:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:34,178:INFO:Creating metrics dataframe
2023-02-14 23:28:34,190:INFO:Initializing Extreme Gradient Boosting
2023-02-14 23:28:34,190:INFO:Total runtime is 0.08458036581675211 minutes
2023-02-14 23:28:34,193:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:34,193:INFO:Initializing create_model()
2023-02-14 23:28:34,193:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:34,193:INFO:Checking exceptions
2023-02-14 23:28:34,195:INFO:Importing libraries
2023-02-14 23:28:34,195:INFO:Copying training dataset
2023-02-14 23:28:34,197:INFO:Defining folds
2023-02-14 23:28:34,197:INFO:Declaring metric variables
2023-02-14 23:28:34,201:INFO:Importing untrained model
2023-02-14 23:28:34,207:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 23:28:34,215:INFO:Starting cross validation
2023-02-14 23:28:34,216:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:34,390:INFO:Calculating mean and std
2023-02-14 23:28:34,391:INFO:Creating metrics dataframe
2023-02-14 23:28:34,393:INFO:Uploading results into container
2023-02-14 23:28:34,394:INFO:Uploading model into container now
2023-02-14 23:28:34,394:INFO:_master_model_container: 17
2023-02-14 23:28:34,394:INFO:_display_container: 2
2023-02-14 23:28:34,395:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=110, ...)
2023-02-14 23:28:34,395:INFO:create_model() successfully completed......................................
2023-02-14 23:28:34,479:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:34,480:INFO:Creating metrics dataframe
2023-02-14 23:28:34,489:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 23:28:34,489:INFO:Total runtime is 0.08955826759338378 minutes
2023-02-14 23:28:34,492:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:34,493:INFO:Initializing create_model()
2023-02-14 23:28:34,493:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:34,493:INFO:Checking exceptions
2023-02-14 23:28:34,493:INFO:Importing libraries
2023-02-14 23:28:34,493:INFO:Copying training dataset
2023-02-14 23:28:34,497:INFO:Defining folds
2023-02-14 23:28:34,497:INFO:Declaring metric variables
2023-02-14 23:28:34,500:INFO:Importing untrained model
2023-02-14 23:28:34,505:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 23:28:34,513:INFO:Starting cross validation
2023-02-14 23:28:34,514:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:34,651:INFO:Calculating mean and std
2023-02-14 23:28:34,653:INFO:Creating metrics dataframe
2023-02-14 23:28:34,656:INFO:Uploading results into container
2023-02-14 23:28:34,657:INFO:Uploading model into container now
2023-02-14 23:28:34,657:INFO:_master_model_container: 18
2023-02-14 23:28:34,657:INFO:_display_container: 2
2023-02-14 23:28:34,657:INFO:LGBMRegressor(random_state=110)
2023-02-14 23:28:34,657:INFO:create_model() successfully completed......................................
2023-02-14 23:28:34,744:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:34,744:INFO:Creating metrics dataframe
2023-02-14 23:28:34,755:INFO:Initializing Dummy Regressor
2023-02-14 23:28:34,755:INFO:Total runtime is 0.09400074084599812 minutes
2023-02-14 23:28:34,758:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:34,758:INFO:Initializing create_model()
2023-02-14 23:28:34,759:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002158A114040>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:34,759:INFO:Checking exceptions
2023-02-14 23:28:34,759:INFO:Importing libraries
2023-02-14 23:28:34,759:INFO:Copying training dataset
2023-02-14 23:28:34,762:INFO:Defining folds
2023-02-14 23:28:34,763:INFO:Declaring metric variables
2023-02-14 23:28:34,766:INFO:Importing untrained model
2023-02-14 23:28:34,769:INFO:Dummy Regressor Imported successfully
2023-02-14 23:28:34,777:INFO:Starting cross validation
2023-02-14 23:28:34,778:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:34,901:INFO:Calculating mean and std
2023-02-14 23:28:34,901:INFO:Creating metrics dataframe
2023-02-14 23:28:34,906:INFO:Uploading results into container
2023-02-14 23:28:34,906:INFO:Uploading model into container now
2023-02-14 23:28:34,907:INFO:_master_model_container: 19
2023-02-14 23:28:34,907:INFO:_display_container: 2
2023-02-14 23:28:34,907:INFO:DummyRegressor()
2023-02-14 23:28:34,907:INFO:create_model() successfully completed......................................
2023-02-14 23:28:34,997:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:34,997:INFO:Creating metrics dataframe
2023-02-14 23:28:35,021:INFO:Initializing create_model()
2023-02-14 23:28:35,021:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021589F296A0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=110), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:35,021:INFO:Checking exceptions
2023-02-14 23:28:35,022:INFO:Importing libraries
2023-02-14 23:28:35,024:INFO:Copying training dataset
2023-02-14 23:28:35,025:INFO:Defining folds
2023-02-14 23:28:35,026:INFO:Declaring metric variables
2023-02-14 23:28:35,026:INFO:Importing untrained model
2023-02-14 23:28:35,026:INFO:Declaring custom model
2023-02-14 23:28:35,027:INFO:Extra Trees Regressor Imported successfully
2023-02-14 23:28:35,027:INFO:Cross validation set to False
2023-02-14 23:28:35,027:INFO:Fitting Model
2023-02-14 23:28:35,125:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=110)
2023-02-14 23:28:35,125:INFO:create_model() successfully completed......................................
2023-02-14 23:28:35,267:INFO:_master_model_container: 19
2023-02-14 23:28:35,267:INFO:_display_container: 2
2023-02-14 23:28:35,267:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=110)
2023-02-14 23:28:35,269:INFO:compare_models() successfully completed......................................
2023-02-14 23:28:50,509:INFO:PyCaret RegressionExperiment
2023-02-14 23:28:50,509:INFO:Logging name: reg-default-name
2023-02-14 23:28:50,509:INFO:ML Usecase: MLUsecase.REGRESSION
2023-02-14 23:28:50,510:INFO:version 3.0.0.rc8
2023-02-14 23:28:50,510:INFO:Initializing setup()
2023-02-14 23:28:50,510:INFO:self.USI: 4f7d
2023-02-14 23:28:50,510:INFO:self._variable_keys: {'data', 'transform_target_param', 'logging_param', 'fold_generator', 'X_test', 'y', 'exp_name_log', 'pipeline', 'n_jobs_param', 'exp_id', 'log_plots_param', 'X_train', 'y_test', 'html_param', 'gpu_param', '_ml_usecase', 'X', 'seed', 'target_param', 'memory', 'gpu_n_jobs_param', 'USI', 'idx', 'fold_groups_param', 'fold_shuffle_param', '_available_plots', 'y_train'}
2023-02-14 23:28:50,510:INFO:Checking environment
2023-02-14 23:28:50,510:INFO:python_version: 3.9.13
2023-02-14 23:28:50,510:INFO:python_build: ('tags/v3.9.13:6de2ca5', 'May 17 2022 16:36:42')
2023-02-14 23:28:50,510:INFO:machine: AMD64
2023-02-14 23:28:50,510:INFO:platform: Windows-10-10.0.22621-SP0
2023-02-14 23:28:50,516:INFO:Memory: svmem(total=16805040128, available=4326187008, percent=74.3, used=12478853120, free=4326187008)
2023-02-14 23:28:50,516:INFO:Physical Core: 4
2023-02-14 23:28:50,517:INFO:Logical Core: 8
2023-02-14 23:28:50,517:INFO:Checking libraries
2023-02-14 23:28:50,517:INFO:System:
2023-02-14 23:28:50,517:INFO:    python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
2023-02-14 23:28:50,517:INFO:executable: c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\Scripts\python.exe
2023-02-14 23:28:50,517:INFO:   machine: Windows-10-10.0.22621-SP0
2023-02-14 23:28:50,517:INFO:PyCaret required dependencies:
2023-02-14 23:28:50,517:INFO:                 pip: 23.0
2023-02-14 23:28:50,517:INFO:          setuptools: 58.1.0
2023-02-14 23:28:50,517:INFO:             pycaret: 3.0.0rc8
2023-02-14 23:28:50,517:INFO:             IPython: 8.7.0
2023-02-14 23:28:50,517:INFO:          ipywidgets: 8.0.4
2023-02-14 23:28:50,517:INFO:                tqdm: 4.64.1
2023-02-14 23:28:50,517:INFO:               numpy: 1.22.1
2023-02-14 23:28:50,517:INFO:              pandas: 1.5.2
2023-02-14 23:28:50,517:INFO:              jinja2: 3.1.2
2023-02-14 23:28:50,517:INFO:               scipy: 1.5.4
2023-02-14 23:28:50,517:INFO:              joblib: 1.2.0
2023-02-14 23:28:50,517:INFO:             sklearn: 1.1.3
2023-02-14 23:28:50,517:INFO:                pyod: 1.0.7
2023-02-14 23:28:50,517:INFO:            imblearn: 0.10.1
2023-02-14 23:28:50,517:INFO:   category_encoders: 2.6.0
2023-02-14 23:28:50,517:INFO:            lightgbm: 3.3.4
2023-02-14 23:28:50,517:INFO:               numba: 0.56.4
2023-02-14 23:28:50,517:INFO:            requests: 2.28.1
2023-02-14 23:28:50,517:INFO:          matplotlib: 3.6.2
2023-02-14 23:28:50,517:INFO:          scikitplot: 0.3.7
2023-02-14 23:28:50,517:INFO:         yellowbrick: 1.5
2023-02-14 23:28:50,517:INFO:              plotly: 5.11.0
2023-02-14 23:28:50,517:INFO:             kaleido: 0.2.1
2023-02-14 23:28:50,517:INFO:         statsmodels: 0.13.5
2023-02-14 23:28:50,517:INFO:              sktime: 0.15.1
2023-02-14 23:28:50,517:INFO:               tbats: 1.1.2
2023-02-14 23:28:50,517:INFO:            pmdarima: 2.0.2
2023-02-14 23:28:50,517:INFO:              psutil: 5.9.4
2023-02-14 23:28:50,517:INFO:PyCaret optional dependencies:
2023-02-14 23:28:50,517:INFO:                shap: 0.41.0
2023-02-14 23:28:50,517:INFO:           interpret: 0.3.0
2023-02-14 23:28:50,517:INFO:                umap: Not installed
2023-02-14 23:28:50,517:INFO:    pandas_profiling: 3.6.2
2023-02-14 23:28:50,517:INFO:  explainerdashboard: Not installed
2023-02-14 23:28:50,517:INFO:             autoviz: Not installed
2023-02-14 23:28:50,517:INFO:           fairlearn: Not installed
2023-02-14 23:28:50,517:INFO:             xgboost: 1.7.3
2023-02-14 23:28:50,517:INFO:            catboost: Not installed
2023-02-14 23:28:50,517:INFO:              kmodes: Not installed
2023-02-14 23:28:50,517:INFO:             mlxtend: Not installed
2023-02-14 23:28:50,517:INFO:       statsforecast: Not installed
2023-02-14 23:28:50,517:INFO:        tune_sklearn: Not installed
2023-02-14 23:28:50,517:INFO:                 ray: Not installed
2023-02-14 23:28:50,517:INFO:            hyperopt: Not installed
2023-02-14 23:28:50,517:INFO:              optuna: Not installed
2023-02-14 23:28:50,517:INFO:               skopt: Not installed
2023-02-14 23:28:50,517:INFO:              mlflow: Not installed
2023-02-14 23:28:50,517:INFO:              gradio: Not installed
2023-02-14 23:28:50,517:INFO:             fastapi: Not installed
2023-02-14 23:28:50,517:INFO:             uvicorn: Not installed
2023-02-14 23:28:50,517:INFO:              m2cgen: Not installed
2023-02-14 23:28:50,517:INFO:           evidently: Not installed
2023-02-14 23:28:50,517:INFO:                nltk: 3.8
2023-02-14 23:28:50,519:INFO:            pyLDAvis: Not installed
2023-02-14 23:28:50,519:INFO:              gensim: Not installed
2023-02-14 23:28:50,519:INFO:               spacy: Not installed
2023-02-14 23:28:50,519:INFO:           wordcloud: 1.8.2.2
2023-02-14 23:28:50,519:INFO:            textblob: Not installed
2023-02-14 23:28:50,519:INFO:               fugue: Not installed
2023-02-14 23:28:50,519:INFO:           streamlit: 1.16.0
2023-02-14 23:28:50,519:INFO:             prophet: Not installed
2023-02-14 23:28:50,519:INFO:None
2023-02-14 23:28:50,519:INFO:Set up data.
2023-02-14 23:28:50,526:INFO:Set up train/test split.
2023-02-14 23:28:50,529:INFO:Set up index.
2023-02-14 23:28:50,530:INFO:Set up folding strategy.
2023-02-14 23:28:50,530:INFO:Assigning column types.
2023-02-14 23:28:50,532:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-02-14 23:28:50,533:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,536:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,542:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,606:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,655:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,656:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:50,659:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:50,660:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,664:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,669:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,712:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,748:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,749:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:50,751:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:50,751:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-02-14 23:28:50,755:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,761:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,804:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,840:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,840:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:50,843:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:50,846:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,849:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,895:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,928:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,928:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:50,931:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:50,932:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-02-14 23:28:50,938:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:50,984:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:51,018:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:51,019:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:51,021:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:51,029:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-02-14 23:28:51,073:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:51,109:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:51,109:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:51,110:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:51,111:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-02-14 23:28:51,162:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:51,195:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:51,197:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:51,198:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:51,249:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:51,285:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-02-14 23:28:51,285:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:51,287:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:51,288:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-02-14 23:28:51,339:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:51,374:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:51,375:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:51,430:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-02-14 23:28:51,465:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:51,467:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:51,467:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-02-14 23:28:51,569:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:51,573:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:51,667:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:51,670:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:51,671:INFO:Preparing preprocessing pipeline...
2023-02-14 23:28:51,672:INFO:Set up column name cleaning.
2023-02-14 23:28:51,673:INFO:Set up simple imputation.
2023-02-14 23:28:51,714:INFO:Finished creating preprocessing pipeline.
2023-02-14 23:28:51,716:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\rober\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Property Rights',
                                             'Judical Effectiveness',
                                             'Government Integrity',
                                             'Tax Burden', 'Business Freedom',
                                             'Trade Freedom',
                                             'Investment Freedom',
                                             'Financial Freedom'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-02-14 23:28:51,717:INFO:Creating final display dataframe.
2023-02-14 23:28:51,907:INFO:Setup _display_container:                     Description             Value
0                    Session id               125
1                        Target        2019 Score
2                   Target type        Regression
3           Original data shape          (186, 9)
4        Transformed data shape          (186, 9)
5   Transformed train set shape          (130, 9)
6    Transformed test set shape           (56, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              4f7d
2023-02-14 23:28:52,061:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:52,063:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:52,151:INFO:Soft dependency imported: xgboost: 1.7.3
2023-02-14 23:28:52,154:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-02-14 23:28:52,156:INFO:setup() successfully completed in 1.65s...............
2023-02-14 23:28:52,156:INFO:Initializing compare_models()
2023-02-14 23:28:52,156:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-02-14 23:28:52,156:INFO:Checking exceptions
2023-02-14 23:28:52,157:INFO:Preparing display monitor
2023-02-14 23:28:52,179:INFO:Initializing Linear Regression
2023-02-14 23:28:52,179:INFO:Total runtime is 0.0 minutes
2023-02-14 23:28:52,182:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:52,183:INFO:Initializing create_model()
2023-02-14 23:28:52,183:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:52,183:INFO:Checking exceptions
2023-02-14 23:28:52,183:INFO:Importing libraries
2023-02-14 23:28:52,183:INFO:Copying training dataset
2023-02-14 23:28:52,186:INFO:Defining folds
2023-02-14 23:28:52,186:INFO:Declaring metric variables
2023-02-14 23:28:52,191:INFO:Importing untrained model
2023-02-14 23:28:52,195:INFO:Linear Regression Imported successfully
2023-02-14 23:28:52,201:INFO:Starting cross validation
2023-02-14 23:28:52,202:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:52,572:INFO:Calculating mean and std
2023-02-14 23:28:52,573:INFO:Creating metrics dataframe
2023-02-14 23:28:52,576:INFO:Uploading results into container
2023-02-14 23:28:52,576:INFO:Uploading model into container now
2023-02-14 23:28:52,576:INFO:_master_model_container: 1
2023-02-14 23:28:52,576:INFO:_display_container: 2
2023-02-14 23:28:52,577:INFO:LinearRegression(n_jobs=-1)
2023-02-14 23:28:52,577:INFO:create_model() successfully completed......................................
2023-02-14 23:28:52,667:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:52,667:INFO:Creating metrics dataframe
2023-02-14 23:28:52,674:INFO:Initializing Lasso Regression
2023-02-14 23:28:52,674:INFO:Total runtime is 0.008234703540802002 minutes
2023-02-14 23:28:52,676:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:52,676:INFO:Initializing create_model()
2023-02-14 23:28:52,676:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:52,676:INFO:Checking exceptions
2023-02-14 23:28:52,676:INFO:Importing libraries
2023-02-14 23:28:52,677:INFO:Copying training dataset
2023-02-14 23:28:52,679:INFO:Defining folds
2023-02-14 23:28:52,679:INFO:Declaring metric variables
2023-02-14 23:28:52,682:INFO:Importing untrained model
2023-02-14 23:28:52,685:INFO:Lasso Regression Imported successfully
2023-02-14 23:28:52,692:INFO:Starting cross validation
2023-02-14 23:28:52,693:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:52,822:INFO:Calculating mean and std
2023-02-14 23:28:52,822:INFO:Creating metrics dataframe
2023-02-14 23:28:52,824:INFO:Uploading results into container
2023-02-14 23:28:52,825:INFO:Uploading model into container now
2023-02-14 23:28:52,825:INFO:_master_model_container: 2
2023-02-14 23:28:52,825:INFO:_display_container: 2
2023-02-14 23:28:52,825:INFO:Lasso(random_state=125)
2023-02-14 23:28:52,825:INFO:create_model() successfully completed......................................
2023-02-14 23:28:52,911:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:52,911:INFO:Creating metrics dataframe
2023-02-14 23:28:52,918:INFO:Initializing Ridge Regression
2023-02-14 23:28:52,918:INFO:Total runtime is 0.012301369508107503 minutes
2023-02-14 23:28:52,923:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:52,924:INFO:Initializing create_model()
2023-02-14 23:28:52,924:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:52,924:INFO:Checking exceptions
2023-02-14 23:28:52,924:INFO:Importing libraries
2023-02-14 23:28:52,924:INFO:Copying training dataset
2023-02-14 23:28:52,927:INFO:Defining folds
2023-02-14 23:28:52,927:INFO:Declaring metric variables
2023-02-14 23:28:52,930:INFO:Importing untrained model
2023-02-14 23:28:52,932:INFO:Ridge Regression Imported successfully
2023-02-14 23:28:52,941:INFO:Starting cross validation
2023-02-14 23:28:52,941:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:53,104:INFO:Calculating mean and std
2023-02-14 23:28:53,104:INFO:Creating metrics dataframe
2023-02-14 23:28:53,107:INFO:Uploading results into container
2023-02-14 23:28:53,107:INFO:Uploading model into container now
2023-02-14 23:28:53,107:INFO:_master_model_container: 3
2023-02-14 23:28:53,107:INFO:_display_container: 2
2023-02-14 23:28:53,108:INFO:Ridge(random_state=125)
2023-02-14 23:28:53,108:INFO:create_model() successfully completed......................................
2023-02-14 23:28:53,194:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:53,194:INFO:Creating metrics dataframe
2023-02-14 23:28:53,201:INFO:Initializing Elastic Net
2023-02-14 23:28:53,201:INFO:Total runtime is 0.01702045996983846 minutes
2023-02-14 23:28:53,205:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:53,205:INFO:Initializing create_model()
2023-02-14 23:28:53,205:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:53,206:INFO:Checking exceptions
2023-02-14 23:28:53,206:INFO:Importing libraries
2023-02-14 23:28:53,206:INFO:Copying training dataset
2023-02-14 23:28:53,208:INFO:Defining folds
2023-02-14 23:28:53,208:INFO:Declaring metric variables
2023-02-14 23:28:53,211:INFO:Importing untrained model
2023-02-14 23:28:53,214:INFO:Elastic Net Imported successfully
2023-02-14 23:28:53,221:INFO:Starting cross validation
2023-02-14 23:28:53,222:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:53,341:INFO:Calculating mean and std
2023-02-14 23:28:53,342:INFO:Creating metrics dataframe
2023-02-14 23:28:53,344:INFO:Uploading results into container
2023-02-14 23:28:53,345:INFO:Uploading model into container now
2023-02-14 23:28:53,345:INFO:_master_model_container: 4
2023-02-14 23:28:53,345:INFO:_display_container: 2
2023-02-14 23:28:53,345:INFO:ElasticNet(random_state=125)
2023-02-14 23:28:53,345:INFO:create_model() successfully completed......................................
2023-02-14 23:28:53,439:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:53,439:INFO:Creating metrics dataframe
2023-02-14 23:28:53,449:INFO:Initializing Least Angle Regression
2023-02-14 23:28:53,450:INFO:Total runtime is 0.02117754618326823 minutes
2023-02-14 23:28:53,454:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:53,455:INFO:Initializing create_model()
2023-02-14 23:28:53,455:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:53,455:INFO:Checking exceptions
2023-02-14 23:28:53,455:INFO:Importing libraries
2023-02-14 23:28:53,455:INFO:Copying training dataset
2023-02-14 23:28:53,459:INFO:Defining folds
2023-02-14 23:28:53,459:INFO:Declaring metric variables
2023-02-14 23:28:53,464:INFO:Importing untrained model
2023-02-14 23:28:53,468:INFO:Least Angle Regression Imported successfully
2023-02-14 23:28:53,478:INFO:Starting cross validation
2023-02-14 23:28:53,479:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:53,523:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:53,533:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:53,543:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:53,551:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:53,559:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:53,566:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:53,578:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:53,586:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:53,595:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:53,601:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:53,615:INFO:Calculating mean and std
2023-02-14 23:28:53,615:INFO:Creating metrics dataframe
2023-02-14 23:28:53,616:INFO:Uploading results into container
2023-02-14 23:28:53,619:INFO:Uploading model into container now
2023-02-14 23:28:53,619:INFO:_master_model_container: 5
2023-02-14 23:28:53,620:INFO:_display_container: 2
2023-02-14 23:28:53,621:INFO:Lars(random_state=125)
2023-02-14 23:28:53,621:INFO:create_model() successfully completed......................................
2023-02-14 23:28:53,713:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:53,713:INFO:Creating metrics dataframe
2023-02-14 23:28:53,724:INFO:Initializing Lasso Least Angle Regression
2023-02-14 23:28:53,724:INFO:Total runtime is 0.02574426730473836 minutes
2023-02-14 23:28:53,728:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:53,728:INFO:Initializing create_model()
2023-02-14 23:28:53,728:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:53,729:INFO:Checking exceptions
2023-02-14 23:28:53,729:INFO:Importing libraries
2023-02-14 23:28:53,729:INFO:Copying training dataset
2023-02-14 23:28:53,732:INFO:Defining folds
2023-02-14 23:28:53,732:INFO:Declaring metric variables
2023-02-14 23:28:53,736:INFO:Importing untrained model
2023-02-14 23:28:53,741:INFO:Lasso Least Angle Regression Imported successfully
2023-02-14 23:28:53,748:INFO:Starting cross validation
2023-02-14 23:28:53,750:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:53,799:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:53,810:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:53,816:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:53,832:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:53,838:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:53,848:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:53,857:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:53,867:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:53,874:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:53,881:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-02-14 23:28:53,894:INFO:Calculating mean and std
2023-02-14 23:28:53,895:INFO:Creating metrics dataframe
2023-02-14 23:28:53,897:INFO:Uploading results into container
2023-02-14 23:28:53,897:INFO:Uploading model into container now
2023-02-14 23:28:53,897:INFO:_master_model_container: 6
2023-02-14 23:28:53,897:INFO:_display_container: 2
2023-02-14 23:28:53,897:INFO:LassoLars(random_state=125)
2023-02-14 23:28:53,897:INFO:create_model() successfully completed......................................
2023-02-14 23:28:53,988:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:53,988:INFO:Creating metrics dataframe
2023-02-14 23:28:53,997:INFO:Initializing Orthogonal Matching Pursuit
2023-02-14 23:28:53,997:INFO:Total runtime is 0.030284818013509112 minutes
2023-02-14 23:28:54,000:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:54,000:INFO:Initializing create_model()
2023-02-14 23:28:54,001:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:54,001:INFO:Checking exceptions
2023-02-14 23:28:54,001:INFO:Importing libraries
2023-02-14 23:28:54,001:INFO:Copying training dataset
2023-02-14 23:28:54,004:INFO:Defining folds
2023-02-14 23:28:54,006:INFO:Declaring metric variables
2023-02-14 23:28:54,010:INFO:Importing untrained model
2023-02-14 23:28:54,013:INFO:Orthogonal Matching Pursuit Imported successfully
2023-02-14 23:28:54,023:INFO:Starting cross validation
2023-02-14 23:28:54,025:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:54,068:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:54,077:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:54,087:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:54,098:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:54,107:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:54,116:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:54,127:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:54,133:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:54,142:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:54,149:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-02-14 23:28:54,163:INFO:Calculating mean and std
2023-02-14 23:28:54,164:INFO:Creating metrics dataframe
2023-02-14 23:28:54,167:INFO:Uploading results into container
2023-02-14 23:28:54,168:INFO:Uploading model into container now
2023-02-14 23:28:54,168:INFO:_master_model_container: 7
2023-02-14 23:28:54,168:INFO:_display_container: 2
2023-02-14 23:28:54,169:INFO:OrthogonalMatchingPursuit()
2023-02-14 23:28:54,169:INFO:create_model() successfully completed......................................
2023-02-14 23:28:54,292:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:54,293:INFO:Creating metrics dataframe
2023-02-14 23:28:54,310:INFO:Initializing Bayesian Ridge
2023-02-14 23:28:54,310:INFO:Total runtime is 0.03550225098927816 minutes
2023-02-14 23:28:54,313:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:54,314:INFO:Initializing create_model()
2023-02-14 23:28:54,314:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:54,314:INFO:Checking exceptions
2023-02-14 23:28:54,314:INFO:Importing libraries
2023-02-14 23:28:54,314:INFO:Copying training dataset
2023-02-14 23:28:54,316:INFO:Defining folds
2023-02-14 23:28:54,316:INFO:Declaring metric variables
2023-02-14 23:28:54,323:INFO:Importing untrained model
2023-02-14 23:28:54,328:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:28:54,333:INFO:Starting cross validation
2023-02-14 23:28:54,335:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:54,482:INFO:Calculating mean and std
2023-02-14 23:28:54,483:INFO:Creating metrics dataframe
2023-02-14 23:28:54,487:INFO:Uploading results into container
2023-02-14 23:28:54,488:INFO:Uploading model into container now
2023-02-14 23:28:54,489:INFO:_master_model_container: 8
2023-02-14 23:28:54,489:INFO:_display_container: 2
2023-02-14 23:28:54,489:INFO:BayesianRidge()
2023-02-14 23:28:54,489:INFO:create_model() successfully completed......................................
2023-02-14 23:28:54,592:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:54,593:INFO:Creating metrics dataframe
2023-02-14 23:28:54,606:INFO:Initializing Passive Aggressive Regressor
2023-02-14 23:28:54,606:INFO:Total runtime is 0.04045029878616333 minutes
2023-02-14 23:28:54,612:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:54,612:INFO:Initializing create_model()
2023-02-14 23:28:54,612:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:54,612:INFO:Checking exceptions
2023-02-14 23:28:54,612:INFO:Importing libraries
2023-02-14 23:28:54,612:INFO:Copying training dataset
2023-02-14 23:28:54,615:INFO:Defining folds
2023-02-14 23:28:54,615:INFO:Declaring metric variables
2023-02-14 23:28:54,635:INFO:Importing untrained model
2023-02-14 23:28:54,642:INFO:Passive Aggressive Regressor Imported successfully
2023-02-14 23:28:54,649:INFO:Starting cross validation
2023-02-14 23:28:54,650:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:54,794:INFO:Calculating mean and std
2023-02-14 23:28:54,795:INFO:Creating metrics dataframe
2023-02-14 23:28:54,797:INFO:Uploading results into container
2023-02-14 23:28:54,797:INFO:Uploading model into container now
2023-02-14 23:28:54,798:INFO:_master_model_container: 9
2023-02-14 23:28:54,798:INFO:_display_container: 2
2023-02-14 23:28:54,798:INFO:PassiveAggressiveRegressor(random_state=125)
2023-02-14 23:28:54,798:INFO:create_model() successfully completed......................................
2023-02-14 23:28:54,926:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:54,926:INFO:Creating metrics dataframe
2023-02-14 23:28:54,939:INFO:Initializing Huber Regressor
2023-02-14 23:28:54,939:INFO:Total runtime is 0.04598499933878581 minutes
2023-02-14 23:28:54,942:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:54,942:INFO:Initializing create_model()
2023-02-14 23:28:54,942:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:54,942:INFO:Checking exceptions
2023-02-14 23:28:54,943:INFO:Importing libraries
2023-02-14 23:28:54,943:INFO:Copying training dataset
2023-02-14 23:28:54,946:INFO:Defining folds
2023-02-14 23:28:54,946:INFO:Declaring metric variables
2023-02-14 23:28:54,950:INFO:Importing untrained model
2023-02-14 23:28:54,956:INFO:Huber Regressor Imported successfully
2023-02-14 23:28:54,964:INFO:Starting cross validation
2023-02-14 23:28:54,965:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:55,041:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:55,058:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:55,059:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:55,080:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:55,088:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:55,092:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:55,112:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:55,120:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:55,126:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:55,135:WARNING:c:\Users\rober\Documents\Rober\Bootcamp\venv_analytics\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-14 23:28:55,145:INFO:Calculating mean and std
2023-02-14 23:28:55,146:INFO:Creating metrics dataframe
2023-02-14 23:28:55,149:INFO:Uploading results into container
2023-02-14 23:28:55,150:INFO:Uploading model into container now
2023-02-14 23:28:55,150:INFO:_master_model_container: 10
2023-02-14 23:28:55,150:INFO:_display_container: 2
2023-02-14 23:28:55,152:INFO:HuberRegressor()
2023-02-14 23:28:55,152:INFO:create_model() successfully completed......................................
2023-02-14 23:28:55,245:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:55,245:INFO:Creating metrics dataframe
2023-02-14 23:28:55,257:INFO:Initializing K Neighbors Regressor
2023-02-14 23:28:55,258:INFO:Total runtime is 0.051302691300710045 minutes
2023-02-14 23:28:55,261:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:55,261:INFO:Initializing create_model()
2023-02-14 23:28:55,261:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:55,261:INFO:Checking exceptions
2023-02-14 23:28:55,261:INFO:Importing libraries
2023-02-14 23:28:55,261:INFO:Copying training dataset
2023-02-14 23:28:55,265:INFO:Defining folds
2023-02-14 23:28:55,265:INFO:Declaring metric variables
2023-02-14 23:28:55,269:INFO:Importing untrained model
2023-02-14 23:28:55,275:INFO:K Neighbors Regressor Imported successfully
2023-02-14 23:28:55,282:INFO:Starting cross validation
2023-02-14 23:28:55,284:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:55,449:INFO:Calculating mean and std
2023-02-14 23:28:55,451:INFO:Creating metrics dataframe
2023-02-14 23:28:55,454:INFO:Uploading results into container
2023-02-14 23:28:55,455:INFO:Uploading model into container now
2023-02-14 23:28:55,455:INFO:_master_model_container: 11
2023-02-14 23:28:55,455:INFO:_display_container: 2
2023-02-14 23:28:55,456:INFO:KNeighborsRegressor(n_jobs=-1)
2023-02-14 23:28:55,456:INFO:create_model() successfully completed......................................
2023-02-14 23:28:55,546:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:55,546:INFO:Creating metrics dataframe
2023-02-14 23:28:55,556:INFO:Initializing Decision Tree Regressor
2023-02-14 23:28:55,556:INFO:Total runtime is 0.05627867380777995 minutes
2023-02-14 23:28:55,560:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:55,560:INFO:Initializing create_model()
2023-02-14 23:28:55,561:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:55,561:INFO:Checking exceptions
2023-02-14 23:28:55,561:INFO:Importing libraries
2023-02-14 23:28:55,561:INFO:Copying training dataset
2023-02-14 23:28:55,564:INFO:Defining folds
2023-02-14 23:28:55,564:INFO:Declaring metric variables
2023-02-14 23:28:55,567:INFO:Importing untrained model
2023-02-14 23:28:55,573:INFO:Decision Tree Regressor Imported successfully
2023-02-14 23:28:55,579:INFO:Starting cross validation
2023-02-14 23:28:55,580:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:55,752:INFO:Calculating mean and std
2023-02-14 23:28:55,754:INFO:Creating metrics dataframe
2023-02-14 23:28:55,757:INFO:Uploading results into container
2023-02-14 23:28:55,757:INFO:Uploading model into container now
2023-02-14 23:28:55,758:INFO:_master_model_container: 12
2023-02-14 23:28:55,758:INFO:_display_container: 2
2023-02-14 23:28:55,758:INFO:DecisionTreeRegressor(random_state=125)
2023-02-14 23:28:55,758:INFO:create_model() successfully completed......................................
2023-02-14 23:28:55,875:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:55,875:INFO:Creating metrics dataframe
2023-02-14 23:28:55,889:INFO:Initializing Random Forest Regressor
2023-02-14 23:28:55,889:INFO:Total runtime is 0.06183286507924398 minutes
2023-02-14 23:28:55,893:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:55,893:INFO:Initializing create_model()
2023-02-14 23:28:55,894:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:55,894:INFO:Checking exceptions
2023-02-14 23:28:55,894:INFO:Importing libraries
2023-02-14 23:28:55,894:INFO:Copying training dataset
2023-02-14 23:28:55,897:INFO:Defining folds
2023-02-14 23:28:55,897:INFO:Declaring metric variables
2023-02-14 23:28:55,904:INFO:Importing untrained model
2023-02-14 23:28:55,910:INFO:Random Forest Regressor Imported successfully
2023-02-14 23:28:55,921:INFO:Starting cross validation
2023-02-14 23:28:55,922:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:56,397:INFO:Calculating mean and std
2023-02-14 23:28:56,399:INFO:Creating metrics dataframe
2023-02-14 23:28:56,404:INFO:Uploading results into container
2023-02-14 23:28:56,404:INFO:Uploading model into container now
2023-02-14 23:28:56,404:INFO:_master_model_container: 13
2023-02-14 23:28:56,404:INFO:_display_container: 2
2023-02-14 23:28:56,405:INFO:RandomForestRegressor(n_jobs=-1, random_state=125)
2023-02-14 23:28:56,405:INFO:create_model() successfully completed......................................
2023-02-14 23:28:56,504:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:56,504:INFO:Creating metrics dataframe
2023-02-14 23:28:56,515:INFO:Initializing Extra Trees Regressor
2023-02-14 23:28:56,516:INFO:Total runtime is 0.0722821076711019 minutes
2023-02-14 23:28:56,521:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:56,522:INFO:Initializing create_model()
2023-02-14 23:28:56,522:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:56,522:INFO:Checking exceptions
2023-02-14 23:28:56,522:INFO:Importing libraries
2023-02-14 23:28:56,522:INFO:Copying training dataset
2023-02-14 23:28:56,525:INFO:Defining folds
2023-02-14 23:28:56,525:INFO:Declaring metric variables
2023-02-14 23:28:56,529:INFO:Importing untrained model
2023-02-14 23:28:56,535:INFO:Extra Trees Regressor Imported successfully
2023-02-14 23:28:56,544:INFO:Starting cross validation
2023-02-14 23:28:56,545:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:56,954:INFO:Calculating mean and std
2023-02-14 23:28:56,955:INFO:Creating metrics dataframe
2023-02-14 23:28:56,958:INFO:Uploading results into container
2023-02-14 23:28:56,958:INFO:Uploading model into container now
2023-02-14 23:28:56,958:INFO:_master_model_container: 14
2023-02-14 23:28:56,959:INFO:_display_container: 2
2023-02-14 23:28:56,959:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=125)
2023-02-14 23:28:56,959:INFO:create_model() successfully completed......................................
2023-02-14 23:28:57,078:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:57,078:INFO:Creating metrics dataframe
2023-02-14 23:28:57,090:INFO:Initializing AdaBoost Regressor
2023-02-14 23:28:57,092:INFO:Total runtime is 0.08187032938003541 minutes
2023-02-14 23:28:57,096:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:57,096:INFO:Initializing create_model()
2023-02-14 23:28:57,097:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:57,097:INFO:Checking exceptions
2023-02-14 23:28:57,097:INFO:Importing libraries
2023-02-14 23:28:57,097:INFO:Copying training dataset
2023-02-14 23:28:57,102:INFO:Defining folds
2023-02-14 23:28:57,102:INFO:Declaring metric variables
2023-02-14 23:28:57,107:INFO:Importing untrained model
2023-02-14 23:28:57,111:INFO:AdaBoost Regressor Imported successfully
2023-02-14 23:28:57,119:INFO:Starting cross validation
2023-02-14 23:28:57,120:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:57,410:INFO:Calculating mean and std
2023-02-14 23:28:57,411:INFO:Creating metrics dataframe
2023-02-14 23:28:57,414:INFO:Uploading results into container
2023-02-14 23:28:57,414:INFO:Uploading model into container now
2023-02-14 23:28:57,414:INFO:_master_model_container: 15
2023-02-14 23:28:57,414:INFO:_display_container: 2
2023-02-14 23:28:57,415:INFO:AdaBoostRegressor(random_state=125)
2023-02-14 23:28:57,415:INFO:create_model() successfully completed......................................
2023-02-14 23:28:57,512:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:57,513:INFO:Creating metrics dataframe
2023-02-14 23:28:57,528:INFO:Initializing Gradient Boosting Regressor
2023-02-14 23:28:57,528:INFO:Total runtime is 0.08914039532343547 minutes
2023-02-14 23:28:57,532:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:57,533:INFO:Initializing create_model()
2023-02-14 23:28:57,533:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:57,533:INFO:Checking exceptions
2023-02-14 23:28:57,534:INFO:Importing libraries
2023-02-14 23:28:57,534:INFO:Copying training dataset
2023-02-14 23:28:57,537:INFO:Defining folds
2023-02-14 23:28:57,537:INFO:Declaring metric variables
2023-02-14 23:28:57,541:INFO:Importing untrained model
2023-02-14 23:28:57,545:INFO:Gradient Boosting Regressor Imported successfully
2023-02-14 23:28:57,555:INFO:Starting cross validation
2023-02-14 23:28:57,555:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:57,741:INFO:Calculating mean and std
2023-02-14 23:28:57,742:INFO:Creating metrics dataframe
2023-02-14 23:28:57,745:INFO:Uploading results into container
2023-02-14 23:28:57,745:INFO:Uploading model into container now
2023-02-14 23:28:57,746:INFO:_master_model_container: 16
2023-02-14 23:28:57,746:INFO:_display_container: 2
2023-02-14 23:28:57,746:INFO:GradientBoostingRegressor(random_state=125)
2023-02-14 23:28:57,746:INFO:create_model() successfully completed......................................
2023-02-14 23:28:57,835:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:57,835:INFO:Creating metrics dataframe
2023-02-14 23:28:57,846:INFO:Initializing Extreme Gradient Boosting
2023-02-14 23:28:57,846:INFO:Total runtime is 0.09444602330525717 minutes
2023-02-14 23:28:57,852:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:57,852:INFO:Initializing create_model()
2023-02-14 23:28:57,852:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:57,852:INFO:Checking exceptions
2023-02-14 23:28:57,852:INFO:Importing libraries
2023-02-14 23:28:57,852:INFO:Copying training dataset
2023-02-14 23:28:57,856:INFO:Defining folds
2023-02-14 23:28:57,856:INFO:Declaring metric variables
2023-02-14 23:28:57,859:INFO:Importing untrained model
2023-02-14 23:28:57,865:INFO:Extreme Gradient Boosting Imported successfully
2023-02-14 23:28:57,873:INFO:Starting cross validation
2023-02-14 23:28:57,874:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:58,060:INFO:Calculating mean and std
2023-02-14 23:28:58,061:INFO:Creating metrics dataframe
2023-02-14 23:28:58,064:INFO:Uploading results into container
2023-02-14 23:28:58,065:INFO:Uploading model into container now
2023-02-14 23:28:58,066:INFO:_master_model_container: 17
2023-02-14 23:28:58,067:INFO:_display_container: 2
2023-02-14 23:28:58,067:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=125, ...)
2023-02-14 23:28:58,067:INFO:create_model() successfully completed......................................
2023-02-14 23:28:58,157:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:58,157:INFO:Creating metrics dataframe
2023-02-14 23:28:58,171:INFO:Initializing Light Gradient Boosting Machine
2023-02-14 23:28:58,171:INFO:Total runtime is 0.09985880454381307 minutes
2023-02-14 23:28:58,175:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:58,175:INFO:Initializing create_model()
2023-02-14 23:28:58,175:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:58,175:INFO:Checking exceptions
2023-02-14 23:28:58,175:INFO:Importing libraries
2023-02-14 23:28:58,175:INFO:Copying training dataset
2023-02-14 23:28:58,178:INFO:Defining folds
2023-02-14 23:28:58,178:INFO:Declaring metric variables
2023-02-14 23:28:58,183:INFO:Importing untrained model
2023-02-14 23:28:58,187:INFO:Light Gradient Boosting Machine Imported successfully
2023-02-14 23:28:58,194:INFO:Starting cross validation
2023-02-14 23:28:58,195:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:58,362:INFO:Calculating mean and std
2023-02-14 23:28:58,363:INFO:Creating metrics dataframe
2023-02-14 23:28:58,366:INFO:Uploading results into container
2023-02-14 23:28:58,367:INFO:Uploading model into container now
2023-02-14 23:28:58,367:INFO:_master_model_container: 18
2023-02-14 23:28:58,368:INFO:_display_container: 2
2023-02-14 23:28:58,368:INFO:LGBMRegressor(random_state=125)
2023-02-14 23:28:58,368:INFO:create_model() successfully completed......................................
2023-02-14 23:28:58,460:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:58,460:INFO:Creating metrics dataframe
2023-02-14 23:28:58,471:INFO:Initializing Dummy Regressor
2023-02-14 23:28:58,471:INFO:Total runtime is 0.10486543575922648 minutes
2023-02-14 23:28:58,473:INFO:SubProcess create_model() called ==================================
2023-02-14 23:28:58,475:INFO:Initializing create_model()
2023-02-14 23:28:58,475:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021589B3EB80>, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:58,475:INFO:Checking exceptions
2023-02-14 23:28:58,475:INFO:Importing libraries
2023-02-14 23:28:58,475:INFO:Copying training dataset
2023-02-14 23:28:58,477:INFO:Defining folds
2023-02-14 23:28:58,477:INFO:Declaring metric variables
2023-02-14 23:28:58,482:INFO:Importing untrained model
2023-02-14 23:28:58,486:INFO:Dummy Regressor Imported successfully
2023-02-14 23:28:58,492:INFO:Starting cross validation
2023-02-14 23:28:58,494:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-02-14 23:28:58,659:INFO:Calculating mean and std
2023-02-14 23:28:58,660:INFO:Creating metrics dataframe
2023-02-14 23:28:58,663:INFO:Uploading results into container
2023-02-14 23:28:58,663:INFO:Uploading model into container now
2023-02-14 23:28:58,664:INFO:_master_model_container: 19
2023-02-14 23:28:58,664:INFO:_display_container: 2
2023-02-14 23:28:58,664:INFO:DummyRegressor()
2023-02-14 23:28:58,664:INFO:create_model() successfully completed......................................
2023-02-14 23:28:58,755:INFO:SubProcess create_model() end ==================================
2023-02-14 23:28:58,756:INFO:Creating metrics dataframe
2023-02-14 23:28:58,782:INFO:Initializing create_model()
2023-02-14 23:28:58,782:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002158A0795E0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-02-14 23:28:58,782:INFO:Checking exceptions
2023-02-14 23:28:58,785:INFO:Importing libraries
2023-02-14 23:28:58,786:INFO:Copying training dataset
2023-02-14 23:28:58,788:INFO:Defining folds
2023-02-14 23:28:58,788:INFO:Declaring metric variables
2023-02-14 23:28:58,788:INFO:Importing untrained model
2023-02-14 23:28:58,788:INFO:Declaring custom model
2023-02-14 23:28:58,788:INFO:Bayesian Ridge Imported successfully
2023-02-14 23:28:58,789:INFO:Cross validation set to False
2023-02-14 23:28:58,789:INFO:Fitting Model
2023-02-14 23:28:58,841:INFO:BayesianRidge()
2023-02-14 23:28:58,841:INFO:create_model() successfully completed......................................
2023-02-14 23:28:58,974:INFO:_master_model_container: 19
2023-02-14 23:28:58,974:INFO:_display_container: 2
2023-02-14 23:28:58,974:INFO:BayesianRidge()
2023-02-14 23:28:58,974:INFO:compare_models() successfully completed......................................
2023-02-15 08:04:36,215:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 08:04:36,230:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 08:04:36,230:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 08:04:36,230:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 08:04:38,371:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-15 09:33:02,901:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 09:33:02,902:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 09:33:02,902:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 09:33:02,902:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 09:33:04,343:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-15 14:05:19,247:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 14:05:19,249:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 14:05:19,249:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 14:05:19,249:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 14:05:20,187:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-15 15:12:08,742:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 15:12:08,742:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 15:12:08,742:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 15:12:08,742:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 15:12:09,492:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-15 20:43:27,806:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 20:43:27,806:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 20:43:27,806:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 20:43:27,806:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 20:43:28,323:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-15 21:59:31,188:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 21:59:31,188:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 21:59:31,188:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 21:59:31,188:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 21:59:31,838:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-15 22:18:29,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 22:18:29,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 22:18:29,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 22:18:29,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-15 22:18:30,511:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-02-16 10:33:49,104:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-16 10:33:49,104:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-16 10:33:49,105:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-16 10:33:49,105:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-02-16 10:33:49,892:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
